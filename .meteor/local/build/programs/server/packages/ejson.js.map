{"version":3,"sources":["meteor://ðŸ’»app/packages/ejson/ejson.js","meteor://ðŸ’»app/packages/ejson/stringify.js"],"names":["module","export","EJSON","customTypes","hasOwn","obj","prop","hasOwnProperty","call","isArguments","isInfOrNan","Number","isNaN","Infinity","addType","name","factory","Error","builtinConverters","matchJSONValue","Object","keys","length","matchObject","Date","toJSONValue","$date","getTime","fromJSONValue","RegExp","regexp","$regexp","source","$flags","flags","slice","replace","sign","$InfNaN","Uint8Array","$binary","Base64","encode","decode","match","keyCount","some","converter","newObj","forEach","key","$escape","_isCustomType","jsonValue","Meteor","_noYieldsAllowed","$type","typeName","$value","_getTypes","_getConverters","toJSONValueHelper","item","i","undefined","adjustTypesToJSONValue","maybeChanged","value","changed","_adjustTypesToJSONValue","newItem","clone","fromJSONValueHelper","every","k","substr","adjustTypesFromJSONValue","_adjustTypesFromJSONValue","stringify","options","serialized","json","canonical","indent","canonicalStringify","watch","require","default","v","JSON","parse","isBinary","$Uint8ArrayPolyfill","equals","a","b","keyOrderSensitive","valueOf","Array","ret","aKeys","bKeys","newBinary","isArray","map","from","quote","string","str","holder","singleIndent","outerIndent","isFinite","String","innerIndent","partial","join","sort","push","allOptions","assign","newIndent","exportDefault"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM,MAAIA;AAAX,CAAd;;AAAA;;;;AAIA,MAAMA,QAAQ,EAAd,C,CAEA;;AACA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;AAUA,MAAMC,cAAc,EAApB;;AAEA,MAAMC,SAAS,CAACC,GAAD,EAAMC,IAAN,KAAe,CAAC,EAAD,EAAKC,cAAL,CAAoBC,IAApB,CAAyBH,GAAzB,EAA8BC,IAA9B,CAA9B;;AAEA,MAAMG,cAAcJ,OAAOA,OAAO,IAAP,IAAeD,OAAOC,GAAP,EAAY,QAAZ,CAA1C;;AAEA,MAAMK,aACJL,OAAOM,OAAOC,KAAP,CAAaP,GAAb,KAAqBA,QAAQQ,QAA7B,IAAyCR,QAAQ,CAACQ,QAD3D,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;;;;;;;;;;AAWAX,MAAMY,OAAN,GAAgB,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACjC,MAAIZ,OAAOD,WAAP,EAAoBY,IAApB,CAAJ,EAA+B;AAC7B,UAAM,IAAIE,KAAJ,CAAW,QAAOF,IAAK,kBAAvB,CAAN;AACD;;AACDZ,cAAYY,IAAZ,IAAoBC,OAApB;AACD,CALD;;AAOA,MAAME,oBAAoB,CACxB;AAAE;AACAC,iBAAed,GAAf,EAAoB;AAClB,WAAOD,OAAOC,GAAP,EAAY,OAAZ,KAAwBe,OAAOC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA3D;AACD,GAHH;;AAIEC,cAAYlB,GAAZ,EAAiB;AACf,WAAOA,eAAemB,IAAtB;AACD,GANH;;AAOEC,cAAYpB,GAAZ,EAAiB;AACf,WAAO;AAACqB,aAAOrB,IAAIsB,OAAJ;AAAR,KAAP;AACD,GATH;;AAUEC,gBAAcvB,GAAd,EAAmB;AACjB,WAAO,IAAImB,IAAJ,CAASnB,IAAIqB,KAAb,CAAP;AACD;;AAZH,CADwB,EAexB;AAAE;AACAP,iBAAed,GAAf,EAAoB;AAClB,WAAOD,OAAOC,GAAP,EAAY,SAAZ,KACFD,OAAOC,GAAP,EAAY,QAAZ,CADE,IAEFe,OAAOC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAFjC;AAGD,GALH;;AAMEC,cAAYlB,GAAZ,EAAiB;AACf,WAAOA,eAAewB,MAAtB;AACD,GARH;;AASEJ,cAAYK,MAAZ,EAAoB;AAClB,WAAO;AACLC,eAASD,OAAOE,MADX;AAELC,cAAQH,OAAOI;AAFV,KAAP;AAID,GAdH;;AAeEN,gBAAcvB,GAAd,EAAmB;AACjB;AACA,WAAO,IAAIwB,MAAJ,CACLxB,IAAI0B,OADC,EAEL1B,IAAI4B,MAAJ,CACE;AADF,KAEGE,KAFH,CAES,CAFT,EAEY,EAFZ,EAGGC,OAHH,CAGW,WAHX,EAGuB,EAHvB,EAIGA,OAJH,CAIW,cAJX,EAI2B,EAJ3B,CAFK,CAAP;AAQD;;AAzBH,CAfwB,EA0CxB;AAAE;AACA;AACAjB,iBAAed,GAAf,EAAoB;AAClB,WAAOD,OAAOC,GAAP,EAAY,SAAZ,KAA0Be,OAAOC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA7D;AACD,GAJH;;AAKEC,eAAab,UALf;;AAMEe,cAAYpB,GAAZ,EAAiB;AACf,QAAIgC,IAAJ;;AACA,QAAI1B,OAAOC,KAAP,CAAaP,GAAb,CAAJ,EAAuB;AACrBgC,aAAO,CAAP;AACD,KAFD,MAEO,IAAIhC,QAAQQ,QAAZ,EAAsB;AAC3BwB,aAAO,CAAP;AACD,KAFM,MAEA;AACLA,aAAO,CAAC,CAAR;AACD;;AACD,WAAO;AAACC,eAASD;AAAV,KAAP;AACD,GAhBH;;AAiBET,gBAAcvB,GAAd,EAAmB;AACjB,WAAOA,IAAIiC,OAAJ,GAAc,CAArB;AACD;;AAnBH,CA1CwB,EA+DxB;AAAE;AACAnB,iBAAed,GAAf,EAAoB;AAClB,WAAOD,OAAOC,GAAP,EAAY,SAAZ,KAA0Be,OAAOC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA7D;AACD,GAHH;;AAIEC,cAAYlB,GAAZ,EAAiB;AACf,WAAO,OAAOkC,UAAP,KAAsB,WAAtB,IAAqClC,eAAekC,UAApD,IACDlC,OAAOD,OAAOC,GAAP,EAAY,qBAAZ,CADb;AAED,GAPH;;AAQEoB,cAAYpB,GAAZ,EAAiB;AACf,WAAO;AAACmC,eAASC,OAAOC,MAAP,CAAcrC,GAAd;AAAV,KAAP;AACD,GAVH;;AAWEuB,gBAAcvB,GAAd,EAAmB;AACjB,WAAOoC,OAAOE,MAAP,CAActC,IAAImC,OAAlB,CAAP;AACD;;AAbH,CA/DwB,EA8ExB;AAAE;AACArB,iBAAed,GAAf,EAAoB;AAClB,WAAOD,OAAOC,GAAP,EAAY,SAAZ,KAA0Be,OAAOC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA7D;AACD,GAHH;;AAIEC,cAAYlB,GAAZ,EAAiB;AACf,QAAIuC,QAAQ,KAAZ;;AACA,QAAIvC,GAAJ,EAAS;AACP,YAAMwC,WAAWzB,OAAOC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAlC;;AACA,UAAIuB,aAAa,CAAb,IAAkBA,aAAa,CAAnC,EAAsC;AACpCD,gBACE1B,kBAAkB4B,IAAlB,CAAuBC,aAAaA,UAAU5B,cAAV,CAAyBd,GAAzB,CAApC,CADF;AAED;AACF;;AACD,WAAOuC,KAAP;AACD,GAdH;;AAeEnB,cAAYpB,GAAZ,EAAiB;AACf,UAAM2C,SAAS,EAAf;AACA5B,WAAOC,IAAP,CAAYhB,GAAZ,EAAiB4C,OAAjB,CAAyBC,OAAO;AAC9BF,aAAOE,GAAP,IAAchD,MAAMuB,WAAN,CAAkBpB,IAAI6C,GAAJ,CAAlB,CAAd;AACD,KAFD;AAGA,WAAO;AAACC,eAASH;AAAV,KAAP;AACD,GArBH;;AAsBEpB,gBAAcvB,GAAd,EAAmB;AACjB,UAAM2C,SAAS,EAAf;AACA5B,WAAOC,IAAP,CAAYhB,IAAI8C,OAAhB,EAAyBF,OAAzB,CAAiCC,OAAO;AACtCF,aAAOE,GAAP,IAAchD,MAAM0B,aAAN,CAAoBvB,IAAI8C,OAAJ,CAAYD,GAAZ,CAApB,CAAd;AACD,KAFD;AAGA,WAAOF,MAAP;AACD;;AA5BH,CA9EwB,EA4GxB;AAAE;AACA7B,iBAAed,GAAf,EAAoB;AAClB,WAAOD,OAAOC,GAAP,EAAY,OAAZ,KACFD,OAAOC,GAAP,EAAY,QAAZ,CADE,IACuBe,OAAOC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAD1D;AAED,GAJH;;AAKEC,cAAYlB,GAAZ,EAAiB;AACf,WAAOH,MAAMkD,aAAN,CAAoB/C,GAApB,CAAP;AACD,GAPH;;AAQEoB,cAAYpB,GAAZ,EAAiB;AACf,UAAMgD,YAAYC,OAAOC,gBAAP,CAAwB,MAAMlD,IAAIoB,WAAJ,EAA9B,CAAlB;;AACA,WAAO;AAAC+B,aAAOnD,IAAIoD,QAAJ,EAAR;AAAwBC,cAAQL;AAAhC,KAAP;AACD,GAXH;;AAYEzB,gBAAcvB,GAAd,EAAmB;AACjB,UAAMoD,WAAWpD,IAAImD,KAArB;;AACA,QAAI,CAACpD,OAAOD,WAAP,EAAoBsD,QAApB,CAAL,EAAoC;AAClC,YAAM,IAAIxC,KAAJ,CAAW,qBAAoBwC,QAAS,iBAAxC,CAAN;AACD;;AACD,UAAMV,YAAY5C,YAAYsD,QAAZ,CAAlB;AACA,WAAOH,OAAOC,gBAAP,CAAwB,MAAMR,UAAU1C,IAAIqD,MAAd,CAA9B,CAAP;AACD;;AAnBH,CA5GwB,CAA1B;;AAmIAxD,MAAMkD,aAAN,GAAuB/C,GAAD,IACpBA,OACA,OAAOA,IAAIoB,WAAX,KAA2B,UAD3B,IAEA,OAAOpB,IAAIoD,QAAX,KAAwB,UAFxB,IAGArD,OAAOD,WAAP,EAAoBE,IAAIoD,QAAJ,EAApB,CAJF;;AAOAvD,MAAMyD,SAAN,GAAkB,MAAMxD,WAAxB;;AAEAD,MAAM0D,cAAN,GAAuB,MAAM1C,iBAA7B,C,CAEA;AACA;;;AACA,MAAM2C,oBAAoBC,QAAQ;AAChC,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI7C,kBAAkBI,MAAtC,EAA8CyC,GAA9C,EAAmD;AACjD,UAAMhB,YAAY7B,kBAAkB6C,CAAlB,CAAlB;;AACA,QAAIhB,UAAUxB,WAAV,CAAsBuC,IAAtB,CAAJ,EAAiC;AAC/B,aAAOf,UAAUtB,WAAV,CAAsBqC,IAAtB,CAAP;AACD;AACF;;AACD,SAAOE,SAAP;AACD,CARD,C,CAUA;;;AACA,MAAMC,yBAAyB5D,OAAO;AACpC;AACA,MAAIA,QAAQ,IAAZ,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,QAAM6D,eAAeL,kBAAkBxD,GAAlB,CAArB;;AACA,MAAI6D,iBAAiBF,SAArB,EAAgC;AAC9B,WAAOE,YAAP;AACD,GATmC,CAWpC;;;AACA,MAAI,OAAO7D,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOA,GAAP;AACD,GAdmC,CAgBpC;;;AACAe,SAAOC,IAAP,CAAYhB,GAAZ,EAAiB4C,OAAjB,CAAyBC,OAAO;AAC9B,UAAMiB,QAAQ9D,IAAI6C,GAAJ,CAAd;;AACA,QAAI,OAAOiB,KAAP,KAAiB,QAAjB,IAA6BA,UAAUH,SAAvC,IACA,CAACtD,WAAWyD,KAAX,CADL,EACwB;AACtB,aADsB,CACd;AACT;;AAED,UAAMC,UAAUP,kBAAkBM,KAAlB,CAAhB;;AACA,QAAIC,OAAJ,EAAa;AACX/D,UAAI6C,GAAJ,IAAWkB,OAAX;AACA,aAFW,CAEH;AACT,KAX6B,CAY9B;AACA;;;AACAH,2BAAuBE,KAAvB;AACD,GAfD;AAgBA,SAAO9D,GAAP;AACD,CAlCD;;AAoCAH,MAAMmE,uBAAN,GAAgCJ,sBAAhC;AAEA;;;;;;;AAMA/D,MAAMuB,WAAN,GAAoBqC,QAAQ;AAC1B,QAAMM,UAAUP,kBAAkBC,IAAlB,CAAhB;;AACA,MAAIM,YAAYJ,SAAhB,EAA2B;AACzB,WAAOI,OAAP;AACD;;AAED,MAAIE,UAAUR,IAAd;;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BQ,cAAUpE,MAAMqE,KAAN,CAAYT,IAAZ,CAAV;AACAG,2BAAuBK,OAAvB;AACD;;AACD,SAAOA,OAAP;AACD,CAZD,C,CAcA;AACA;AACA;AACA;;;AACA,MAAME,sBAAsBL,SAAS;AACnC,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,UAAU,IAA3C,EAAiD;AAC/C,UAAM9C,OAAOD,OAAOC,IAAP,CAAY8C,KAAZ,CAAb;;AACA,QAAI9C,KAAKC,MAAL,IAAe,CAAf,IACGD,KAAKoD,KAAL,CAAWC,KAAK,OAAOA,CAAP,KAAa,QAAb,IAAyBA,EAAEC,MAAF,CAAS,CAAT,EAAY,CAAZ,MAAmB,GAA5D,CADP,EACyE;AACvE,WAAK,IAAIZ,IAAI,CAAb,EAAgBA,IAAI7C,kBAAkBI,MAAtC,EAA8CyC,GAA9C,EAAmD;AACjD,cAAMhB,YAAY7B,kBAAkB6C,CAAlB,CAAlB;;AACA,YAAIhB,UAAU5B,cAAV,CAAyBgD,KAAzB,CAAJ,EAAqC;AACnC,iBAAOpB,UAAUnB,aAAV,CAAwBuC,KAAxB,CAAP;AACD;AACF;AACF;AACF;;AACD,SAAOA,KAAP;AACD,CAdD,C,CAgBA;AACA;AACA;;;AACA,MAAMS,2BAA2BvE,OAAO;AACtC,MAAIA,QAAQ,IAAZ,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,QAAM6D,eAAeM,oBAAoBnE,GAApB,CAArB;;AACA,MAAI6D,iBAAiB7D,GAArB,EAA0B;AACxB,WAAO6D,YAAP;AACD,GARqC,CAUtC;;;AACA,MAAI,OAAO7D,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOA,GAAP;AACD;;AAEDe,SAAOC,IAAP,CAAYhB,GAAZ,EAAiB4C,OAAjB,CAAyBC,OAAO;AAC9B,UAAMiB,QAAQ9D,IAAI6C,GAAJ,CAAd;;AACA,QAAI,OAAOiB,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAMC,UAAUI,oBAAoBL,KAApB,CAAhB;;AACA,UAAIA,UAAUC,OAAd,EAAuB;AACrB/D,YAAI6C,GAAJ,IAAWkB,OAAX;AACA;AACD,OAL4B,CAM7B;AACA;;;AACAQ,+BAAyBT,KAAzB;AACD;AACF,GAZD;AAaA,SAAO9D,GAAP;AACD,CA7BD;;AA+BAH,MAAM2E,yBAAN,GAAkCD,wBAAlC;AAEA;;;;;;AAKA1E,MAAM0B,aAAN,GAAsBkC,QAAQ;AAC5B,MAAIM,UAAUI,oBAAoBV,IAApB,CAAd;;AACA,MAAIM,YAAYN,IAAZ,IAAoB,OAAOA,IAAP,KAAgB,QAAxC,EAAkD;AAChDM,cAAUlE,MAAMqE,KAAN,CAAYT,IAAZ,CAAV;AACAc,6BAAyBR,OAAzB;AACD;;AACD,SAAOA,OAAP;AACD,CAPD;AASA;;;;;;;;;;;;;;;;AAcAlE,MAAM4E,SAAN,GAAkB,CAAChB,IAAD,EAAOiB,OAAP,KAAmB;AACnC,MAAIC,UAAJ;AACA,QAAMC,OAAO/E,MAAMuB,WAAN,CAAkBqC,IAAlB,CAAb;;AACA,MAAIiB,YAAYA,QAAQG,SAAR,IAAqBH,QAAQI,MAAzC,CAAJ,EAAsD;AAvYxD,QAAIC,kBAAJ;AAAuBpF,WAAOqF,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACC,cAAQC,CAAR,EAAU;AAACJ,6BAAmBI,CAAnB;AAAqB;;AAAjC,KAApC,EAAuE,CAAvE;AAyYnBR,iBAAaI,mBAAmBH,IAAnB,EAAyBF,OAAzB,CAAb;AACD,GAHD,MAGO;AACLC,iBAAaS,KAAKX,SAAL,CAAeG,IAAf,CAAb;AACD;;AACD,SAAOD,UAAP;AACD,CAVD;AAYA;;;;;;;;AAMA9E,MAAMwF,KAAN,GAAc5B,QAAQ;AACpB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAI7C,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,SAAOf,MAAM0B,aAAN,CAAoB6D,KAAKC,KAAL,CAAW5B,IAAX,CAApB,CAAP;AACD,CALD;AAOA;;;;;;;;AAMA5D,MAAMyF,QAAN,GAAiBtF,OAAO;AACtB,SAAO,CAAC,EAAG,OAAOkC,UAAP,KAAsB,WAAtB,IAAqClC,eAAekC,UAArD,IACPlC,OAAOA,IAAIuF,mBADN,CAAR;AAED,CAHD;AAKA;;;;;;;;;;;;;;;AAaA1F,MAAM2F,MAAN,GAAe,CAACC,CAAD,EAAIC,CAAJ,EAAOhB,OAAP,KAAmB;AAChC,MAAIhB,CAAJ;AACA,QAAMiC,oBAAoB,CAAC,EAAEjB,WAAWA,QAAQiB,iBAArB,CAA3B;;AACA,MAAIF,MAAMC,CAAV,EAAa;AACX,WAAO,IAAP;AACD,GAL+B,CAOhC;AACA;;;AACA,MAAIpF,OAAOC,KAAP,CAAakF,CAAb,KAAmBnF,OAAOC,KAAP,CAAamF,CAAb,CAAvB,EAAwC;AACtC,WAAO,IAAP;AACD,GAX+B,CAahC;;;AACA,MAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;AACZ,WAAO,KAAP;AACD;;AAED,MAAI,EAAE,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAAxC,CAAJ,EAAuD;AACrD,WAAO,KAAP;AACD;;AAED,MAAID,aAAatE,IAAb,IAAqBuE,aAAavE,IAAtC,EAA4C;AAC1C,WAAOsE,EAAEG,OAAF,OAAgBF,EAAEE,OAAF,EAAvB;AACD;;AAED,MAAI/F,MAAMyF,QAAN,CAAeG,CAAf,KAAqB5F,MAAMyF,QAAN,CAAeI,CAAf,CAAzB,EAA4C;AAC1C,QAAID,EAAExE,MAAF,KAAayE,EAAEzE,MAAnB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,SAAKyC,IAAI,CAAT,EAAYA,IAAI+B,EAAExE,MAAlB,EAA0ByC,GAA1B,EAA+B;AAC7B,UAAI+B,EAAE/B,CAAF,MAASgC,EAAEhC,CAAF,CAAb,EAAmB;AACjB,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAED,MAAI,OAAQ+B,EAAED,MAAV,KAAsB,UAA1B,EAAsC;AACpC,WAAOC,EAAED,MAAF,CAASE,CAAT,EAAYhB,OAAZ,CAAP;AACD;;AAED,MAAI,OAAQgB,EAAEF,MAAV,KAAsB,UAA1B,EAAsC;AACpC,WAAOE,EAAEF,MAAF,CAASC,CAAT,EAAYf,OAAZ,CAAP;AACD;;AAED,MAAIe,aAAaI,KAAjB,EAAwB;AACtB,QAAI,EAAEH,aAAaG,KAAf,CAAJ,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,QAAIJ,EAAExE,MAAF,KAAayE,EAAEzE,MAAnB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,SAAKyC,IAAI,CAAT,EAAYA,IAAI+B,EAAExE,MAAlB,EAA0ByC,GAA1B,EAA+B;AAC7B,UAAI,CAAC7D,MAAM2F,MAAN,CAAaC,EAAE/B,CAAF,CAAb,EAAmBgC,EAAEhC,CAAF,CAAnB,EAAyBgB,OAAzB,CAAL,EAAwC;AACtC,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GA3D+B,CA6DhC;;;AACA,UAAQ7E,MAAMkD,aAAN,CAAoB0C,CAApB,IAAyB5F,MAAMkD,aAAN,CAAoB2C,CAApB,CAAjC;AACE,SAAK,CAAL;AAAQ,aAAO,KAAP;;AACR,SAAK,CAAL;AAAQ,aAAO7F,MAAM2F,MAAN,CAAa3F,MAAMuB,WAAN,CAAkBqE,CAAlB,CAAb,EAAmC5F,MAAMuB,WAAN,CAAkBsE,CAAlB,CAAnC,CAAP;;AACR,YAHF,CAGW;;AAHX,GA9DgC,CAoEhC;;;AACA,MAAII,GAAJ;AACA,QAAMC,QAAQhF,OAAOC,IAAP,CAAYyE,CAAZ,CAAd;AACA,QAAMO,QAAQjF,OAAOC,IAAP,CAAY0E,CAAZ,CAAd;;AACA,MAAIC,iBAAJ,EAAuB;AACrBjC,QAAI,CAAJ;AACAoC,UAAMC,MAAM3B,KAAN,CAAYvB,OAAO;AACvB,UAAIa,KAAKsC,MAAM/E,MAAf,EAAuB;AACrB,eAAO,KAAP;AACD;;AACD,UAAI4B,QAAQmD,MAAMtC,CAAN,CAAZ,EAAsB;AACpB,eAAO,KAAP;AACD;;AACD,UAAI,CAAC7D,MAAM2F,MAAN,CAAaC,EAAE5C,GAAF,CAAb,EAAqB6C,EAAEM,MAAMtC,CAAN,CAAF,CAArB,EAAkCgB,OAAlC,CAAL,EAAiD;AAC/C,eAAO,KAAP;AACD;;AACDhB;AACA,aAAO,IAAP;AACD,KAZK,CAAN;AAaD,GAfD,MAeO;AACLA,QAAI,CAAJ;AACAoC,UAAMC,MAAM3B,KAAN,CAAYvB,OAAO;AACvB,UAAI,CAAC9C,OAAO2F,CAAP,EAAU7C,GAAV,CAAL,EAAqB;AACnB,eAAO,KAAP;AACD;;AACD,UAAI,CAAChD,MAAM2F,MAAN,CAAaC,EAAE5C,GAAF,CAAb,EAAqB6C,EAAE7C,GAAF,CAArB,EAA6B6B,OAA7B,CAAL,EAA4C;AAC1C,eAAO,KAAP;AACD;;AACDhB;AACA,aAAO,IAAP;AACD,KATK,CAAN;AAUD;;AACD,SAAOoC,OAAOpC,MAAMsC,MAAM/E,MAA1B;AACD,CArGD;AAuGA;;;;;;;AAKApB,MAAMqE,KAAN,GAAciB,KAAK;AACjB,MAAIW,GAAJ;;AACA,MAAI,OAAOX,CAAP,KAAa,QAAjB,EAA2B;AACzB,WAAOA,CAAP;AACD;;AAED,MAAIA,MAAM,IAAV,EAAgB;AACd,WAAO,IAAP,CADc,CACD;AACd;;AAED,MAAIA,aAAahE,IAAjB,EAAuB;AACrB,WAAO,IAAIA,IAAJ,CAASgE,EAAE7D,OAAF,EAAT,CAAP;AACD,GAZgB,CAcjB;AACA;;;AACA,MAAI6D,aAAa3D,MAAjB,EAAyB;AACvB,WAAO2D,CAAP;AACD;;AAED,MAAItF,MAAMyF,QAAN,CAAeH,CAAf,CAAJ,EAAuB;AACrBW,UAAMjG,MAAMoG,SAAN,CAAgBd,EAAElE,MAAlB,CAAN;;AACA,SAAK,IAAIyC,IAAI,CAAb,EAAgBA,IAAIyB,EAAElE,MAAtB,EAA8ByC,GAA9B,EAAmC;AACjCoC,UAAIpC,CAAJ,IAASyB,EAAEzB,CAAF,CAAT;AACD;;AACD,WAAOoC,GAAP;AACD;;AAED,MAAID,MAAMK,OAAN,CAAcf,CAAd,CAAJ,EAAsB;AACpB,WAAOA,EAAEgB,GAAF,CAAMrC,SAASjE,MAAMqE,KAAN,CAAYJ,KAAZ,CAAf,CAAP;AACD;;AAED,MAAI1D,YAAY+E,CAAZ,CAAJ,EAAoB;AAClB,WAAOU,MAAMO,IAAN,CAAWjB,CAAX,EAAcgB,GAAd,CAAkBrC,SAASjE,MAAMqE,KAAN,CAAYJ,KAAZ,CAA3B,CAAP;AACD,GAlCgB,CAoCjB;;;AACA,MAAI,OAAOqB,EAAEjB,KAAT,KAAmB,UAAvB,EAAmC;AACjC,WAAOiB,EAAEjB,KAAF,EAAP;AACD,GAvCgB,CAyCjB;;;AACA,MAAIrE,MAAMkD,aAAN,CAAoBoC,CAApB,CAAJ,EAA4B;AAC1B,WAAOtF,MAAM0B,aAAN,CAAoB1B,MAAMqE,KAAN,CAAYrE,MAAMuB,WAAN,CAAkB+D,CAAlB,CAAZ,CAApB,EAAuD,IAAvD,CAAP;AACD,GA5CgB,CA8CjB;;;AACAW,QAAM,EAAN;AACA/E,SAAOC,IAAP,CAAYmE,CAAZ,EAAevC,OAAf,CAAwBC,GAAD,IAAS;AAC9BiD,QAAIjD,GAAJ,IAAWhD,MAAMqE,KAAN,CAAYiB,EAAEtC,GAAF,CAAZ,CAAX;AACD,GAFD;AAGA,SAAOiD,GAAP;AACD,CApDD;AAsDA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AACAjG,MAAMoG,SAAN,GAAkB7D,OAAO6D,SAAzB,C;;;;;;;;;;;ACjmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASI,KAAT,CAAeC,MAAf,EAAuB;AACrB,SAAOlB,KAAKX,SAAL,CAAe6B,MAAf,CAAP;AACD;;AAED,MAAMC,MAAM,CAAC1D,GAAD,EAAM2D,MAAN,EAAcC,YAAd,EAA4BC,WAA5B,EAAyC7B,SAAzC,KAAuD;AACjE,QAAMf,QAAQ0C,OAAO3D,GAAP,CAAd,CADiE,CAGjE;;AACA,UAAQ,OAAOiB,KAAf;AACA,SAAK,QAAL;AACE,aAAOuC,MAAMvC,KAAN,CAAP;;AACF,SAAK,QAAL;AACE;AACA,aAAO6C,SAAS7C,KAAT,IAAkB8C,OAAO9C,KAAP,CAAlB,GAAkC,MAAzC;;AACF,SAAK,SAAL;AACE,aAAO8C,OAAO9C,KAAP,CAAP;AACF;AACA;;AACA,SAAK,QAAL;AACE;AACA;AACA,UAAI,CAACA,KAAL,EAAY;AACV,eAAO,MAAP;AACD,OALH,CAME;AACA;;;AACA,YAAM+C,cAAcH,cAAcD,YAAlC;AACA,YAAMK,UAAU,EAAhB,CATF,CAWE;;AACA,UAAIjB,MAAMK,OAAN,CAAcpC,KAAd,KAAyB,EAAD,CAAK5D,cAAL,CAAoBC,IAApB,CAAyB2D,KAAzB,EAAgC,QAAhC,CAA5B,EAAuE;AACrE;AACA;AACA,cAAM7C,SAAS6C,MAAM7C,MAArB;;AACA,aAAK,IAAIyC,IAAI,CAAb,EAAgBA,IAAIzC,MAApB,EAA4ByC,KAAK,CAAjC,EAAoC;AAClCoD,kBAAQpD,CAAR,IACE6C,IAAI7C,CAAJ,EAAOI,KAAP,EAAc2C,YAAd,EAA4BI,WAA5B,EAAyChC,SAAzC,KAAuD,MADzD;AAED,SAPoE,CASrE;AACA;;;AACA,YAAIM,CAAJ;;AACA,YAAI2B,QAAQ7F,MAAR,KAAmB,CAAvB,EAA0B;AACxBkE,cAAI,IAAJ;AACD,SAFD,MAEO,IAAI0B,WAAJ,EAAiB;AACtB1B,cAAI,QACF0B,WADE,GAEFC,QAAQC,IAAR,CAAa,QACbF,WADA,CAFE,GAIF,IAJE,GAKFH,WALE,GAMF,GANF;AAOD,SARM,MAQA;AACLvB,cAAI,MAAM2B,QAAQC,IAAR,CAAa,GAAb,CAAN,GAA0B,GAA9B;AACD;;AACD,eAAO5B,CAAP;AACD,OAtCH,CAwCE;;;AACA,UAAInE,OAAOD,OAAOC,IAAP,CAAY8C,KAAZ,CAAX;;AACA,UAAIe,SAAJ,EAAe;AACb7D,eAAOA,KAAKgG,IAAL,EAAP;AACD;;AACDhG,WAAK4B,OAAL,CAAayB,KAAK;AAChBc,YAAIoB,IAAIlC,CAAJ,EAAOP,KAAP,EAAc2C,YAAd,EAA4BI,WAA5B,EAAyChC,SAAzC,CAAJ;;AACA,YAAIM,CAAJ,EAAO;AACL2B,kBAAQG,IAAR,CAAaZ,MAAMhC,CAAN,KAAYwC,cAAc,IAAd,GAAqB,GAAjC,IAAwC1B,CAArD;AACD;AACF,OALD,EA7CF,CAoDE;AACA;;AACA,UAAI2B,QAAQ7F,MAAR,KAAmB,CAAvB,EAA0B;AACxBkE,YAAI,IAAJ;AACD,OAFD,MAEO,IAAI0B,WAAJ,EAAiB;AACtB1B,YAAI,QACF0B,WADE,GAEFC,QAAQC,IAAR,CAAa,QACbF,WADA,CAFE,GAIF,IAJE,GAKFH,WALE,GAMF,GANF;AAOD,OARM,MAQA;AACLvB,YAAI,MAAM2B,QAAQC,IAAR,CAAa,GAAb,CAAN,GAA0B,GAA9B;AACD;;AACD,aAAO5B,CAAP;;AAEF,YA/EA,CA+ES;;AA/ET;AAiFD,CArFD,C,CAuFA;;;AACA,MAAMJ,qBAAqB,CAACjB,KAAD,EAAQY,OAAR,KAAoB;AAC7C;AACA;AACA,QAAMwC,aAAanG,OAAOoG,MAAP,CAAc;AAC/BrC,YAAQ,EADuB;AAE/BD,eAAW;AAFoB,GAAd,EAGhBH,OAHgB,CAAnB;;AAIA,MAAIwC,WAAWpC,MAAX,KAAsB,IAA1B,EAAgC;AAC9BoC,eAAWpC,MAAX,GAAoB,IAApB;AACD,GAFD,MAEO,IAAI,OAAOoC,WAAWpC,MAAlB,KAA6B,QAAjC,EAA2C;AAChD,QAAIsC,YAAY,EAAhB;;AACA,SAAK,IAAI1D,IAAI,CAAb,EAAgBA,IAAIwD,WAAWpC,MAA/B,EAAuCpB,GAAvC,EAA4C;AAC1C0D,mBAAa,GAAb;AACD;;AACDF,eAAWpC,MAAX,GAAoBsC,SAApB;AACD;;AACD,SAAOb,IAAI,EAAJ,EAAQ;AAAC,QAAIzC;AAAL,GAAR,EAAqBoD,WAAWpC,MAAhC,EAAwC,EAAxC,EAA4CoC,WAAWrC,SAAvD,CAAP;AACD,CAjBD;;AArGAlF,OAAO0H,aAAP,CAwHetC,kBAxHf,E","file":"/packages/ejson.js","sourcesContent":["/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nconst EJSON = {};\n\n// Custom type interface definition\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the\n *          tag used to register this type with\n *          [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and\n *          modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false`\n *          otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\nconst customTypes = {};\n\nconst hasOwn = (obj, prop) => ({}).hasOwnProperty.call(obj, prop);\n\nconst isArguments = obj => obj != null && hasOwn(obj, 'callee');\n\nconst isInfOrNan =\n  obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity;\n\n// Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among\n *                      custom data types defined in your project, and must\n *                      match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible\n *                           value into an instance of your type.  This should\n *                           match the serialization performed by your\n *                           type's `toJSONValue` method.\n */\nEJSON.addType = (name, factory) => {\n  if (hasOwn(customTypes, name)) {\n    throw new Error(`Type ${name} already present`);\n  }\n  customTypes[name] = factory;\n};\n\nconst builtinConverters = [\n  { // Date\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$date') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      return obj instanceof Date;\n    },\n    toJSONValue(obj) {\n      return {$date: obj.getTime()};\n    },\n    fromJSONValue(obj) {\n      return new Date(obj.$date);\n    },\n  },\n  { // RegExp\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$regexp')\n        && hasOwn(obj, '$flags')\n        && Object.keys(obj).length === 2;\n    },\n    matchObject(obj) {\n      return obj instanceof RegExp;\n    },\n    toJSONValue(regexp) {\n      return {\n        $regexp: regexp.source,\n        $flags: regexp.flags\n      };\n    },\n    fromJSONValue(obj) {\n      // Replaces duplicate / invalid flags.\n      return new RegExp(\n        obj.$regexp,\n        obj.$flags\n          // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\n          .slice(0, 50)\n          .replace(/[^gimuy]/g,'')\n          .replace(/(.)(?=.*\\1)/g, '')\n      );\n    },\n  },\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n    // which we match.)\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$InfNaN') && Object.keys(obj).length === 1;\n    },\n    matchObject: isInfOrNan,\n    toJSONValue(obj) {\n      let sign;\n      if (Number.isNaN(obj)) {\n        sign = 0;\n      } else if (obj === Infinity) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n      return {$InfNaN: sign};\n    },\n    fromJSONValue(obj) {\n      return obj.$InfNaN / 0;\n    },\n  },\n  { // Binary\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$binary') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array\n        || (obj && hasOwn(obj, '$Uint8ArrayPolyfill'));\n    },\n    toJSONValue(obj) {\n      return {$binary: Base64.encode(obj)};\n    },\n    fromJSONValue(obj) {\n      return Base64.decode(obj.$binary);\n    },\n  },\n  { // Escaping one level\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$escape') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      let match = false;\n      if (obj) {\n        const keyCount = Object.keys(obj).length;\n        if (keyCount === 1 || keyCount === 2) {\n          match =\n            builtinConverters.some(converter => converter.matchJSONValue(obj));\n        }\n      }\n      return match;\n    },\n    toJSONValue(obj) {\n      const newObj = {};\n      Object.keys(obj).forEach(key => {\n        newObj[key] = EJSON.toJSONValue(obj[key]);\n      });\n      return {$escape: newObj};\n    },\n    fromJSONValue(obj) {\n      const newObj = {};\n      Object.keys(obj.$escape).forEach(key => {\n        newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\n      });\n      return newObj;\n    },\n  },\n  { // Custom\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$type')\n        && hasOwn(obj, '$value') && Object.keys(obj).length === 2;\n    },\n    matchObject(obj) {\n      return EJSON._isCustomType(obj);\n    },\n    toJSONValue(obj) {\n      const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());\n      return {$type: obj.typeName(), $value: jsonValue};\n    },\n    fromJSONValue(obj) {\n      const typeName = obj.$type;\n      if (!hasOwn(customTypes, typeName)) {\n        throw new Error(`Custom EJSON type ${typeName} is not defined`);\n      }\n      const converter = customTypes[typeName];\n      return Meteor._noYieldsAllowed(() => converter(obj.$value));\n    },\n  },\n];\n\nEJSON._isCustomType = (obj) => (\n  obj &&\n  typeof obj.toJSONValue === 'function' &&\n  typeof obj.typeName === 'function' &&\n  hasOwn(customTypes, obj.typeName())\n);\n\nEJSON._getTypes = () => customTypes;\n\nEJSON._getConverters = () => builtinConverters;\n\n// Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\nconst toJSONValueHelper = item => {\n  for (let i = 0; i < builtinConverters.length; i++) {\n    const converter = builtinConverters[i];\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n  return undefined;\n};\n\n// for both arrays and objects, in-place modification.\nconst adjustTypesToJSONValue = obj => {\n  // Is it an atom that we need to adjust?\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = toJSONValueHelper(obj);\n  if (maybeChanged !== undefined) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object') {\n    return obj;\n  }\n\n  // Iterate over array or object structure.\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value !== 'object' && value !== undefined &&\n        !isInfOrNan(value)) {\n      return; // continue\n    }\n\n    const changed = toJSONValueHelper(value);\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    }\n    // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\n\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\n\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON\n *          representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\nEJSON.toJSONValue = item => {\n  const changed = toJSONValueHelper(item);\n  if (changed !== undefined) {\n    return changed;\n  }\n\n  let newItem = item;\n  if (typeof item === 'object') {\n    newItem = EJSON.clone(item);\n    adjustTypesToJSONValue(newItem);\n  }\n  return newItem;\n};\n\n// Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\nconst fromJSONValueHelper = value => {\n  if (typeof value === 'object' && value !== null) {\n    const keys = Object.keys(value);\n    if (keys.length <= 2\n        && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {\n      for (let i = 0; i < builtinConverters.length; i++) {\n        const converter = builtinConverters[i];\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n  return value;\n};\n\n// for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\nconst adjustTypesFromJSONValue = obj => {\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = fromJSONValueHelper(obj);\n  if (maybeChanged !== obj) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object') {\n    return obj;\n  }\n\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value === 'object') {\n      const changed = fromJSONValueHelper(value);\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      }\n      // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\n\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\n\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\nEJSON.fromJSONValue = item => {\n  let changed = fromJSONValueHelper(item);\n  if (changed === item && typeof item === 'object') {\n    changed = EJSON.clone(item);\n    adjustTypesFromJSONValue(changed);\n  }\n  return changed;\n};\n\n/**\n * @summary Serialize a value to a string. For EJSON values, the serialization\n *          fully represents the value. For non-EJSON values, serializes the\n *          same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\n * integer, indents by that number of spaces; and when a string, uses the\n * string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an\n *                                    object in sorted order.\n */\nEJSON.stringify = (item, options) => {\n  let serialized;\n  const json = EJSON.toJSONValue(item);\n  if (options && (options.canonical || options.indent)) {\n    import canonicalStringify from './stringify';\n    serialized = canonicalStringify(json, options);\n  } else {\n    serialized = JSON.stringify(json);\n  }\n  return serialized;\n};\n\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string\n *          is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\nEJSON.parse = item => {\n  if (typeof item !== 'string') {\n    throw new Error('EJSON.parse argument should be a string');\n  }\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from\n *          [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\nEJSON.isBinary = obj => {\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||\n    (obj && obj.$Uint8ArrayPolyfill));\n};\n\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\n *          performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\n * default is `false`.\n */\nEJSON.equals = (a, b, options) => {\n  let i;\n  const keyOrderSensitive = !!(options && options.keyOrderSensitive);\n  if (a === b) {\n    return true;\n  }\n\n  // This differs from the IEEE spec for NaN equality, b/c we don't want\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  // if either one is falsy, they'd have to be === to be equal\n  if (!a || !b) {\n    return false;\n  }\n\n  if (!(typeof a === 'object' && typeof b === 'object')) {\n    return false;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (typeof (a.equals) === 'function') {\n    return a.equals(b, options);\n  }\n\n  if (typeof (b.equals) === 'function') {\n    return b.equals(a, options);\n  }\n\n  if (a instanceof Array) {\n    if (!(b instanceof Array)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // fallback for custom types that don't implement their own equals\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1: return false;\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n    default: // Do nothing\n  }\n\n  // fall back to structural equality of objects\n  let ret;\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  if (keyOrderSensitive) {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (i >= bKeys.length) {\n        return false;\n      }\n      if (key !== bKeys[i]) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  } else {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (!hasOwn(b, key)) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[key], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  }\n  return ret && i === bKeys.length;\n};\n\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\nEJSON.clone = v => {\n  let ret;\n  if (typeof v !== 'object') {\n    return v;\n  }\n\n  if (v === null) {\n    return null; // null has typeof \"object\"\n  }\n\n  if (v instanceof Date) {\n    return new Date(v.getTime());\n  }\n\n  // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n  if (v instanceof RegExp) {\n    return v;\n  }\n\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n    for (let i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n    return ret;\n  }\n\n  if (Array.isArray(v)) {\n    return v.map(value => EJSON.clone(value));\n  }\n\n  if (isArguments(v)) {\n    return Array.from(v).map(value => EJSON.clone(value));\n  }\n\n  // handle general user-defined typed Objects if they have a clone method\n  if (typeof v.clone === 'function') {\n    return v.clone();\n  }\n\n  // handle other custom types\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  }\n\n  // handle other objects\n  ret = {};\n  Object.keys(v).forEach((key) => {\n    ret[key] = EJSON.clone(v[key]);\n  });\n  return ret;\n};\n\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\nEJSON.newBinary = Base64.newBinary;\n\nexport { EJSON };\n","// Based on json2.js from https://github.com/douglascrockford/JSON-js\n//\n//    json2.js\n//    2012-10-08\n//\n//    Public Domain.\n//\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\nfunction quote(string) {\n  return JSON.stringify(string);\n}\n\nconst str = (key, holder, singleIndent, outerIndent, canonical) => {\n  const value = holder[key];\n\n  // What happens next depends on the value's type.\n  switch (typeof value) {\n  case 'string':\n    return quote(value);\n  case 'number':\n    // JSON numbers must be finite. Encode non-finite numbers as null.\n    return isFinite(value) ? String(value) : 'null';\n  case 'boolean':\n    return String(value);\n  // If the type is 'object', we might be dealing with an object or an array or\n  // null.\n  case 'object':\n    // Due to a specification blunder in ECMAScript, typeof null is 'object',\n    // so watch out for that case.\n    if (!value) {\n      return 'null';\n    }\n    // Make an array to hold the partial results of stringifying this object\n    // value.\n    const innerIndent = outerIndent + singleIndent;\n    const partial = [];\n\n    // Is the value an array?\n    if (Array.isArray(value) || ({}).hasOwnProperty.call(value, 'callee')) {\n      // The value is an array. Stringify every element. Use null as a\n      // placeholder for non-JSON values.\n      const length = value.length;\n      for (let i = 0; i < length; i += 1) {\n        partial[i] =\n          str(i, value, singleIndent, innerIndent, canonical) || 'null';\n      }\n\n      // Join all of the elements together, separated with commas, and wrap\n      // them in brackets.\n      let v;\n      if (partial.length === 0) {\n        v = '[]';\n      } else if (innerIndent) {\n        v = '[\\n' +\n          innerIndent +\n          partial.join(',\\n' +\n          innerIndent) +\n          '\\n' +\n          outerIndent +\n          ']';\n      } else {\n        v = '[' + partial.join(',') + ']';\n      }\n      return v;\n    }\n\n    // Iterate through all of the keys in the object.\n    let keys = Object.keys(value);\n    if (canonical) {\n      keys = keys.sort();\n    }\n    keys.forEach(k => {\n      v = str(k, value, singleIndent, innerIndent, canonical);\n      if (v) {\n        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);\n      }\n    });\n\n    // Join all of the member texts together, separated with commas,\n    // and wrap them in braces.\n    if (partial.length === 0) {\n      v = '{}';\n    } else if (innerIndent) {\n      v = '{\\n' +\n        innerIndent +\n        partial.join(',\\n' +\n        innerIndent) +\n        '\\n' +\n        outerIndent +\n        '}';\n    } else {\n      v = '{' + partial.join(',') + '}';\n    }\n    return v;\n\n  default: // Do nothing\n  }\n};\n\n// If the JSON object does not yet have a stringify method, give it one.\nconst canonicalStringify = (value, options) => {\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  const allOptions = Object.assign({\n    indent: '',\n    canonical: false,\n  }, options);\n  if (allOptions.indent === true) {\n    allOptions.indent = '  ';\n  } else if (typeof allOptions.indent === 'number') {\n    let newIndent = '';\n    for (let i = 0; i < allOptions.indent; i++) {\n      newIndent += ' ';\n    }\n    allOptions.indent = newIndent;\n  }\n  return str('', {'': value}, allOptions.indent, '', allOptions.canonical);\n};\n\nexport default canonicalStringify;\n"]}