{"version":3,"sources":["meteor://ðŸ’»app/packages/logging/logging.js"],"names":["module","export","Log","Meteor","watch","require","v","hasOwn","Object","prototype","hasOwnProperty","args","info","intercept","interceptedLines","suppress","_intercept","count","_suppress","_intercepted","lines","outputFormat","LEVEL_COLORS","debug","warn","error","META_COLOR","isWin32","process","platform","platformColor","color","endsWith","RESTRICTED_KEYS","FORMATTED_KEYS","logInBrowser","obj","str","format","level","console","_debug","_getCallerDetails","getStack","err","Error","stack","line","split","slice","match","file","details","exec","forEach","arg","intercepted","RegExp","Date","message","String","toString","key","call","omitCallerDetails","time","push","EJSON","stringify","isServer","log","parse","startsWith","e","options","timeInexact","lineNumber","app","appName","originApp","program","satellite","stderr","keys","length","pad2","n","padStart","pad3","dateStamp","getFullYear","getMonth","getDate","timeStamp","getHours","getMinutes","getSeconds","getMilliseconds","utcOffsetStr","getTimezoneOffset","appInfo","sourceInfoParts","sourceInfo","join","stderrIndicator","metaPrefix","charAt","toUpperCase","prettify","metaColor","objFromText","override"],"mappings":"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","file":"/packages/logging.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Log(...args) {\n  Log.info(...args);\n}\n\n/// FOR TESTING\nlet intercept = 0;\nlet interceptedLines = [];\nlet suppress = 0;\n\n// Intercept the next 'count' calls to a Log function. The actual\n// lines printed to the console can be cleared and read by calling\n// Log._intercepted().\nLog._intercept = (count) => {\n  intercept += count;\n};\n\n// Suppress the next 'count' calls to a Log function. Use this to stop\n// tests from spamming the console, especially with red errors that\n// might look like a failing test.\nLog._suppress = (count) => {\n  suppress += count;\n};\n\n// Returns intercepted lines and resets the intercept counter.\nLog._intercepted = () => {\n  const lines = interceptedLines;\n  interceptedLines = [];\n  intercept = 0;\n  return lines;\n};\n\n// Either 'json' or 'colored-text'.\n//\n// When this is set to 'json', print JSON documents that are parsed by another\n// process ('satellite' or 'meteor run'). This other process should call\n// 'Log.format' for nice output.\n//\n// When this is set to 'colored-text', call 'Log.format' before printing.\n// This should be used for logging from within satellite, since there is no\n// other process that will be reading its standard output.\nLog.outputFormat = 'json';\n\nconst LEVEL_COLORS = {\n  debug: 'green',\n  // leave info as the default color\n  warn: 'magenta',\n  error: 'red'\n};\n\nconst META_COLOR = 'blue';\n\n// Default colors cause readability problems on Windows Powershell,\n// switch to bright variants. While still capable of millions of\n// operations per second, the benchmark showed a 25%+ increase in\n// ops per second (on Node 8) by caching \"process.platform\".\nconst isWin32 = typeof process === 'object' && process.platform === 'win32';\nconst platformColor = (color) => {\n  if (isWin32 && typeof color === 'string' && !color.endsWith('Bright')) {\n    return `${color}Bright`;\n  }\n  return color;\n};\n\n// XXX package\nconst RESTRICTED_KEYS = ['time', 'timeInexact', 'level', 'file', 'line',\n                        'program', 'originApp', 'satellite', 'stderr'];\n\nconst FORMATTED_KEYS = [...RESTRICTED_KEYS, 'app', 'message'];\n\nconst logInBrowser = obj => {\n  const str = Log.format(obj);\n\n  // XXX Some levels should be probably be sent to the server\n  const level = obj.level;\n\n  if ((typeof console !== 'undefined') && console[level]) {\n    console[level](str);\n  } else {\n    // XXX Uses of Meteor._debug should probably be replaced by Log.debug or\n    //     Log.info, and we should have another name for \"do your best to\n    //     call call console.log\".\n    Meteor._debug(str);\n  }\n};\n\n// @returns {Object: { line: Number, file: String }}\nLog._getCallerDetails = () => {\n  const getStack = () => {\n    // We do NOT use Error.prepareStackTrace here (a V8 extension that gets us a\n    // pre-parsed stack) since it's impossible to compose it with the use of\n    // Error.prepareStackTrace used on the server for source maps.\n    const err = new Error;\n    const stack = err.stack;\n    return stack;\n  };\n\n  const stack = getStack();\n\n  if (!stack) {\n    return {};\n  }\n\n  // looking for the first line outside the logging package (or an\n  // eval if we find that first)\n  let line;\n  const lines = stack.split('\\n').slice(1);\n  for (line of lines) {\n    if (line.match(/^\\s*at eval \\(eval/)) {\n      return {file: \"eval\"};\n    }\n\n    if (!line.match(/packages\\/(?:local-test[:_])?logging(?:\\/|\\.js)/)) {\n      break;\n    }\n  }\n\n  const details = {};\n\n  // The format for FF is 'functionName@filePath:lineNumber'\n  // The format for V8 is 'functionName (packages/logging/logging.js:81)' or\n  //                      'packages/logging/logging.js:81'\n  const match = /(?:[@(]| at )([^(]+?):([0-9:]+)(?:\\)|$)/.exec(line);\n  if (!match) {\n    return details;\n  }\n\n  // in case the matched block here is line:column\n  details.line = match[2].split(':')[0];\n\n  // Possible format: https://foo.bar.com/scripts/file.js?random=foobar\n  // XXX: if you can write the following in better way, please do it\n  // XXX: what about evals?\n  details.file = match[1].split('/').slice(-1)[0].split('?')[0];\n\n  return details;\n};\n\n['debug', 'info', 'warn', 'error'].forEach((level) => {\n // @param arg {String|Object}\n Log[level] = (arg) => {\n  if (suppress) {\n    suppress--;\n    return;\n  }\n\n  let intercepted = false;\n  if (intercept) {\n    intercept--;\n    intercepted = true;\n  }\n\n  let obj = (arg === Object(arg)\n    && !(arg instanceof RegExp)\n    && !(arg instanceof Date))\n    ? arg\n    : { message: new String(arg).toString() };\n\n  RESTRICTED_KEYS.forEach(key => {\n    if (obj[key]) {\n      throw new Error(`Can't set '${key}' in log message`);\n    }\n  });\n\n  if (hasOwn.call(obj, 'message') && typeof obj.message !== 'string') {\n    throw new Error(\"The 'message' field in log objects must be a string\");\n  }\n\n  if (!obj.omitCallerDetails) {\n    obj = { ...Log._getCallerDetails(), ...obj };\n  }\n\n  obj.time = new Date();\n  obj.level = level;\n\n  // XXX allow you to enable 'debug', probably per-package\n  if (level === 'debug') {\n    return;\n  }\n\n  if (intercepted) {\n    interceptedLines.push(EJSON.stringify(obj));\n  } else if (Meteor.isServer) {\n    if (Log.outputFormat === 'colored-text') {\n      console.log(Log.format(obj, {color: true}));\n    } else if (Log.outputFormat === 'json') {\n      console.log(EJSON.stringify(obj));\n    } else {\n      throw new Error(`Unknown logging output format: ${Log.outputFormat}`);\n    }\n  } else {\n    logInBrowser(obj);\n  }\n};\n});\n\n\n// tries to parse line as EJSON. returns object if parse is successful, or null if not\nLog.parse = (line) => {\n  let obj = null;\n  if (line && line.startsWith('{')) { // might be json generated from calling 'Log'\n    try { obj = EJSON.parse(line); } catch (e) {}\n  }\n\n  // XXX should probably check fields other than 'time'\n  if (obj && obj.time && (obj.time instanceof Date)) {\n    return obj;\n  } else {\n    return null;\n  }\n};\n\n// formats a log object into colored human and machine-readable text\nLog.format = (obj, options = {}) => {\n  obj = { ...obj }; // don't mutate the argument\n  let {\n    time,\n    timeInexact,\n    level = 'info',\n    file,\n    line: lineNumber,\n    app: appName = '',\n    originApp,\n    message = '',\n    program = '',\n    satellite = '',\n    stderr = '',\n  } = obj;\n\n  if (!(time instanceof Date)) {\n    throw new Error(\"'time' must be a Date object\");\n  }\n\n  FORMATTED_KEYS.forEach((key) => { delete obj[key]; });\n\n  if (Object.keys(obj).length > 0) {\n    if (message) {\n      message += ' ';\n    }\n    message += EJSON.stringify(obj);\n  }\n\n  const pad2 = n => n.toString().padStart(2, '0');\n  const pad3 = n => n.toString().padStart(3, '0');\n\n  const dateStamp = time.getFullYear().toString() +\n    pad2(time.getMonth() + 1 /*0-based*/) +\n    pad2(time.getDate());\n  const timeStamp = pad2(time.getHours()) +\n        ':' +\n        pad2(time.getMinutes()) +\n        ':' +\n        pad2(time.getSeconds()) +\n        '.' +\n        pad3(time.getMilliseconds());\n\n  // eg in San Francisco in June this will be '(-7)'\n  const utcOffsetStr = `(${(-(new Date().getTimezoneOffset() / 60))})`;\n\n  let appInfo = '';\n  if (appName) {\n    appInfo += appName;\n  }\n  if (originApp && originApp !== appName) {\n    appInfo += ` via ${originApp}`;\n  }\n  if (appInfo) {\n    appInfo = `[${appInfo}] `;\n  }\n\n  const sourceInfoParts = [];\n  if (program) {\n    sourceInfoParts.push(program);\n  }\n  if (file) {\n    sourceInfoParts.push(file);\n  }\n  if (lineNumber) {\n    sourceInfoParts.push(lineNumber);\n  }\n\n  let sourceInfo = !sourceInfoParts.length ?\n    '' : `(${sourceInfoParts.join(':')}) `;\n\n  if (satellite)\n    sourceInfo += `[${satellite}]`;\n\n  const stderrIndicator = stderr ? '(STDERR) ' : '';\n\n  const metaPrefix = [\n    level.charAt(0).toUpperCase(),\n    dateStamp,\n    '-',\n    timeStamp,\n    utcOffsetStr,\n    timeInexact ? '? ' : ' ',\n    appInfo,\n    sourceInfo,\n    stderrIndicator].join('');\n\n  const prettify = function (line, color) {\n    return (options.color && Meteor.isServer && color) ?\n      require('cli-color')[color](line) : line;\n  };\n\n  return prettify(metaPrefix, platformColor(options.metaColor || META_COLOR)) +\n    prettify(message, platformColor(LEVEL_COLORS[level]));\n};\n\n// Turn a line of text into a loggable object.\n// @param line {String}\n// @param override {Object}\nLog.objFromText = (line, override) => {\n  return {\n    message: line,\n    level: 'info',\n    time: new Date(),\n    timeInexact: true,\n    ...override\n  };\n};\n\nexport { Log };\n"]}