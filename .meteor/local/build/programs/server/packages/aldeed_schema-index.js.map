{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed:schema-index/lib/indexing.js"],"names":["SimpleSchema","extendOptions","index","Match","Optional","OneOf","Number","String","Boolean","unique","sparse","version","messages","notUnique","Meteor","isServer","Collection2","on","collection","ss","messageBox","ensureIndex","indexName","startup","_collection","_ensureIndex","background","name","dropIndex","_dropIndex","err","propName","_","each","definition","fieldName","indexValue","idxFieldName","replace","optional"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACAA,aAAaC,aAAb,CAA2B;AACzBC,SAAOC,MAAMC,QAAN,CAAeD,MAAME,KAAN,CAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,OAA5B,CAAf,CADkB;AAEzBC,UAAQN,MAAMC,QAAN,CAAeI,OAAf,CAFiB;AAGzBE,UAAQP,MAAMC,QAAN,CAAeI,OAAf;AAHiB,CAA3B,E,CAMA;;AACA,IAAI,CAACR,aAAaW,OAAd,IAAyBX,aAAaW,OAAb,GAAuB,CAApD,EAAuD;AACrDX,eAAaY,QAAb,CAAsB;AACpBC,eAAW;AADS,GAAtB;AAGD;;AAED,IAAIC,OAAOC,QAAX,EAAqB;AACnBC,cAAYC,EAAZ,CAAe,iBAAf,EAAkC,UAAUC,UAAV,EAAsBC,EAAtB,EAA0B;AAC1D;AACA,QAAIA,GAAGR,OAAH,IAAc,CAAlB,EAAqB;AACnBQ,SAAGC,UAAH,CAAcR,QAAd,CAAuB;AACrBC,mBAAW;AADU,OAAvB;AAGD;;AAED,aAASQ,WAAT,CAAqBnB,KAArB,EAA4BoB,SAA5B,EAAuCb,MAAvC,EAA+CC,MAA/C,EAAuD;AACrDI,aAAOS,OAAP,CAAe,YAAY;AACzBL,mBAAWM,WAAX,CAAuBC,YAAvB,CAAoCvB,KAApC,EAA2C;AACzCwB,sBAAY,IAD6B;AAEzCC,gBAAML,SAFmC;AAGzCb,kBAAQA,MAHiC;AAIzCC,kBAAQA;AAJiC,SAA3C;AAMD,OAPD;AAQD;;AAED,aAASkB,SAAT,CAAmBN,SAAnB,EAA8B;AAC5BR,aAAOS,OAAP,CAAe,YAAY;AACzB,YAAI;AACFL,qBAAWM,WAAX,CAAuBK,UAAvB,CAAkCP,SAAlC;AACD,SAFD,CAEE,OAAOQ,GAAP,EAAY,CACZ;AACD;AACF,OAND;AAOD;;AAED,UAAMC,WAAWZ,GAAGR,OAAH,KAAe,CAAf,GAAmB,cAAnB,GAAoC,QAArD,CA7B0D,CA+B1D;;AACAqB,MAAEC,IAAF,CAAOd,GAAGY,QAAH,GAAP,EAAuB,UAASG,UAAT,EAAqBC,SAArB,EAAgC;AACrD,UAAI,WAAWD,UAAX,IAAyBA,WAAWzB,MAAX,KAAsB,IAAnD,EAAyD;AACvD,YAAIP,QAAQ,EAAZ;AAAA,YAAgBkC,UAAhB,CADuD,CAEvD;AACA;;AACA,YAAI,WAAWF,UAAf,EAA2B;AACzBE,uBAAaF,WAAWhC,KAAxB;AACA,cAAIkC,eAAe,IAAnB,EAAyBA,aAAa,CAAb;AAC1B,SAHD,MAGO;AACLA,uBAAa,CAAb;AACD;;AACD,YAAId,YAAY,QAAQa,SAAxB,CAVuD,CAWvD;;AACA,YAAIE,eAAeF,UAAUG,OAAV,CAAkB,SAAlB,EAA6B,GAA7B,CAAnB;AACApC,cAAMmC,YAAN,IAAsBD,UAAtB;AACA,YAAI3B,SAAS,CAAC,CAACyB,WAAWzB,MAAb,KAAwB2B,eAAe,CAAf,IAAoBA,eAAe,CAAC,CAA5D,CAAb;AACA,YAAI1B,SAASwB,WAAWxB,MAAX,IAAqB,KAAlC,CAfuD,CAiBvD;;AACA,YAAI,CAACA,MAAD,IAAWD,MAAX,IAAqByB,WAAWK,QAApC,EAA8C7B,SAAS,IAAT;;AAE9C,YAAI0B,eAAe,KAAnB,EAA0B;AACxBR,oBAAUN,SAAV;AACD,SAFD,MAEO;AACLD,sBAAYnB,KAAZ,EAAmBoB,SAAnB,EAA8Bb,MAA9B,EAAsCC,MAAtC;AACD;AACF;AACF,KA3BD;AA4BD,GA5DD;AA6DD,C","file":"/packages/aldeed_schema-index.js","sourcesContent":["// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  sparse: Match.Optional(Boolean),\n});\n\n// Define validation error messages (legacy)\nif (!SimpleSchema.version || SimpleSchema.version < 2) {\n  SimpleSchema.messages({\n    notUnique: '[label] must be unique',\n  });\n}\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    // Define validation error messages\n    if (ss.version >= 2) {\n      ss.messageBox.messages({\n        notUnique: '{{label}} must be unique',\n      });\n    }\n\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {\n          // no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    _.each(ss[propName](), function(definition, fieldName) {\n      if ('index' in definition || definition.unique === true) {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;\n\n        // If unique and optional, force sparse to prevent errors\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}"]}