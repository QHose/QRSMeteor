{"version":3,"sources":["meteor://ðŸ’»app/packages/mongo-id/id.js"],"names":["module","export","MongoID","EJSON","watch","require","v","Random","_looksLikeObjectID","str","length","match","ObjectID","hexString","toLowerCase","Error","_str","equals","other","valueOf","toString","clone","typeName","getTimestamp","Number","parseInt","substr","toJSONValue","toHexString","addType","idStringify","id","startsWith","undefined","JSON","stringify","idParse","parse"],"mappings":"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","file":"/packages/mongo-id.js","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Random } from 'meteor/random';\n\nconst MongoID = {};\n\nMongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);\n\nMongoID.ObjectID = class ObjectID {\n  constructor (hexString) {\n    //random-based impl of Mongo ObjectID\n    if (hexString) {\n      hexString = hexString.toLowerCase();\n      if (!MongoID._looksLikeObjectID(hexString)) {\n        throw new Error('Invalid hexadecimal string for creating an ObjectID');\n      }\n      // meant to work with _.isEqual(), which relies on structural equality\n      this._str = hexString;\n    } else {\n      this._str = Random.hexString(24);\n    }\n  }\n\n  equals(other) {\n    return other instanceof MongoID.ObjectID &&\n    this.valueOf() === other.valueOf();\n  }\n\n  toString() {\n    return `ObjectID(\"${this._str}\")`;\n  }\n\n  clone() {\n    return new MongoID.ObjectID(this._str);\n  }\n\n  typeName() {\n    return 'oid';\n  }\n  \n  getTimestamp() {\n    return Number.parseInt(this._str.substr(0, 8), 16);\n  }\n\n  valueOf() {\n    return this._str;\n  }\n\n  toJSONValue() {\n    return this.valueOf();\n  }\n\n  toHexString() {\n    return this.valueOf();\n  }\n\n}\n\nEJSON.addType('oid', str => new MongoID.ObjectID(str));\n\nMongoID.idStringify = (id) => {\n  if (id instanceof MongoID.ObjectID) {\n    return id.valueOf();\n  } else if (typeof id === 'string') {\n    if (id === '') {\n      return id;\n    } else if (id.startsWith('-') || // escape previously dashed strings\n               id.startsWith('~') || // escape escaped numbers, true, false\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings\n               id.startsWith('{')) { // escape object-form strings, for maybe implementing later\n      return `-${id}`;\n    } else {\n      return id; // other strings go through unchanged.\n    }\n  } else if (id === undefined) {\n    return '-';\n  } else if (typeof id === 'object' && id !== null) {\n    throw new Error('Meteor does not currently support objects other than ObjectID as ids');\n  } else { // Numbers, true, false, null\n    return `~${JSON.stringify(id)}`;\n  }\n};\n\nMongoID.idParse = (id) => {\n  if (id === '') {\n    return id;\n  } else if (id === '-') {\n    return undefined;\n  } else if (id.startsWith('-')) {\n    return id.substr(1);\n  } else if (id.startsWith('~')) {\n    return JSON.parse(id.substr(1));\n  } else if (MongoID._looksLikeObjectID(id)) {\n    return new MongoID.ObjectID(id);\n  } else {\n    return id;\n  }\n};\n\nexport { MongoID };\n"]}