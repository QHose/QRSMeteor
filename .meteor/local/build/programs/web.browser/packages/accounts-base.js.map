{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-base/client_main.js","meteor://ðŸ’»app/packages/accounts-base/accounts_client.js","meteor://ðŸ’»app/packages/accounts-base/accounts_common.js","meteor://ðŸ’»app/packages/accounts-base/localstorage_token.js","meteor://ðŸ’»app/packages/accounts-base/url_client.js"],"names":["module1","module","export","AccountsClient","AccountsTest","watch","require","v","Accounts","Meteor","users","AccountsCommon","options","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","_initUrlMatching","_initLocalStorage","_loginFuncs","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","callLoginFunction","funcArgs","apply","applyLoginFunction","logout","callback","self","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","Ap","prototype","callLoginMethod","_","extend","methodName","methodArguments","_suppressLoggingIn","each","f","loginCallbacks","once","loginDetails","_onLoginHook","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","type","_userId","_onLogoutHook","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","Package","blaze","Blaze","Template","registerHelper","user","_options","undefined","_initConnection","Mongo","Collection","_preventAutopublish","Hook","bindEnvironment","debugPrintExceptions","findOne","config","isServer","__meteor_runtime_config__","accountsConfigCalled","has","isClient","OAuthEncryption","loadKey","oauthSecretKey","omit","VALID_KEYS","keys","key","contains","onLogin","register","onLoginFailure","onLogout","ddpUrl","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","LOGIN_UNEXPIRING_TOKEN_DAYS","DEFAULT_LOGIN_EXPIRATION_DAYS","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","when","getTime","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","startup","ServiceConfiguration","loginServiceConfiguration","configurations","ConfigError","lceName","LoginCancelledError","makeErrorType","description","message","name","numericError","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","rootUrlPathPrefix","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","allowed","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","accountsPaths","savedHash","window","location","hash","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","accounts","success","urlPart","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink"],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\nimport {AccountsTest} from \"./url_client.js\";\nimport \"./localstorage_token.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the client version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsClient,\n  AccountsTest,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    // Defined in url_client.js.\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    var self = this;\n    self._loggingOut.set(true);\n    self.connection.apply('logout', [], {\n      wait: true\n    }, function (error, result) {\n      self._loggingOut.set(false);\n      if (error) {\n        callback && callback(error);\n      } else {\n        self.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    var self = this;\n\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    self.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      function (err, result) {\n        if (! err) {\n          self._storeLoginToken(\n            self.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    self.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      function (err) {\n        callback && callback(err);\n      }\n    );\n  }\n};\n\nvar Ap = AccountsClient.prototype;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = function () {\n  return Accounts.loggingOut();\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\nAp.callLoginMethod = function (options) {\n  var self = this;\n\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options);\n\n  // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f])\n      options[f] = function () {};\n  });\n\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n  var loginCallbacks = _.once(function ({ error, loginDetails }) {\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback(loginDetails);\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback({ error });\n        return true;\n      });\n    }\n    options.userCallback(error, loginDetails);\n  });\n\n  var reconnected = false;\n\n  // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {\n      // Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      // First clear out any previously set Acccounts login onReconnect\n      // callback (to make sure we don't keep piling up duplicate callbacks,\n      // which would then all be triggered when reconnecting).\n      if (self._reconnectStopper) {\n        self._reconnectStopper.stop();\n      }\n\n      self._reconnectStopper = DDP.onReconnect(function (conn) {\n        if (conn != self.connection) {\n          return;\n        }\n        reconnected = true;\n        // If our token was updated in storage, use the latest one.\n        var storedToken = self._storedLoginToken();\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n        if (! result.tokenExpires)\n          result.tokenExpires = self._tokenExpiration(new Date());\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{resume: result.token}],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error, loginDetails) {\n              var storedTokenNow = self._storedLoginToken();\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              }\n              // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n              loginCallbacks({ error, loginDetails });\n            }});\n        }\n      });\n    }\n  };\n\n  // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected)\n      return;\n\n    // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n    self._setLoggingIn(false);\n    if (error || !result) {\n      error = error || new Error(\n        \"No result from call to \" + options.methodName);\n      loginCallbacks({ error });\n      return;\n    }\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks({ error: e });\n      return;\n    }\n\n    // Make the client logged in. (The user data should already be loaded!)\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks({\n      loginDetails: {\n        type: result.type,\n      },\n    });\n  };\n\n  if (!options._suppressLoggingIn)\n    self._setLoggingIn(true);\n  self.connection.apply(\n    options.methodName,\n    options.methodArguments,\n    {wait: true, onResultReceived: onResultReceived},\n    loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  // Ensure client was successfully logged in before running logout hooks.\n  if (this.connection._userId) {\n    this._onLogoutHook.each(function (callback) {\n      callback();\n      return true;\n    });\n  }\n  this._unstoreLoginToken();\n  this.connection.setUserId(null);\n  this._reconnectStopper && this._reconnectStopper.stop();\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n  this.connection.setUserId(userId);\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n\n///\n/// LOGIN SERVICES\n///\n\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n};\n\n\n// Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n};\n\n\n// Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n};\n\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingOut', function () {\n    return Meteor.loggingOut();\n  });\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingInOrOut', function () {\n    return (Meteor.loggingIn() || Meteor.loggingOut());\n  });\n}\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\",\n                      \"ambiguousErrorMessages\", \"bcryptRounds\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      (this._options.loginExpirationInDays === null)\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (loginExpirationInDays\n        || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Expose for testing.\nAp.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n// Expose for testing.\nAp.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsClient} from \"./accounts_client.js\";\nvar Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n","import {AccountsClient} from \"./accounts_client.js\";\n\nvar Ap = AccountsClient.prototype;\n\n// All of the special hash URLs we support for accounts interactions\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\n\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true;\n\n  // We only support one callback per URL.\n  this._accountsCallbacks = {};\n\n  // Try to match the saved value of window.location.hash.\n  this._attemptToMatchHash();\n};\n\n// Separate out this functionality for testing\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this;\n\n  // put login in a suspended state to wait for the interaction to finish\n  self._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n}\n\n// Export for testing\nexport var AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */\nAp.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an email verification link is\n * clicked in an email sent by\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEmailVerificationLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: An email verification token that can be passed to\n * [`Accounts.verifyEmail`](#accounts_verifyemail).\n * 2. `done`: A function to call when the email verification UI flow is complete.\n * The normal login process is suspended until this function is called, so\n * that the user can be notified that they are verifying their email before\n * being logged in.\n * @locus Client\n */\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an account enrollment link is\n * clicked in an email sent by\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEnrollmentLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n * enrolled account a password.\n * 2. `done`: A function to call when the enrollment UI flow is complete.\n * The normal login process is suspended until this function is called, so that\n * user A can be enrolled even if user B was logged in.\n * @locus Client\n */\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};\n"]}