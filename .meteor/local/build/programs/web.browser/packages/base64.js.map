{"version":3,"sources":["meteor://ðŸ’»app/packages/base64/base64.js"],"names":["module","export","Base64","BASE_64_CHARS","BASE_64_VALS","Object","create","getChar","charAt","val","getVal","ch","i","length","encode","array","str","newBinary","charCodeAt","Error","answer","a","b","c","d","forEach","elm","push","join","Uint8Array","ArrayBuffer","ret","len","$Uint8ArrayPolyfill","decode","Math","floor","arr","one","two","three","j","v"],"mappings":"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","file":"/packages/base64.js","sourcesContent":["// Base 64 encoding\n\nconst BASE_64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nconst BASE_64_VALS = Object.create(null);\n\nconst getChar = val => BASE_64_CHARS.charAt(val);\nconst getVal = ch => ch === '=' ? -1 : BASE_64_VALS[ch];\n\nfor (let i = 0; i < BASE_64_CHARS.length; i++) {\n  BASE_64_VALS[getChar(i)] = i;\n};\n\nconst encode = array => {\n  if (typeof array === \"string\") {\n    const str = array;\n    array = newBinary(str.length);\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch > 0xFF) {\n        throw new Error(\n          \"Not ascii. Base64.encode can only take ascii strings.\");\n      }\n\n      array[i] = ch;\n    }\n  }\n\n  const answer = [];\n  let a = null;\n  let b = null;\n  let c = null;\n  let d = null;\n\n  array.forEach((elm, i) => {\n    switch (i % 3) {\n      case 0:\n        a = (elm >> 2) & 0x3F;\n        b = (elm & 0x03) << 4;\n        break;\n      case 1:\n        b = b | (elm >> 4) & 0xF;\n        c = (elm & 0xF) << 2;\n        break;\n      case 2:\n        c = c | (elm >> 6) & 0x03;\n        d = elm & 0x3F;\n        answer.push(getChar(a));\n        answer.push(getChar(b));\n        answer.push(getChar(c));\n        answer.push(getChar(d));\n        a = null;\n        b = null;\n        c = null;\n        d = null;\n        break;\n    }\n  });\n\n  if (a != null) {\n    answer.push(getChar(a));\n    answer.push(getChar(b));\n    if (c == null) {\n      answer.push('=');\n    } else {\n      answer.push(getChar(c));\n    }\n    \n    if (d == null) {\n      answer.push('=');\n    }\n  }\n\n  return answer.join(\"\");\n};\n\n\n\n// XXX This is a weird place for this to live, but it's used both by\n// this package and 'ejson', and we can't put it in 'ejson' without\n// introducing a circular dependency. It should probably be in its own\n// package or as a helper in a package that both 'base64' and 'ejson'\n// use.\nconst newBinary = len => {\n  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {\n    const ret = [];\n    for (let i = 0; i < len; i++) {\n      ret.push(0);\n    }\n\n    ret.$Uint8ArrayPolyfill = true;\n    return ret;\n  }\n  return new Uint8Array(new ArrayBuffer(len));\n};\n\nconst decode = str => {\n  let len = Math.floor((str.length * 3) / 4);\n  if (str.charAt(str.length - 1) == '=') {\n    len--;\n    if (str.charAt(str.length - 2) == '=') {\n      len--;\n    }\n  }\n  \n  const arr = newBinary(len);\n\n  let one = null;\n  let two = null;\n  let three = null;\n\n  let j = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i);\n    const v = getVal(c);\n    switch (i % 4) {\n      case 0:\n        if (v < 0) {\n          throw new Error('invalid base64 string');\n        }\n\n        one = v << 2;\n        break;\n      case 1:\n        if (v < 0) {\n          throw new Error('invalid base64 string');\n        }\n\n        one = one | (v >> 4);\n        arr[j++] = one;\n        two = (v & 0x0F) << 4;\n        break;\n      case 2:\n        if (v >= 0) {\n          two = two | (v >> 2);\n          arr[j++] = two;\n          three = (v & 0x03) << 6;\n        }\n\n        break;\n      case 3:\n        if (v >= 0) {\n          arr[j++] = three | v;\n        }\n\n        break;\n    }\n  }\n  \n  return arr;\n};\n\nexport const Base64 = { encode, decode, newBinary };\n"]}