{"version":3,"sources":["meteor://ðŸ’»app/packages/id-map/id-map.js"],"names":["module","export","IdMap","hasOwn","Object","prototype","hasOwnProperty","idStringify","idParse","clear","_idStringify","JSON","stringify","_idParse","parse","get","id","key","_map","set","value","remove","has","call","empty","create","forEach","iterator","keys","i","length","breakIfFalse","size","setDefault","def","clone","EJSON"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM;AAAA,WAAIA,KAAJ;AAAA;AAAP,CAAd;AAAA,IAAMC,SAASC,OAAOC,SAAP,CAAiBC,cAAhC;;IAEaJ,K;;;AACX,iBAAYK,WAAZ,EAAyBC,OAAzB,EAAkC;AAChC,SAAKC,KAAL;AACA,SAAKC,YAAL,GAAoBH,eAAeI,KAAKC,SAAxC;AACA,SAAKC,QAAL,GAAgBL,WAAWG,KAAKG,KAAhC;AACD,G,CAEH;AACA;AACA;AACA;;;;;SAEEC,G;iBAAIC,E,EAAI;AACN,UAAIC,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;;;;SAEDE,G;iBAAIH,E,EAAII,K,EAAO;AACb,UAAIH,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,WAAKE,IAAL,CAAUD,GAAV,IAAiBG,KAAjB;AACD;;;;;SAEDC,M;oBAAOL,E,EAAI;AACT,UAAIC,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;;;;SAEDK,G;iBAAIN,E,EAAI;AACN,UAAIC,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAOb,OAAOoB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAP;AACD;;;;;SAEDO,K;qBAAQ;AACN,WAAK,IAAIP,GAAT,2CAAgB,KAAKC,IAArB,GAA2B;AACzB,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;SAEDT,K;qBAAQ;AACN,WAAKS,IAAL,GAAYd,OAAOqB,MAAP,CAAc,IAAd,CAAZ;AACD;;;OAED;;;SACAC,O;qBAAQC,Q,EAAU;AAChB;AACA,UAAIC,OAAOxB,OAAOwB,IAAP,CAAY,KAAKV,IAAjB,CAAX;;AACA,WAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAID,KAAKE,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,YAAIE,eAAeJ,SAASJ,IAAT,CACjB,IADiB,EAEjB,KAAKL,IAAL,CAAUU,KAAKC,CAAL,CAAV,CAFiB,EAGjB,KAAKhB,QAAL,CAAce,KAAKC,CAAL,CAAd,CAHiB,CAAnB;;AAKA,YAAIE,iBAAiB,KAArB,EAA4B;AAC1B;AACD;AACF;AACF;;;;;SAEDC,I;oBAAO;AACL,aAAO5B,OAAOwB,IAAP,CAAY,KAAKV,IAAjB,EAAuBY,MAA9B;AACD;;;;;SAEDG,U;wBAAWjB,E,EAAIkB,G,EAAK;AAClB,UAAIjB,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,UAAIb,OAAOoB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,KAAKC,IAAL,CAAUD,GAAV,CAAP;AACD;;AACD,WAAKC,IAAL,CAAUD,GAAV,IAAiBiB,GAAjB;AACA,aAAOA,GAAP;AACD;;;OAED;AACA;;;SACAC,K;qBAAQ;AACN,UAAIA,QAAQ,IAAIjC,KAAJ,CAAU,KAAKQ,YAAf,EAA6B,KAAKG,QAAlC,CAAZ;AACA,WAAKa,OAAL,CAAa,UAAUN,KAAV,EAAiBJ,EAAjB,EAAqB;AAChCmB,cAAMhB,GAAN,CAAUH,EAAV,EAAcoB,MAAMD,KAAN,CAAYf,KAAZ,CAAd;AACD,OAFD;AAGA,aAAOe,KAAP;AACD","file":"/packages/id-map.js","sourcesContent":["const hasOwn = Object.prototype.hasOwnProperty;\n\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this.clear();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    var key = this._idStringify(id);\n    return this._map[key];\n  }\n\n  set(id, value) {\n    var key = this._idStringify(id);\n    this._map[key] = value;\n  }\n\n  remove(id) {\n    var key = this._idStringify(id);\n    delete this._map[key];\n  }\n\n  has(id) {\n    var key = this._idStringify(id);\n    return hasOwn.call(this._map, key);\n  }\n\n  empty() {\n    for (let key in this._map) {\n      return false;\n    }\n    return true;\n  }\n\n  clear() {\n    this._map = Object.create(null);\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    var keys = Object.keys(this._map);\n    for (var i = 0; i < keys.length; i++) {\n      var breakIfFalse = iterator.call(\n        null,\n        this._map[keys[i]],\n        this._idParse(keys[i])\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return Object.keys(this._map).length;\n  }\n\n  setDefault(id, def) {\n    var key = this._idStringify(id);\n    if (hasOwn.call(this._map, key)) {\n      return this._map[key];\n    }\n    this._map[key] = def;\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    var clone = new IdMap(this._idStringify, this._idParse);\n    this.forEach(function (value, id) {\n      clone.set(id, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]}