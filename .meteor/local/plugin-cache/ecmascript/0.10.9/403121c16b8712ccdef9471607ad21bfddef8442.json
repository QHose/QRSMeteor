{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/minimongo/minimongo_tests_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/minimongo/minimongo_tests_server.js","filename":"packages/minimongo/minimongo_tests_server.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/minimongo/minimongo_tests_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/minimongo_tests_server.js"}},"code":"Tinytest.add('minimongo - modifier affects selector', function (test) {\n  function testSelectorPaths(sel, paths, desc) {\n    var matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher._getPaths(), paths, desc);\n  }\n\n  testSelectorPaths({\n    foo: {\n      bar: 3,\n      baz: 42\n    }\n  }, ['foo'], 'literal');\n  testSelectorPaths({\n    foo: 42,\n    bar: 33\n  }, ['foo', 'bar'], 'literal');\n  testSelectorPaths({\n    foo: ['something'],\n    bar: 'asdf'\n  }, ['foo', 'bar'], 'literal');\n  testSelectorPaths({\n    a: {\n      $lt: 3\n    },\n    b: 'you know, literal',\n    'path.is.complicated': {\n      $not: {\n        $regex: 'acme.*corp'\n      }\n    }\n  }, ['a', 'b', 'path.is.complicated'], 'literal + operators');\n  testSelectorPaths({\n    $or: [{\n      'a.b': 1\n    }, {\n      'a.b.c': {\n        $lt: 22\n      }\n    }, {\n      $and: [{\n        'x.d': {\n          $ne: 5,\n          $gte: 433\n        }\n      }, {\n        'a.b': 234\n      }]\n    }]\n  }, ['a.b', 'a.b.c', 'x.d'], 'group operators + duplicates'); // When top-level value is an object, it is treated as a literal,\n  // so when you query col.find({ a: { foo: 1, bar: 2 } })\n  // it doesn't mean you are looking for anything that has 'a.foo' to be 1 and\n  // 'a.bar' to be 2, instead you are looking for 'a' to be exatly that object\n  // with exatly that order of keys. { a: { foo: 1, bar: 2, baz: 3 } } wouldn't\n  // match it. That's why in this selector 'a' would be important key, not a.foo\n  // and a.bar.\n\n  testSelectorPaths({\n    a: {\n      foo: 1,\n      bar: 2\n    },\n    'b.c': {\n      literal: 'object',\n      but: \"we still observe any changes in 'b.c'\"\n    }\n  }, ['a', 'b.c'], 'literal object'); // Note that a and b do NOT end up in the path list, but x and y both do.\n\n  testSelectorPaths({\n    $or: [{\n      x: {\n        $elemMatch: {\n          a: 5\n        }\n      }\n    }, {\n      y: {\n        $elemMatch: {\n          b: 7\n        }\n      }\n    }]\n  }, ['x', 'y'], '$or and elemMatch');\n\n  function testSelectorAffectedByModifier(sel, mod, yes, desc) {\n    var matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher.affectedByModifier(mod), yes, desc);\n  }\n\n  function affected(sel, mod, desc) {\n    testSelectorAffectedByModifier(sel, mod, true, desc);\n  }\n\n  function notAffected(sel, mod, desc) {\n    testSelectorAffectedByModifier(sel, mod, false, desc);\n  }\n\n  notAffected({\n    foo: 0\n  }, {\n    $set: {\n      bar: 1\n    }\n  }, 'simplest');\n  affected({\n    foo: 0\n  }, {\n    $set: {\n      foo: 1\n    }\n  }, 'simplest');\n  affected({\n    foo: 0\n  }, {\n    $set: {\n      'foo.bar': 1\n    }\n  }, 'simplest');\n  notAffected({\n    'foo.bar': 0\n  }, {\n    $set: {\n      'foo.baz': 1\n    }\n  }, 'simplest');\n  affected({\n    'foo.bar': 0\n  }, {\n    $set: {\n      'foo.1': 1\n    }\n  }, 'simplest');\n  affected({\n    'foo.bar': 0\n  }, {\n    $set: {\n      'foo.2.bar': 1\n    }\n  }, 'simplest');\n  notAffected({\n    foo: 0\n  }, {\n    $set: {\n      foobaz: 1\n    }\n  }, 'correct prefix check');\n  notAffected({\n    foobar: 0\n  }, {\n    $unset: {\n      foo: 1\n    }\n  }, 'correct prefix check');\n  notAffected({\n    'foo.bar': 0\n  }, {\n    $unset: {\n      foob: 1\n    }\n  }, 'correct prefix check');\n  notAffected({\n    'foo.Infinity.x': 0\n  }, {\n    $unset: {\n      'foo.x': 1\n    }\n  }, 'we convert integer fields correctly');\n  notAffected({\n    'foo.1e3.x': 0\n  }, {\n    $unset: {\n      'foo.x': 1\n    }\n  }, 'we convert integer fields correctly');\n  affected({\n    'foo.3.bar': 0\n  }, {\n    $set: {\n      'foo.3.bar': 1\n    }\n  }, 'observe for an array element');\n  notAffected({\n    'foo.4.bar.baz': 0\n  }, {\n    $unset: {\n      'foo.3.bar': 1\n    }\n  }, 'delicate work with numeric fields in selector');\n  notAffected({\n    'foo.4.bar.baz': 0\n  }, {\n    $unset: {\n      'foo.bar': 1\n    }\n  }, 'delicate work with numeric fields in selector');\n  affected({\n    'foo.4.bar.baz': 0\n  }, {\n    $unset: {\n      'foo.4.bar': 1\n    }\n  }, 'delicate work with numeric fields in selector');\n  affected({\n    'foo.bar.baz': 0\n  }, {\n    $unset: {\n      'foo.3.bar': 1\n    }\n  }, 'delicate work with numeric fields in selector');\n  affected({\n    'foo.0.bar': 0\n  }, {\n    $set: {\n      'foo.0.0.bar': 1\n    }\n  }, 'delicate work with nested arrays and selectors by indecies');\n  affected({\n    foo: {\n      $elemMatch: {\n        bar: 5\n      }\n    }\n  }, {\n    $set: {\n      'foo.4.bar': 5\n    }\n  }, '$elemMatch');\n});\nTinytest.add('minimongo - selector and projection combination', function (test) {\n  function testSelProjectionComb(sel, proj, expected, desc) {\n    var matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher.combineIntoProjection(proj), expected, desc);\n  } // Test with inclusive projection\n\n\n  testSelProjectionComb({\n    a: 1,\n    b: 2\n  }, {\n    b: 1,\n    c: 1,\n    d: 1\n  }, {\n    a: true,\n    b: true,\n    c: true,\n    d: true\n  }, 'simplest incl');\n  testSelProjectionComb({\n    $or: [{\n      a: 1234,\n      e: {\n        $lt: 5\n      }\n    }],\n    b: 2\n  }, {\n    b: 1,\n    c: 1,\n    d: 1\n  }, {\n    a: true,\n    b: true,\n    c: true,\n    d: true,\n    e: true\n  }, 'simplest incl, branching');\n  testSelProjectionComb({\n    'a.b': {\n      $lt: 3\n    },\n    'y.0': -1,\n    'a.c': 15\n  }, {\n    d: 1,\n    z: 1\n  }, {\n    'a.b': true,\n    y: true,\n    'a.c': true,\n    d: true,\n    z: true\n  }, 'multikey paths in selector - incl');\n  testSelProjectionComb({\n    foo: 1234,\n    $and: [{\n      k: -1\n    }, {\n      $or: [{\n        b: 15\n      }]\n    }]\n  }, {\n    'foo.bar': 1,\n    'foo.zzz': 1,\n    'b.asdf': 1\n  }, {\n    foo: true,\n    b: true,\n    k: true\n  }, 'multikey paths in fields - incl');\n  testSelProjectionComb({\n    'a.b.c': 123,\n    'a.b.d': 321,\n    'b.c.0': 111,\n    'a.e': 12345\n  }, {\n    'a.b.z': 1,\n    'a.b.d.g': 1,\n    'c.c.c': 1\n  }, {\n    'a.b.c': true,\n    'a.b.d': true,\n    'a.b.z': true,\n    'b.c': true,\n    'a.e': true,\n    'c.c.c': true\n  }, 'multikey both paths - incl');\n  testSelProjectionComb({\n    'a.b.c.d': 123,\n    'a.b1.c.d': 421,\n    'a.b.c.e': 111\n  }, {\n    'a.b': 1\n  }, {\n    'a.b': true,\n    'a.b1.c.d': true\n  }, 'shadowing one another - incl');\n  testSelProjectionComb({\n    'a.b': 123,\n    'foo.bar': false\n  }, {\n    'a.b.c.d': 1,\n    foo: 1\n  }, {\n    'a.b': true,\n    foo: true\n  }, 'shadowing one another - incl');\n  testSelProjectionComb({\n    'a.b.c': 1\n  }, {\n    'a.b.c': 1\n  }, {\n    'a.b.c': true\n  }, 'same paths - incl');\n  testSelProjectionComb({\n    'x.4.y': 42,\n    'z.0.1': 33\n  }, {\n    'x.x': 1\n  }, {\n    'x.x': true,\n    'x.y': true,\n    z: true\n  }, 'numbered keys in selector - incl');\n  testSelProjectionComb({\n    'a.b.c': 42,\n    $where: function () {\n      return true;\n    }\n  }, {\n    'a.b': 1,\n    'z.z': 1\n  }, {}, '$where in the selector - incl');\n  testSelProjectionComb({\n    $or: [{\n      'a.b.c': 42\n    }, {\n      $where: function () {\n        return true;\n      }\n    }]\n  }, {\n    'a.b': 1,\n    'z.z': 1\n  }, {}, '$where in the selector - incl'); // Test with exclusive projection\n\n  testSelProjectionComb({\n    a: 1,\n    b: 2\n  }, {\n    b: 0,\n    c: 0,\n    d: 0\n  }, {\n    c: false,\n    d: false\n  }, 'simplest excl');\n  testSelProjectionComb({\n    $or: [{\n      a: 1234,\n      e: {\n        $lt: 5\n      }\n    }],\n    b: 2\n  }, {\n    b: 0,\n    c: 0,\n    d: 0\n  }, {\n    c: false,\n    d: false\n  }, 'simplest excl, branching');\n  testSelProjectionComb({\n    'a.b': {\n      $lt: 3\n    },\n    'y.0': -1,\n    'a.c': 15\n  }, {\n    d: 0,\n    z: 0\n  }, {\n    d: false,\n    z: false\n  }, 'multikey paths in selector - excl');\n  testSelProjectionComb({\n    foo: 1234,\n    $and: [{\n      k: -1\n    }, {\n      $or: [{\n        b: 15\n      }]\n    }]\n  }, {\n    'foo.bar': 0,\n    'foo.zzz': 0,\n    'b.asdf': 0\n  }, {}, 'multikey paths in fields - excl');\n  testSelProjectionComb({\n    'a.b.c': 123,\n    'a.b.d': 321,\n    'b.c.0': 111,\n    'a.e': 12345\n  }, {\n    'a.b.z': 0,\n    'a.b.d.g': 0,\n    'c.c.c': 0\n  }, {\n    'a.b.z': false,\n    'c.c.c': false\n  }, 'multikey both paths - excl');\n  testSelProjectionComb({\n    'a.b.c.d': 123,\n    'a.b1.c.d': 421,\n    'a.b.c.e': 111\n  }, {\n    'a.b': 0\n  }, {}, 'shadowing one another - excl');\n  testSelProjectionComb({\n    'a.b': 123,\n    'foo.bar': false\n  }, {\n    'a.b.c.d': 0,\n    foo: 0\n  }, {}, 'shadowing one another - excl');\n  testSelProjectionComb({\n    'a.b.c': 1\n  }, {\n    'a.b.c': 0\n  }, {}, 'same paths - excl');\n  testSelProjectionComb({\n    'a.b': 123,\n    'a.c.d': 222,\n    ddd: 123\n  }, {\n    'a.b': 0,\n    'a.c.e': 0,\n    asdf: 0\n  }, {\n    'a.c.e': false,\n    asdf: false\n  }, 'intercept the selector path - excl');\n  testSelProjectionComb({\n    'a.b.c': 14\n  }, {\n    'a.b.d': 0\n  }, {\n    'a.b.d': false\n  }, 'different branches - excl');\n  testSelProjectionComb({\n    'a.b.c.d': '124',\n    'foo.bar.baz.que': 'some value'\n  }, {\n    'a.b.c.d.e': 0,\n    'foo.bar': 0\n  }, {}, 'excl on incl paths - excl');\n  testSelProjectionComb({\n    'x.4.y': 42,\n    'z.0.1': 33\n  }, {\n    'x.x': 0,\n    'x.y': 0\n  }, {\n    'x.x': false\n  }, 'numbered keys in selector - excl');\n  testSelProjectionComb({\n    'a.b.c': 42,\n    $where: function () {\n      return true;\n    }\n  }, {\n    'a.b': 0,\n    'z.z': 0\n  }, {}, '$where in the selector - excl');\n  testSelProjectionComb({\n    $or: [{\n      'a.b.c': 42\n    }, {\n      $where: function () {\n        return true;\n      }\n    }]\n  }, {\n    'a.b': 0,\n    'z.z': 0\n  }, {}, '$where in the selector - excl');\n});\nTinytest.add('minimongo - sorter and projection combination', function (test) {\n  function testSorterProjectionComb(sortSpec, proj, expected, desc) {\n    var sorter = new Minimongo.Sorter(sortSpec);\n    test.equal(sorter.combineIntoProjection(proj), expected, desc);\n  } // Test with inclusive projection\n\n\n  testSorterProjectionComb({\n    a: 1,\n    b: 1\n  }, {\n    b: 1,\n    c: 1,\n    d: 1\n  }, {\n    a: true,\n    b: true,\n    c: true,\n    d: true\n  }, 'simplest incl');\n  testSorterProjectionComb({\n    a: 1,\n    b: -1\n  }, {\n    b: 1,\n    c: 1,\n    d: 1\n  }, {\n    a: true,\n    b: true,\n    c: true,\n    d: true\n  }, 'simplest incl');\n  testSorterProjectionComb({\n    'a.c': 1\n  }, {\n    b: 1\n  }, {\n    'a.c': true,\n    b: true\n  }, 'dot path incl');\n  testSorterProjectionComb({\n    'a.1.c': 1\n  }, {\n    b: 1\n  }, {\n    'a.c': true,\n    b: true\n  }, 'dot num path incl');\n  testSorterProjectionComb({\n    'a.1.c': 1\n  }, {\n    b: 1,\n    a: 1\n  }, {\n    a: true,\n    b: true\n  }, 'dot num path incl overlap');\n  testSorterProjectionComb({\n    'a.1.c': 1,\n    'a.2.b': -1\n  }, {\n    b: 1\n  }, {\n    'a.c': true,\n    'a.b': true,\n    b: true\n  }, 'dot num path incl');\n  testSorterProjectionComb({\n    'a.1.c': 1,\n    'a.2.b': -1\n  }, {}, {}, 'dot num path with empty incl'); // Test with exclusive projection\n\n  testSorterProjectionComb({\n    a: 1,\n    b: 1\n  }, {\n    b: 0,\n    c: 0,\n    d: 0\n  }, {\n    c: false,\n    d: false\n  }, 'simplest excl');\n  testSorterProjectionComb({\n    a: 1,\n    b: -1\n  }, {\n    b: 0,\n    c: 0,\n    d: 0\n  }, {\n    c: false,\n    d: false\n  }, 'simplest excl');\n  testSorterProjectionComb({\n    'a.c': 1\n  }, {\n    b: 0\n  }, {\n    b: false\n  }, 'dot path excl');\n  testSorterProjectionComb({\n    'a.1.c': 1\n  }, {\n    b: 0\n  }, {\n    b: false\n  }, 'dot num path excl');\n  testSorterProjectionComb({\n    'a.1.c': 1\n  }, {\n    b: 0,\n    a: 0\n  }, {\n    b: false\n  }, 'dot num path excl overlap');\n  testSorterProjectionComb({\n    'a.1.c': 1,\n    'a.2.b': -1\n  }, {\n    b: 0\n  }, {\n    b: false\n  }, 'dot num path excl');\n});\n\n(function () {\n  // TODO: Tests for \"can selector become true by modifier\" are incomplete,\n  // absent or test the functionality of \"not ideal\" implementation (test checks\n  // that certain case always returns true as implementation is incomplete)\n  // - tests with $and/$or/$nor/$not branches (are absent)\n  // - more tests with arrays fields and numeric keys (incomplete and test \"not\n  // ideal\" implementation)\n  // - tests when numeric keys actually mean numeric keys, not array indexes\n  // (are absent)\n  // - tests with $-operators in the selector (are incomplete and test \"not\n  // ideal\" implementation)\n  //  * gives up on $-operators with non-scalar values ({$ne: {x: 1}})\n  //  * analyses $in\n  //  * analyses $nin/$ne\n  //  * analyses $gt, $gte, $lt, $lte\n  //  * gives up on a combination of $gt/$gte/$lt/$lte and $ne/$nin\n  //  * doesn't support $eq properly\n  var test = null; // set this global in the beginning of every test\n  // T - should return true\n  // F - should return false\n\n  var oneTest = function (sel, mod, expected, desc) {\n    var matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher.canBecomeTrueByModifier(mod), expected, desc);\n  };\n\n  function T(sel, mod, desc) {\n    oneTest(sel, mod, true, desc);\n  }\n\n  function F(sel, mod, desc) {\n    oneTest(sel, mod, false, desc);\n  }\n\n  Tinytest.add('minimongo - can selector become true by modifier - literals (structured tests)', function (t) {\n    test = t;\n    var selector = {\n      'a.b.c': 2,\n      'foo.bar': {\n        z: {\n          y: 1\n        }\n      },\n      'foo.baz': [{\n        ans: 42\n      }, 'string', false, undefined],\n      'empty.field': null\n    };\n    T(selector, {\n      $set: {\n        'a.b.c': 2\n      }\n    });\n    F(selector, {\n      $unset: {\n        a: 1\n      }\n    });\n    F(selector, {\n      $unset: {\n        'a.b': 1\n      }\n    });\n    F(selector, {\n      $unset: {\n        'a.b.c': 1\n      }\n    });\n    T(selector, {\n      $set: {\n        'a.b': {\n          c: 2\n        }\n      }\n    });\n    F(selector, {\n      $set: {\n        'a.b': {}\n      }\n    });\n    T(selector, {\n      $set: {\n        'a.b': {\n          c: 2,\n          x: 5\n        }\n      }\n    });\n    F(selector, {\n      $set: {\n        'a.b.c.k': 3\n      }\n    });\n    F(selector, {\n      $set: {\n        'a.b.c.k': {}\n      }\n    });\n    F(selector, {\n      $unset: {\n        foo: 1\n      }\n    });\n    F(selector, {\n      $unset: {\n        'foo.bar': 1\n      }\n    });\n    F(selector, {\n      $unset: {\n        'foo.bar.z': 1\n      }\n    });\n    F(selector, {\n      $unset: {\n        'foo.bar.z.y': 1\n      }\n    });\n    F(selector, {\n      $set: {\n        'foo.bar.x': 1\n      }\n    });\n    F(selector, {\n      $set: {\n        'foo.bar': {}\n      }\n    });\n    F(selector, {\n      $set: {\n        'foo.bar': 3\n      }\n    });\n    T(selector, {\n      $set: {\n        'foo.bar': {\n          z: {\n            y: 1\n          }\n        }\n      }\n    });\n    T(selector, {\n      $set: {\n        'foo.bar.z': {\n          y: 1\n        }\n      }\n    });\n    T(selector, {\n      $set: {\n        'foo.bar.z.y': 1\n      }\n    });\n    F(selector, {\n      $set: {\n        'empty.field': {}\n      }\n    });\n    T(selector, {\n      $set: {\n        empty: {}\n      }\n    });\n    T(selector, {\n      $set: {\n        'empty.field': null\n      }\n    });\n    T(selector, {\n      $set: {\n        'empty.field': undefined\n      }\n    });\n    F(selector, {\n      $set: {\n        'empty.field.a': 3\n      }\n    });\n  });\n  Tinytest.add('minimongo - can selector become true by modifier - literals (adhoc tests)', function (t) {\n    test = t;\n    T({\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, 'simple set scalar');\n    T({\n      x: 'a'\n    }, {\n      $set: {\n        x: 'a'\n      }\n    }, 'simple set scalar');\n    T({\n      x: false\n    }, {\n      $set: {\n        x: false\n      }\n    }, 'simple set scalar');\n    F({\n      x: true\n    }, {\n      $set: {\n        x: false\n      }\n    }, 'simple set scalar');\n    F({\n      x: 2\n    }, {\n      $set: {\n        x: 3\n      }\n    }, 'simple set scalar');\n    F({\n      'foo.bar.baz': 1,\n      x: 1\n    }, {\n      $unset: {\n        'foo.bar.baz': 1\n      },\n      $set: {\n        x: 1\n      }\n    }, 'simple unset of the interesting path');\n    F({\n      'foo.bar.baz': 1,\n      x: 1\n    }, {\n      $unset: {\n        'foo.bar': 1\n      },\n      $set: {\n        x: 1\n      }\n    }, 'simple unset of the interesting path prefix');\n    F({\n      'foo.bar.baz': 1,\n      x: 1\n    }, {\n      $unset: {\n        foo: 1\n      },\n      $set: {\n        x: 1\n      }\n    }, 'simple unset of the interesting path prefix');\n    F({\n      'foo.bar.baz': 1\n    }, {\n      $unset: {\n        'foo.baz': 1\n      }\n    }, 'simple unset of the interesting path prefix');\n    F({\n      'foo.bar.baz': 1\n    }, {\n      $unset: {\n        'foo.bar.bar': 1\n      }\n    }, 'simple unset of the interesting path prefix');\n  });\n  Tinytest.add('minimongo - can selector become true by modifier - regexps', function (t) {\n    test = t; // Regexp\n\n    T({\n      'foo.bar': /^[0-9]+$/i\n    }, {\n      $set: {\n        'foo.bar': '01233'\n      }\n    }, 'set of regexp'); // XXX this test should be False, should be fixed within improved implementation\n\n    T({\n      'foo.bar': /^[0-9]+$/i,\n      x: 1\n    }, {\n      $set: {\n        'foo.bar': '0a1233',\n        x: 1\n      }\n    }, 'set of regexp'); // XXX this test should be False, should be fixed within improved implementation\n\n    T({\n      'foo.bar': /^[0-9]+$/i,\n      x: 1\n    }, {\n      $unset: {\n        'foo.bar': 1\n      },\n      $set: {\n        x: 1\n      }\n    }, 'unset of regexp');\n    T({\n      'foo.bar': /^[0-9]+$/i,\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, \"don't touch regexp\");\n  });\n  Tinytest.add('minimongo - can selector become true by modifier - undefined/null', function (t) {\n    test = t; // Nulls / Undefined\n\n    T({\n      'foo.bar': null\n    }, {\n      $set: {\n        'foo.bar': null\n      }\n    }, 'set of null looking for null');\n    T({\n      'foo.bar': null\n    }, {\n      $set: {\n        'foo.bar': undefined\n      }\n    }, 'set of undefined looking for null');\n    T({\n      'foo.bar': undefined\n    }, {\n      $set: {\n        'foo.bar': null\n      }\n    }, 'set of null looking for undefined');\n    T({\n      'foo.bar': undefined\n    }, {\n      $set: {\n        'foo.bar': undefined\n      }\n    }, 'set of undefined looking for undefined');\n    T({\n      'foo.bar': null\n    }, {\n      $set: {\n        foo: null\n      }\n    }, 'set of null of parent path looking for null');\n    F({\n      'foo.bar': null\n    }, {\n      $set: {\n        'foo.bar.baz': null\n      }\n    }, 'set of null of different path looking for null');\n    T({\n      'foo.bar': null\n    }, {\n      $unset: {\n        foo: 1\n      }\n    }, 'unset the parent');\n    T({\n      'foo.bar': null\n    }, {\n      $unset: {\n        'foo.bar': 1\n      }\n    }, 'unset tracked path');\n    T({\n      'foo.bar': null\n    }, {\n      $set: {\n        foo: 3\n      }\n    }, 'set the parent');\n    T({\n      'foo.bar': null\n    }, {\n      $set: {\n        foo: {\n          baz: 1\n        }\n      }\n    }, 'set the parent');\n  });\n  Tinytest.add('minimongo - can selector become true by modifier - literals with arrays', function (t) {\n    test = t; // These tests are incomplete and in theory they all should return true as we\n    // don't support any case with numeric fields yet.\n\n    T({\n      'a.1.b': 1,\n      x: 1\n    }, {\n      $unset: {\n        'a.1.b': 1\n      },\n      $set: {\n        x: 1\n      }\n    }, \"unset of array element's field with exactly the same index as selector\");\n    F({\n      'a.2.b': 1\n    }, {\n      $unset: {\n        'a.1.b': 1\n      }\n    }, \"unset of array element's field with different index as selector\"); // This is false, because if you are looking for array but in reality it is an\n    // object, it just can't get to true.\n\n    F({\n      'a.2.b': 1\n    }, {\n      $unset: {\n        'a.b': 1\n      }\n    }, 'unset of field while selector is looking for index');\n    T({\n      'foo.bar': null\n    }, {\n      $set: {\n        'foo.1.bar': null\n      }\n    }, \"set array's element's field to null looking for null\");\n    T({\n      'foo.bar': null\n    }, {\n      $set: {\n        'foo.0.bar': 1,\n        'foo.1.bar': null\n      }\n    }, \"set array's element's field to null looking for null\"); // This is false, because there may remain other array elements that match\n    // but we modified this test as we don't support this case yet\n\n    T({\n      'a.b': 1\n    }, {\n      $unset: {\n        'a.1.b': 1\n      }\n    }, \"unset of array element's field\");\n  });\n  Tinytest.add('minimongo - can selector become true by modifier - set an object literal whose fields are selected', function (t) {\n    test = t;\n    T({\n      'a.b.c': 1\n    }, {\n      $set: {\n        'a.b': {\n          c: 1\n        }\n      }\n    }, 'a simple scalar selector and simple set');\n    F({\n      'a.b.c': 1\n    }, {\n      $set: {\n        'a.b': {\n          c: 2\n        }\n      }\n    }, 'a simple scalar selector and simple set to false');\n    F({\n      'a.b.c': 1\n    }, {\n      $set: {\n        'a.b': {\n          d: 1\n        }\n      }\n    }, 'a simple scalar selector and simple set a wrong literal');\n    F({\n      'a.b.c': 1\n    }, {\n      $set: {\n        'a.b': 222\n      }\n    }, 'a simple scalar selector and simple set a wrong type');\n  });\n  Tinytest.add('minimongo - can selector become true by modifier - $-scalar selectors and simple tests', function (t) {\n    test = t;\n    T({\n      'a.b.c': {\n        $lt: 5\n      }\n    }, {\n      $set: {\n        'a.b': {\n          c: 4\n        }\n      }\n    }, 'nested $lt');\n    F({\n      'a.b.c': {\n        $lt: 5\n      }\n    }, {\n      $set: {\n        'a.b': {\n          c: 5\n        }\n      }\n    }, 'nested $lt');\n    F({\n      'a.b.c': {\n        $lt: 5\n      }\n    }, {\n      $set: {\n        'a.b': {\n          c: 6\n        }\n      }\n    }, 'nested $lt');\n    F({\n      'a.b.c': {\n        $lt: 5\n      }\n    }, {\n      $set: {\n        'a.b.d': 7\n      }\n    }, \"nested $lt, the change doesn't matter\");\n    F({\n      'a.b.c': {\n        $lt: 5\n      }\n    }, {\n      $set: {\n        'a.b': {\n          d: 7\n        }\n      }\n    }, 'nested $lt, the key disappears');\n    T({\n      'a.b.c': {\n        $lt: 5\n      }\n    }, {\n      $set: {\n        'a.b': {\n          d: 7,\n          c: -1\n        }\n      }\n    }, 'nested $lt');\n    F({\n      a: {\n        $lt: 10,\n        $gt: 3\n      }\n    }, {\n      $unset: {\n        a: 1\n      }\n    }, 'unset $lt');\n    T({\n      a: {\n        $lt: 10,\n        $gt: 3\n      }\n    }, {\n      $set: {\n        a: 4\n      }\n    }, 'set between x and y');\n    F({\n      a: {\n        $lt: 10,\n        $gt: 3\n      }\n    }, {\n      $set: {\n        a: 3\n      }\n    }, 'set between x and y');\n    F({\n      a: {\n        $lt: 10,\n        $gt: 3\n      }\n    }, {\n      $set: {\n        a: 10\n      }\n    }, 'set between x and y');\n    F({\n      a: {\n        $gt: 10,\n        $lt: 3\n      }\n    }, {\n      $set: {\n        a: 9\n      }\n    }, 'impossible statement');\n    T({\n      a: {\n        $lte: 10,\n        $gte: 3\n      }\n    }, {\n      $set: {\n        a: 3\n      }\n    }, 'set between x and y');\n    T({\n      a: {\n        $lte: 10,\n        $gte: 3\n      }\n    }, {\n      $set: {\n        a: 10\n      }\n    }, 'set between x and y');\n    F({\n      a: {\n        $lte: 10,\n        $gte: 3\n      }\n    }, {\n      $set: {\n        a: -10\n      }\n    }, 'set between x and y');\n    T({\n      a: {\n        $lte: 10,\n        $gte: 3,\n        $gt: 3,\n        $lt: 10\n      }\n    }, {\n      $set: {\n        a: 4\n      }\n    }, 'set between x and y');\n    F({\n      a: {\n        $lte: 10,\n        $gte: 3,\n        $gt: 3,\n        $lt: 10\n      }\n    }, {\n      $set: {\n        a: 3\n      }\n    }, 'set between x and y');\n    F({\n      a: {\n        $lte: 10,\n        $gte: 3,\n        $gt: 3,\n        $lt: 10\n      }\n    }, {\n      $set: {\n        a: 10\n      }\n    }, 'set between x and y');\n    F({\n      a: {\n        $lte: 10,\n        $gte: 3,\n        $gt: 3,\n        $lt: 10\n      }\n    }, {\n      $set: {\n        a: Infinity\n      }\n    }, 'set between x and y');\n    T({\n      a: {\n        $lte: 10,\n        $gte: 3,\n        $gt: 3,\n        $lt: 10\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, 'set between x and y - dummy');\n    F({\n      a: {\n        $lte: 10,\n        $gte: 13,\n        $gt: 3,\n        $lt: 9\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, 'set between x and y - dummy - impossible');\n    F({\n      a: {\n        $lte: 10\n      }\n    }, {\n      $set: {\n        a: Infinity\n      }\n    }, 'Infinity <= 10?');\n    T({\n      a: {\n        $lte: 10\n      }\n    }, {\n      $set: {\n        a: -Infinity\n      }\n    }, '-Infinity <= 10?'); // XXX is this sufficient?\n\n    T({\n      a: {\n        $gt: 9.99999999999999,\n        $lt: 10\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, 'very close $gt and $lt'); // XXX this test should be F, but since it is so hard to be precise in\n    // floating point math, the current implementation falls back to T\n\n    T({\n      a: {\n        $gt: 9.999999999999999,\n        $lt: 10\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, 'very close $gt and $lt');\n    T({\n      a: {\n        $eq: 5\n      }\n    }, {\n      $set: {\n        a: 5\n      }\n    }, 'set of $eq');\n    T({\n      a: {\n        $eq: 5\n      },\n      b: {\n        $eq: 7\n      }\n    }, {\n      $set: {\n        a: 5\n      }\n    }, 'set of $eq with other $eq');\n    F({\n      a: {\n        $eq: 5\n      }\n    }, {\n      $set: {\n        a: 4\n      }\n    }, 'set below of $eq');\n    F({\n      a: {\n        $eq: 5\n      }\n    }, {\n      $set: {\n        a: 6\n      }\n    }, 'set above of $eq');\n    T({\n      a: {\n        $ne: 5\n      }\n    }, {\n      $unset: {\n        a: 1\n      }\n    }, 'unset of $ne');\n    T({\n      a: {\n        $ne: 5\n      }\n    }, {\n      $set: {\n        a: 1\n      }\n    }, 'set of $ne');\n    T({\n      a: {\n        $ne: 'some string'\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, '$ne dummy');\n    T({\n      a: {\n        $ne: true\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, '$ne dummy');\n    T({\n      a: {\n        $ne: false\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, '$ne dummy');\n    T({\n      a: {\n        $ne: null\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, '$ne dummy');\n    T({\n      a: {\n        $ne: Infinity\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, '$ne dummy');\n    T({\n      a: {\n        $ne: 5\n      }\n    }, {\n      $set: {\n        a: -10\n      }\n    }, 'set of $ne');\n    T({\n      a: {\n        $in: [1, 3, 5, 7]\n      }\n    }, {\n      $set: {\n        a: 5\n      }\n    }, '$in checks');\n    F({\n      a: {\n        $in: [1, 3, 5, 7]\n      }\n    }, {\n      $set: {\n        a: -5\n      }\n    }, '$in checks');\n    T({\n      a: {\n        $in: [1, 3, 5, 7],\n        $gt: 6\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, '$in combination with $gt');\n    F({\n      a: {\n        $lte: 10,\n        $gte: 3\n      }\n    }, {\n      $set: {\n        'a.b': -10\n      }\n    }, 'sel between x and y, set its subfield');\n    F({\n      b: {\n        $in: [1, 3, 5, 7]\n      }\n    }, {\n      $set: {\n        'b.c': 2\n      }\n    }, 'sel $in, set subfield');\n    T({\n      b: {\n        $in: [1, 3, 5, 7]\n      }\n    }, {\n      $set: {\n        'bd.c': 2,\n        b: 3\n      }\n    }, 'sel $in, set similar subfield');\n    F({\n      'b.c': {\n        $in: [1, 3, 5, 7]\n      }\n    }, {\n      $set: {\n        b: 2\n      }\n    }, 'sel subfield of set scalar'); // If modifier tries to set a sub-field of a path expected to be a scalar.\n\n    F({\n      'a.b': {\n        $gt: 5,\n        $lt: 7\n      },\n      x: 1\n    }, {\n      $set: {\n        'a.b.c': 3,\n        x: 1\n      }\n    }, 'set sub-field of $gt,$lt operator (scalar expected)');\n    F({\n      'a.b': {\n        $gt: 5,\n        $lt: 7\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      },\n      $unset: {\n        'a.b.c': 1\n      }\n    }, 'unset sub-field of $gt,$lt operator (scalar expected)');\n  });\n  Tinytest.add('minimongo - can selector become true by modifier - $-nonscalar selectors and simple tests', function (t) {\n    test = t;\n    T({\n      a: {\n        $eq: {\n          x: 5\n        }\n      }\n    }, {\n      $set: {\n        'a.x': 5\n      }\n    }, 'set of $eq'); // XXX this test should be F, but it is not implemented yet\n\n    T({\n      a: {\n        $eq: {\n          x: 5\n        }\n      }\n    }, {\n      $set: {\n        'a.x': 4\n      }\n    }, 'set of $eq'); // XXX this test should be F, but it is not implemented yet\n\n    T({\n      a: {\n        $eq: {\n          x: 5\n        }\n      }\n    }, {\n      $set: {\n        'a.y': 4\n      }\n    }, 'set of $eq');\n    T({\n      a: {\n        $ne: {\n          x: 5\n        }\n      }\n    }, {\n      $set: {\n        'a.x': 3\n      }\n    }, 'set of $ne'); // XXX this test should be F, but it is not implemented yet\n\n    T({\n      a: {\n        $ne: {\n          x: 5\n        }\n      }\n    }, {\n      $set: {\n        'a.x': 5\n      }\n    }, 'set of $ne');\n    T({\n      a: {\n        $in: [{\n          b: 1\n        }, {\n          b: 3\n        }]\n      }\n    }, {\n      $set: {\n        a: {\n          b: 3\n        }\n      }\n    }, '$in checks'); // XXX this test should be F, but it is not implemented yet\n\n    T({\n      a: {\n        $in: [{\n          b: 1\n        }, {\n          b: 3\n        }]\n      }\n    }, {\n      $set: {\n        a: {\n          v: 3\n        }\n      }\n    }, '$in checks');\n    T({\n      a: {\n        $ne: {\n          a: 2\n        }\n      },\n      x: 1\n    }, {\n      $set: {\n        x: 1\n      }\n    }, '$ne dummy'); // XXX this test should be F, but it is not implemented yet\n\n    T({\n      a: {\n        $ne: {\n          a: 2\n        }\n      }\n    }, {\n      $set: {\n        a: {\n          a: 2\n        }\n      }\n    }, '$ne object');\n  });\n})();","map":{"version":3,"sources":["packages/minimongo/minimongo_tests_server.js"],"names":["Tinytest","add","testSelectorPaths","sel","paths","desc","matcher","Minimongo","Matcher","test","equal","_getPaths","foo","bar","baz","a","$lt","b","$not","$regex","$or","$and","$ne","$gte","literal","but","x","$elemMatch","y","testSelectorAffectedByModifier","mod","yes","affectedByModifier","affected","notAffected","$set","foobaz","foobar","$unset","foob","testSelProjectionComb","proj","expected","combineIntoProjection","c","d","e","z","k","$where","ddd","asdf","testSorterProjectionComb","sortSpec","sorter","Sorter","oneTest","canBecomeTrueByModifier","T","F","t","selector","ans","undefined","empty","$gt","$lte","Infinity","$eq","$in","v"],"mappings":"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","sourcesContent":["Tinytest.add('minimongo - modifier affects selector', test => {\n  function testSelectorPaths(sel, paths, desc) {\n    const matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher._getPaths(), paths, desc);\n  }\n\n  testSelectorPaths({\n    foo: {\n      bar: 3,\n      baz: 42,\n    },\n  }, ['foo'], 'literal');\n\n  testSelectorPaths({\n    foo: 42,\n    bar: 33,\n  }, ['foo', 'bar'], 'literal');\n\n  testSelectorPaths({\n    foo: [ 'something' ],\n    bar: 'asdf',\n  }, ['foo', 'bar'], 'literal');\n\n  testSelectorPaths({\n    a: { $lt: 3 },\n    b: 'you know, literal',\n    'path.is.complicated': { $not: { $regex: 'acme.*corp' } },\n  }, ['a', 'b', 'path.is.complicated'], 'literal + operators');\n\n  testSelectorPaths({\n    $or: [{ 'a.b': 1 }, { 'a.b.c': { $lt: 22 } },\n      {$and: [{ 'x.d': { $ne: 5, $gte: 433 } }, { 'a.b': 234 }]}],\n  }, ['a.b', 'a.b.c', 'x.d'], 'group operators + duplicates');\n\n  // When top-level value is an object, it is treated as a literal,\n  // so when you query col.find({ a: { foo: 1, bar: 2 } })\n  // it doesn't mean you are looking for anything that has 'a.foo' to be 1 and\n  // 'a.bar' to be 2, instead you are looking for 'a' to be exatly that object\n  // with exatly that order of keys. { a: { foo: 1, bar: 2, baz: 3 } } wouldn't\n  // match it. That's why in this selector 'a' would be important key, not a.foo\n  // and a.bar.\n  testSelectorPaths({\n    a: {\n      foo: 1,\n      bar: 2,\n    },\n    'b.c': {\n      literal: 'object',\n      but: \"we still observe any changes in 'b.c'\",\n    },\n  }, ['a', 'b.c'], 'literal object');\n\n  // Note that a and b do NOT end up in the path list, but x and y both do.\n  testSelectorPaths({\n    $or: [\n      {x: {$elemMatch: {a: 5}}},\n      {y: {$elemMatch: {b: 7}}},\n    ],\n  }, ['x', 'y'], '$or and elemMatch');\n\n  function testSelectorAffectedByModifier(sel, mod, yes, desc) {\n    const matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher.affectedByModifier(mod), yes, desc);\n  }\n\n  function affected(sel, mod, desc) {\n    testSelectorAffectedByModifier(sel, mod, true, desc);\n  }\n  function notAffected(sel, mod, desc) {\n    testSelectorAffectedByModifier(sel, mod, false, desc);\n  }\n\n  notAffected({ foo: 0 }, { $set: { bar: 1 } }, 'simplest');\n  affected({ foo: 0 }, { $set: { foo: 1 } }, 'simplest');\n  affected({ foo: 0 }, { $set: { 'foo.bar': 1 } }, 'simplest');\n  notAffected({ 'foo.bar': 0 }, { $set: { 'foo.baz': 1 } }, 'simplest');\n  affected({ 'foo.bar': 0 }, { $set: { 'foo.1': 1 } }, 'simplest');\n  affected({ 'foo.bar': 0 }, { $set: { 'foo.2.bar': 1 } }, 'simplest');\n\n  notAffected({ foo: 0 }, { $set: { foobaz: 1 } }, 'correct prefix check');\n  notAffected({ foobar: 0 }, { $unset: { foo: 1 } }, 'correct prefix check');\n  notAffected({ 'foo.bar': 0 }, { $unset: { foob: 1 } }, 'correct prefix check');\n\n  notAffected({ 'foo.Infinity.x': 0 }, { $unset: { 'foo.x': 1 } }, 'we convert integer fields correctly');\n  notAffected({ 'foo.1e3.x': 0 }, { $unset: { 'foo.x': 1 } }, 'we convert integer fields correctly');\n\n  affected({ 'foo.3.bar': 0 }, { $set: { 'foo.3.bar': 1 } }, 'observe for an array element');\n\n  notAffected({ 'foo.4.bar.baz': 0 }, { $unset: { 'foo.3.bar': 1 } }, 'delicate work with numeric fields in selector');\n  notAffected({ 'foo.4.bar.baz': 0 }, { $unset: { 'foo.bar': 1 } }, 'delicate work with numeric fields in selector');\n  affected({ 'foo.4.bar.baz': 0 }, { $unset: { 'foo.4.bar': 1 } }, 'delicate work with numeric fields in selector');\n  affected({ 'foo.bar.baz': 0 }, { $unset: { 'foo.3.bar': 1 } }, 'delicate work with numeric fields in selector');\n\n  affected({ 'foo.0.bar': 0 }, { $set: { 'foo.0.0.bar': 1 } }, 'delicate work with nested arrays and selectors by indecies');\n\n  affected({foo: {$elemMatch: {bar: 5}}}, {$set: {'foo.4.bar': 5}}, '$elemMatch');\n});\n\nTinytest.add('minimongo - selector and projection combination', test => {\n  function testSelProjectionComb(sel, proj, expected, desc) {\n    const matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher.combineIntoProjection(proj), expected, desc);\n  }\n\n  // Test with inclusive projection\n  testSelProjectionComb({ a: 1, b: 2 }, { b: 1, c: 1, d: 1 }, { a: true, b: true, c: true, d: true }, 'simplest incl');\n  testSelProjectionComb({ $or: [{ a: 1234, e: {$lt: 5} }], b: 2 }, { b: 1, c: 1, d: 1 }, { a: true, b: true, c: true, d: true, e: true }, 'simplest incl, branching');\n  testSelProjectionComb({\n    'a.b': { $lt: 3 },\n    'y.0': -1,\n    'a.c': 15,\n  }, {\n    d: 1,\n    z: 1,\n  }, {\n    'a.b': true,\n    y: true,\n    'a.c': true,\n    d: true,\n    z: true,\n  }, 'multikey paths in selector - incl');\n\n  testSelProjectionComb({\n    foo: 1234,\n    $and: [{ k: -1 }, { $or: [{ b: 15 }] }],\n  }, {\n    'foo.bar': 1,\n    'foo.zzz': 1,\n    'b.asdf': 1,\n  }, {\n    foo: true,\n    b: true,\n    k: true,\n  }, 'multikey paths in fields - incl');\n\n  testSelProjectionComb({\n    'a.b.c': 123,\n    'a.b.d': 321,\n    'b.c.0': 111,\n    'a.e': 12345,\n  }, {\n    'a.b.z': 1,\n    'a.b.d.g': 1,\n    'c.c.c': 1,\n  }, {\n    'a.b.c': true,\n    'a.b.d': true,\n    'a.b.z': true,\n    'b.c': true,\n    'a.e': true,\n    'c.c.c': true,\n  }, 'multikey both paths - incl');\n\n  testSelProjectionComb({\n    'a.b.c.d': 123,\n    'a.b1.c.d': 421,\n    'a.b.c.e': 111,\n  }, {\n    'a.b': 1,\n  }, {\n    'a.b': true,\n    'a.b1.c.d': true,\n  }, 'shadowing one another - incl');\n\n  testSelProjectionComb({\n    'a.b': 123,\n    'foo.bar': false,\n  }, {\n    'a.b.c.d': 1,\n    foo: 1,\n  }, {\n    'a.b': true,\n    foo: true,\n  }, 'shadowing one another - incl');\n\n  testSelProjectionComb({\n    'a.b.c': 1,\n  }, {\n    'a.b.c': 1,\n  }, {\n    'a.b.c': true,\n  }, 'same paths - incl');\n\n  testSelProjectionComb({\n    'x.4.y': 42,\n    'z.0.1': 33,\n  }, {\n    'x.x': 1,\n  }, {\n    'x.x': true,\n    'x.y': true,\n    z: true,\n  }, 'numbered keys in selector - incl');\n\n  testSelProjectionComb({\n    'a.b.c': 42,\n    $where() { return true; },\n  }, {\n    'a.b': 1,\n    'z.z': 1,\n  }, {}, '$where in the selector - incl');\n\n  testSelProjectionComb({\n    $or: [\n      {'a.b.c': 42},\n      {$where() { return true; } },\n    ],\n  }, {\n    'a.b': 1,\n    'z.z': 1,\n  }, {}, '$where in the selector - incl');\n\n  // Test with exclusive projection\n  testSelProjectionComb({ a: 1, b: 2 }, { b: 0, c: 0, d: 0 }, { c: false, d: false }, 'simplest excl');\n  testSelProjectionComb({ $or: [{ a: 1234, e: {$lt: 5} }], b: 2 }, { b: 0, c: 0, d: 0 }, { c: false, d: false }, 'simplest excl, branching');\n  testSelProjectionComb({\n    'a.b': { $lt: 3 },\n    'y.0': -1,\n    'a.c': 15,\n  }, {\n    d: 0,\n    z: 0,\n  }, {\n    d: false,\n    z: false,\n  }, 'multikey paths in selector - excl');\n\n  testSelProjectionComb({\n    foo: 1234,\n    $and: [{ k: -1 }, { $or: [{ b: 15 }] }],\n  }, {\n    'foo.bar': 0,\n    'foo.zzz': 0,\n    'b.asdf': 0,\n  }, {\n  }, 'multikey paths in fields - excl');\n\n  testSelProjectionComb({\n    'a.b.c': 123,\n    'a.b.d': 321,\n    'b.c.0': 111,\n    'a.e': 12345,\n  }, {\n    'a.b.z': 0,\n    'a.b.d.g': 0,\n    'c.c.c': 0,\n  }, {\n    'a.b.z': false,\n    'c.c.c': false,\n  }, 'multikey both paths - excl');\n\n  testSelProjectionComb({\n    'a.b.c.d': 123,\n    'a.b1.c.d': 421,\n    'a.b.c.e': 111,\n  }, {\n    'a.b': 0,\n  }, {\n  }, 'shadowing one another - excl');\n\n  testSelProjectionComb({\n    'a.b': 123,\n    'foo.bar': false,\n  }, {\n    'a.b.c.d': 0,\n    foo: 0,\n  }, {\n  }, 'shadowing one another - excl');\n\n  testSelProjectionComb({\n    'a.b.c': 1,\n  }, {\n    'a.b.c': 0,\n  }, {\n  }, 'same paths - excl');\n\n  testSelProjectionComb({\n    'a.b': 123,\n    'a.c.d': 222,\n    ddd: 123,\n  }, {\n    'a.b': 0,\n    'a.c.e': 0,\n    asdf: 0,\n  }, {\n    'a.c.e': false,\n    asdf: false,\n  }, 'intercept the selector path - excl');\n\n  testSelProjectionComb({\n    'a.b.c': 14,\n  }, {\n    'a.b.d': 0,\n  }, {\n    'a.b.d': false,\n  }, 'different branches - excl');\n\n  testSelProjectionComb({\n    'a.b.c.d': '124',\n    'foo.bar.baz.que': 'some value',\n  }, {\n    'a.b.c.d.e': 0,\n    'foo.bar': 0,\n  }, {\n  }, 'excl on incl paths - excl');\n\n  testSelProjectionComb({\n    'x.4.y': 42,\n    'z.0.1': 33,\n  }, {\n    'x.x': 0,\n    'x.y': 0,\n  }, {\n    'x.x': false,\n  }, 'numbered keys in selector - excl');\n\n  testSelProjectionComb({\n    'a.b.c': 42,\n    $where() { return true; },\n  }, {\n    'a.b': 0,\n    'z.z': 0,\n  }, {}, '$where in the selector - excl');\n\n  testSelProjectionComb({\n    $or: [\n      {'a.b.c': 42},\n      {$where() { return true; } },\n    ],\n  }, {\n    'a.b': 0,\n    'z.z': 0,\n  }, {}, '$where in the selector - excl');\n});\n\nTinytest.add('minimongo - sorter and projection combination', test => {\n  function testSorterProjectionComb(sortSpec, proj, expected, desc) {\n    const sorter = new Minimongo.Sorter(sortSpec);\n    test.equal(sorter.combineIntoProjection(proj), expected, desc);\n  }\n\n  // Test with inclusive projection\n  testSorterProjectionComb({ a: 1, b: 1 }, { b: 1, c: 1, d: 1 }, { a: true, b: true, c: true, d: true }, 'simplest incl');\n  testSorterProjectionComb({ a: 1, b: -1 }, { b: 1, c: 1, d: 1 }, { a: true, b: true, c: true, d: true }, 'simplest incl');\n  testSorterProjectionComb({ 'a.c': 1 }, { b: 1 }, { 'a.c': true, b: true }, 'dot path incl');\n  testSorterProjectionComb({ 'a.1.c': 1 }, { b: 1 }, { 'a.c': true, b: true }, 'dot num path incl');\n  testSorterProjectionComb({ 'a.1.c': 1 }, { b: 1, a: 1 }, { a: true, b: true }, 'dot num path incl overlap');\n  testSorterProjectionComb({ 'a.1.c': 1, 'a.2.b': -1 }, { b: 1 }, { 'a.c': true, 'a.b': true, b: true }, 'dot num path incl');\n  testSorterProjectionComb({ 'a.1.c': 1, 'a.2.b': -1 }, {}, {}, 'dot num path with empty incl');\n\n  // Test with exclusive projection\n  testSorterProjectionComb({ a: 1, b: 1 }, { b: 0, c: 0, d: 0 }, { c: false, d: false }, 'simplest excl');\n  testSorterProjectionComb({ a: 1, b: -1 }, { b: 0, c: 0, d: 0 }, { c: false, d: false }, 'simplest excl');\n  testSorterProjectionComb({ 'a.c': 1 }, { b: 0 }, { b: false }, 'dot path excl');\n  testSorterProjectionComb({ 'a.1.c': 1 }, { b: 0 }, { b: false }, 'dot num path excl');\n  testSorterProjectionComb({ 'a.1.c': 1 }, { b: 0, a: 0 }, { b: false }, 'dot num path excl overlap');\n  testSorterProjectionComb({ 'a.1.c': 1, 'a.2.b': -1 }, { b: 0 }, { b: false }, 'dot num path excl');\n});\n\n\n((() => {\n  // TODO: Tests for \"can selector become true by modifier\" are incomplete,\n  // absent or test the functionality of \"not ideal\" implementation (test checks\n  // that certain case always returns true as implementation is incomplete)\n  // - tests with $and/$or/$nor/$not branches (are absent)\n  // - more tests with arrays fields and numeric keys (incomplete and test \"not\n  // ideal\" implementation)\n  // - tests when numeric keys actually mean numeric keys, not array indexes\n  // (are absent)\n  // - tests with $-operators in the selector (are incomplete and test \"not\n  // ideal\" implementation)\n  //  * gives up on $-operators with non-scalar values ({$ne: {x: 1}})\n  //  * analyses $in\n  //  * analyses $nin/$ne\n  //  * analyses $gt, $gte, $lt, $lte\n  //  * gives up on a combination of $gt/$gte/$lt/$lte and $ne/$nin\n  //  * doesn't support $eq properly\n\n  let test = null; // set this global in the beginning of every test\n  // T - should return true\n  // F - should return false\n  const oneTest = (sel, mod, expected, desc) => {\n    const matcher = new Minimongo.Matcher(sel);\n    test.equal(matcher.canBecomeTrueByModifier(mod), expected, desc);\n  };\n  function T(sel, mod, desc) {\n    oneTest(sel, mod, true, desc);\n  }\n  function F(sel, mod, desc) {\n    oneTest(sel, mod, false, desc);\n  }\n\n  Tinytest.add('minimongo - can selector become true by modifier - literals (structured tests)', t => {\n    test = t;\n\n    const selector = {\n      'a.b.c': 2,\n      'foo.bar': {\n        z: { y: 1 },\n      },\n      'foo.baz': [ {ans: 42}, 'string', false, undefined ],\n      'empty.field': null,\n    };\n\n    T(selector, {$set: { 'a.b.c': 2 }});\n    F(selector, {$unset: { a: 1 }});\n    F(selector, {$unset: { 'a.b': 1 }});\n    F(selector, {$unset: { 'a.b.c': 1 }});\n    T(selector, {$set: { 'a.b': { c: 2 } }});\n    F(selector, {$set: { 'a.b': {} }});\n    T(selector, {$set: { 'a.b': { c: 2, x: 5 } }});\n    F(selector, {$set: { 'a.b.c.k': 3 }});\n    F(selector, {$set: { 'a.b.c.k': {} }});\n\n    F(selector, {$unset: { foo: 1 }});\n    F(selector, {$unset: { 'foo.bar': 1 }});\n    F(selector, {$unset: { 'foo.bar.z': 1 }});\n    F(selector, {$unset: { 'foo.bar.z.y': 1 }});\n    F(selector, {$set: { 'foo.bar.x': 1 }});\n    F(selector, {$set: { 'foo.bar': {} }});\n    F(selector, {$set: { 'foo.bar': 3 }});\n    T(selector, {$set: { 'foo.bar': { z: { y: 1 } } }});\n    T(selector, {$set: { 'foo.bar.z': { y: 1 } }});\n    T(selector, {$set: { 'foo.bar.z.y': 1 }});\n\n    F(selector, {$set: { 'empty.field': {} }});\n    T(selector, {$set: { empty: {} }});\n    T(selector, {$set: { 'empty.field': null }});\n    T(selector, {$set: { 'empty.field': undefined }});\n    F(selector, {$set: { 'empty.field.a': 3 }});\n  });\n\n  Tinytest.add('minimongo - can selector become true by modifier - literals (adhoc tests)', t => {\n    test = t;\n    T({x: 1}, {$set: {x: 1}}, 'simple set scalar');\n    T({x: 'a'}, {$set: {x: 'a'}}, 'simple set scalar');\n    T({x: false}, {$set: {x: false}}, 'simple set scalar');\n    F({x: true}, {$set: {x: false}}, 'simple set scalar');\n    F({x: 2}, {$set: {x: 3}}, 'simple set scalar');\n\n    F({'foo.bar.baz': 1, x: 1}, {$unset: {'foo.bar.baz': 1}, $set: {x: 1}}, 'simple unset of the interesting path');\n    F({'foo.bar.baz': 1, x: 1}, {$unset: {'foo.bar': 1}, $set: {x: 1}}, 'simple unset of the interesting path prefix');\n    F({'foo.bar.baz': 1, x: 1}, {$unset: {foo: 1}, $set: {x: 1}}, 'simple unset of the interesting path prefix');\n    F({'foo.bar.baz': 1}, {$unset: {'foo.baz': 1}}, 'simple unset of the interesting path prefix');\n    F({'foo.bar.baz': 1}, {$unset: {'foo.bar.bar': 1}}, 'simple unset of the interesting path prefix');\n  });\n\n  Tinytest.add('minimongo - can selector become true by modifier - regexps', t => {\n    test = t;\n\n    // Regexp\n    T({ 'foo.bar': /^[0-9]+$/i }, { $set: {'foo.bar': '01233'} }, 'set of regexp');\n    // XXX this test should be False, should be fixed within improved implementation\n    T({ 'foo.bar': /^[0-9]+$/i, x: 1 }, { $set: {'foo.bar': '0a1233', x: 1} }, 'set of regexp');\n    // XXX this test should be False, should be fixed within improved implementation\n    T({ 'foo.bar': /^[0-9]+$/i, x: 1 }, { $unset: {'foo.bar': 1}, $set: { x: 1 } }, 'unset of regexp');\n    T({ 'foo.bar': /^[0-9]+$/i, x: 1 }, { $set: { x: 1 } }, \"don't touch regexp\");\n  });\n\n  Tinytest.add('minimongo - can selector become true by modifier - undefined/null', t => {\n    test = t;\n    // Nulls / Undefined\n    T({ 'foo.bar': null }, {$set: {'foo.bar': null}}, 'set of null looking for null');\n    T({ 'foo.bar': null }, {$set: {'foo.bar': undefined}}, 'set of undefined looking for null');\n    T({ 'foo.bar': undefined }, {$set: {'foo.bar': null}}, 'set of null looking for undefined');\n    T({ 'foo.bar': undefined }, {$set: {'foo.bar': undefined}}, 'set of undefined looking for undefined');\n    T({ 'foo.bar': null }, {$set: {foo: null}}, 'set of null of parent path looking for null');\n    F({ 'foo.bar': null }, {$set: {'foo.bar.baz': null}}, 'set of null of different path looking for null');\n    T({ 'foo.bar': null }, { $unset: { foo: 1 } }, 'unset the parent');\n    T({ 'foo.bar': null }, { $unset: { 'foo.bar': 1 } }, 'unset tracked path');\n    T({ 'foo.bar': null }, { $set: { foo: 3 } }, 'set the parent');\n    T({ 'foo.bar': null }, { $set: { foo: {baz: 1} } }, 'set the parent');\n  });\n\n  Tinytest.add('minimongo - can selector become true by modifier - literals with arrays', t => {\n    test = t;\n    // These tests are incomplete and in theory they all should return true as we\n    // don't support any case with numeric fields yet.\n    T({'a.1.b': 1, x: 1}, {$unset: {'a.1.b': 1}, $set: {x: 1}}, \"unset of array element's field with exactly the same index as selector\");\n    F({'a.2.b': 1}, {$unset: {'a.1.b': 1}}, \"unset of array element's field with different index as selector\");\n    // This is false, because if you are looking for array but in reality it is an\n    // object, it just can't get to true.\n    F({'a.2.b': 1}, {$unset: {'a.b': 1}}, 'unset of field while selector is looking for index');\n    T({ 'foo.bar': null }, {$set: {'foo.1.bar': null}}, \"set array's element's field to null looking for null\");\n    T({ 'foo.bar': null }, {$set: {'foo.0.bar': 1, 'foo.1.bar': null}}, \"set array's element's field to null looking for null\");\n    // This is false, because there may remain other array elements that match\n    // but we modified this test as we don't support this case yet\n    T({'a.b': 1}, {$unset: {'a.1.b': 1}}, \"unset of array element's field\");\n  });\n\n  Tinytest.add('minimongo - can selector become true by modifier - set an object literal whose fields are selected', t => {\n    test = t;\n    T({ 'a.b.c': 1 }, { $set: { 'a.b': { c: 1 } } }, 'a simple scalar selector and simple set');\n    F({ 'a.b.c': 1 }, { $set: { 'a.b': { c: 2 } } }, 'a simple scalar selector and simple set to false');\n    F({ 'a.b.c': 1 }, { $set: { 'a.b': { d: 1 } } }, 'a simple scalar selector and simple set a wrong literal');\n    F({ 'a.b.c': 1 }, { $set: { 'a.b': 222 } }, 'a simple scalar selector and simple set a wrong type');\n  });\n\n  Tinytest.add('minimongo - can selector become true by modifier - $-scalar selectors and simple tests', t => {\n    test = t;\n    T({ 'a.b.c': { $lt: 5 } }, { $set: { 'a.b': { c: 4 } } }, 'nested $lt');\n    F({ 'a.b.c': { $lt: 5 } }, { $set: { 'a.b': { c: 5 } } }, 'nested $lt');\n    F({ 'a.b.c': { $lt: 5 } }, { $set: { 'a.b': { c: 6 } } }, 'nested $lt');\n    F({ 'a.b.c': { $lt: 5 } }, { $set: { 'a.b.d': 7 } }, \"nested $lt, the change doesn't matter\");\n    F({ 'a.b.c': { $lt: 5 } }, { $set: { 'a.b': { d: 7 } } }, 'nested $lt, the key disappears');\n    T({ 'a.b.c': { $lt: 5 } }, { $set: { 'a.b': { d: 7, c: -1 } } }, 'nested $lt');\n    F({ a: { $lt: 10, $gt: 3 } }, { $unset: { a: 1 } }, 'unset $lt');\n    T({ a: { $lt: 10, $gt: 3 } }, { $set: { a: 4 } }, 'set between x and y');\n    F({ a: { $lt: 10, $gt: 3 } }, { $set: { a: 3 } }, 'set between x and y');\n    F({ a: { $lt: 10, $gt: 3 } }, { $set: { a: 10 } }, 'set between x and y');\n    F({ a: { $gt: 10, $lt: 3 } }, { $set: { a: 9 } }, 'impossible statement');\n    T({ a: { $lte: 10, $gte: 3 } }, { $set: { a: 3 } }, 'set between x and y');\n    T({ a: { $lte: 10, $gte: 3 } }, { $set: { a: 10 } }, 'set between x and y');\n    F({ a: { $lte: 10, $gte: 3 } }, { $set: { a: -10 } }, 'set between x and y');\n    T({ a: { $lte: 10, $gte: 3, $gt: 3, $lt: 10 } }, { $set: { a: 4 } }, 'set between x and y');\n    F({ a: { $lte: 10, $gte: 3, $gt: 3, $lt: 10 } }, { $set: { a: 3 } }, 'set between x and y');\n    F({ a: { $lte: 10, $gte: 3, $gt: 3, $lt: 10 } }, { $set: { a: 10 } }, 'set between x and y');\n    F({ a: { $lte: 10, $gte: 3, $gt: 3, $lt: 10 } }, { $set: { a: Infinity } }, 'set between x and y');\n    T({ a: { $lte: 10, $gte: 3, $gt: 3, $lt: 10 }, x: 1 }, { $set: { x: 1 } }, 'set between x and y - dummy');\n    F({ a: { $lte: 10, $gte: 13, $gt: 3, $lt: 9 }, x: 1 }, { $set: { x: 1 } }, 'set between x and y - dummy - impossible');\n    F({ a: { $lte: 10 } }, { $set: { a: Infinity } }, 'Infinity <= 10?');\n    T({ a: { $lte: 10 } }, { $set: { a: -Infinity } }, '-Infinity <= 10?');\n    // XXX is this sufficient?\n    T({ a: { $gt: 9.99999999999999, $lt: 10 }, x: 1 }, { $set: { x: 1 } }, 'very close $gt and $lt');\n    // XXX this test should be F, but since it is so hard to be precise in\n    // floating point math, the current implementation falls back to T\n    T({ a: { $gt: 9.999999999999999, $lt: 10 }, x: 1 }, { $set: { x: 1 } }, 'very close $gt and $lt');\n    T({ a: { $eq: 5 } }, { $set: { a: 5 } }, 'set of $eq');\n    T({ a: { $eq: 5 }, b: { $eq: 7 } }, { $set: { a: 5 } }, 'set of $eq with other $eq');\n    F({ a: { $eq: 5 } }, { $set: { a: 4 } }, 'set below of $eq');\n    F({ a: { $eq: 5 } }, { $set: { a: 6 } }, 'set above of $eq');\n    T({ a: { $ne: 5 } }, { $unset: { a: 1 } }, 'unset of $ne');\n    T({ a: { $ne: 5 } }, { $set: { a: 1 } }, 'set of $ne');\n    T({ a: { $ne: 'some string' }, x: 1 }, { $set: { x: 1 } }, '$ne dummy');\n    T({ a: { $ne: true }, x: 1 }, { $set: { x: 1 } }, '$ne dummy');\n    T({ a: { $ne: false }, x: 1 }, { $set: { x: 1 } }, '$ne dummy');\n    T({ a: { $ne: null }, x: 1 }, { $set: { x: 1 } }, '$ne dummy');\n    T({ a: { $ne: Infinity }, x: 1 }, { $set: { x: 1 } }, '$ne dummy');\n    T({ a: { $ne: 5 } }, { $set: { a: -10 } }, 'set of $ne');\n    T({ a: { $in: [1, 3, 5, 7] } }, { $set: { a: 5 } }, '$in checks');\n    F({ a: { $in: [1, 3, 5, 7] } }, { $set: { a: -5 } }, '$in checks');\n    T({ a: { $in: [1, 3, 5, 7], $gt: 6 }, x: 1 }, { $set: { x: 1 } }, '$in combination with $gt');\n    F({ a: { $lte: 10, $gte: 3 } }, { $set: { 'a.b': -10 } }, 'sel between x and y, set its subfield');\n    F({ b: { $in: [1, 3, 5, 7] } }, { $set: { 'b.c': 2 } }, 'sel $in, set subfield');\n    T({ b: { $in: [1, 3, 5, 7] } }, { $set: { 'bd.c': 2, b: 3 } }, 'sel $in, set similar subfield');\n    F({ 'b.c': { $in: [1, 3, 5, 7] } }, { $set: { b: 2 } }, 'sel subfield of set scalar');\n    // If modifier tries to set a sub-field of a path expected to be a scalar.\n    F({ 'a.b': { $gt: 5, $lt: 7}, x: 1 }, { $set: { 'a.b.c': 3, x: 1 } }, 'set sub-field of $gt,$lt operator (scalar expected)');\n    F({ 'a.b': { $gt: 5, $lt: 7}, x: 1 }, { $set: { x: 1 }, $unset: { 'a.b.c': 1 } }, 'unset sub-field of $gt,$lt operator (scalar expected)');\n  });\n\n  Tinytest.add('minimongo - can selector become true by modifier - $-nonscalar selectors and simple tests', t => {\n    test = t;\n    T({ a: { $eq: { x: 5 } } }, { $set: { 'a.x': 5 } }, 'set of $eq');\n    // XXX this test should be F, but it is not implemented yet\n    T({ a: { $eq: { x: 5 } } }, { $set: { 'a.x': 4 } }, 'set of $eq');\n    // XXX this test should be F, but it is not implemented yet\n    T({ a: { $eq: { x: 5 } } }, { $set: { 'a.y': 4 } }, 'set of $eq');\n    T({ a: { $ne: { x: 5 } } }, { $set: { 'a.x': 3 } }, 'set of $ne');\n    // XXX this test should be F, but it is not implemented yet\n    T({ a: { $ne: { x: 5 } } }, { $set: { 'a.x': 5 } }, 'set of $ne');\n    T({ a: { $in: [{ b: 1 }, { b: 3 }] } }, { $set: { a: { b: 3 } } }, '$in checks');\n    // XXX this test should be F, but it is not implemented yet\n    T({ a: { $in: [{ b: 1 }, { b: 3 }] } }, { $set: { a: { v: 3 } } }, '$in checks');\n    T({ a: { $ne: { a: 2 } }, x: 1 }, { $set: { x: 1 } }, '$ne dummy');\n    // XXX this test should be F, but it is not implemented yet\n    T({ a: { $ne: { a: 2 } } }, { $set: { a: { a: 2 } } }, '$ne object');\n  });\n}))();\n"]},"sourceType":"script","hash":"403121c16b8712ccdef9471607ad21bfddef8442"}
