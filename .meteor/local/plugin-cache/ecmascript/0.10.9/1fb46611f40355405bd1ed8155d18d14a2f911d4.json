{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/ddp-server/writefence.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/ddp-server/writefence.js","filename":"packages/ddp-server/writefence.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/ddp-server/writefence.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/writefence.js"}},"code":"var Future = Npm.require('fibers/future'); // A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\n\n\nDDPServer._WriteFence = function () {\n  var self = this;\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n}; // The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\n\n\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable();\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n    if (self.retired) return {\n      committed: function () {}\n    };\n    if (self.fired) throw new Error(\"fence has already activated -- too late to add writes\");\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed) throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n\n        self._maybeFire();\n      }\n    };\n  },\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get()) throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n\n    self._maybeFire();\n  },\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future();\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired) throw new Error(\"write fence already activated?\");\n\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback(func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n\n        _.each(callbacks, invokeCallback);\n      }\n\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (!self.fired) throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});","map":{"version":3,"sources":["packages/ddp-server/writefence.js"],"names":["Future","Npm","require","DDPServer","_WriteFence","self","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","_CurrentWriteFence","Meteor","EnvironmentVariable","_","extend","prototype","beginWrite","committed","Error","_maybeFire","arm","get","onBeforeFire","func","push","onAllCommitted","armAndWait","future","wait","invokeCallback","err","_debug","length","callbacks","each","retire"],"mappings":"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","sourcesContent":["var Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n"]},"sourceType":"script","hash":"1fb46611f40355405bd1ed8155d18d14a2f911d4"}
