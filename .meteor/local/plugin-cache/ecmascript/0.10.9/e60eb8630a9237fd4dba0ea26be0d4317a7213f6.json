{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/id-map/id-map.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/id-map/id-map.js","filename":"packages/id-map/id-map.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/id-map/id-map.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/id-map/id-map.js"}},"code":"module.export({\n  IdMap: function () {\n    return IdMap;\n  }\n});\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar IdMap =\n/*#__PURE__*/\nfunction () {\n  function IdMap(idStringify, idParse) {\n    this.clear();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  } // Some of these methods are designed to match methods on OrderedDict, since\n  // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n  // (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n  // set of methods that overlap between the two.)\n\n\n  var _proto = IdMap.prototype;\n\n  _proto.get = function () {\n    function get(id) {\n      var key = this._idStringify(id);\n\n      return this._map[key];\n    }\n\n    return get;\n  }();\n\n  _proto.set = function () {\n    function set(id, value) {\n      var key = this._idStringify(id);\n\n      this._map[key] = value;\n    }\n\n    return set;\n  }();\n\n  _proto.remove = function () {\n    function remove(id) {\n      var key = this._idStringify(id);\n\n      delete this._map[key];\n    }\n\n    return remove;\n  }();\n\n  _proto.has = function () {\n    function has(id) {\n      var key = this._idStringify(id);\n\n      return hasOwn.call(this._map, key);\n    }\n\n    return has;\n  }();\n\n  _proto.empty = function () {\n    function empty() {\n      for (var key in meteorBabelHelpers.sanitizeForInObject(this._map)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return empty;\n  }();\n\n  _proto.clear = function () {\n    function clear() {\n      this._map = Object.create(null);\n    }\n\n    return clear;\n  }(); // Iterates over the items in the map. Return `false` to break the loop.\n\n\n  _proto.forEach = function () {\n    function forEach(iterator) {\n      // don't use _.each, because we can't break out of it.\n      var keys = Object.keys(this._map);\n\n      for (var i = 0; i < keys.length; i++) {\n        var breakIfFalse = iterator.call(null, this._map[keys[i]], this._idParse(keys[i]));\n\n        if (breakIfFalse === false) {\n          return;\n        }\n      }\n    }\n\n    return forEach;\n  }();\n\n  _proto.size = function () {\n    function size() {\n      return Object.keys(this._map).length;\n    }\n\n    return size;\n  }();\n\n  _proto.setDefault = function () {\n    function setDefault(id, def) {\n      var key = this._idStringify(id);\n\n      if (hasOwn.call(this._map, key)) {\n        return this._map[key];\n      }\n\n      this._map[key] = def;\n      return def;\n    }\n\n    return setDefault;\n  }(); // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n\n\n  _proto.clone = function () {\n    function clone() {\n      var clone = new IdMap(this._idStringify, this._idParse);\n      this.forEach(function (value, id) {\n        clone.set(id, EJSON.clone(value));\n      });\n      return clone;\n    }\n\n    return clone;\n  }();\n\n  return IdMap;\n}();","map":{"version":3,"sources":["packages/id-map/id-map.js"],"names":["module","export","IdMap","hasOwn","Object","prototype","hasOwnProperty","idStringify","idParse","clear","_idStringify","JSON","stringify","_idParse","parse","get","id","key","_map","set","value","remove","has","call","empty","create","forEach","iterator","keys","i","length","breakIfFalse","size","setDefault","def","clone","EJSON"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM;AAAA,WAAIA,KAAJ;AAAA;AAAP,CAAd;AAAA,IAAMC,SAASC,OAAOC,SAAP,CAAiBC,cAAhC;;IAEaJ,K;;;AACX,iBAAYK,WAAZ,EAAyBC,OAAzB,EAAkC;AAChC,SAAKC,KAAL;AACA,SAAKC,YAAL,GAAoBH,eAAeI,KAAKC,SAAxC;AACA,SAAKC,QAAL,GAAgBL,WAAWG,KAAKG,KAAhC;AACD,G,CAEH;AACA;AACA;AACA;;;;;SAEEC,G;iBAAIC,E,EAAI;AACN,UAAIC,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;;;;SAEDE,G;iBAAIH,E,EAAII,K,EAAO;AACb,UAAIH,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,WAAKE,IAAL,CAAUD,GAAV,IAAiBG,KAAjB;AACD;;;;;SAEDC,M;oBAAOL,E,EAAI;AACT,UAAIC,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;;;;SAEDK,G;iBAAIN,E,EAAI;AACN,UAAIC,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,aAAOb,OAAOoB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAP;AACD;;;;;SAEDO,K;qBAAQ;AACN,WAAK,IAAIP,GAAT,2CAAgB,KAAKC,IAArB,GAA2B;AACzB,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;SAEDT,K;qBAAQ;AACN,WAAKS,IAAL,GAAYd,OAAOqB,MAAP,CAAc,IAAd,CAAZ;AACD;;;OAED;;;SACAC,O;qBAAQC,Q,EAAU;AAChB;AACA,UAAIC,OAAOxB,OAAOwB,IAAP,CAAY,KAAKV,IAAjB,CAAX;;AACA,WAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAID,KAAKE,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,YAAIE,eAAeJ,SAASJ,IAAT,CACjB,IADiB,EAEjB,KAAKL,IAAL,CAAUU,KAAKC,CAAL,CAAV,CAFiB,EAGjB,KAAKhB,QAAL,CAAce,KAAKC,CAAL,CAAd,CAHiB,CAAnB;;AAKA,YAAIE,iBAAiB,KAArB,EAA4B;AAC1B;AACD;AACF;AACF;;;;;SAEDC,I;oBAAO;AACL,aAAO5B,OAAOwB,IAAP,CAAY,KAAKV,IAAjB,EAAuBY,MAA9B;AACD;;;;;SAEDG,U;wBAAWjB,E,EAAIkB,G,EAAK;AAClB,UAAIjB,MAAM,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,UAAIb,OAAOoB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,KAAKC,IAAL,CAAUD,GAAV,CAAP;AACD;;AACD,WAAKC,IAAL,CAAUD,GAAV,IAAiBiB,GAAjB;AACA,aAAOA,GAAP;AACD;;;OAED;AACA;;;SACAC,K;qBAAQ;AACN,UAAIA,QAAQ,IAAIjC,KAAJ,CAAU,KAAKQ,YAAf,EAA6B,KAAKG,QAAlC,CAAZ;AACA,WAAKa,OAAL,CAAa,UAAUN,KAAV,EAAiBJ,EAAjB,EAAqB;AAChCmB,cAAMhB,GAAN,CAAUH,EAAV,EAAcoB,MAAMD,KAAN,CAAYf,KAAZ,CAAd;AACD,OAFD;AAGA,aAAOe,KAAP;AACD","sourcesContent":["const hasOwn = Object.prototype.hasOwnProperty;\n\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this.clear();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    var key = this._idStringify(id);\n    return this._map[key];\n  }\n\n  set(id, value) {\n    var key = this._idStringify(id);\n    this._map[key] = value;\n  }\n\n  remove(id) {\n    var key = this._idStringify(id);\n    delete this._map[key];\n  }\n\n  has(id) {\n    var key = this._idStringify(id);\n    return hasOwn.call(this._map, key);\n  }\n\n  empty() {\n    for (let key in this._map) {\n      return false;\n    }\n    return true;\n  }\n\n  clear() {\n    this._map = Object.create(null);\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    var keys = Object.keys(this._map);\n    for (var i = 0; i < keys.length; i++) {\n      var breakIfFalse = iterator.call(\n        null,\n        this._map[keys[i]],\n        this._idParse(keys[i])\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return Object.keys(this._map).length;\n  }\n\n  setDefault(id, def) {\n    var key = this._idStringify(id);\n    if (hasOwn.call(this._map, key)) {\n      return this._map[key];\n    }\n    this._map[key] = def;\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    var clone = new IdMap(this._idStringify, this._idParse);\n    this.forEach(function (value, id) {\n      clone.set(id, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]},"sourceType":"script","hash":"e60eb8630a9237fd4dba0ea26be0d4317a7213f6"}
