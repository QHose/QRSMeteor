{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/server-render/server-register.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/server-render/server-register.js","filename":"packages/server-render/server-register.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/server-render/server-register.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/server-render/server-register.js"}},"code":"let WebAppInternals;\nmodule.watch(require(\"meteor/webapp\"), {\n  WebAppInternals(v) {\n    WebAppInternals = v;\n  }\n\n}, 0);\nlet MagicString;\nmodule.watch(require(\"magic-string\"), {\n  default(v) {\n    MagicString = v;\n  }\n\n}, 1);\nlet SAXParser;\nmodule.watch(require(\"parse5\"), {\n  SAXParser(v) {\n    SAXParser = v;\n  }\n\n}, 2);\nlet createStream;\nmodule.watch(require(\"combined-stream2\"), {\n  create(v) {\n    createStream = v;\n  }\n\n}, 3);\nlet ServerSink, isReadable;\nmodule.watch(require(\"./server-sink.js\"), {\n  ServerSink(v) {\n    ServerSink = v;\n  },\n\n  isReadable(v) {\n    isReadable = v;\n  }\n\n}, 4);\nlet onPageLoad;\nmodule.watch(require(\"./server.js\"), {\n  onPageLoad(v) {\n    onPageLoad = v;\n  }\n\n}, 5);\nWebAppInternals.registerBoilerplateDataCallback(\"meteor/server-render\", (request, data, arch) => {\n  const sink = new ServerSink(request, arch);\n  return onPageLoad.chain(callback => callback(sink, request)).then(() => {\n    if (!sink.maybeMadeChanges) {\n      return false;\n    }\n\n    let reallyMadeChanges = false;\n\n    function rewrite(property) {\n      const html = data[property];\n\n      if (typeof html !== \"string\") {\n        return;\n      }\n\n      const magic = new MagicString(html);\n      const parser = new SAXParser({\n        locationInfo: true\n      });\n      data[property] = parser;\n\n      if (Object.keys(sink.htmlById).length) {\n        const stream = createStream();\n        let lastStart = magic.start;\n        parser.on(\"startTag\", (name, attrs, selfClosing, loc) => {\n          attrs.some(attr => {\n            if (attr.name === \"id\") {\n              let html = sink.htmlById[attr.value];\n\n              if (html) {\n                reallyMadeChanges = true;\n                const start = magic.slice(lastStart, loc.endOffset);\n                stream.append(Buffer.from(start, \"utf8\"));\n                stream.append(typeof html === \"string\" ? Buffer.from(html, \"utf8\") : html);\n                lastStart = loc.endOffset;\n              }\n\n              return true;\n            }\n          });\n        });\n        parser.on(\"endTag\", (name, location) => {\n          if (location.endOffset === html.length) {\n            // reached the end of the template\n            const end = magic.slice(lastStart);\n            stream.append(Buffer.from(end, \"utf8\"));\n          }\n        });\n        data[property] = stream;\n      }\n\n      parser.write(html, parser.end.bind(parser));\n    }\n\n    if (sink.head) {\n      data.dynamicHead = (data.dynamicHead || \"\") + sink.head;\n      reallyMadeChanges = true;\n    }\n\n    if (Object.keys(sink.htmlById).length > 0) {\n      // We don't currently allow injecting HTML into the <head> except\n      // by calling sink.appendHead(html).\n      rewrite(\"body\");\n      rewrite(\"dynamicBody\");\n    }\n\n    if (sink.body) {\n      data.dynamicBody = (data.dynamicBody || \"\") + sink.body;\n      reallyMadeChanges = true;\n    }\n\n    if (sink.statusCode) {\n      data.statusCode = sink.statusCode;\n      reallyMadeChanges = true;\n    }\n\n    if (Object.keys(sink.responseHeaders)) {\n      data.headers = sink.responseHeaders;\n      reallyMadeChanges = true;\n    }\n\n    return reallyMadeChanges;\n  });\n});","map":{"version":3,"sources":["packages/server-render/server-register.js"],"names":["WebAppInternals","module","watch","require","v","MagicString","default","SAXParser","createStream","create","ServerSink","isReadable","onPageLoad","registerBoilerplateDataCallback","request","data","arch","sink","chain","callback","then","maybeMadeChanges","reallyMadeChanges","rewrite","property","html","magic","parser","locationInfo","Object","keys","htmlById","length","stream","lastStart","start","on","name","attrs","selfClosing","loc","some","attr","value","slice","endOffset","append","Buffer","from","location","end","write","bind","head","dynamicHead","body","dynamicBody","statusCode","responseHeaders","headers"],"mappings":"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","sourcesContent":["import { WebAppInternals } from \"meteor/webapp\";\nimport MagicString from \"magic-string\";\nimport { SAXParser } from \"parse5\";\nimport { create as createStream } from \"combined-stream2\";\nimport { ServerSink, isReadable } from \"./server-sink.js\";\nimport { onPageLoad } from \"./server.js\";\n\nWebAppInternals.registerBoilerplateDataCallback(\n  \"meteor/server-render\",\n  (request, data, arch) => {\n    const sink = new ServerSink(request, arch);\n\n    return onPageLoad.chain(\n      callback => callback(sink, request)\n    ).then(() => {\n      if (! sink.maybeMadeChanges) {\n        return false;\n      }\n\n      let reallyMadeChanges = false;\n\n      function rewrite(property) {\n        const html = data[property];\n        if (typeof html !== \"string\") {\n          return;\n        }\n\n        const magic = new MagicString(html);\n        const parser = new SAXParser({\n          locationInfo: true\n        });\n\n        data[property] = parser;\n\n        if (Object.keys(sink.htmlById).length) {\n          const stream = createStream();\n\n          let lastStart = magic.start;\n          parser.on(\"startTag\", (name, attrs, selfClosing, loc) => {\n            attrs.some(attr => {\n              if (attr.name === \"id\") {\n                let html = sink.htmlById[attr.value];\n                if (html) {\n                  reallyMadeChanges = true;\n                  const start = magic.slice(lastStart, loc.endOffset);\n                  stream.append(Buffer.from(start, \"utf8\"));\n                  stream.append(\n                    typeof html === \"string\"\n                      ? Buffer.from(html, \"utf8\")\n                      : html\n                  );\n                  lastStart = loc.endOffset;\n                }\n                return true;\n              }\n            });\n          });\n\n          parser.on(\"endTag\", (name, location) => {\n            if (location.endOffset === html.length) {\n              // reached the end of the template\n              const end = magic.slice(lastStart);\n              stream.append(Buffer.from(end, \"utf8\"));\n            }\n          })\n\n          data[property] = stream;\n        }\n\n        parser.write(html, parser.end.bind(parser));\n      }\n\n      if (sink.head) {\n        data.dynamicHead = (data.dynamicHead || \"\") + sink.head;\n        reallyMadeChanges = true;\n      }\n\n      if (Object.keys(sink.htmlById).length > 0) {\n        // We don't currently allow injecting HTML into the <head> except\n        // by calling sink.appendHead(html).\n        rewrite(\"body\");\n        rewrite(\"dynamicBody\");\n      }\n\n      if (sink.body) {\n        data.dynamicBody = (data.dynamicBody || \"\") + sink.body;\n        reallyMadeChanges = true;\n      }\n\n      if (sink.statusCode) {\n        data.statusCode = sink.statusCode;\n        reallyMadeChanges = true;\n      }\n\n      if (Object.keys(sink.responseHeaders)){\n        data.headers = sink.responseHeaders;\n        reallyMadeChanges = true;\n      }\n\n      return reallyMadeChanges;\n    });\n  }\n);\n"]},"sourceType":"script","hash":"612d929f95d3879355c079207f315a304e354046"}
