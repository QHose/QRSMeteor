{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/socket-stream-client/common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/socket-stream-client/common.js","filename":"packages/socket-stream-client/common.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/socket-stream-client/common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/socket-stream-client/common.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  StreamClientCommon: () => StreamClientCommon\n});\nlet Retry;\nmodule.watch(require(\"meteor/retry\"), {\n  Retry(v) {\n    Retry = v;\n  }\n\n}, 0);\nconst forcedReconnectError = new Error(\"forced reconnect\");\n\nclass StreamClientCommon {\n  constructor(options) {\n    this.options = (0, _objectSpread2.default)({\n      retry: true\n    }, options || null);\n    this.ConnectionError = options && options.ConnectionError || Error;\n  } // Register for callbacks.\n\n\n  on(name, callback) {\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error('unknown event type: ' + name);\n    if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];\n    this.eventCallbacks[name].push(callback);\n  }\n\n  forEachCallback(name, cb) {\n    if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {\n      return;\n    }\n\n    this.eventCallbacks[name].forEach(cb);\n  }\n\n  _initCommon(options) {\n    options = options || Object.create(null); //// Constants\n    // how long to wait until we declare the connection attempt\n    // failed.\n\n    this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n    this.eventCallbacks = Object.create(null); // name -> [callback]\n\n    this._forcedToDisconnect = false; //// Reactive status\n\n    this.currentStatus = {\n      status: 'connecting',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (Package.tracker) {\n      this.statusListeners = new Package.tracker.Tracker.Dependency();\n    }\n\n    this.statusChanged = () => {\n      if (this.statusListeners) {\n        this.statusListeners.changed();\n      }\n    }; //// Retry logic\n\n\n    this._retry = new Retry();\n    this.connectionTimer = null;\n  } // Trigger a reconnect.\n\n\n  reconnect(options) {\n    options = options || Object.create(null);\n\n    if (options.url) {\n      this._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      this.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (this.currentStatus.connected) {\n      if (options._force || options.url) {\n        this._lostConnection(forcedReconnectError);\n      }\n\n      return;\n    } // if we're mid-connection, stop it.\n\n\n    if (this.currentStatus.status === 'connecting') {\n      // Pretend it's a clean close.\n      this._lostConnection();\n    }\n\n    this._retry.clear();\n\n    this.currentStatus.retryCount -= 1; // don't count manual retries\n\n    this._retryNow();\n  }\n\n  disconnect(options) {\n    options = options || Object.create(null); // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n\n    if (this._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n\n    if (options._permanent) {\n      this._forcedToDisconnect = true;\n    }\n\n    this._cleanup();\n\n    this._retry.clear();\n\n    this.currentStatus = {\n      status: options._permanent ? 'failed' : 'offline',\n      connected: false,\n      retryCount: 0\n    };\n    if (options._permanent && options._error) this.currentStatus.reason = options._error;\n    this.statusChanged();\n  } // maybeError is set unless it's a clean protocol-level close.\n\n\n  _lostConnection(maybeError) {\n    this._cleanup(maybeError);\n\n    this._retryLater(maybeError); // sets status. no need to do it here.\n\n  } // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n\n\n  _online() {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != 'offline') this.reconnect();\n  }\n\n  _retryLater(maybeError) {\n    var timeout = 0;\n\n    if (this.options.retry || maybeError === forcedReconnectError) {\n      timeout = this._retry.retryLater(this.currentStatus.retryCount, this._retryNow.bind(this));\n      this.currentStatus.status = 'waiting';\n      this.currentStatus.retryTime = new Date().getTime() + timeout;\n    } else {\n      this.currentStatus.status = 'failed';\n      delete this.currentStatus.retryTime;\n    }\n\n    this.currentStatus.connected = false;\n    this.statusChanged();\n  }\n\n  _retryNow() {\n    if (this._forcedToDisconnect) return;\n    this.currentStatus.retryCount += 1;\n    this.currentStatus.status = 'connecting';\n    this.currentStatus.connected = false;\n    delete this.currentStatus.retryTime;\n    this.statusChanged();\n\n    this._launchConnection();\n  } // Get current status. Reactive.\n\n\n  status() {\n    if (this.statusListeners) {\n      this.statusListeners.depend();\n    }\n\n    return this.currentStatus;\n  }\n\n}","map":{"version":3,"sources":["packages/socket-stream-client/common.js"],"names":["module","export","StreamClientCommon","Retry","watch","require","v","forcedReconnectError","Error","constructor","options","retry","ConnectionError","on","name","callback","eventCallbacks","push","forEachCallback","cb","length","forEach","_initCommon","Object","create","CONNECT_TIMEOUT","connectTimeoutMs","_forcedToDisconnect","currentStatus","status","connected","retryCount","Package","tracker","statusListeners","Tracker","Dependency","statusChanged","changed","_retry","connectionTimer","reconnect","url","_changeUrl","_sockjsOptions","_force","_lostConnection","clear","_retryNow","disconnect","_permanent","_cleanup","_error","reason","maybeError","_retryLater","_online","timeout","retryLater","bind","retryTime","Date","getTime","_launchConnection","depend"],"mappings":"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","sourcesContent":["import { Retry } from 'meteor/retry';\n\nconst forcedReconnectError = new Error(\"forced reconnect\");\n\nexport class StreamClientCommon {\n  constructor(options) {\n    this.options = {\n      retry: true,\n      ...(options || null),\n    };\n\n    this.ConnectionError =\n      options && options.ConnectionError || Error;\n  }\n\n  // Register for callbacks.\n  on(name, callback) {\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error('unknown event type: ' + name);\n\n    if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];\n    this.eventCallbacks[name].push(callback);\n  }\n\n  forEachCallback(name, cb) {\n    if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {\n      return;\n    }\n\n    this.eventCallbacks[name].forEach(cb);\n  }\n\n  _initCommon(options) {\n    options = options || Object.create(null);\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    this.eventCallbacks = Object.create(null); // name -> [callback]\n\n    this._forcedToDisconnect = false;\n\n    //// Reactive status\n    this.currentStatus = {\n      status: 'connecting',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (Package.tracker) {\n      this.statusListeners = new Package.tracker.Tracker.Dependency();\n    }\n\n    this.statusChanged = () => {\n      if (this.statusListeners) {\n        this.statusListeners.changed();\n      }\n    };\n\n    //// Retry logic\n    this._retry = new Retry();\n    this.connectionTimer = null;\n  }\n\n  // Trigger a reconnect.\n  reconnect(options) {\n    options = options || Object.create(null);\n\n    if (options.url) {\n      this._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      this.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (this.currentStatus.connected) {\n      if (options._force || options.url) {\n        this._lostConnection(forcedReconnectError);\n      }\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (this.currentStatus.status === 'connecting') {\n      // Pretend it's a clean close.\n      this._lostConnection();\n    }\n\n    this._retry.clear();\n    this.currentStatus.retryCount -= 1; // don't count manual retries\n    this._retryNow();\n  }\n\n  disconnect(options) {\n    options = options || Object.create(null);\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (this._forcedToDisconnect) return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      this._forcedToDisconnect = true;\n    }\n\n    this._cleanup();\n    this._retry.clear();\n\n    this.currentStatus = {\n      status: options._permanent ? 'failed' : 'offline',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      this.currentStatus.reason = options._error;\n\n    this.statusChanged();\n  }\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection(maybeError) {\n    this._cleanup(maybeError);\n    this._retryLater(maybeError); // sets status. no need to do it here.\n  }\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online() {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != 'offline') this.reconnect();\n  }\n\n  _retryLater(maybeError) {\n    var timeout = 0;\n    if (this.options.retry ||\n        maybeError === forcedReconnectError) {\n      timeout = this._retry.retryLater(\n        this.currentStatus.retryCount,\n        this._retryNow.bind(this)\n      );\n      this.currentStatus.status = 'waiting';\n      this.currentStatus.retryTime = new Date().getTime() + timeout;\n    } else {\n      this.currentStatus.status = 'failed';\n      delete this.currentStatus.retryTime;\n    }\n\n    this.currentStatus.connected = false;\n    this.statusChanged();\n  }\n\n  _retryNow() {\n    if (this._forcedToDisconnect) return;\n\n    this.currentStatus.retryCount += 1;\n    this.currentStatus.status = 'connecting';\n    this.currentStatus.connected = false;\n    delete this.currentStatus.retryTime;\n    this.statusChanged();\n\n    this._launchConnection();\n  }\n\n  // Get current status. Reactive.\n  status() {\n    if (this.statusListeners) {\n      this.statusListeners.depend();\n    }\n    return this.currentStatus;\n  }\n}\n"]},"sourceType":"script","hash":"2452097f0c50a0e6c4ac795c5c3eca877f8353b3"}
