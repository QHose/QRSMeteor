{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/minimongo/matcher.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/minimongo/matcher.js","filename":"packages/minimongo/matcher.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/minimongo/matcher.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/matcher.js"}},"code":"module.export({\n  default: () => Matcher\n});\nlet LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  default(v) {\n    LocalCollection = v;\n  }\n\n}, 0);\nlet compileDocumentSelector, hasOwn, nothingMatcher;\nmodule.watch(require(\"./common.js\"), {\n  compileDocumentSelector(v) {\n    compileDocumentSelector = v;\n  },\n\n  hasOwn(v) {\n    hasOwn = v;\n  },\n\n  nothingMatcher(v) {\n    nothingMatcher = v;\n  }\n\n}, 1);\n\nclass Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {}; // Set to true if compilation finds a $near.\n\n    this._hasGeoQuery = false; // Set to true if compilation finds a $where.\n\n    this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n\n    this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n\n    this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  } // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n\n\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n\n      this._recordPathUsed('');\n\n      return doc => ({\n        result: !!selector.call(doc)\n      });\n    } // shorthand -- scalar _id\n\n\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {\n        _id: selector\n      };\n\n      this._recordPathUsed('_id');\n\n      return doc => ({\n        result: EJSON.equals(doc._id, selector)\n      });\n    } // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n\n\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    } // Top level can't be an array or true or binary.\n\n\n    if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, this, {\n      isRoot: true\n    });\n  } // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n\n\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    } // note that typeof(/x/) === \"object\"\n\n\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    } // object\n\n\n    return 3; // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {\n      keyOrderSensitive: true\n    });\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1, // (not a type)\n    1, // number\n    2, // string\n    3, // object\n    4, // array\n    5, // binary\n    -1, // deprecated\n    6, // ObjectID\n    7, // bool\n    8, // Date\n    0, // null\n    9, // RegExp\n    -1, // deprecated\n    100, // JS code\n    2, // deprecated (symbol)\n    100, // JS code\n    1, // 32-bit int\n    8, // Mongo timestamp\n    1 // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    } // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n\n\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) {\n      // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) {\n      // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) {\n      // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) {\n      // Array\n      for (let i = 0;; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) {\n      // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) {\n      // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  }\n\n};","map":{"version":3,"sources":["packages/minimongo/matcher.js"],"names":["module","export","default","Matcher","LocalCollection","watch","require","v","compileDocumentSelector","hasOwn","nothingMatcher","constructor","selector","isUpdate","_paths","_hasGeoQuery","_hasWhere","_isSimple","_matchingDocument","undefined","_selector","_docMatcher","_compileSelector","_isUpdate","documentMatches","doc","Object","Error","hasGeoQuery","hasWhere","isSimple","Function","_recordPathUsed","result","call","_selectorIsId","_id","EJSON","equals","Array","isArray","isBinary","clone","isRoot","_getPaths","keys","path","_f","_type","RegExp","Date","MongoID","ObjectID","_equal","a","b","keyOrderSensitive","_typeorder","t","_cmp","ta","tb","oa","ob","toHexString","getTime","toArray","object","forEach","key","push","i","length","s"],"mappings":"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","sourcesContent":["import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n"]},"sourceType":"script","hash":"a61332c2688a789ea5f293ad4406be8ac0f18d1d"}
