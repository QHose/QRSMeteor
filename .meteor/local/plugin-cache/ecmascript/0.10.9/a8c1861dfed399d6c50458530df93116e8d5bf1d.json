{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/accounts-base/accounts_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/accounts-base/accounts_client.js","filename":"packages/accounts-base/accounts_client.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/accounts-base/accounts_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_client.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nmodule.export({\n  AccountsClient: function () {\n    return AccountsClient;\n  }\n});\nvar AccountsCommon;\nmodule.watch(require(\"./accounts_common.js\"), {\n  AccountsCommon: function (v) {\n    AccountsCommon = v;\n  }\n}, 0);\n\nvar AccountsClient =\n/*#__PURE__*/\nfunction (_AccountsCommon) {\n  (0, _inheritsLoose2.default)(AccountsClient, _AccountsCommon);\n\n  function AccountsClient(options) {\n    var _this;\n\n    _this = _AccountsCommon.call(this, options) || this;\n    _this._loggingIn = new ReactiveVar(false);\n    _this._loggingOut = new ReactiveVar(false);\n    _this._loginServicesHandle = _this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n    _this._pageLoadLoginCallbacks = [];\n    _this._pageLoadLoginAttemptInfo = null; // Defined in url_client.js.\n\n    _this._initUrlMatching(); // Defined in localstorage_token.js.\n\n\n    _this._initLocalStorage(); // This is for .registerClientLoginFunction & .callLoginFunction.\n\n\n    _this._loginFuncs = {};\n    return _this;\n  } ///\n  /// CURRENT USER\n  ///\n  // @override\n\n\n  var _proto = AccountsClient.prototype;\n\n  _proto.userId = function () {\n    function userId() {\n      return this.connection.userId();\n    }\n\n    return userId;\n  }(); // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n\n\n  _proto._setLoggingIn = function () {\n    function _setLoggingIn(x) {\n      this._loggingIn.set(x);\n    }\n\n    return _setLoggingIn;\n  }();\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n\n\n  _proto.loggingIn = function () {\n    function loggingIn() {\n      return this._loggingIn.get();\n    }\n\n    return loggingIn;\n  }();\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n\n\n  _proto.loggingOut = function () {\n    function loggingOut() {\n      return this._loggingOut.get();\n    }\n\n    return loggingOut;\n  }();\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n\n\n  _proto.registerClientLoginFunction = function () {\n    function registerClientLoginFunction(funcName, func) {\n      if (this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" has been defined already\");\n      }\n\n      this._loginFuncs[funcName] = func;\n    }\n\n    return registerClientLoginFunction;\n  }();\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n\n\n  _proto.callLoginFunction = function () {\n    function callLoginFunction(funcName) {\n      if (!this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" was not defined\");\n      }\n\n      for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        funcArgs[_key - 1] = arguments[_key];\n      }\n\n      return this._loginFuncs[funcName].apply(this, funcArgs);\n    }\n\n    return callLoginFunction;\n  }();\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n\n\n  _proto.applyLoginFunction = function () {\n    function applyLoginFunction(funcName, funcArgs) {\n      if (!this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" was not defined\");\n      }\n\n      return this._loginFuncs[funcName].apply(this, funcArgs);\n    }\n\n    return applyLoginFunction;\n  }();\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n\n\n  _proto.logout = function () {\n    function logout(callback) {\n      var self = this;\n\n      self._loggingOut.set(true);\n\n      self.connection.apply('logout', [], {\n        wait: true\n      }, function (error, result) {\n        self._loggingOut.set(false);\n\n        if (error) {\n          callback && callback(error);\n        } else {\n          self.makeClientLoggedOut();\n          callback && callback();\n        }\n      });\n    }\n\n    return logout;\n  }();\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n\n\n  _proto.logoutOtherClients = function () {\n    function logoutOtherClients(callback) {\n      var self = this; // We need to make two method calls: one to replace our current token,\n      // and another to remove all tokens except the current one. We want to\n      // call these two methods one after the other, without any other\n      // methods running between them. For example, we don't want `logout`\n      // to be called in between our two method calls (otherwise the second\n      // method call would return an error). Another example: we don't want\n      // logout to be called before the callback for `getNewToken`;\n      // otherwise we would momentarily log the user out and then write a\n      // new token to localStorage.\n      //\n      // To accomplish this, we make both calls as wait methods, and queue\n      // them one after the other, without spinning off the event loop in\n      // between. Even though we queue `removeOtherTokens` before\n      // `getNewToken`, we won't actually send the `removeOtherTokens` call\n      // until the `getNewToken` callback has finished running, because they\n      // are both wait methods.\n\n      self.connection.apply('getNewToken', [], {\n        wait: true\n      }, function (err, result) {\n        if (!err) {\n          self._storeLoginToken(self.userId(), result.token, result.tokenExpires);\n        }\n      });\n      self.connection.apply('removeOtherTokens', [], {\n        wait: true\n      }, function (err) {\n        callback && callback(err);\n      });\n    }\n\n    return logoutOtherClients;\n  }();\n\n  return AccountsClient;\n}(AccountsCommon);\n\n;\nvar Ap = AccountsClient.prototype;\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\n\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\n\n\nMeteor.loggingOut = function () {\n  return Accounts.loggingOut();\n}; ///\n/// LOGIN METHODS\n///\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\n\n\nAp.callLoginMethod = function (options) {\n  var self = this;\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options); // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f]) options[f] = function () {};\n  }); // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n\n\n  var loginCallbacks = _.once(function (_ref) {\n    var error = _ref.error,\n        loginDetails = _ref.loginDetails;\n\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback(loginDetails);\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback({\n          error: error\n        });\n        return true;\n      });\n    }\n\n    options.userCallback(error, loginDetails);\n  });\n\n  var reconnected = false; // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {// Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      // First clear out any previously set Acccounts login onReconnect\n      // callback (to make sure we don't keep piling up duplicate callbacks,\n      // which would then all be triggered when reconnecting).\n      if (self._reconnectStopper) {\n        self._reconnectStopper.stop();\n      }\n\n      self._reconnectStopper = DDP.onReconnect(function (conn) {\n        if (conn != self.connection) {\n          return;\n        }\n\n        reconnected = true; // If our token was updated in storage, use the latest one.\n\n        var storedToken = self._storedLoginToken();\n\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n\n        if (!result.tokenExpires) result.tokenExpires = self._tokenExpiration(new Date());\n\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{\n              resume: result.token\n            }],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error, loginDetails) {\n              var storedTokenNow = self._storedLoginToken();\n\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              } // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n\n\n              loginCallbacks({\n                error: error,\n                loginDetails: loginDetails\n              });\n            }\n          });\n        }\n      });\n    }\n  }; // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n\n\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected) return; // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n\n    self._setLoggingIn(false);\n\n    if (error || !result) {\n      error = error || new Error(\"No result from call to \" + options.methodName);\n      loginCallbacks({\n        error: error\n      });\n      return;\n    }\n\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks({\n        error: e\n      });\n      return;\n    } // Make the client logged in. (The user data should already be loaded!)\n\n\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks({\n      loginDetails: {\n        type: result.type\n      }\n    });\n  };\n\n  if (!options._suppressLoggingIn) self._setLoggingIn(true);\n  self.connection.apply(options.methodName, options.methodArguments, {\n    wait: true,\n    onResultReceived: onResultReceived\n  }, loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  // Ensure client was successfully logged in before running logout hooks.\n  if (this.connection._userId) {\n    this._onLogoutHook.each(function (callback) {\n      callback();\n      return true;\n    });\n  }\n\n  this._unstoreLoginToken();\n\n  this.connection.setUserId(null);\n  this._reconnectStopper && this._reconnectStopper.stop();\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n\n  this.connection.setUserId(userId);\n};\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n}; ///\n/// LOGIN SERVICES\n///\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\n\n\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n}; // Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\n\n\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n}; // Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\n\n\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n}; ///\n/// HANDLEBARS HELPERS\n///\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\n\n\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n\n  Package.blaze.Blaze.Template.registerHelper('loggingOut', function () {\n    return Meteor.loggingOut();\n  });\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n\n  Package.blaze.Blaze.Template.registerHelper('loggingInOrOut', function () {\n    return Meteor.loggingIn() || Meteor.loggingOut();\n  });\n}","map":{"version":3,"sources":["packages/accounts-base/accounts_client.js"],"names":["module","export","AccountsClient","AccountsCommon","watch","require","v","options","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","_initUrlMatching","_initLocalStorage","_loginFuncs","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","callLoginFunction","funcArgs","apply","applyLoginFunction","logout","callback","self","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","Ap","prototype","Meteor","Accounts","callLoginMethod","_","extend","methodName","methodArguments","_suppressLoggingIn","each","f","loginCallbacks","once","loginDetails","_onLoginHook","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","type","_userId","_onLogoutHook","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","Package","blaze","Blaze","Template","registerHelper","user"],"mappings":"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","sourcesContent":["import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    // Defined in url_client.js.\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    var self = this;\n    self._loggingOut.set(true);\n    self.connection.apply('logout', [], {\n      wait: true\n    }, function (error, result) {\n      self._loggingOut.set(false);\n      if (error) {\n        callback && callback(error);\n      } else {\n        self.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    var self = this;\n\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    self.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      function (err, result) {\n        if (! err) {\n          self._storeLoginToken(\n            self.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    self.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      function (err) {\n        callback && callback(err);\n      }\n    );\n  }\n};\n\nvar Ap = AccountsClient.prototype;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = function () {\n  return Accounts.loggingOut();\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\nAp.callLoginMethod = function (options) {\n  var self = this;\n\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options);\n\n  // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f])\n      options[f] = function () {};\n  });\n\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n  var loginCallbacks = _.once(function ({ error, loginDetails }) {\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback(loginDetails);\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback({ error });\n        return true;\n      });\n    }\n    options.userCallback(error, loginDetails);\n  });\n\n  var reconnected = false;\n\n  // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {\n      // Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      // First clear out any previously set Acccounts login onReconnect\n      // callback (to make sure we don't keep piling up duplicate callbacks,\n      // which would then all be triggered when reconnecting).\n      if (self._reconnectStopper) {\n        self._reconnectStopper.stop();\n      }\n\n      self._reconnectStopper = DDP.onReconnect(function (conn) {\n        if (conn != self.connection) {\n          return;\n        }\n        reconnected = true;\n        // If our token was updated in storage, use the latest one.\n        var storedToken = self._storedLoginToken();\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n        if (! result.tokenExpires)\n          result.tokenExpires = self._tokenExpiration(new Date());\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{resume: result.token}],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error, loginDetails) {\n              var storedTokenNow = self._storedLoginToken();\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              }\n              // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n              loginCallbacks({ error, loginDetails });\n            }});\n        }\n      });\n    }\n  };\n\n  // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected)\n      return;\n\n    // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n    self._setLoggingIn(false);\n    if (error || !result) {\n      error = error || new Error(\n        \"No result from call to \" + options.methodName);\n      loginCallbacks({ error });\n      return;\n    }\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks({ error: e });\n      return;\n    }\n\n    // Make the client logged in. (The user data should already be loaded!)\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks({\n      loginDetails: {\n        type: result.type,\n      },\n    });\n  };\n\n  if (!options._suppressLoggingIn)\n    self._setLoggingIn(true);\n  self.connection.apply(\n    options.methodName,\n    options.methodArguments,\n    {wait: true, onResultReceived: onResultReceived},\n    loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  // Ensure client was successfully logged in before running logout hooks.\n  if (this.connection._userId) {\n    this._onLogoutHook.each(function (callback) {\n      callback();\n      return true;\n    });\n  }\n  this._unstoreLoginToken();\n  this.connection.setUserId(null);\n  this._reconnectStopper && this._reconnectStopper.stop();\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n  this.connection.setUserId(userId);\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n\n///\n/// LOGIN SERVICES\n///\n\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n};\n\n\n// Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n};\n\n\n// Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n};\n\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingOut', function () {\n    return Meteor.loggingOut();\n  });\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingInOrOut', function () {\n    return (Meteor.loggingIn() || Meteor.loggingOut());\n  });\n}\n"]},"sourceType":"script","hash":"a8c1861dfed399d6c50458530df93116e8d5bf1d"}
