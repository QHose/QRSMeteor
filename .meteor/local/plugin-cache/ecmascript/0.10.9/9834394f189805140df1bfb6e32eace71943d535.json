{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/mongo/oplog_tailing.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/mongo/oplog_tailing.js","filename":"packages/mongo/oplog_tailing.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/mongo/oplog_tailing.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/oplog_tailing.js"}},"code":"var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd') return op.o._id;else if (op.op === 'i') return op.o._id;else if (op.op === 'u') return op.o2._id;else if (op.op === 'c') throw Error(\"Operator 'c' doesn't supply an object with id: \" + EJSON.stringify(op));else throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\",\n    factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [{\n      op: {\n        $in: ['i', 'u', 'd']\n      }\n    }, // drop collection\n    {\n      op: 'c',\n      'o.drop': {\n        $exists: true\n      }\n    }, {\n      op: 'c',\n      'o.dropDatabase': 1\n    }]\n  }; // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped) return;\n    self._stopped = true;\n    if (self._tailHandle) self._tailHandle.stop(); // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped) throw new Error(\"Called onOplogEntry on stopped handle!\"); // Calling onOplogEntry requires us to wait for the tailing to be ready.\n\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err);\n    });\n\n    var listenHandle = self._crossbar.listen(trigger, callback);\n\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped) throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped) throw new Error(\"Called waitUntilCaughtUp on stopped handle!\"); // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n\n    self._readyFuture.wait();\n\n    var lastEntry;\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        lastEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, self._baseOplogSelector, {\n          fields: {\n            ts: 1\n          },\n          sort: {\n            $natural: -1\n          }\n        });\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry\", e);\n\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped) return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    } // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n\n\n    var insertAfter = self._catchingUpFutures.length;\n\n    while (insertAfter - 1 > 0 && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n\n    var f = new Future();\n\n    self._catchingUpFutures.splice(insertAfter, 0, {\n      ts: ts,\n      future: f\n    });\n\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this; // First, make sure that we're talking to the local database.\n\n    var mongodbUri = Npm.require('mongodb-uri');\n\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");\n    } // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n\n\n    self._oplogTailConnection = new MongoConnection(self._oplogUrl, {\n      poolSize: 1\n    }); // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n\n    self._oplogLastEntryConnection = new MongoConnection(self._oplogUrl, {\n      poolSize: 1\n    }); // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    // More on the isMasterDoc\n    // https://docs.mongodb.com/manual/reference/command/isMaster/\n\n    var f = new Future();\n\n    self._oplogLastEntryConnection.db.admin().command({\n      ismaster: 1\n    }, f.resolver());\n\n    var isMasterDoc = f.wait();\n\n    if (!(isMasterDoc && isMasterDoc.setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");\n    } // Find the last oplog entry.\n\n\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, {}, {\n      sort: {\n        $natural: -1\n      },\n      fields: {\n        ts: 1\n      }\n    });\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {\n        $gt: lastOplogEntry.ts\n      }; // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(OPLOG_COLLECTION, oplogSelector, {\n      tailable: true\n    });\n    self._tailHandle = self._oplogTailConnection.tail(cursorDescription, function (doc) {\n      self._entryQueue.push(doc);\n\n      self._maybeStartWorker();\n    });\n\n    self._readyFuture.return();\n  },\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive) return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (!self._stopped && !self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            }); // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n\n\n            self._setLastProcessedTS(lastEntry.ts);\n\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 && doc.ns.substr(0, self._dbName.length + 1) === self._dbName + '.')) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {\n            collection: doc.ns.substr(self._dbName.length + 1),\n            dropCollection: false,\n            dropDatabase: false,\n            op: doc\n          }; // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger); // Now that we've processed this operation, process pending\n          // sequencers.\n\n\n          if (!doc.ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n\n    while (!_.isEmpty(self._catchingUpFutures) && self._catchingUpFutures[0].ts.lessThanOrEqual(self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n\n      sequencer.future.return();\n    }\n  },\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND\n  _defineTooFarBehind: function (value) {\n    TOO_FAR_BEHIND = value;\n  },\n  _resetTooFarBehind: function () {\n    TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n  }\n});","map":{"version":3,"sources":["packages/mongo/oplog_tailing.js"],"names":["Future","Npm","require","OPLOG_COLLECTION","TOO_FAR_BEHIND","process","env","METEOR_OPLOG_TOO_FAR_BEHIND","showTS","ts","getHighBits","getLowBits","idForOp","op","o","_id","o2","Error","EJSON","stringify","OplogHandle","oplogUrl","dbName","self","_oplogUrl","_dbName","_oplogLastEntryConnection","_oplogTailConnection","_stopped","_tailHandle","_readyFuture","_crossbar","DDPServer","_Crossbar","factPackage","factName","_baseOplogSelector","ns","RegExp","Meteor","_escapeRegExp","$or","$in","$exists","_catchingUpFutures","_lastProcessedTS","_onSkippedEntriesHook","Hook","debugPrintExceptions","_entryQueue","_DoubleEndedQueue","_workerActive","_startTailing","_","extend","prototype","stop","onOplogEntry","trigger","callback","wait","originalCallback","bindEnvironment","notification","clone","err","_debug","listenHandle","listen","onSkippedEntries","register","waitUntilCaughtUp","lastEntry","findOne","fields","sort","$natural","e","_sleepForMs","lessThanOrEqual","insertAfter","length","greaterThan","f","splice","future","mongodbUri","parse","database","MongoConnection","poolSize","db","admin","command","ismaster","resolver","isMasterDoc","setName","lastOplogEntry","oplogSelector","$gt","cursorDescription","CursorDescription","tailable","tail","doc","push","_maybeStartWorker","return","defer","isEmpty","pop","clear","each","_setLastProcessedTS","shift","substr","collection","dropCollection","dropDatabase","has","drop","id","JSON","fire","sequencer","_defineTooFarBehind","value","_resetTooFarBehind"],"mappings":"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","sourcesContent":["var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd')\n    return op.o._id;\n  else if (op.op === 'i')\n    return op.o._id;\n  else if (op.op === 'u')\n    return op.o2._id;\n  else if (op.op === 'c')\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +\n                EJSON.stringify(op));\n  else\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [\n      { op: {$in: ['i', 'u', 'd']} },\n      // drop collection\n      { op: 'c', 'o.drop': { $exists: true } },\n      { op: 'c', 'o.dropDatabase': 1 },\n    ]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    if (self._tailHandle)\n      self._tailHandle.stop();\n    // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err);\n    });\n    var listenHandle = self._crossbar.listen(trigger, callback);\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n    self._readyFuture.wait();\n    var lastEntry;\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        lastEntry = self._oplogLastEntryConnection.findOne(\n          OPLOG_COLLECTION, self._baseOplogSelector,\n          {fields: {ts: 1}, sort: {$natural: -1}});\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry\", e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts)\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    }\n\n\n    // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n    var insertAfter = self._catchingUpFutures.length;\n    while (insertAfter - 1 > 0 && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n    var f = new Future;\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this;\n    // First, make sure that we're talking to the local database.\n    var mongodbUri = Npm.require('mongodb-uri');\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n    self._oplogTailConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n    // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n    self._oplogLastEntryConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n\n    // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    // More on the isMasterDoc\n    // https://docs.mongodb.com/manual/reference/command/isMaster/\n    var f = new Future;\n    self._oplogLastEntryConnection.db.admin().command(\n      { ismaster: 1 }, f.resolver());\n    var isMasterDoc = f.wait();\n\n    if (!(isMasterDoc && isMasterDoc.setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // Find the last oplog entry.\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};\n      // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});\n\n    self._tailHandle = self._oplogTailConnection.tail(\n      cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      }\n    );\n    self._readyFuture.return();\n  },\n\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive)\n      return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            });\n\n            // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n            self._setLastProcessedTS(lastEntry.ts);\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&\n                doc.ns.substr(0, self._dbName.length + 1) ===\n                (self._dbName + '.'))) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),\n                         dropCollection: false,\n                         dropDatabase: false,\n                         op: doc};\n\n          // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger);\n\n          // Now that we've processed this operation, process pending\n          // sequencers.\n          if (!doc.ts)\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n    while (!_.isEmpty(self._catchingUpFutures) && self._catchingUpFutures[0].ts.lessThanOrEqual(self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n      sequencer.future.return();\n    }\n  },\n\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND\n  _defineTooFarBehind: function(value) {\n    TOO_FAR_BEHIND = value;\n  },\n  _resetTooFarBehind: function() {\n    TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n  }\n});\n"]},"sourceType":"script","hash":"9834394f189805140df1bfb6e32eace71943d535"}
