{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/api/server/QRSAPI.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/server/QRSAPI.js","filename":"imports/api/server/QRSAPI.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"imports/api/server/QRSAPI.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/server/QRSAPI.js"}},"code":"const module1 = module;\nmodule1.export({\n  myQRS: () => myQRS\n});\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet http;\nmodule1.watch(require(\"meteor/meteor\"), {\n  http(v) {\n    http = v;\n  }\n\n}, 1);\nlet configCerticates, senseConfig, authHeaders, qrsSrv;\nmodule1.watch(require(\"/imports/api/config\"), {\n  configCerticates(v) {\n    configCerticates = v;\n  },\n\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  },\n\n  qrsSrv(v) {\n    qrsSrv = v;\n  }\n\n}, 2);\n\nvar myQRS = function myQRSMain() {\n  this.get = function get(path, params = {}, data = {}) {\n    var endpoint = checkPath(path);\n    console.log('QRS module received GET request for endpoint', endpoint); // copy the params to one object\n\n    var newParams = Object.assign({\n      xrfkey: senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.get(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: {}\n      });\n\n      try {\n        console.log('QRS GET result: response.data length: ', response.data.length);\n        return response.data;\n      } catch (error) {\n        console.log('------------------------------------');\n        console.error('We did not get any data back from Qlik Sense (empty array). If you do not expect this, make sure you check the udc, username in the settings file.');\n        console.log('------------------------------------');\n      }\n    } catch (err) {\n      var error = 'QRS HTTP GET FAILED FOR ' + endpoint;\n      console.error(err);\n      throw new Meteor.Error(500, 'This node server can not connect to Qlik Sense. Sometimes you have to wait 10 minutes after restarting... ' + error);\n    }\n  };\n\n  this.post = function post(path, params = {}, data = {}) {\n    var endpoint = checkPath(path); // copy the params to one object\n\n    var newParams = Object.assign({\n      'xrfkey': senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.post(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: data\n      });\n      return response.data;\n    } catch (err) {\n      console.error('HTTP POST FAILED FOR ' + endpoint, err);\n    }\n  };\n\n  this.del = function del(path, params = {}, data = {}) {\n    var endpoint = checkPath(path);\n    console.log('endpoint', endpoint);\n    console.log('data', data); // copy the params to one object.\n\n    var newParams = Object.assign({\n      xrfkey: senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.del(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: data\n      }); // console.log('response', response)\n\n      return response.data;\n    } catch (err) {\n      console.error('QRS HTTP DEL FAILED FOR ' + endpoint, err);\n    }\n  };\n\n  this.put = function put(path, params = {}, data = {}) {\n    var endpoint = checkPath(path); // copy the params to one object\n\n    var newParams = Object.assign({\n      'xrfkey': senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.put(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: data\n      });\n      return response.data;\n    } catch (err) {\n      console.error('HTTP PUT FAILED FOR ' + endpoint, err);\n    }\n  };\n};\n\nfunction checkPath(path) {\n  console.log('checkPath: path', path);\n  console.log('checkPath: qrsSrv', qrsSrv);\n\n  try {\n    check(path, String);\n    check(qrsSrv, String);\n  } catch (err) {\n    throw Error(\"QRS module can not use an empty server: \" + qrsSrv + \" or path: \" + path + \" for the QRS API, settings.json correct?\");\n  }\n\n  return qrsSrv + path;\n}","map":{"version":3,"sources":["imports/api/server/QRSAPI.js"],"names":["module1","module","export","myQRS","Meteor","watch","require","v","http","configCerticates","senseConfig","authHeaders","qrsSrv","myQRSMain","get","path","params","data","endpoint","checkPath","console","log","newParams","Object","assign","xrfkey","response","HTTP","npmRequestOptions","length","error","err","Error","post","del","put","check","String"],"mappings":"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","sourcesContent":["import {\n    Meteor,\n} from 'meteor/meteor';\nimport {\n    http,\n} from 'meteor/meteor';\n\nimport {\n    configCerticates,\n    senseConfig,\n    authHeaders,\n    qrsSrv\n} from '/imports/api/config';\n\nexport var myQRS = function myQRSMain() {\n\n    this.get = function get(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n        console.log('QRS module received GET request for endpoint', endpoint);\n\n        // copy the params to one object\n        var newParams = Object.assign({\n            xrfkey: senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.get(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: {},\n            });\n\n            try {\n                console.log('QRS GET result: response.data length: ', response.data.length);\n                 return response.data;\n            } catch (error) {\n                console.log('------------------------------------');\n                console.error('We did not get any data back from Qlik Sense (empty array). If you do not expect this, make sure you check the udc, username in the settings file.');\n                console.log('------------------------------------');\n            }           \n        } catch (err) {\n            var error = 'QRS HTTP GET FAILED FOR ' + endpoint;\n            console.error(err);\n            throw new Meteor.Error(500, 'This node server can not connect to Qlik Sense. Sometimes you have to wait 10 minutes after restarting... ' + error);\n        }\n    };\n\n    this.post = function post(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n\n        // copy the params to one object\n        var newParams = Object.assign({\n            'xrfkey': senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.post(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: data,\n            });\n            return response.data;\n        } catch (err) {\n            console.error('HTTP POST FAILED FOR ' + endpoint, err);\n        }\n    };\n\n    this.del = function del(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n        console.log('endpoint', endpoint)\n        console.log('data', data)\n\n        // copy the params to one object.\n        var newParams = Object.assign({\n            xrfkey: senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.del(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: data,\n            });\n            // console.log('response', response)\n            return response.data;\n        } catch (err) {\n            console.error('QRS HTTP DEL FAILED FOR ' + endpoint, err);\n        }\n    };\n\n    this.put = function put(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n\n        // copy the params to one object\n        var newParams = Object.assign({\n            'xrfkey': senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.put(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: data,\n            });\n            return response.data;\n        } catch (err) {\n            console.error('HTTP PUT FAILED FOR ' + endpoint, err);\n        }\n    };\n\n};\n\nfunction checkPath(path) {\n    console.log('checkPath: path', path);\n    console.log('checkPath: qrsSrv', qrsSrv);\n\n    try {\n        check(path, String);\n        check(qrsSrv, String);\n    } catch (err) {\n        throw Error(\"QRS module can not use an empty server: \" + qrsSrv + \" or path: \" + path + \" for the QRS API, settings.json correct?\")\n    }\n    return qrsSrv + path;\n}"]},"sourceType":"script","hash":"75acc6ecf487ced8734a266946593197939b9146"}
