{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/webapp/webapp_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/webapp/webapp_tests.js","filename":"packages/webapp/webapp_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/webapp/webapp_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/webapp/webapp_tests.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar url = require(\"url\");\n\nvar crypto = require(\"crypto\");\n\nvar http = require(\"http\");\n\nvar streamToString = require(\"stream-to-string\");\n\nvar additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nvar hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nvar additionalScriptPathname = hash.digest('hex') + \".js\"; // Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\n\nvar MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {// nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  var cssResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"css\";\n  });\n\n  var jsResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"js\";\n  });\n\n  var resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"application/javascript; charset=utf-8\");\n});\nTinytest.addAsync(\"webapp - additional static javascript\", function () {\n  function _callee(test) {\n    var origInlineScriptsAllowed, staticFilesOpts, _WebAppInternals$getB, stream, boilerplate, _res, _req, nextCalled, _WebAppInternals$getB2, _stream, _boilerplate, res, req, resBody;\n\n    return _regenerator.default.async(function () {\n      function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n              staticFilesOpts = {\n                staticFiles: {},\n                clientDir: \"/\"\n              }; // It's okay to set this global state because we're not going to yield\n              // before settng it back to what it was originally.\n\n              WebAppInternals.setInlineScriptsAllowed(true);\n              _WebAppInternals$getB = WebAppInternals.getBoilerplate({\n                browser: \"doesn't-matter\",\n                url: \"also-doesnt-matter\"\n              }, \"web.browser\"), stream = _WebAppInternals$getB.stream;\n              _context.next = 6;\n              return _regenerator.default.awrap(streamToString(stream));\n\n            case 6:\n              boilerplate = _context.sent;\n              // When inline scripts are allowed, the script should be inlined.\n              test.isTrue(boilerplate.indexOf(additionalScript) !== -1); // And the script should not be served as its own separate resource,\n              // meaning that the static file handler should pass on this request.\n\n              _res = new MockResponse();\n              _req = new http.IncomingMessage();\n              _req.headers = {};\n              _req.method = \"GET\";\n              _req.url = \"/\" + additionalScriptPathname;\n              nextCalled = false;\n              WebAppInternals.staticFilesMiddleware(staticFilesOpts, _req, _res, function () {\n                nextCalled = true;\n              });\n              test.isTrue(nextCalled); // When inline scripts are disallowed, the script body should not be\n              // inlined, and the script should be included in a <script src=\"..\">\n              // tag.\n\n              WebAppInternals.setInlineScriptsAllowed(false);\n              _WebAppInternals$getB2 = WebAppInternals.getBoilerplate({\n                browser: \"doesn't-matter\",\n                browser: \"doesn't-matter\",\n                url: \"also-doesnt-matter\"\n              }, \"web.browser\"), _stream = _WebAppInternals$getB2.stream;\n              _context.next = 20;\n              return _regenerator.default.awrap(streamToString(_stream));\n\n            case 20:\n              _boilerplate = _context.sent;\n              // The script contents itself should not be present; the pathname\n              // where the script is served should be.\n              test.isTrue(_boilerplate.indexOf(additionalScript) === -1);\n              test.isTrue(_boilerplate.indexOf(additionalScriptPathname) !== -1);\n              // And the static file handler should serve the script at that pathname.\n              res = new MockResponse();\n              req = new http.IncomingMessage();\n              req.headers = {};\n              req.method = \"GET\";\n              req.url = \"/\" + additionalScriptPathname;\n              WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res, function () {});\n              resBody = res.getBody();\n              test.isTrue(resBody.indexOf(additionalScript) !== -1);\n              test.equal(res.statusCode, 200);\n              WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }\n\n      return _callee$;\n    }(), null, this);\n  }\n\n  return _callee;\n}()); // Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\n\nTinytest.addAsync(\"webapp - generating boilerplate should not change runtime config\", function () {\n  function _callee2(test) {\n    var boilerplate, stream, boilerplateHtml;\n    return _regenerator.default.async(function () {\n      function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // Set a dummy key in the runtime config served in the\n              // boilerplate. Test that the dummy key appears in the boilerplate,\n              // but not in __meteor_runtime_config__ after generating the\n              // boilerplate.\n              test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n              boilerplate = WebAppInternals.generateBoilerplateInstance(\"web.browser\", [], // empty manifest\n              {\n                runtimeConfigOverrides: {\n                  WEBAPP_TEST_KEY: true\n                }\n              });\n              stream = boilerplate.toHTMLStream();\n              _context2.next = 5;\n              return _regenerator.default.awrap(streamToString(stream));\n\n            case 5:\n              boilerplateHtml = _context2.sent;\n              test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n              test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }\n\n      return _callee2$;\n    }(), null, this);\n  }\n\n  return _callee2;\n}());\nTinytest.addAsync(\"webapp - WebAppInternals.registerBoilerplateDataCallback\", function () {\n  function _callee3(test) {\n    var key, callCount, callback, req, _WebAppInternals$getB3, stream, html;\n\n    return _regenerator.default.async(function () {\n      function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              callback = function () {\n                function _ref(request, data, arch) {\n                  test.equal(arch, \"web.browser\");\n                  test.equal(request.url, \"http://example.com\");\n                  test.equal(data.dynamicHead.indexOf(\"so dynamic\"), 0);\n                  test.equal(data.body, \"\");\n                  data.body = \"<div>oyez</div>\";\n                  ++callCount;\n                }\n\n                return _ref;\n              }();\n\n              key = \"from webapp_tests.js\";\n              callCount = 0;\n              WebAppInternals.registerBoilerplateDataCallback(key, callback);\n              test.equal(callCount, 0);\n              req = new http.IncomingMessage();\n              req.url = \"http://example.com\";\n              req.browser = {\n                name: \"headless\"\n              };\n              req.dynamicHead = \"so dynamic\";\n              _WebAppInternals$getB3 = WebAppInternals.getBoilerplate(req, \"web.browser\"), stream = _WebAppInternals$getB3.stream;\n              _context3.next = 12;\n              return _regenerator.default.awrap(streamToString(stream));\n\n            case 12:\n              html = _context3.sent;\n              test.equal(callCount, 1);\n              test.isTrue(html.indexOf([\"<body>\", \"<div>oyez</div>\"].join(\"\")) >= 0);\n              test.equal( // Make sure this callback doesn't get called again after this test.\n              WebAppInternals.registerBoilerplateDataCallback(key, null), callback);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }\n\n      return _callee3$;\n    }(), null, this);\n  }\n\n  return _callee3;\n}()); // Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\n\nTinytest.add(\"webapp - port should be parsed as int unless it is a named pipe\", function (test) {\n  // Named pipes on Windows Server follow the format:\n  // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n  var namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n  var namedPipeServer = \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n  test.equal(WebAppInternals.parsePort(namedPipe), \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\");\n  test.equal(WebAppInternals.parsePort(namedPipeServer), \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\");\n  test.equal(WebAppInternals.parsePort(8080), 8080);\n  test.equal(WebAppInternals.parsePort(\"8080\"), 8080); // Ensure strangely formatted ports still work for backwards compatibility\n\n  test.equal(WebAppInternals.parsePort(\"8080abc\"), 8080);\n});\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^3\\.(\\d+)\\.(\\d+)/);\n  test.equal((0, _typeof2.default)(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal((0, _typeof2.default)(WebAppInternals.NpmModules.connect.module.basicAuth), 'function');\n});","map":{"version":3,"sources":["packages/webapp/webapp_tests.js"],"names":["url","require","crypto","http","streamToString","additionalScript","WebAppInternals","addStaticJs","hash","createHash","update","additionalScriptPathname","digest","MockResponse","buffer","statusCode","prototype","writeHead","setHeader","name","value","write","data","encoding","end","getBody","Tinytest","add","test","cssResource","_","find","keys","staticFiles","type","jsResource","resp","HTTP","get","resolve","Meteor","absoluteUrl","equal","headers","toLowerCase","addAsync","origInlineScriptsAllowed","inlineScriptsAllowed","staticFilesOpts","clientDir","setInlineScriptsAllowed","getBoilerplate","browser","stream","boilerplate","isTrue","indexOf","res","req","IncomingMessage","method","nextCalled","staticFilesMiddleware","resBody","isFalse","__meteor_runtime_config__","WEBAPP_TEST_KEY","generateBoilerplateInstance","runtimeConfigOverrides","toHTMLStream","boilerplateHtml","callback","request","arch","dynamicHead","body","callCount","key","registerBoilerplateDataCallback","html","join","namedPipe","namedPipeServer","parsePort","WEBAPP_TEST_A","WEBAPP_TEST_B","matches","NpmModules","connect","version","module","basicAuth"],"mappings":"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","sourcesContent":["const url = require(\"url\");\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst streamToString = require(\"stream-to-string\");\n\nconst additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nconst hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nconst additionalScriptPathname = hash.digest('hex') + \".js\";\n\n// Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\nconst MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {\n  // nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  const cssResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"css\";\n    }\n  );\n  const jsResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"js\";\n    }\n  );\n\n  let resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"application/javascript; charset=utf-8\");\n});\n\nTinytest.addAsync(\n  \"webapp - additional static javascript\",\n  async function (test) {\n    const origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n\n    const staticFilesOpts = {\n      staticFiles: {},\n      clientDir: \"/\"\n    };\n\n    // It's okay to set this global state because we're not going to yield\n    // before settng it back to what it was originally.\n    WebAppInternals.setInlineScriptsAllowed(true);\n\n    {\n      const { stream } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n\n      const boilerplate = await streamToString(stream);\n\n      // When inline scripts are allowed, the script should be inlined.\n      test.isTrue(boilerplate.indexOf(additionalScript) !== -1);\n\n      // And the script should not be served as its own separate resource,\n      // meaning that the static file handler should pass on this request.\n      const res = new MockResponse();\n      const req = new http.IncomingMessage();\n      req.headers = {};\n      req.method = \"GET\";\n      req.url = \"/\" + additionalScriptPathname;\n      let nextCalled = false;\n      WebAppInternals.staticFilesMiddleware(\n        staticFilesOpts, req, res, function () {\n          nextCalled = true;\n        });\n      test.isTrue(nextCalled);\n\n      // When inline scripts are disallowed, the script body should not be\n      // inlined, and the script should be included in a <script src=\"..\">\n      // tag.\n      WebAppInternals.setInlineScriptsAllowed(false);\n    }\n\n    {\n      const { stream } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n      const boilerplate = await streamToString(stream);\n\n      // The script contents itself should not be present; the pathname\n      // where the script is served should be.\n      test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n      test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1);\n    }\n\n    // And the static file handler should serve the script at that pathname.\n    const res = new MockResponse();\n    const req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res,\n                                          function () { });\n    const resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n\n    WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n  }\n);\n\n// Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\nTinytest.addAsync(\n  \"webapp - generating boilerplate should not change runtime config\",\n  async function (test) {\n    // Set a dummy key in the runtime config served in the\n    // boilerplate. Test that the dummy key appears in the boilerplate,\n    // but not in __meteor_runtime_config__ after generating the\n    // boilerplate.\n\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n    const boilerplate = WebAppInternals.generateBoilerplateInstance(\n      \"web.browser\",\n      [], // empty manifest\n      { runtimeConfigOverrides: { WEBAPP_TEST_KEY: true } }\n    );\n\n    const stream = boilerplate.toHTMLStream();\n    const boilerplateHtml = await streamToString(stream)\n    test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n  }\n);\n\nTinytest.addAsync(\n  \"webapp - WebAppInternals.registerBoilerplateDataCallback\",\n  async function (test) {\n    const key = \"from webapp_tests.js\";\n    let callCount = 0;\n\n    function callback(request, data, arch) {\n      test.equal(arch, \"web.browser\");\n      test.equal(request.url, \"http://example.com\");\n      test.equal(data.dynamicHead.indexOf(\"so dynamic\"), 0);\n      test.equal(data.body, \"\");\n      data.body = \"<div>oyez</div>\";\n      ++callCount;\n    }\n\n    WebAppInternals.registerBoilerplateDataCallback(key, callback);\n\n    test.equal(callCount, 0);\n\n    const req = new http.IncomingMessage();\n    req.url = \"http://example.com\";\n    req.browser = { name: \"headless\" };\n    req.dynamicHead = \"so dynamic\";\n\n    const { stream } = WebAppInternals.getBoilerplate(req, \"web.browser\");\n    const html = await streamToString(stream);\n\n    test.equal(callCount, 1);\n\n    test.isTrue(html.indexOf([\n      \"<body>\",\n      \"<div>oyez</div>\"\n    ].join(\"\")) >= 0);\n\n    test.equal(\n      // Make sure this callback doesn't get called again after this test.\n      WebAppInternals.registerBoilerplateDataCallback(key, null),\n      callback\n    );\n  }\n);\n\n// Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\nTinytest.add(\n  \"webapp - port should be parsed as int unless it is a named pipe\",\n  function (test) {\n    // Named pipes on Windows Server follow the format:\n    // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n    const namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n    const namedPipeServer =\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n\n    test.equal(\n      WebAppInternals.parsePort(namedPipe),\n      \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(namedPipeServer),\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(8080),\n      8080\n    );\n    test.equal(\n      WebAppInternals.parsePort(\"8080\"),\n      8080\n    );\n    // Ensure strangely formatted ports still work for backwards compatibility\n    test.equal(\n      WebAppInternals.parsePort(\"8080abc\"),\n      8080\n    );\n  }\n);\n\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\n\n\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^3\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module.basicAuth),\n             'function');\n});\n"]},"sourceType":"script","hash":"64757f23d372ea0bf465ad8415471bf1b629992d"}
