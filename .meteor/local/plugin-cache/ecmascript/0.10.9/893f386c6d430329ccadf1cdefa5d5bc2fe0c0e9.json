{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/socket-stream-client/common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/socket-stream-client/common.js","filename":"packages/socket-stream-client/common.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/socket-stream-client/common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/socket-stream-client/common.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  StreamClientCommon: function () {\n    return StreamClientCommon;\n  }\n});\nvar Retry;\nmodule.watch(require(\"meteor/retry\"), {\n  Retry: function (v) {\n    Retry = v;\n  }\n}, 0);\nvar forcedReconnectError = new Error(\"forced reconnect\");\n\nvar StreamClientCommon =\n/*#__PURE__*/\nfunction () {\n  function StreamClientCommon(options) {\n    this.options = (0, _objectSpread2.default)({\n      retry: true\n    }, options || null);\n    this.ConnectionError = options && options.ConnectionError || Error;\n  } // Register for callbacks.\n\n\n  var _proto = StreamClientCommon.prototype;\n\n  _proto.on = function () {\n    function on(name, callback) {\n      if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error('unknown event type: ' + name);\n      if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];\n      this.eventCallbacks[name].push(callback);\n    }\n\n    return on;\n  }();\n\n  _proto.forEachCallback = function () {\n    function forEachCallback(name, cb) {\n      if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {\n        return;\n      }\n\n      this.eventCallbacks[name].forEach(cb);\n    }\n\n    return forEachCallback;\n  }();\n\n  _proto._initCommon = function () {\n    function _initCommon(options) {\n      var _this = this;\n\n      options = options || Object.create(null); //// Constants\n      // how long to wait until we declare the connection attempt\n      // failed.\n\n      this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n      this.eventCallbacks = Object.create(null); // name -> [callback]\n\n      this._forcedToDisconnect = false; //// Reactive status\n\n      this.currentStatus = {\n        status: 'connecting',\n        connected: false,\n        retryCount: 0\n      };\n\n      if (Package.tracker) {\n        this.statusListeners = new Package.tracker.Tracker.Dependency();\n      }\n\n      this.statusChanged = function () {\n        if (_this.statusListeners) {\n          _this.statusListeners.changed();\n        }\n      }; //// Retry logic\n\n\n      this._retry = new Retry();\n      this.connectionTimer = null;\n    }\n\n    return _initCommon;\n  }(); // Trigger a reconnect.\n\n\n  _proto.reconnect = function () {\n    function reconnect(options) {\n      options = options || Object.create(null);\n\n      if (options.url) {\n        this._changeUrl(options.url);\n      }\n\n      if (options._sockjsOptions) {\n        this.options._sockjsOptions = options._sockjsOptions;\n      }\n\n      if (this.currentStatus.connected) {\n        if (options._force || options.url) {\n          this._lostConnection(forcedReconnectError);\n        }\n\n        return;\n      } // if we're mid-connection, stop it.\n\n\n      if (this.currentStatus.status === 'connecting') {\n        // Pretend it's a clean close.\n        this._lostConnection();\n      }\n\n      this._retry.clear();\n\n      this.currentStatus.retryCount -= 1; // don't count manual retries\n\n      this._retryNow();\n    }\n\n    return reconnect;\n  }();\n\n  _proto.disconnect = function () {\n    function disconnect(options) {\n      options = options || Object.create(null); // Failed is permanent. If we're failed, don't let people go back\n      // online by calling 'disconnect' then 'reconnect'.\n\n      if (this._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream\n      // is forced to disconnect, it can never reconnect. This is for\n      // error cases such as ddp version mismatch, where trying again\n      // won't fix the problem.\n\n      if (options._permanent) {\n        this._forcedToDisconnect = true;\n      }\n\n      this._cleanup();\n\n      this._retry.clear();\n\n      this.currentStatus = {\n        status: options._permanent ? 'failed' : 'offline',\n        connected: false,\n        retryCount: 0\n      };\n      if (options._permanent && options._error) this.currentStatus.reason = options._error;\n      this.statusChanged();\n    }\n\n    return disconnect;\n  }(); // maybeError is set unless it's a clean protocol-level close.\n\n\n  _proto._lostConnection = function () {\n    function _lostConnection(maybeError) {\n      this._cleanup(maybeError);\n\n      this._retryLater(maybeError); // sets status. no need to do it here.\n\n    }\n\n    return _lostConnection;\n  }(); // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n\n\n  _proto._online = function () {\n    function _online() {\n      // if we've requested to be offline by disconnecting, don't reconnect.\n      if (this.currentStatus.status != 'offline') this.reconnect();\n    }\n\n    return _online;\n  }();\n\n  _proto._retryLater = function () {\n    function _retryLater(maybeError) {\n      var timeout = 0;\n\n      if (this.options.retry || maybeError === forcedReconnectError) {\n        timeout = this._retry.retryLater(this.currentStatus.retryCount, this._retryNow.bind(this));\n        this.currentStatus.status = 'waiting';\n        this.currentStatus.retryTime = new Date().getTime() + timeout;\n      } else {\n        this.currentStatus.status = 'failed';\n        delete this.currentStatus.retryTime;\n      }\n\n      this.currentStatus.connected = false;\n      this.statusChanged();\n    }\n\n    return _retryLater;\n  }();\n\n  _proto._retryNow = function () {\n    function _retryNow() {\n      if (this._forcedToDisconnect) return;\n      this.currentStatus.retryCount += 1;\n      this.currentStatus.status = 'connecting';\n      this.currentStatus.connected = false;\n      delete this.currentStatus.retryTime;\n      this.statusChanged();\n\n      this._launchConnection();\n    }\n\n    return _retryNow;\n  }(); // Get current status. Reactive.\n\n\n  _proto.status = function () {\n    function status() {\n      if (this.statusListeners) {\n        this.statusListeners.depend();\n      }\n\n      return this.currentStatus;\n    }\n\n    return status;\n  }();\n\n  return StreamClientCommon;\n}();","map":{"version":3,"sources":["packages/socket-stream-client/common.js"],"names":["module","export","StreamClientCommon","Retry","watch","require","v","forcedReconnectError","Error","options","retry","ConnectionError","on","name","callback","eventCallbacks","push","forEachCallback","cb","length","forEach","_initCommon","Object","create","CONNECT_TIMEOUT","connectTimeoutMs","_forcedToDisconnect","currentStatus","status","connected","retryCount","Package","tracker","statusListeners","Tracker","Dependency","statusChanged","changed","_retry","connectionTimer","reconnect","url","_changeUrl","_sockjsOptions","_force","_lostConnection","clear","_retryNow","disconnect","_permanent","_cleanup","_error","reason","maybeError","_retryLater","_online","timeout","retryLater","bind","retryTime","Date","getTime","_launchConnection","depend"],"mappings":"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","sourcesContent":["import { Retry } from 'meteor/retry';\n\nconst forcedReconnectError = new Error(\"forced reconnect\");\n\nexport class StreamClientCommon {\n  constructor(options) {\n    this.options = {\n      retry: true,\n      ...(options || null),\n    };\n\n    this.ConnectionError =\n      options && options.ConnectionError || Error;\n  }\n\n  // Register for callbacks.\n  on(name, callback) {\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error('unknown event type: ' + name);\n\n    if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];\n    this.eventCallbacks[name].push(callback);\n  }\n\n  forEachCallback(name, cb) {\n    if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {\n      return;\n    }\n\n    this.eventCallbacks[name].forEach(cb);\n  }\n\n  _initCommon(options) {\n    options = options || Object.create(null);\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    this.eventCallbacks = Object.create(null); // name -> [callback]\n\n    this._forcedToDisconnect = false;\n\n    //// Reactive status\n    this.currentStatus = {\n      status: 'connecting',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (Package.tracker) {\n      this.statusListeners = new Package.tracker.Tracker.Dependency();\n    }\n\n    this.statusChanged = () => {\n      if (this.statusListeners) {\n        this.statusListeners.changed();\n      }\n    };\n\n    //// Retry logic\n    this._retry = new Retry();\n    this.connectionTimer = null;\n  }\n\n  // Trigger a reconnect.\n  reconnect(options) {\n    options = options || Object.create(null);\n\n    if (options.url) {\n      this._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      this.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (this.currentStatus.connected) {\n      if (options._force || options.url) {\n        this._lostConnection(forcedReconnectError);\n      }\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (this.currentStatus.status === 'connecting') {\n      // Pretend it's a clean close.\n      this._lostConnection();\n    }\n\n    this._retry.clear();\n    this.currentStatus.retryCount -= 1; // don't count manual retries\n    this._retryNow();\n  }\n\n  disconnect(options) {\n    options = options || Object.create(null);\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (this._forcedToDisconnect) return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      this._forcedToDisconnect = true;\n    }\n\n    this._cleanup();\n    this._retry.clear();\n\n    this.currentStatus = {\n      status: options._permanent ? 'failed' : 'offline',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      this.currentStatus.reason = options._error;\n\n    this.statusChanged();\n  }\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection(maybeError) {\n    this._cleanup(maybeError);\n    this._retryLater(maybeError); // sets status. no need to do it here.\n  }\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online() {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != 'offline') this.reconnect();\n  }\n\n  _retryLater(maybeError) {\n    var timeout = 0;\n    if (this.options.retry ||\n        maybeError === forcedReconnectError) {\n      timeout = this._retry.retryLater(\n        this.currentStatus.retryCount,\n        this._retryNow.bind(this)\n      );\n      this.currentStatus.status = 'waiting';\n      this.currentStatus.retryTime = new Date().getTime() + timeout;\n    } else {\n      this.currentStatus.status = 'failed';\n      delete this.currentStatus.retryTime;\n    }\n\n    this.currentStatus.connected = false;\n    this.statusChanged();\n  }\n\n  _retryNow() {\n    if (this._forcedToDisconnect) return;\n\n    this.currentStatus.retryCount += 1;\n    this.currentStatus.status = 'connecting';\n    this.currentStatus.connected = false;\n    delete this.currentStatus.retryTime;\n    this.statusChanged();\n\n    this._launchConnection();\n  }\n\n  // Get current status. Reactive.\n  status() {\n    if (this.statusListeners) {\n      this.statusListeners.depend();\n    }\n    return this.currentStatus;\n  }\n}\n"]},"sourceType":"script","hash":"893f386c6d430329ccadf1cdefa5d5bc2fe0c0e9"}
