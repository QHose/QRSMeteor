{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/mongo/upsert_compatibility_test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/mongo/upsert_compatibility_test.js","filename":"packages/mongo/upsert_compatibility_test.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/mongo/upsert_compatibility_test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/upsert_compatibility_test.js"}},"code":"Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  coll.insert({\n    foo: 1\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      foo: 2\n    }\n  });\n  var updated = coll.findOne({\n    foo: 2\n  });\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    foo: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      bar: 2\n    }\n  });\n  var inserted = coll.findOne({\n    foo: 1\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    foo: 1,\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  coll.insert({\n    foo: 1,\n    baz: 42\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var updated = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var inserted = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  coll.insert({\n    foo: 1\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      foo: 2\n    }\n  });\n  var updated = coll.findOne({\n    foo: 2\n  });\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof updated._id === 'string');\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    foo: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      bar: 2\n    }\n  });\n  var inserted = coll.findOne({\n    foo: 1\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    foo: 1,\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  coll.insert({\n    foo: 1,\n    baz: 42\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var updated = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof updated._id === 'string');\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var inserted = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    _id: 'meu id'\n  });\n  var inserted = coll.findOne({\n    _id: 'meu id'\n  });\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(EJSON.equals(inserted, {\n    _id: 'meu id'\n  }), true);\n});","map":{"version":3,"sources":["packages/mongo/upsert_compatibility_test.js"],"names":["Tinytest","add","test","collName","Random","id","coll","Mongo","Collection","idGeneration","insert","foo","result","upsert","$set","updated","findOne","equal","insertedId","undefined","numberAffected","isTrue","_id","ObjectID","EJSON","equals","bar","inserted","baz"],"mappings":"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","sourcesContent":["Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {_id: 'meu id'});\n  var inserted = coll.findOne({_id: 'meu id'});\n\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n\n  test.equal(EJSON.equals(inserted, {_id: 'meu id'}), true);\n});\n"]},"sourceType":"script","hash":"e03fcfca337a71974dba83b389ba6771e5184646"}
