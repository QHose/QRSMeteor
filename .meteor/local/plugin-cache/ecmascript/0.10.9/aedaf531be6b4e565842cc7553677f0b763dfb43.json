{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/accounts-password/password_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/accounts-password/password_tests.js","filename":"packages/accounts-password/password_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/accounts-password/password_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/password_tests.js"}},"code":"Accounts._noConnectionCloseDelayForTest = true;\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n  Meteor.methods({\n    getResetToken: function () {\n      var token = Meteor.users.findOne(this.userId).services.password.reset;\n      return token;\n    },\n    addSkipCaseInsensitiveChecksForTest: function (value) {\n      Accounts._skipCaseInsensitiveChecksForTest[value] = true;\n    },\n    removeSkipCaseInsensitiveChecksForTest: function (value) {\n      delete Accounts._skipCaseInsensitiveChecksForTest[value];\n    },\n    countUsersOnServer: function (query) {\n      return Meteor.users.find(query).count();\n    }\n  });\n}\n\nif (Meteor.isClient) (function () {\n  // XXX note, only one test can do login/logout things at once! for\n  // now, that is this test.\n  Accounts._isolateLoginTokenForTest();\n\n  var addSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('addSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var removeSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('removeSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var createUserStep = function (test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = 'AdaLovelace' + this.randomSuffix;\n    this.email = \"Ada-intercept@lovelace.com\" + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser({\n      username: this.username,\n      email: this.email,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  };\n\n  var logoutStep = function (test, expect) {\n    Meteor.logout(expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n\n      test.equal(Meteor.user(), null);\n    }));\n  };\n\n  var loggedInAs = function (someUsername, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n\n      test.equal(Meteor.userId() && Meteor.user().username, someUsername);\n    });\n  };\n\n  var loggedInUserHasEmail = function (someEmail, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n\n      var user = Meteor.user();\n      test.isTrue(user && _.some(user.emails, function (email) {\n        return email.address === someEmail;\n      }));\n    });\n  };\n\n  var expectError = function (expectedError, test, expect) {\n    return expect(function (actualError) {\n      test.equal(actualError && actualError.error, expectedError.error);\n      test.equal(actualError && actualError.reason, expectedError.reason);\n    });\n  };\n\n  var expectUserNotFound = function (test, expect) {\n    return expectError(new Meteor.Error(403, \"User not found\"), test, expect);\n  };\n\n  var waitForLoggedOutStep = function (test, expect) {\n    pollUntil(expect, function () {\n      return Meteor.userId() === null;\n    }, 10 * 1000, 100);\n  };\n\n  var invalidateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'fail', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  var hideActualLoginErrorStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'hide', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  var validateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", false, expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  testAsyncMulti(\"passwords - basic login with password\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n    Accounts.createUser({\n      username: this.username,\n      email: this.email,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    test.notEqual(Meteor.userId(), null);\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword(this.username, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, // This next step tests reactive contexts which are reactive on\n  // Meteor.user().\n  function (test, expect) {\n    // Set up a reactive context that only refreshes when Meteor.user() is\n    // invalidated.\n    var loaded = false;\n    var handle = Tracker.autorun(function () {\n      if (Meteor.user() && Meteor.user().emails) loaded = true;\n    }); // At the beginning, we're not logged in.\n\n    test.isFalse(loaded);\n    Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n      test.equal(error, undefined);\n      test.notEqual(Meteor.userId(), null); // By the time of the login callback, the user should be loaded.\n\n      test.isTrue(Meteor.user().emails); // Flushing should get us the rerun as well.\n\n      Tracker.flush();\n      test.isTrue(loaded);\n      handle.stop();\n    }));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword({\n      username: this.username\n    }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.loginWithPassword({\n      email: this.email\n    }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep]);\n  testAsyncMulti(\"passwords - plain text passwords\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password'; // create user with raw password (no API, need to invoke callLoginMethod\n    // directly)\n\n    Accounts.callLoginMethod({\n      methodName: 'createUser',\n      methodArguments: [{\n        username: this.username,\n        password: this.password\n      }],\n      userCallback: loggedInAs(this.username, test, expect)\n    });\n  }, logoutStep, // check can login normally with this password.\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      username: this.username\n    }, this.password, loggedInAs(this.username, test, expect));\n  }, logoutStep, // plain text password. no API for this, have to invoke callLoginMethod\n  // directly.\n  function (test, expect) {\n    Accounts.callLoginMethod({\n      // wrong password\n      methodArguments: [{\n        user: {\n          username: this.username\n        },\n        password: 'wrong'\n      }],\n      userCallback: expect(function (error) {\n        test.isTrue(error);\n        test.isFalse(Meteor.user());\n      })\n    });\n  }, function (test, expect) {\n    Accounts.callLoginMethod({\n      // right password\n      methodArguments: [{\n        user: {\n          username: this.username\n        },\n        password: this.password\n      }],\n      userCallback: loggedInAs(this.username, test, expect)\n    });\n  }, logoutStep]);\n  testAsyncMulti(\"passwords - logging in with case insensitive username\", [createUserStep, logoutStep, // We should be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      username: \"adalovelace\" + this.randomSuffix\n    }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"with non-ASCII characters\", [function (test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = 'ÁdaLØvela😈e' + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser({\n      username: this.username,\n      email: this.email,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, logoutStep, // We should be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      username: \"ádaløvela😈e\" + this.randomSuffix\n    }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"should escape regex special characters\", [createUserStep, logoutStep, // We shouldn't be able to log in with a regex expression for the username\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      username: \".+\" + this.randomSuffix\n    }, this.password, expectUserNotFound(test, expect));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" + \"should require a match of the full string\", [createUserStep, logoutStep, // We shouldn't be able to log in with a partial match for the username\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      username: \"lovelace\" + this.randomSuffix\n    }, this.password, expectUserNotFound(test, expect));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive username when \" + \"there are multiple matches\", [createUserStep, logoutStep, function (test, expect) {\n    this.otherUsername = 'Adalovelace' + this.randomSuffix;\n    addSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  }, // Create another user with a username that only differs in case\n  function (test, expect) {\n    Accounts.createUser({\n      username: this.otherUsername,\n      password: this.password\n    }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  }, // We shouldn't be able to log in with the username in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      username: \"adalovelace\" + this.randomSuffix\n    }, this.password, expectUserNotFound(test, expect));\n  }, // We should still be able to log in with the username in original case\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      username: this.username\n    }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" + \"username\", [createUserStep, logoutStep, // Attempting to create another user with a username that only differs in\n  // case should fail\n  function (test, expect) {\n    this.newUsername = 'adalovelace' + this.randomSuffix;\n    Accounts.createUser({\n      username: this.newUsername,\n      password: this.password\n    }, expectError(new Meteor.Error(403, \"Username already exists.\"), test, expect));\n  }, // Make sure the new user has not been inserted\n  function (test, expect) {\n    Meteor.call('countUsersOnServer', {\n      username: this.newUsername\n    }, expect(function (error, result) {\n      test.equal(result, 0);\n    }));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive email\", [createUserStep, logoutStep, // We should be able to log in with the email in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      email: \"ada-intercept@lovelace.com\" + this.randomSuffix\n    }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" + \"escape regex special characters\", [createUserStep, logoutStep, // We shouldn't be able to log in with a regex expression for the email\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      email: \".+\" + this.randomSuffix\n    }, this.password, expectUserNotFound(test, expect));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" + \"require a match of the full string\", [createUserStep, logoutStep, // We shouldn't be able to log in with a partial match for the email\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      email: \"com\" + this.randomSuffix\n    }, this.password, expectUserNotFound(test, expect));\n  }]);\n  testAsyncMulti(\"passwords - logging in with case insensitive email when \" + \"there are multiple matches\", [createUserStep, logoutStep, function (test, expect) {\n    this.otherUsername = 'AdaLovelace' + Random.id(10);\n    this.otherEmail = \"ADA-intercept@lovelace.com\" + this.randomSuffix;\n    addSkipCaseInsensitiveChecksForTest(this.otherEmail, test, expect);\n  }, // Create another user with an email that only differs in case\n  function (test, expect) {\n    Accounts.createUser({\n      username: this.otherUsername,\n      email: this.otherEmail,\n      password: this.password\n    }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n  }, logoutStep, // We shouldn't be able to log in with the email in lower case\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      email: \"ada-intercept@lovelace.com\" + this.randomSuffix\n    }, this.password, expectUserNotFound(test, expect));\n  }, // We should still be able to log in with the email in original case\n  function (test, expect) {\n    Meteor.loginWithPassword({\n      email: this.email\n    }, this.password, loggedInAs(this.username, test, expect));\n  }]);\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" + \"email\", [createUserStep, logoutStep, // Create user error without callback should throw error\n  function (test, expect) {\n    this.newUsername = 'adalovelace' + this.randomSuffix;\n    test.throws(function () {\n      Accounts.createUser({\n        username: this.newUsername,\n        password: ''\n      });\n    }, /Password may not be empty/);\n  }, // Attempting to create another user with an email that only differs in\n  // case should fail\n  function (test, expect) {\n    this.newEmail = \"ada-intercept@lovelace.com\" + this.randomSuffix;\n    Accounts.createUser({\n      email: this.newEmail,\n      password: this.password\n    }, expectError(new Meteor.Error(403, \"Email already exists.\"), test, expect));\n  }, // Make sure the new user has not been inserted\n  function (test, expect) {\n    Meteor.call('countUsersOnServer', {\n      'emails.address': this.newEmail\n    }, expect(function (error, result) {\n      test.equal(result, 0);\n    }));\n  }]);\n  testAsyncMulti(\"passwords - changing passwords\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n    this.password2 = 'password2';\n    Accounts.createUser({\n      username: this.username,\n      email: this.email,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, // Send a password reset email so that we can test that password\n  // reset tokens get deleted on password change.\n  function (test, expect) {\n    Meteor.call(\"forgotPassword\", {\n      email: this.email\n    }, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call(\"getResetToken\", expect(function (err, token) {\n      test.isFalse(err);\n      test.isTrue(token);\n      self.token = token;\n    }));\n  }, // change password with bad old password. we stay logged in.\n  function (test, expect) {\n    var self = this;\n    Accounts.changePassword('wrong', 'doesntmatter', expect(function (error) {\n      test.isTrue(error);\n      test.equal(Meteor.user().username, self.username);\n    }));\n  }, // change password with blank new password\n  function (test, expect) {\n    test.throws(function () {\n      Accounts.changePassword(this.password, '');\n    }, /Password may not be empty/);\n  }, // change password with good old password.\n  function (test, expect) {\n    Accounts.changePassword(this.password, this.password2, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    Meteor.call(\"getResetToken\", expect(function (err, token) {\n      test.isFalse(err);\n      test.isFalse(token);\n    }));\n  }, logoutStep, // old password, failed login\n  function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password, expect(function (error) {\n      test.isTrue(error);\n      test.isFalse(Meteor.user());\n    }));\n  }, // new password, success\n  function (test, expect) {\n    Meteor.loginWithPassword(this.email, this.password2, loggedInAs(this.username, test, expect));\n  }, logoutStep]);\n  testAsyncMulti(\"passwords - changing password logs out other clients\", [function (test, expect) {\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n    this.password2 = 'password2';\n    Accounts.createUser({\n      username: this.username,\n      email: this.email,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, // Log in a second connection as this user.\n  function (test, expect) {\n    var self = this;\n    self.secondConn = DDP.connect(Meteor.absoluteUrl());\n    self.secondConn.call('login', {\n      user: {\n        username: self.username\n      },\n      password: self.password\n    }, expect(function (err, result) {\n      test.isFalse(err);\n      self.secondConn.setUserId(result.id);\n      test.isTrue(self.secondConn.userId());\n\n      self.secondConn.onReconnect = function () {\n        self.secondConn.apply('login', [{\n          resume: result.token\n        }], {\n          wait: true\n        }, function (err, result) {\n          self.secondConn.setUserId(result && result.id || null);\n        });\n      };\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Accounts.changePassword(self.password, self.password2, expect(function (err) {\n      test.isFalse(err);\n    }));\n  }, // Now that we've changed the password, wait until the second\n  // connection gets logged out.\n  function (test, expect) {\n    var self = this;\n    pollUntil(expect, function () {\n      return self.secondConn.userId() === null;\n    }, 10 * 1000, 100);\n  }]);\n  testAsyncMulti(\"passwords - forgotPassword client return error when empty email\", [function (test, expect) {\n    // setup\n    this.email = '';\n  }, // forgotPassword called on client with blank email\n  function (test, expect) {\n    Accounts.forgotPassword({\n      email: this.email\n    }, expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, // forgotPassword called on client with blank email and no callback.\n  function (test, expect) {\n    test.throws(function () {\n      Accounts.forgotPassword({\n        email: this.email\n      });\n    }, /Must pass options\\.email/);\n  }]);\n  Tinytest.add('passwords - forgotPassword only passes callback value to forgotPassword ' + 'Method if callback is defined (to address issue #5676)', function (test) {\n    let methodCallArgumentCount = 0;\n    const originalMethodCall = Accounts.connection.call;\n\n    const stubMethodCall = (...args) => {\n      methodCallArgumentCount = args.length;\n    };\n\n    Accounts.connection.call = stubMethodCall;\n    Accounts.forgotPassword({\n      email: 'test@meteor.com'\n    });\n    test.equal(methodCallArgumentCount, 2, 'Method call should have 2 arguments since no callback is passed in');\n    Accounts.forgotPassword({\n      email: 'test@meteor.com'\n    }, () => {});\n    test.equal(methodCallArgumentCount, 3, 'Method call should have 3 arguments since a callback is passed in');\n    Accounts.connection.call = originalMethodCall;\n  });\n  testAsyncMulti(\"passwords - verifyEmail client return error when empty token\", [function (test, expect) {\n    // setup\n    this.token = '';\n  }, // verifyEmail called on client with blank token\n  function (test, expect) {\n    Accounts.verifyEmail(this.token, expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, // verifyEmail called on client with blank token and no callback.\n  function (test, expect) {\n    test.throws(function () {\n      Accounts.verifyEmail(this.token);\n    }, /Need to pass token/);\n  }]);\n  testAsyncMulti(\"passwords - resetPassword errors\", [function (test, expect) {\n    // setup\n    this.token = '';\n    this.newPassword = 'nonblankpassword';\n  }, // resetPassword called on client with blank token\n  function (test, expect) {\n    Accounts.resetPassword(this.token, this.newPassword, expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    // setup\n    this.token = 'nonblank-token';\n    this.newPassword = '';\n  }, // resetPassword called on client with blank password\n  function (test, expect) {\n    Accounts.resetPassword(this.token, this.newPassword, expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, // resetPassword called on client with blank password and no callback.\n  function (test, expect) {\n    test.throws(function () {\n      Accounts.resetPassword(this.token, this.newPassword);\n    }, /Match error: Expected string, got undefined/);\n  }]);\n  testAsyncMulti(\"passwords - new user hooks\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.email = Random.id() + '-intercept@example.com';\n    this.password = 'password';\n  }, // test Accounts.validateNewUser\n  function (test, expect) {\n    Accounts.createUser({\n      username: this.username,\n      password: this.password,\n      // should fail the new user validators\n      profile: {\n        invalid: true\n      }\n    }, expect(function (error) {\n      test.equal(error.error, 403);\n      test.equal(error.reason, \"User validation failed\");\n    }));\n  }, logoutStep, function (test, expect) {\n    Accounts.createUser({\n      username: this.username,\n      password: this.password,\n      // should fail the new user validator with a special\n      // exception\n      profile: {\n        invalidAndThrowException: true\n      }\n    }, expect(function (error) {\n      test.equal(error.reason, \"An exception thrown within Accounts.validateNewUser\");\n    }));\n  }, // test Accounts.onCreateUser\n  function (test, expect) {\n    Accounts.createUser({\n      username: this.username,\n      password: this.password,\n      testOnCreateUserHook: true\n    }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    test.equal(Meteor.user().profile.touchedByOnCreateUser, true);\n  }, logoutStep]);\n  testAsyncMulti(\"passwords - Meteor.user()\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.password = 'password';\n    Accounts.createUser({\n      username: this.username,\n      password: this.password,\n      testOnCreateUserHook: true\n    }, loggedInAs(this.username, test, expect));\n  }, // test Meteor.user(). This test properly belongs in\n  // accounts-base/accounts_tests.js, but this is where the tests that\n  // actually log in are.\n  function (test, expect) {\n    var self = this;\n    var clientUser = Meteor.user();\n    Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n      test.equal(result._id, clientUser._id);\n      test.equal(result.username, clientUser.username);\n      test.equal(result.username, self.username);\n      test.equal(result.profile.touchedByOnCreateUser, true);\n      test.equal(err, undefined);\n    }));\n  }, function (test, expect) {\n    // Test that even with no published fields, we still have a document.\n    Accounts.connection.call('clearUsernameAndProfile', expect(function () {\n      test.isTrue(Meteor.userId());\n      var user = Meteor.user();\n      test.equal(user, {\n        _id: Meteor.userId()\n      });\n    }));\n  }, logoutStep, function (test, expect) {\n    var clientUser = Meteor.user();\n    test.equal(clientUser, null);\n    test.equal(Meteor.userId(), null);\n    Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n      test.equal(err, undefined);\n      test.equal(result, null);\n    }));\n  }]);\n  testAsyncMulti(\"passwords - allow rules\", [// create a second user to have an id for in a later test\n  function (test, expect) {\n    this.otherUsername = Random.id();\n    Accounts.createUser({\n      username: this.otherUsername,\n      password: 'dontcare',\n      testOnCreateUserHook: true\n    }, loggedInAs(this.otherUsername, test, expect));\n  }, function (test, expect) {\n    this.otherUserId = Meteor.userId();\n  }, function (test, expect) {\n    // real setup\n    this.username = Random.id();\n    this.password = 'password';\n    Accounts.createUser({\n      username: this.username,\n      password: this.password,\n      testOnCreateUserHook: true\n    }, loggedInAs(this.username, test, expect));\n  }, // test the default Meteor.users allow rule. This test properly belongs in\n  // accounts-base/accounts_tests.js, but this is where the tests that\n  // actually log in are.\n  function (test, expect) {\n    this.userId = Meteor.userId();\n    test.notEqual(this.userId, null);\n    test.notEqual(this.userId, this.otherUserId); // Can't update fields other than profile.\n\n    Meteor.users.update(this.userId, {\n      $set: {\n        disallowed: true,\n        'profile.updated': 42\n      }\n    }, expect(function (err) {\n      test.isTrue(err);\n      test.equal(err.error, 403);\n      test.isFalse(_.has(Meteor.user(), 'disallowed'));\n      test.isFalse(_.has(Meteor.user().profile, 'updated'));\n    }));\n  }, function (test, expect) {\n    // Can't update another user.\n    Meteor.users.update(this.otherUserId, {\n      $set: {\n        'profile.updated': 42\n      }\n    }, expect(function (err) {\n      test.isTrue(err);\n      test.equal(err.error, 403);\n    }));\n  }, function (test, expect) {\n    // Can't update using a non-ID selector. (This one is thrown client-side.)\n    test.throws(function () {\n      Meteor.users.update({\n        username: this.username\n      }, {\n        $set: {\n          'profile.updated': 42\n        }\n      });\n    });\n    test.isFalse(_.has(Meteor.user().profile, 'updated'));\n  }, function (test, expect) {\n    // Can update own profile using ID.\n    Meteor.users.update(this.userId, {\n      $set: {\n        'profile.updated': 42\n      }\n    }, expect(function (err) {\n      test.isFalse(err);\n      test.equal(42, Meteor.user().profile.updated);\n    }));\n  }, logoutStep]);\n  testAsyncMulti(\"passwords - tokens\", [function (test, expect) {\n    // setup\n    this.username = Random.id();\n    this.password = 'password';\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    // we can't login with an invalid token\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    Meteor.loginWithToken('invalid', expectLoginError);\n  }, function (test, expect) {\n    // we can login with a valid token\n    var expectLoginOK = expect(function (err) {\n      test.isFalse(err);\n    });\n    Meteor.loginWithToken(Accounts._storedLoginToken(), expectLoginOK);\n  }, function (test, expect) {\n    // test logging out invalidates our token\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n\n    var token = Accounts._storedLoginToken();\n\n    test.isTrue(token);\n    Meteor.logout(function () {\n      Meteor.loginWithToken(token, expectLoginError);\n    });\n  }, function (test, expect) {\n    var self = this; // Test that login tokens get expired. We should get logged out when a\n    // token expires, and not be able to log in again with the same token.\n\n    var expectNoError = expect(function (err) {\n      test.isFalse(err);\n    });\n    Meteor.loginWithPassword(this.username, this.password, function (error) {\n      self.token = Accounts._storedLoginToken();\n      test.isTrue(self.token);\n      expectNoError(error);\n      Accounts.connection.call(\"expireTokens\");\n    });\n  }, waitForLoggedOutStep, function (test, expect) {\n    var token = Accounts._storedLoginToken();\n\n    test.isFalse(token);\n  }, function (test, expect) {\n    // Test that once expireTokens is finished, we can't login again with our\n    // previous token.\n    Meteor.loginWithToken(this.token, expect(function (err, result) {\n      test.isTrue(err);\n      test.equal(Meteor.userId(), null);\n    }));\n  }, logoutStep, function (test, expect) {\n    var self = this; // Test that Meteor.logoutOtherClients logs out a second\n    // authentcated connection while leaving Accounts.connection\n    // logged in.\n\n    var secondConn = DDP.connect(Meteor.absoluteUrl());\n    var token;\n    var expectSecondConnLoggedOut = expect(function (err, result) {\n      test.isTrue(err);\n    });\n    var expectAccountsConnLoggedIn = expect(function (err, result) {\n      test.isFalse(err);\n    });\n    var expectSecondConnLoggedIn = expect(function (err, result) {\n      test.equal(result.token, token);\n      test.isFalse(err);\n      Meteor.logoutOtherClients(function (err) {\n        test.isFalse(err);\n        secondConn.call('login', {\n          resume: token\n        }, expectSecondConnLoggedOut);\n        Accounts.connection.call('login', {\n          resume: Accounts._storedLoginToken()\n        }, expectAccountsConnLoggedIn);\n      });\n    });\n    Meteor.loginWithPassword(self.username, self.password, expect(function (err) {\n      test.isFalse(err);\n      token = Accounts._storedLoginToken();\n      test.isTrue(token);\n      secondConn.call('login', {\n        resume: token\n      }, expectSecondConnLoggedIn);\n    }));\n  }, logoutStep, // The tests below this point are for the deprecated\n  // `logoutOtherClients` method.\n  function (test, expect) {\n    var self = this; // Test that Meteor.logoutOtherClients logs out a second authenticated\n    // connection while leaving Accounts.connection logged in.\n\n    var token;\n    self.secondConn = DDP.connect(Meteor.absoluteUrl());\n    var expectLoginError = expect(function (err) {\n      test.isTrue(err);\n    });\n    var expectValidToken = expect(function (err, result) {\n      test.isFalse(err);\n      test.isTrue(result);\n      self.tokenFromLogoutOthers = result.token;\n    });\n    var expectSecondConnLoggedIn = expect(function (err, result) {\n      test.equal(result.token, token);\n      test.isFalse(err); // This test will fail if an unrelated reconnect triggers before the\n      // connection is logged out. In general our tests aren't resilient to\n      // mid-test reconnects.\n\n      self.secondConn.onReconnect = function () {\n        self.secondConn.call(\"login\", {\n          resume: token\n        }, expectLoginError);\n      };\n\n      Accounts.connection.call(\"logoutOtherClients\", expectValidToken);\n    });\n    Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n      test.isFalse(err);\n      token = Accounts._storedLoginToken();\n      self.beforeLogoutOthersToken = token;\n      test.isTrue(token);\n      self.secondConn.call(\"login\", {\n        resume: token\n      }, expectSecondConnLoggedIn);\n    }));\n  }, // Test that logoutOtherClients logged out Accounts.connection and that the\n  // previous token is no longer valid.\n  waitForLoggedOutStep, function (test, expect) {\n    var self = this;\n\n    var token = Accounts._storedLoginToken();\n\n    test.isFalse(token);\n    this.secondConn.close();\n    Meteor.loginWithToken(self.beforeLogoutOthersToken, expect(function (err) {\n      test.isTrue(err);\n      test.isFalse(Meteor.userId());\n    }));\n  }, // Test that logoutOtherClients returned a new token that we can use to\n  // log in.\n  function (test, expect) {\n    var self = this;\n    Meteor.loginWithToken(self.tokenFromLogoutOthers, expect(function (err) {\n      test.isFalse(err);\n      test.isTrue(Meteor.userId());\n    }));\n  }, logoutStep, function (test, expect) {\n    var self = this; // Test that deleting a user logs out that user's connections.\n\n    Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n      test.isFalse(err);\n      Accounts.connection.call(\"removeUser\", self.username);\n    }));\n  }, waitForLoggedOutStep]);\n  testAsyncMulti(\"passwords - validateLoginAttempt\", [function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, logoutStep, invalidateLoginsStep, function (test, expect) {\n    Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, \"Login forbidden\");\n    }));\n  }, validateLoginsStep, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"some password\", expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, 'User not found');\n    }));\n  }, hideActualLoginErrorStep, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"some password\", expect(function (error) {\n      test.isTrue(error);\n      test.equal(error.reason, 'hide actual error');\n    }));\n  }, validateLoginsStep]);\n  testAsyncMulti(\"passwords - server onLogin hook\", [function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isTrue(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isTrue(attempt.allowed);\n      test.equal(attempt.methodArguments[0].username, self.username);\n    }));\n  }]);\n  testAsyncMulti(\"passwords - client onLogin hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n    this.onLogin = Accounts.onLogin(function (attempt) {\n      self.attempt = true;\n    });\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, function (test, expect) {\n    this.onLogin.stop();\n    test.isTrue(this.attempt);\n    expect(function () {})();\n  }]);\n  testAsyncMulti(\"passwords - server onLogout hook\", [function (test, expect) {\n    Meteor.call(\"testCaptureLogouts\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    var self = this;\n    Meteor.call(\"testFetchCapturedLogouts\", expect(function (error, logouts) {\n      test.isFalse(error);\n      test.equal(logouts.length, 1);\n      var logout = logouts[0];\n      test.isTrue(logout.successful);\n    }));\n  }]);\n  testAsyncMulti(\"passwords - client onLogout hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n    this.onLogout = Accounts.onLogout(function () {\n      self.logoutSuccess = true;\n    });\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    test.isTrue(this.logoutSuccess);\n    expect(function () {})();\n  }]);\n  testAsyncMulti(\"passwords - server onLoginFailure hook\", [function (test, expect) {\n    this.username = Random.id();\n    this.password = \"password\";\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isFalse(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isFalse(attempt.allowed);\n      test.equal(attempt.error.reason, \"Incorrect password\");\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(\"no such user\", \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n      test.isFalse(error);\n      test.equal(logins.length, 1);\n      var login = logins[0];\n      test.isFalse(login.successful);\n      var attempt = login.attempt;\n      test.equal(attempt.type, \"password\");\n      test.isFalse(attempt.allowed);\n      test.equal(attempt.error.reason, \"User not found\");\n    }));\n  }]);\n  testAsyncMulti(\"passwords - client onLoginFailure hook\", [function (test, expect) {\n    var self = this;\n    this.username = Random.id();\n    this.password = \"password\";\n    this.attempt = false;\n    this.onLoginFailure = Accounts.onLoginFailure(function () {\n      self.attempt = true;\n    });\n    Accounts.createUser({\n      username: this.username,\n      password: this.password\n    }, loggedInAs(this.username, test, expect));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"testCaptureLogins\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n      test.isTrue(error);\n    }));\n  }, function (test, expect) {\n    this.onLoginFailure.stop();\n    test.isTrue(this.attempt);\n    expect(function () {})();\n  }]);\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade\", [logoutStep, // Create user with old SRP credentials in the database.\n  function (test, expect) {\n    var self = this;\n    Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n      test.isFalse(error);\n      self.username = result;\n    }));\n  }, // We are able to login with the old style credentials in the database.\n  function (test, expect) {\n    Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep, // After the upgrade to bcrypt we're still able to login.\n  function (test, expect) {\n    Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep, function (test, expect) {\n    Meteor.call(\"removeUser\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }]);\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade via password change\", [logoutStep, // Create user with old SRP credentials in the database.\n  function (test, expect) {\n    var self = this;\n    Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n      test.isFalse(error);\n      self.username = result;\n    }));\n  }, // Log in with the plaintext password handler, which should NOT upgrade us to bcrypt.\n  function (test, expect) {\n    Accounts.callLoginMethod({\n      methodName: \"login\",\n      methodArguments: [{\n        user: {\n          username: this.username\n        },\n        password: \"abcdef\"\n      }],\n      userCallback: expect(function (err) {\n        test.isFalse(err);\n      })\n    });\n  }, function (test, expect) {\n    Meteor.call(\"testNoSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, // Changing our password should upgrade us to bcrypt.\n  function (test, expect) {\n    Accounts.changePassword(\"abcdef\", \"abcdefg\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, // And after the upgrade we should be able to change our password again.\n  function (test, expect) {\n    Accounts.changePassword(\"abcdefg\", \"abcdef\", expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, logoutStep]);\n})();\nif (Meteor.isServer) (function () {\n  Tinytest.add('passwords - setup more than one onCreateUserHook', function (test) {\n    test.throws(function () {\n      Accounts.onCreateUser(function () {});\n    });\n  });\n  Tinytest.add('passwords - createUser hooks', function (test) {\n    var username = Random.id();\n    test.throws(function () {\n      // should fail the new user validators\n      Accounts.createUser({\n        username: username,\n        profile: {\n          invalid: true\n        }\n      });\n    });\n    var userId = Accounts.createUser({\n      username: username,\n      testOnCreateUserHook: true\n    });\n    test.isTrue(userId);\n    var user = Meteor.users.findOne(userId);\n    test.equal(user.profile.touchedByOnCreateUser, true);\n  });\n  Tinytest.add('passwords - setPassword', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      username: username,\n      email: email\n    });\n    var user = Meteor.users.findOne(userId); // no services yet.\n\n    test.equal(user.services.password, undefined); // set a new password.\n\n    Accounts.setPassword(userId, 'new password');\n    user = Meteor.users.findOne(userId);\n    var oldSaltedHash = user.services.password.bcrypt;\n    test.isTrue(oldSaltedHash); // Send a reset password email (setting a reset token) and insert a login\n    // token.\n\n    Accounts.sendResetPasswordEmail(userId, email);\n\n    Accounts._insertLoginToken(userId, Accounts._generateStampedLoginToken());\n\n    test.isTrue(Meteor.users.findOne(userId).services.password.reset);\n    test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens); // reset with the same password, see we get a different salted hash\n\n    Accounts.setPassword(userId, 'new password', {\n      logout: false\n    });\n    user = Meteor.users.findOne(userId);\n    var newSaltedHash = user.services.password.bcrypt;\n    test.isTrue(newSaltedHash);\n    test.notEqual(oldSaltedHash, newSaltedHash); // No more reset token.\n\n    test.isFalse(Meteor.users.findOne(userId).services.password.reset); // But loginTokens are still here since we did logout: false.\n\n    test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens); // reset again, see that the login tokens are gone.\n\n    Accounts.setPassword(userId, 'new password');\n    user = Meteor.users.findOne(userId);\n    var newerSaltedHash = user.services.password.bcrypt;\n    test.isTrue(newerSaltedHash);\n    test.notEqual(oldSaltedHash, newerSaltedHash);\n    test.notEqual(newSaltedHash, newerSaltedHash); // No more tokens.\n\n    test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n    test.isFalse(Meteor.users.findOne(userId).services.resume.loginTokens); // cleanup\n\n    Meteor.users.remove(userId);\n  }); // This test properly belongs in accounts-base/accounts_tests.js, but\n  // this is where the tests that actually log in are.\n\n  Tinytest.add('accounts - user() out of context', function (test) {\n    // basic server context, no method.\n    test.throws(function () {\n      Meteor.user();\n    });\n  }); // XXX would be nice to test\n  // Accounts.config({forbidClientAccountCreation: true})\n\n  Tinytest.addAsync('passwords - login token observes get cleaned up', function (test, onComplete) {\n    var username = Random.id();\n    Accounts.createUser({\n      username: username,\n      password: 'password'\n    });\n    makeTestConnection(test, function (clientConn, serverConn) {\n      serverConn.onClose(function () {\n        test.isFalse(Accounts._getUserObserve(serverConn.id));\n        onComplete();\n      });\n      var result = clientConn.call('login', {\n        user: {\n          username: username\n        },\n        password: 'password'\n      });\n      test.isTrue(result);\n\n      var token = Accounts._getAccountData(serverConn.id, 'loginToken');\n\n      test.isTrue(token); // We poll here, instead of just checking `_getUserObserve`\n      // once, because the login method defers the creation of the\n      // observe, and setting up the observe yields, so we could end\n      // up here before the observe has been set up.\n\n      simplePoll(function () {\n        return !!Accounts._getUserObserve(serverConn.id);\n      }, function () {\n        test.isTrue(Accounts._getUserObserve(serverConn.id));\n        clientConn.disconnect();\n      }, function () {\n        test.fail(\"timed out waiting for user observe for connection \" + serverConn.id);\n        onComplete();\n      });\n    }, onComplete);\n  });\n  Tinytest.add(\"passwords - reset password doesn't work if email changed after email sent\", function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      username: username,\n      email: email,\n      password: \"old-password\"\n    });\n    var user = Meteor.users.findOne(userId);\n    Accounts.sendResetPasswordEmail(userId, email);\n    var resetPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = resetPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var resetPasswordToken = match[1];\n    var newEmail = Random.id() + '-new@example.com';\n    Meteor.users.update(userId, {\n      $set: {\n        \"emails.0.address\": newEmail\n      }\n    });\n    test.throws(function () {\n      Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n    }, /Token has invalid email address/);\n    test.throws(function () {\n      Meteor.call(\"login\", {\n        user: {\n          username: username\n        },\n        password: \"new-password\"\n      });\n    }, /Incorrect password/);\n  });\n  Tinytest.addAsync('passwords - reset password should work when token is not expired', function (test, onComplete) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      username: username,\n      email: email,\n      password: \"old-password\"\n    });\n    var user = Meteor.users.findOne(userId);\n    Accounts.sendResetPasswordEmail(userId, email);\n    var resetPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = resetPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var resetPasswordToken = match[1];\n    makeTestConnection(test, function (clientConn) {\n      test.isTrue(clientConn.call(\"resetPassword\", resetPasswordToken, \"new-password\"));\n      test.isTrue(clientConn.call(\"login\", {\n        user: {\n          username\n        },\n        password: \"new-password\"\n      }));\n      onComplete();\n    });\n  });\n  Tinytest.add('passwords - reset password should not work when token is expired', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      username: username,\n      email: email,\n      password: \"old-password\"\n    });\n    var user = Meteor.users.findOne(userId);\n    Accounts.sendResetPasswordEmail(userId, email);\n    var resetPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = resetPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var resetPasswordToken = match[1];\n    Meteor.users.update(userId, {\n      $set: {\n        \"services.password.reset.when\": new Date(Date.now() + -5 * 24 * 3600 * 1000)\n      }\n    });\n    test.throws(function () {\n      Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n    }, /Token expired/);\n    test.throws(function () {\n      Meteor.call(\"login\", {\n        user: {\n          username: username\n        },\n        password: \"new-password\"\n      });\n    }, /Incorrect password/);\n  });\n  Tinytest.add('passwords - reset tokens with reasons get cleaned up', function (test) {\n    var email = test.id + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      email: email,\n      password: 'password'\n    });\n    Accounts.sendResetPasswordEmail(userId, email);\n    test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n\n    Accounts._expirePasswordResetTokens(new Date(), userId);\n\n    test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n  });\n  Tinytest.add('passwords - reset tokens without reasons get cleaned up', function (test) {\n    var email = test.id + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      email: email,\n      password: 'password'\n    });\n    Accounts.sendResetPasswordEmail(userId, email);\n    Meteor.users.update({\n      _id: userId\n    }, {\n      $unset: {\n        \"services.password.reset.reason\": 1\n      }\n    });\n    test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n    test.isUndefined(Meteor.users.findOne(userId).services.password.reset.reason);\n\n    Accounts._expirePasswordResetTokens(new Date(), userId);\n\n    test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n  });\n  Tinytest.addAsync('passwords - enroll password should work when token is not expired', function (test, onComplete) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      username: username,\n      email: email\n    });\n    var user = Meteor.users.findOne(userId);\n    Accounts.sendEnrollmentEmail(userId, email);\n    var enrollPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\");\n    var match = enrollPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var enrollPasswordToken = match[1];\n    makeTestConnection(test, function (clientConn) {\n      test.isTrue(clientConn.call(\"resetPassword\", enrollPasswordToken, \"new-password\"));\n      test.isTrue(clientConn.call(\"login\", {\n        user: {\n          username\n        },\n        password: \"new-password\"\n      }));\n      onComplete();\n    });\n  });\n  Tinytest.add('passwords - enroll password should not work when token is expired', function (test) {\n    var username = Random.id();\n    var email = username + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      username: username,\n      email: email\n    });\n    var user = Meteor.users.findOne(userId);\n    Accounts.sendEnrollmentEmail(userId, email);\n    var enrollPasswordEmailOptions = Meteor.call(\"getInterceptedEmails\", email)[0];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\");\n    var match = enrollPasswordEmailOptions.text.match(re);\n    test.isTrue(match);\n    var enrollPasswordToken = match[1];\n    Meteor.users.update(userId, {\n      $set: {\n        \"services.password.reset.when\": new Date(Date.now() + -35 * 24 * 3600 * 1000)\n      }\n    });\n    test.throws(function () {\n      Meteor.call(\"resetPassword\", enrollPasswordToken, \"new-password\");\n    }, /Token expired/);\n  });\n  Tinytest.add('passwords - enroll tokens get cleaned up', function (test) {\n    var email = test.id + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      email: email,\n      password: 'password'\n    });\n    Accounts.sendEnrollmentEmail(userId, email);\n    test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n\n    Accounts._expirePasswordEnrollTokens(new Date(), userId);\n\n    test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n  });\n  Tinytest.add(\"passwords - enroll tokens don't get cleaned up when reset tokens are cleaned up\", function (test) {\n    var email = test.id + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      email: email,\n      password: 'password'\n    });\n    Accounts.sendEnrollmentEmail(userId, email);\n    var enrollToken = Meteor.users.findOne(userId).services.password.reset;\n    test.isTrue(enrollToken);\n\n    Accounts._expirePasswordResetTokens(new Date(), userId);\n\n    test.equal(enrollToken, Meteor.users.findOne(userId).services.password.reset);\n  });\n  Tinytest.add(\"passwords - reset tokens don't get cleaned up when enroll tokens are cleaned up\", function (test) {\n    var email = test.id + '-intercept@example.com';\n    var userId = Accounts.createUser({\n      email: email,\n      password: 'password'\n    });\n    Accounts.sendResetPasswordEmail(userId, email);\n    var resetToken = Meteor.users.findOne(userId).services.password.reset;\n    test.isTrue(resetToken);\n\n    Accounts._expirePasswordEnrollTokens(new Date(), userId);\n\n    test.equal(resetToken, Meteor.users.findOne(userId).services.password.reset);\n  }); // We should be able to change the username\n\n  Tinytest.add(\"passwords - change username\", function (test) {\n    var username = Random.id();\n    var userId = Accounts.createUser({\n      username: username\n    });\n    test.isTrue(userId);\n    var newUsername = Random.id();\n    Accounts.setUsername(userId, newUsername);\n    test.equal(Accounts._findUserByQuery({\n      id: userId\n    }).username, newUsername); // Test findUserByUsername as well while we're here\n\n    test.equal(Accounts.findUserByUsername(newUsername)._id, userId);\n  });\n  Tinytest.add(\"passwords - change username to a new one only differing \" + \"in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var userId = Accounts.createUser({\n      username: username.toUpperCase()\n    });\n    test.isTrue(userId);\n    var newUsername = username.toLowerCase();\n    Accounts.setUsername(userId, newUsername);\n    test.equal(Accounts._findUserByQuery({\n      id: userId\n    }).username, newUsername);\n  }); // We should not be able to change the username to one that only\n  // differs in case from an existing one\n\n  Tinytest.add(\"passwords - change username should fail when there are \" + \"existing users with a username only differing in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var usernameUpper = username.toUpperCase();\n    var userId1 = Accounts.createUser({\n      username: username\n    });\n    var user2OriginalUsername = Random.id();\n    var userId2 = Accounts.createUser({\n      username: user2OriginalUsername\n    });\n    test.isTrue(userId1);\n    test.isTrue(userId2);\n    test.throws(function () {\n      Accounts.setUsername(userId2, usernameUpper);\n    }, /Username already exists/);\n    test.equal(Accounts._findUserByQuery({\n      id: userId2\n    }).username, user2OriginalUsername);\n  });\n  Tinytest.add(\"passwords - add email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n    test.equal(Accounts._findUserByQuery({\n      id: userId\n    }).emails, [{\n      address: origEmail,\n      verified: false\n    }, {\n      address: newEmail,\n      verified: false\n    }, {\n      address: thirdEmail,\n      verified: true\n    }]); // Test findUserByEmail as well while we're here\n\n    test.equal(Accounts.findUserByEmail(origEmail)._id, userId);\n  });\n  Tinytest.add(\"passwords - add email when the user has an existing email \" + \"only differing in case\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n    var thirdEmail = origEmail.toUpperCase();\n    Accounts.addEmail(userId, thirdEmail, true);\n    test.equal(Accounts._findUserByQuery({\n      id: userId\n    }).emails, [{\n      address: thirdEmail,\n      verified: true\n    }, {\n      address: newEmail,\n      verified: false\n    }]);\n  });\n  Tinytest.add(\"passwords - add email should fail when there is an existing \" + \"user with an email only differing in case\", function (test) {\n    var user1Email = Random.id() + \"@turing.com\";\n    var userId1 = Accounts.createUser({\n      email: user1Email\n    });\n    var user2Email = Random.id() + \"@turing.com\";\n    var userId2 = Accounts.createUser({\n      email: user2Email\n    });\n    var dupEmail = user1Email.toUpperCase();\n    test.throws(function () {\n      Accounts.addEmail(userId2, dupEmail);\n    }, /Email already exists/);\n    test.equal(Accounts._findUserByQuery({\n      id: userId1\n    }).emails, [{\n      address: user1Email,\n      verified: false\n    }]);\n    test.equal(Accounts._findUserByQuery({\n      id: userId2\n    }).emails, [{\n      address: user2Email,\n      verified: false\n    }]);\n  });\n  Tinytest.add(\"passwords - remove email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n    test.equal(Accounts._findUserByQuery({\n      id: userId\n    }).emails, [{\n      address: origEmail,\n      verified: false\n    }, {\n      address: newEmail,\n      verified: false\n    }, {\n      address: thirdEmail,\n      verified: true\n    }]);\n    Accounts.removeEmail(userId, newEmail);\n    test.equal(Accounts._findUserByQuery({\n      id: userId\n    }).emails, [{\n      address: origEmail,\n      verified: false\n    }, {\n      address: thirdEmail,\n      verified: true\n    }]);\n    Accounts.removeEmail(userId, origEmail);\n    test.equal(Accounts._findUserByQuery({\n      id: userId\n    }).emails, [{\n      address: thirdEmail,\n      verified: true\n    }]);\n  });\n  Tinytest.addAsync('passwords - allow custom bcrypt rounds', function (test, done) {\n    function getUserHashRounds(user) {\n      return Number(user.services.password.bcrypt.substring(4, 6));\n    } // Verify that a bcrypt hash generated for a new account uses the\n    // default number of rounds.\n\n\n    let username = Random.id();\n    const password = 'abc123';\n    const userId1 = Accounts.createUser({\n      username,\n      password\n    });\n    let user1 = Meteor.users.findOne(userId1);\n    let rounds = getUserHashRounds(user1);\n    test.equal(rounds, Accounts._bcryptRounds()); // When a custom number of bcrypt rounds is set via Accounts.config,\n    // and an account was already created using the default number of rounds,\n    // make sure that a new hash is created (and stored) using the new number\n    // of rounds, the next time the password is checked.\n\n    const defaultRounds = Accounts._bcryptRounds();\n\n    const customRounds = 11;\n    Accounts._options.bcryptRounds = customRounds;\n\n    Accounts._checkPassword(user1, password);\n\n    Meteor.setTimeout(() => {\n      user1 = Meteor.users.findOne(userId1);\n      rounds = getUserHashRounds(user1);\n      test.equal(rounds, customRounds); // When a custom number of bcrypt rounds is set, make sure it's\n      // used for new bcrypt password hashes.\n\n      username = Random.id();\n      const userId2 = Accounts.createUser({\n        username,\n        password\n      });\n      const user2 = Meteor.users.findOne(userId2);\n      rounds = getUserHashRounds(user2);\n      test.equal(rounds, customRounds); // Cleanup\n\n      Accounts._options.bcryptRounds = defaultRounds;\n      Meteor.users.remove(userId1);\n      Meteor.users.remove(userId2);\n      done();\n    }, 5000);\n  });\n})();","map":{"version":3,"sources":["packages/accounts-password/password_tests.js"],"names":["Accounts","_noConnectionCloseDelayForTest","Meteor","isServer","removeDefaultRateLimit","methods","getResetToken","token","users","findOne","userId","services","password","reset","addSkipCaseInsensitiveChecksForTest","value","_skipCaseInsensitiveChecksForTest","removeSkipCaseInsensitiveChecksForTest","countUsersOnServer","query","find","count","isClient","_isolateLoginTokenForTest","test","expect","call","createUserStep","randomSuffix","Random","id","username","email","createUser","loggedInAs","logoutStep","logout","error","fail","message","equal","user","someUsername","loggedInUserHasEmail","someEmail","isTrue","_","some","emails","address","expectError","expectedError","actualError","reason","expectUserNotFound","Error","waitForLoggedOutStep","pollUntil","invalidateLoginsStep","hideActualLoginErrorStep","validateLoginsStep","testAsyncMulti","notEqual","loginWithPassword","loaded","handle","Tracker","autorun","isFalse","undefined","flush","stop","callLoginMethod","methodName","methodArguments","userCallback","otherUsername","newUsername","result","otherEmail","throws","newEmail","password2","self","err","changePassword","secondConn","DDP","connect","absoluteUrl","setUserId","onReconnect","apply","resume","wait","forgotPassword","Tinytest","add","methodCallArgumentCount","originalMethodCall","connection","stubMethodCall","args","length","verifyEmail","newPassword","resetPassword","profile","invalid","invalidAndThrowException","testOnCreateUserHook","touchedByOnCreateUser","clientUser","_id","otherUserId","update","$set","disallowed","has","updated","expectLoginError","loginWithToken","expectLoginOK","_storedLoginToken","expectNoError","expectSecondConnLoggedOut","expectAccountsConnLoggedIn","expectSecondConnLoggedIn","logoutOtherClients","expectValidToken","tokenFromLogoutOthers","beforeLogoutOthersToken","close","logins","login","successful","attempt","type","allowed","onLogin","logouts","onLogout","logoutSuccess","onLoginFailure","onCreateUser","setPassword","oldSaltedHash","bcrypt","sendResetPasswordEmail","_insertLoginToken","_generateStampedLoginToken","loginTokens","newSaltedHash","newerSaltedHash","remove","addAsync","onComplete","makeTestConnection","clientConn","serverConn","onClose","_getUserObserve","_getAccountData","simplePoll","disconnect","resetPasswordEmailOptions","re","RegExp","match","text","resetPasswordToken","Date","now","_expirePasswordResetTokens","isUndefined","$unset","sendEnrollmentEmail","enrollPasswordEmailOptions","enrollPasswordToken","_expirePasswordEnrollTokens","enrollToken","resetToken","setUsername","_findUserByQuery","findUserByUsername","toUpperCase","toLowerCase","usernameUpper","userId1","user2OriginalUsername","userId2","origEmail","addEmail","thirdEmail","verified","findUserByEmail","user1Email","user2Email","dupEmail","removeEmail","done","getUserHashRounds","Number","substring","user1","rounds","_bcryptRounds","defaultRounds","customRounds","_options","bcryptRounds","_checkPassword","setTimeout","user2"],"mappings":"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","sourcesContent":["Accounts._noConnectionCloseDelayForTest = true;\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n\n  Meteor.methods({\n    getResetToken: function () {\n      var token = Meteor.users.findOne(this.userId).services.password.reset;\n      return token;\n    },\n    addSkipCaseInsensitiveChecksForTest: function (value) {\n      Accounts._skipCaseInsensitiveChecksForTest[value] = true;\n    },\n    removeSkipCaseInsensitiveChecksForTest: function (value) {\n      delete Accounts._skipCaseInsensitiveChecksForTest[value];\n    },\n    countUsersOnServer: function (query) {\n      return Meteor.users.find(query).count();\n    }\n  });\n}\n\nif (Meteor.isClient) (function () {\n\n  // XXX note, only one test can do login/logout things at once! for\n  // now, that is this test.\n\n  Accounts._isolateLoginTokenForTest();\n\n  var addSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('addSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var removeSkipCaseInsensitiveChecksForTest = function (value, test, expect) {\n    Meteor.call('removeSkipCaseInsensitiveChecksForTest', value);\n  };\n\n  var createUserStep = function (test, expect) {\n    // Hack because Tinytest does not clean the database between tests/runs\n    this.randomSuffix = Random.id(10);\n    this.username = 'AdaLovelace' + this.randomSuffix;\n    this.email =  \"Ada-intercept@lovelace.com\" + this.randomSuffix;\n    this.password = 'password';\n    Accounts.createUser(\n      {username: this.username, email: this.email, password: this.password},\n      loggedInAs(this.username, test, expect));\n  };\n  var logoutStep = function (test, expect) {\n    Meteor.logout(expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.user(), null);\n    }));\n  };\n  var loggedInAs = function (someUsername, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      test.equal(Meteor.userId() && Meteor.user().username, someUsername);\n    });\n  };\n  var loggedInUserHasEmail = function (someEmail, test, expect) {\n    return expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n      var user = Meteor.user();\n      test.isTrue(user && _.some(user.emails, function(email) {\n        return email.address === someEmail;\n      }));\n    });\n  };\n  var expectError = function (expectedError, test, expect) {\n    return expect(function (actualError) {\n      test.equal(actualError && actualError.error, expectedError.error);\n      test.equal(actualError && actualError.reason, expectedError.reason);\n    });\n  };\n  var expectUserNotFound = function (test, expect) {\n    return expectError(new Meteor.Error(403, \"User not found\"), test, expect);\n  };\n  var waitForLoggedOutStep = function (test, expect) {\n    pollUntil(expect, function () {\n      return Meteor.userId() === null;\n    }, 10 * 1000, 100);\n  };\n  var invalidateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'fail', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var hideActualLoginErrorStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", 'hide', expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n  var validateLoginsStep = function (test, expect) {\n    Meteor.call(\"testInvalidateLogins\", false, expect(function (error) {\n      if (error) {\n        test.fail(error.message);\n      }\n    }));\n  };\n\n  testAsyncMulti(\"passwords - basic login with password\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, email: this.email, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      test.notEqual(Meteor.userId(), null);\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // This next step tests reactive contexts which are reactive on\n    // Meteor.user().\n    function (test, expect) {\n      // Set up a reactive context that only refreshes when Meteor.user() is\n      // invalidated.\n      var loaded = false;\n      var handle = Tracker.autorun(function () {\n        if (Meteor.user() && Meteor.user().emails)\n          loaded = true;\n      });\n      // At the beginning, we're not logged in.\n      test.isFalse(loaded);\n      Meteor.loginWithPassword(this.username, this.password, expect(function (error) {\n        test.equal(error, undefined);\n        test.notEqual(Meteor.userId(), null);\n        // By the time of the login callback, the user should be loaded.\n        test.isTrue(Meteor.user().emails);\n        // Flushing should get us the rerun as well.\n        Tracker.flush();\n        test.isTrue(loaded);\n        handle.stop();\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword({username: this.username}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.loginWithPassword({email: this.email}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - plain text passwords\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n\n      // create user with raw password (no API, need to invoke callLoginMethod\n      // directly)\n      Accounts.callLoginMethod({\n        methodName: 'createUser',\n        methodArguments: [{username: this.username, password: this.password}],\n        userCallback: loggedInAs(this.username, test, expect)\n      });\n    },\n    logoutStep,\n    // check can login normally with this password.\n    function(test, expect) {\n      Meteor.loginWithPassword({username: this.username}, this.password,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // plain text password. no API for this, have to invoke callLoginMethod\n    // directly.\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        // wrong password\n        methodArguments: [{user: {username: this.username}, password: 'wrong'}],\n        userCallback: expect(function (error) {\n          test.isTrue(error);\n          test.isFalse(Meteor.user());\n        })});\n    },\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        // right password\n        methodArguments: [{user: {username: this.username},\n                           password: this.password}],\n        userCallback: loggedInAs(this.username, test, expect)\n      });\n    },\n    logoutStep\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username\", [\n    createUserStep,\n    logoutStep,\n    // We should be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"adalovelace\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n      \"with non-ASCII characters\", [\n    function (test, expect) {\n      // Hack because Tinytest does not clean the database between tests/runs\n      this.randomSuffix = Random.id(10);\n      this.username = 'ÁdaLØvela😈e' + this.randomSuffix;\n      this.password = 'password';\n      Accounts.createUser(\n        {username: this.username, email: this.email, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    // We should be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"ádaløvela😈e\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n      \"should escape regex special characters\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a regex expression for the username\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \".+\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username \" +\n     \"should require a match of the full string\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a partial match for the username\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"lovelace\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive username when \" +\n      \"there are multiple matches\", [\n    createUserStep,\n    logoutStep,\n    function (test, expect) {\n      this.otherUsername = 'Adalovelace' + this.randomSuffix;\n      addSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    // Create another user with a username that only differs in case\n    function (test, expect) {\n      Accounts.createUser(\n        { username: this.otherUsername, password: this.password },\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    // We shouldn't be able to log in with the username in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: \"adalovelace\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    },\n    // We should still be able to log in with the username in original case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { username: this.username },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" +\n      \"username\", [\n    createUserStep,\n    logoutStep,\n    // Attempting to create another user with a username that only differs in\n    // case should fail\n    function (test, expect) {\n      this.newUsername = 'adalovelace' + this.randomSuffix;\n      Accounts.createUser(\n        { username: this.newUsername, password: this.password },\n        expectError(\n          new Meteor.Error(403, \"Username already exists.\"),\n          test,\n          expect));\n    },\n    // Make sure the new user has not been inserted\n    function (test, expect) {\n      Meteor.call('countUsersOnServer',\n        { username: this.newUsername },\n        expect(function (error, result) {\n          test.equal(result, 0);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email\", [\n    createUserStep,\n    logoutStep,\n    // We should be able to log in with the email in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"ada-intercept@lovelace.com\" + this.randomSuffix },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" +\n      \"escape regex special characters\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a regex expression for the email\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \".+\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email should \" +\n     \"require a match of the full string\", [\n    createUserStep,\n    logoutStep,\n    // We shouldn't be able to log in with a partial match for the email\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"com\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - logging in with case insensitive email when \" +\n      \"there are multiple matches\", [\n    createUserStep,\n    logoutStep,\n    function (test, expect) {\n      this.otherUsername = 'AdaLovelace' + Random.id(10);\n      this.otherEmail =  \"ADA-intercept@lovelace.com\" + this.randomSuffix;\n      addSkipCaseInsensitiveChecksForTest(this.otherEmail, test, expect);\n    },\n    // Create another user with an email that only differs in case\n    function (test, expect) {\n      Accounts.createUser(\n        { username: this.otherUsername,\n          email: this.otherEmail,\n          password: this.password },\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      removeSkipCaseInsensitiveChecksForTest(this.otherUsername, test, expect);\n    },\n    logoutStep,\n    // We shouldn't be able to log in with the email in lower case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: \"ada-intercept@lovelace.com\" + this.randomSuffix },\n        this.password,\n        expectUserNotFound(test, expect));\n    },\n    // We should still be able to log in with the email in original case\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        { email: this.email },\n        this.password,\n        loggedInAs(this.username, test, expect));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - creating users with the same case insensitive \" +\n      \"email\", [\n    createUserStep,\n    logoutStep,\n    // Create user error without callback should throw error\n    function (test, expect) {\n      this.newUsername = 'adalovelace' + this.randomSuffix;\n      test.throws(function(){\n        Accounts.createUser({ username: this.newUsername, password: '' });\n      }, /Password may not be empty/);\n    },\n    // Attempting to create another user with an email that only differs in\n    // case should fail\n    function (test, expect) {\n      this.newEmail =  \"ada-intercept@lovelace.com\" + this.randomSuffix;\n      Accounts.createUser(\n        { email: this.newEmail, password: this.password },\n        expectError(\n          new Meteor.Error(403, \"Email already exists.\"),\n          test,\n          expect));\n    },\n    // Make sure the new user has not been inserted\n    function (test, expect) {\n      Meteor.call('countUsersOnServer',\n        { 'emails.address': this.newEmail },\n        expect (function (error, result) {\n          test.equal(result, 0);\n        })\n      );\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - changing passwords\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n      this.password2 = 'password2';\n\n      Accounts.createUser(\n        { username: this.username, email: this.email, password: this.password },\n        loggedInAs(this.username, test, expect));\n    },\n    // Send a password reset email so that we can test that password\n    // reset tokens get deleted on password change.\n    function (test, expect) {\n      Meteor.call(\"forgotPassword\",\n        { email: this.email }, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"getResetToken\", expect(function (err, token) {\n        test.isFalse(err);\n        test.isTrue(token);\n        self.token = token;\n      }));\n    },\n    // change password with bad old password. we stay logged in.\n    function (test, expect) {\n      var self = this;\n      Accounts.changePassword('wrong', 'doesntmatter', expect(function (error) {\n        test.isTrue(error);\n        test.equal(Meteor.user().username, self.username);\n      }));\n    },\n    // change password with blank new password\n    function (test, expect) {\n      test.throws(function(){\n        Accounts.changePassword(this.password, '');\n      }, /Password may not be empty/);\n    },\n    // change password with good old password.\n    function (test, expect) {\n      Accounts.changePassword(this.password, this.password2,\n                              loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      Meteor.call(\"getResetToken\", expect(function (err, token) {\n        test.isFalse(err);\n        test.isFalse(token);\n      }));\n    },\n    logoutStep,\n    // old password, failed login\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password, expect(function (error) {\n        test.isTrue(error);\n        test.isFalse(Meteor.user());\n      }));\n    },\n    // new password, success\n    function (test, expect) {\n      Meteor.loginWithPassword(this.email, this.password2,\n                               loggedInAs(this.username, test, expect));\n    },\n    logoutStep\n  ]);\n\n  testAsyncMulti(\"passwords - changing password logs out other clients\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n      this.password2 = 'password2';\n      Accounts.createUser(\n        { username: this.username, email: this.email, password: this.password },\n        loggedInAs(this.username, test, expect));\n    },\n    // Log in a second connection as this user.\n    function (test, expect) {\n      var self = this;\n\n      self.secondConn = DDP.connect(Meteor.absoluteUrl());\n      self.secondConn.call('login',\n                { user: { username: self.username }, password: self.password },\n                expect(function (err, result) {\n                  test.isFalse(err);\n                  self.secondConn.setUserId(result.id);\n                  test.isTrue(self.secondConn.userId());\n\n                  self.secondConn.onReconnect = function () {\n                    self.secondConn.apply(\n                      'login',\n                      [{ resume: result.token }],\n                      { wait: true },\n                      function (err, result) {\n                        self.secondConn.setUserId(result && result.id || null);\n                      }\n                    );\n                  };\n                }));\n    },\n    function (test, expect) {\n      var self = this;\n      Accounts.changePassword(self.password, self.password2, expect(function (err) {\n        test.isFalse(err);\n      }));\n    },\n    // Now that we've changed the password, wait until the second\n    // connection gets logged out.\n    function (test, expect) {\n      var self = this;\n      pollUntil(expect, function () {\n        return self.secondConn.userId() === null;\n      }, 10 * 1000, 100);\n    }\n  ]);\n\n\n  testAsyncMulti(\"passwords - forgotPassword client return error when empty email\", [\n    function (test, expect) {\n      // setup\n      this.email = '';\n    },\n    // forgotPassword called on client with blank email\n    function (test, expect) {\n      Accounts.forgotPassword(\n        { email: this.email }, expect(function (error) {\n          test.isTrue(error);\n      }));\n    },\n    // forgotPassword called on client with blank email and no callback.\n    function (test, expect) {\n      test.throws(function(){\n        Accounts.forgotPassword({ email: this.email });\n      }, /Must pass options\\.email/);\n    },\n  ]);\n\n  Tinytest.add(\n    'passwords - forgotPassword only passes callback value to forgotPassword '\n    + 'Method if callback is defined (to address issue #5676)',\n    function (test) {\n      let methodCallArgumentCount = 0;\n      const originalMethodCall = Accounts.connection.call;\n      const stubMethodCall = (...args) => {\n        methodCallArgumentCount = args.length;\n      }\n      Accounts.connection.call = stubMethodCall;\n\n      Accounts.forgotPassword({ email: 'test@meteor.com' });\n      test.equal(\n        methodCallArgumentCount,\n        2,\n        'Method call should have 2 arguments since no callback is passed in'\n      );\n\n      Accounts.forgotPassword({ email: 'test@meteor.com' }, () => {});\n      test.equal(\n        methodCallArgumentCount,\n        3,\n        'Method call should have 3 arguments since a callback is passed in'\n      );\n\n      Accounts.connection.call = originalMethodCall;\n    }\n  );\n\n  testAsyncMulti(\"passwords - verifyEmail client return error when empty token\", [\n    function (test, expect) {\n      // setup\n      this.token = '';\n    },\n    // verifyEmail called on client with blank token\n    function (test, expect) {\n      Accounts.verifyEmail(\n        this.token, expect(function (error) {\n          test.isTrue(error);\n      }));\n    },\n    // verifyEmail called on client with blank token and no callback.\n    function (test, expect) {\n      test.throws(function(){\n        Accounts.verifyEmail(this.token);\n      }, /Need to pass token/);\n    },\n  ]);\n\n  testAsyncMulti(\"passwords - resetPassword errors\", [\n    function (test, expect) {\n      // setup\n      this.token = '';\n      this.newPassword = 'nonblankpassword';\n    },\n    // resetPassword called on client with blank token\n    function (test, expect) {\n      Accounts.resetPassword(\n        this.token, this.newPassword, expect(function (error) {\n          test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      // setup\n      this.token = 'nonblank-token';\n      this.newPassword = '';\n    },\n    // resetPassword called on client with blank password\n    function (test, expect) {\n      Accounts.resetPassword(\n        this.token, this.newPassword, expect(function (error) {\n          test.isTrue(error);\n      }));\n    },\n    // resetPassword called on client with blank password and no callback.\n    function (test, expect) {\n      test.throws(function(){\n        Accounts.resetPassword(this.token, this.newPassword);\n      }, /Match error: Expected string, got undefined/);\n    },\n  ]);\n\n\n  testAsyncMulti(\"passwords - new user hooks\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.email = Random.id() + '-intercept@example.com';\n      this.password = 'password';\n    },\n    // test Accounts.validateNewUser\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         // should fail the new user validators\n         profile: {invalid: true}},\n        expect(function (error) {\n          test.equal(error.error, 403);\n          test.equal(error.reason, \"User validation failed\");\n        }));\n    },\n    logoutStep,\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         // should fail the new user validator with a special\n         // exception\n         profile: {invalidAndThrowException: true}},\n        expect(function (error) {\n          test.equal(\n            error.reason,\n            \"An exception thrown within Accounts.validateNewUser\");\n        }));\n    },\n    // test Accounts.onCreateUser\n    function(test, expect) {\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    function(test, expect) {\n      test.equal(Meteor.user().profile.touchedByOnCreateUser, true);\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - Meteor.user()\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    // test Meteor.user(). This test properly belongs in\n    // accounts-base/accounts_tests.js, but this is where the tests that\n    // actually log in are.\n    function(test, expect) {\n      var self = this;\n      var clientUser = Meteor.user();\n      Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n        test.equal(result._id, clientUser._id);\n        test.equal(result.username, clientUser.username);\n        test.equal(result.username, self.username);\n        test.equal(result.profile.touchedByOnCreateUser, true);\n        test.equal(err, undefined);\n      }));\n    },\n    function(test, expect) {\n      // Test that even with no published fields, we still have a document.\n      Accounts.connection.call('clearUsernameAndProfile', expect(function() {\n        test.isTrue(Meteor.userId());\n        var user = Meteor.user();\n        test.equal(user, {_id: Meteor.userId()});\n      }));\n    },\n    logoutStep,\n    function(test, expect) {\n      var clientUser = Meteor.user();\n      test.equal(clientUser, null);\n      test.equal(Meteor.userId(), null);\n      Accounts.connection.call('testMeteorUser', expect(function (err, result) {\n        test.equal(err, undefined);\n        test.equal(result, null);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - allow rules\", [\n    // create a second user to have an id for in a later test\n    function (test, expect) {\n      this.otherUsername = Random.id();\n      Accounts.createUser(\n        {username: this.otherUsername, password: 'dontcare',\n         testOnCreateUserHook: true},\n        loggedInAs(this.otherUsername, test, expect));\n    },\n    function (test, expect) {\n      this.otherUserId = Meteor.userId();\n    },\n    function (test, expect) {\n      // real setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password,\n         testOnCreateUserHook: true},\n        loggedInAs(this.username, test, expect));\n    },\n    // test the default Meteor.users allow rule. This test properly belongs in\n    // accounts-base/accounts_tests.js, but this is where the tests that\n    // actually log in are.\n    function(test, expect) {\n      this.userId = Meteor.userId();\n      test.notEqual(this.userId, null);\n      test.notEqual(this.userId, this.otherUserId);\n      // Can't update fields other than profile.\n      Meteor.users.update(\n        this.userId, {$set: {disallowed: true, 'profile.updated': 42}},\n        expect(function (err) {\n          test.isTrue(err);\n          test.equal(err.error, 403);\n          test.isFalse(_.has(Meteor.user(), 'disallowed'));\n          test.isFalse(_.has(Meteor.user().profile, 'updated'));\n        }));\n    },\n    function(test, expect) {\n      // Can't update another user.\n      Meteor.users.update(\n        this.otherUserId, {$set: {'profile.updated': 42}},\n        expect(function (err) {\n          test.isTrue(err);\n          test.equal(err.error, 403);\n        }));\n    },\n    function(test, expect) {\n      // Can't update using a non-ID selector. (This one is thrown client-side.)\n      test.throws(function () {\n        Meteor.users.update(\n          {username: this.username}, {$set: {'profile.updated': 42}});\n      });\n      test.isFalse(_.has(Meteor.user().profile, 'updated'));\n    },\n    function(test, expect) {\n      // Can update own profile using ID.\n      Meteor.users.update(\n        this.userId, {$set: {'profile.updated': 42}},\n        expect(function (err) {\n          test.isFalse(err);\n          test.equal(42, Meteor.user().profile.updated);\n        }));\n    },\n    logoutStep\n  ]);\n\n\n  testAsyncMulti(\"passwords - tokens\", [\n    function (test, expect) {\n      // setup\n      this.username = Random.id();\n      this.password = 'password';\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n\n    function (test, expect) {\n      // we can't login with an invalid token\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      Meteor.loginWithToken('invalid', expectLoginError);\n    },\n\n    function (test, expect) {\n      // we can login with a valid token\n      var expectLoginOK = expect(function (err) {\n        test.isFalse(err);\n      });\n      Meteor.loginWithToken(Accounts._storedLoginToken(), expectLoginOK);\n    },\n\n    function (test, expect) {\n      // test logging out invalidates our token\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      var token = Accounts._storedLoginToken();\n      test.isTrue(token);\n      Meteor.logout(function () {\n        Meteor.loginWithToken(token, expectLoginError);\n      });\n    },\n\n    function (test, expect) {\n      var self = this;\n      // Test that login tokens get expired. We should get logged out when a\n      // token expires, and not be able to log in again with the same token.\n      var expectNoError = expect(function (err) {\n        test.isFalse(err);\n      });\n\n      Meteor.loginWithPassword(this.username, this.password, function (error) {\n        self.token = Accounts._storedLoginToken();\n        test.isTrue(self.token);\n        expectNoError(error);\n        Accounts.connection.call(\"expireTokens\");\n      });\n    },\n    waitForLoggedOutStep,\n    function (test, expect) {\n      var token = Accounts._storedLoginToken();\n      test.isFalse(token);\n    },\n    function (test, expect) {\n      // Test that once expireTokens is finished, we can't login again with our\n      // previous token.\n      Meteor.loginWithToken(this.token, expect(function (err, result) {\n        test.isTrue(err);\n        test.equal(Meteor.userId(), null);\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      var self = this;\n      // Test that Meteor.logoutOtherClients logs out a second\n      // authentcated connection while leaving Accounts.connection\n      // logged in.\n      var secondConn = DDP.connect(Meteor.absoluteUrl());\n      var token;\n\n      var expectSecondConnLoggedOut = expect(function (err, result) {\n        test.isTrue(err);\n      });\n\n      var expectAccountsConnLoggedIn = expect(function (err, result) {\n        test.isFalse(err);\n      });\n\n      var expectSecondConnLoggedIn = expect(function (err, result) {\n        test.equal(result.token, token);\n        test.isFalse(err);\n        Meteor.logoutOtherClients(function (err) {\n          test.isFalse(err);\n          secondConn.call('login', { resume: token },\n                          expectSecondConnLoggedOut);\n          Accounts.connection.call('login', {\n            resume: Accounts._storedLoginToken()\n          }, expectAccountsConnLoggedIn);\n        });\n      });\n\n      Meteor.loginWithPassword(\n        self.username,\n        self.password,\n        expect(function (err) {\n          test.isFalse(err);\n          token = Accounts._storedLoginToken();\n          test.isTrue(token);\n          secondConn.call('login', { resume: token },\n                          expectSecondConnLoggedIn);\n        })\n      );\n    },\n    logoutStep,\n\n    // The tests below this point are for the deprecated\n    // `logoutOtherClients` method.\n\n    function (test, expect) {\n      var self = this;\n\n      // Test that Meteor.logoutOtherClients logs out a second authenticated\n      // connection while leaving Accounts.connection logged in.\n      var token;\n      self.secondConn = DDP.connect(Meteor.absoluteUrl());\n\n      var expectLoginError = expect(function (err) {\n        test.isTrue(err);\n      });\n      var expectValidToken = expect(function (err, result) {\n        test.isFalse(err);\n        test.isTrue(result);\n        self.tokenFromLogoutOthers = result.token;\n      });\n      var expectSecondConnLoggedIn = expect(function (err, result) {\n        test.equal(result.token, token);\n        test.isFalse(err);\n        // This test will fail if an unrelated reconnect triggers before the\n        // connection is logged out. In general our tests aren't resilient to\n        // mid-test reconnects.\n        self.secondConn.onReconnect = function () {\n          self.secondConn.call(\"login\", { resume: token }, expectLoginError);\n        };\n        Accounts.connection.call(\"logoutOtherClients\", expectValidToken);\n      });\n\n      Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n        test.isFalse(err);\n        token = Accounts._storedLoginToken();\n        self.beforeLogoutOthersToken = token;\n        test.isTrue(token);\n        self.secondConn.call(\"login\", { resume: token },\n                             expectSecondConnLoggedIn);\n      }));\n    },\n    // Test that logoutOtherClients logged out Accounts.connection and that the\n    // previous token is no longer valid.\n    waitForLoggedOutStep,\n    function (test, expect) {\n      var self = this;\n      var token = Accounts._storedLoginToken();\n      test.isFalse(token);\n      this.secondConn.close();\n      Meteor.loginWithToken(\n        self.beforeLogoutOthersToken,\n        expect(function (err) {\n          test.isTrue(err);\n          test.isFalse(Meteor.userId());\n        })\n      );\n    },\n    // Test that logoutOtherClients returned a new token that we can use to\n    // log in.\n    function (test, expect) {\n      var self = this;\n      Meteor.loginWithToken(\n        self.tokenFromLogoutOthers,\n        expect(function (err) {\n          test.isFalse(err);\n          test.isTrue(Meteor.userId());\n        })\n      );\n    },\n    logoutStep,\n\n\n\n    function (test, expect) {\n      var self = this;\n      // Test that deleting a user logs out that user's connections.\n      Meteor.loginWithPassword(this.username, this.password, expect(function (err) {\n        test.isFalse(err);\n        Accounts.connection.call(\"removeUser\", self.username);\n      }));\n    },\n    waitForLoggedOutStep\n  ]);\n\n  testAsyncMulti(\"passwords - validateLoginAttempt\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    invalidateLoginsStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        this.username,\n        this.password,\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, \"Login forbidden\");\n        })\n      );\n    },\n    validateLoginsStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        \"no such user\",\n        \"some password\",\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, 'User not found');\n        })\n      );\n    },\n    hideActualLoginErrorStep,\n    function (test, expect) {\n      Meteor.loginWithPassword(\n        \"no such user\",\n        \"some password\",\n        expect(function (error) {\n          test.isTrue(error);\n          test.equal(error.reason, 'hide actual error');\n        })\n      );\n    },\n    validateLoginsStep\n  ]);\n\n  testAsyncMulti(\"passwords - server onLogin hook\", [\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isTrue(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isTrue(attempt.allowed);\n        test.equal(attempt.methodArguments[0].username, self.username);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLogin hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLogin = Accounts.onLogin(function (attempt) {\n        self.attempt = true;\n      });\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    function (test, expect) {\n      this.onLogin.stop();\n      test.isTrue(this.attempt);\n      expect(function () {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - server onLogout hook\", [\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogouts\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testFetchCapturedLogouts\", expect(function (error, logouts) {\n        test.isFalse(error);\n        test.equal(logouts.length, 1);\n        var logout = logouts[0];\n        test.isTrue(logout.successful);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLogout hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLogout = Accounts.onLogout(function () {\n        self.logoutSuccess = true;\n      });\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      test.isTrue(this.logoutSuccess);\n      expect(function() {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - server onLoginFailure hook\", [\n    function (test, expect) {\n      this.username = Random.id();\n      this.password = \"password\";\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isFalse(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isFalse(attempt.allowed);\n        test.equal(attempt.error.reason, \"Incorrect password\");\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(\"no such user\", \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testFetchCapturedLogins\", expect(function (error, logins) {\n        test.isFalse(error);\n        test.equal(logins.length, 1);\n        var login = logins[0];\n        test.isFalse(login.successful);\n        var attempt = login.attempt;\n        test.equal(attempt.type, \"password\");\n        test.isFalse(attempt.allowed);\n        test.equal(attempt.error.reason, \"User not found\");\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - client onLoginFailure hook\", [\n    function (test, expect) {\n      var self = this;\n      this.username = Random.id();\n      this.password = \"password\";\n      this.attempt = false;\n\n      this.onLoginFailure = Accounts.onLoginFailure(function () {\n        self.attempt = true;\n      })\n\n      Accounts.createUser(\n        {username: this.username, password: this.password},\n        loggedInAs(this.username, test, expect));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"testCaptureLogins\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, \"incorrect\", expect(function (error) {\n        test.isTrue(error);\n      }));\n    },\n    function (test, expect) {\n      this.onLoginFailure.stop();\n      test.isTrue(this.attempt);\n      expect(function () {})();\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade\", [\n    logoutStep,\n    // Create user with old SRP credentials in the database.\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n        test.isFalse(error);\n        self.username = result;\n      }));\n    },\n    // We are able to login with the old style credentials in the database.\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep,\n    // After the upgrade to bcrypt we're still able to login.\n    function (test, expect) {\n      Meteor.loginWithPassword(this.username, 'abcdef', expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep,\n    function (test, expect) {\n      Meteor.call(\"removeUser\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"passwords - srp to bcrypt upgrade via password change\", [\n    logoutStep,\n    // Create user with old SRP credentials in the database.\n    function (test, expect) {\n      var self = this;\n      Meteor.call(\"testCreateSRPUser\", expect(function (error, result) {\n        test.isFalse(error);\n        self.username = result;\n      }));\n    },\n    // Log in with the plaintext password handler, which should NOT upgrade us to bcrypt.\n    function (test, expect) {\n      Accounts.callLoginMethod({\n        methodName: \"login\",\n        methodArguments: [ { user: { username: this.username }, password: \"abcdef\" } ],\n        userCallback: expect(function (err) {\n          test.isFalse(err);\n        })\n      });\n    },\n    function (test, expect) {\n      Meteor.call(\"testNoSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    // Changing our password should upgrade us to bcrypt.\n    function (test, expect) {\n      Accounts.changePassword(\"abcdef\", \"abcdefg\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    function (test, expect) {\n      Meteor.call(\"testSRPUpgrade\", this.username, expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    // And after the upgrade we should be able to change our password again.\n    function (test, expect) {\n      Accounts.changePassword(\"abcdefg\", \"abcdef\", expect(function (error) {\n        test.isFalse(error);\n      }));\n    },\n    logoutStep\n  ]);\n}) ();\n\n\nif (Meteor.isServer) (function () {\n\n  Tinytest.add(\n    'passwords - setup more than one onCreateUserHook',\n    function (test) {\n      test.throws(function() {\n        Accounts.onCreateUser(function () {});\n      });\n    });\n\n\n  Tinytest.add(\n    'passwords - createUser hooks',\n    function (test) {\n      var username = Random.id();\n      test.throws(function () {\n        // should fail the new user validators\n        Accounts.createUser({username: username, profile: {invalid: true}});\n      });\n\n      var userId = Accounts.createUser({username: username,\n                                        testOnCreateUserHook: true});\n\n      test.isTrue(userId);\n      var user = Meteor.users.findOne(userId);\n      test.equal(user.profile.touchedByOnCreateUser, true);\n    });\n\n\n  Tinytest.add(\n    'passwords - setPassword',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({username: username, email: email});\n\n      var user = Meteor.users.findOne(userId);\n      // no services yet.\n      test.equal(user.services.password, undefined);\n\n      // set a new password.\n      Accounts.setPassword(userId, 'new password');\n      user = Meteor.users.findOne(userId);\n      var oldSaltedHash = user.services.password.bcrypt;\n      test.isTrue(oldSaltedHash);\n\n      // Send a reset password email (setting a reset token) and insert a login\n      // token.\n      Accounts.sendResetPasswordEmail(userId, email);\n      Accounts._insertLoginToken(userId, Accounts._generateStampedLoginToken());\n      test.isTrue(Meteor.users.findOne(userId).services.password.reset);\n      test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // reset with the same password, see we get a different salted hash\n      Accounts.setPassword(userId, 'new password', {logout: false});\n      user = Meteor.users.findOne(userId);\n      var newSaltedHash = user.services.password.bcrypt;\n      test.isTrue(newSaltedHash);\n      test.notEqual(oldSaltedHash, newSaltedHash);\n      // No more reset token.\n      test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n      // But loginTokens are still here since we did logout: false.\n      test.isTrue(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // reset again, see that the login tokens are gone.\n      Accounts.setPassword(userId, 'new password');\n      user = Meteor.users.findOne(userId);\n      var newerSaltedHash = user.services.password.bcrypt;\n      test.isTrue(newerSaltedHash);\n      test.notEqual(oldSaltedHash, newerSaltedHash);\n      test.notEqual(newSaltedHash, newerSaltedHash);\n      // No more tokens.\n      test.isFalse(Meteor.users.findOne(userId).services.password.reset);\n      test.isFalse(Meteor.users.findOne(userId).services.resume.loginTokens);\n\n      // cleanup\n      Meteor.users.remove(userId);\n    });\n\n\n  // This test properly belongs in accounts-base/accounts_tests.js, but\n  // this is where the tests that actually log in are.\n  Tinytest.add('accounts - user() out of context', function (test) {\n    // basic server context, no method.\n    test.throws(function () {\n      Meteor.user();\n    });\n  });\n\n  // XXX would be nice to test\n  // Accounts.config({forbidClientAccountCreation: true})\n\n  Tinytest.addAsync(\n    'passwords - login token observes get cleaned up',\n    function (test, onComplete) {\n      var username = Random.id();\n      Accounts.createUser({\n        username: username,\n        password: 'password'\n      });\n\n      makeTestConnection(\n        test,\n        function (clientConn, serverConn) {\n          serverConn.onClose(function () {\n            test.isFalse(Accounts._getUserObserve(serverConn.id));\n            onComplete();\n          });\n          var result = clientConn.call('login', {\n            user: {username: username},\n            password: 'password'\n          });\n          test.isTrue(result);\n          var token = Accounts._getAccountData(serverConn.id, 'loginToken');\n          test.isTrue(token);\n\n          // We poll here, instead of just checking `_getUserObserve`\n          // once, because the login method defers the creation of the\n          // observe, and setting up the observe yields, so we could end\n          // up here before the observe has been set up.\n          simplePoll(\n            function () {\n              return !! Accounts._getUserObserve(serverConn.id);\n            },\n            function () {\n              test.isTrue(Accounts._getUserObserve(serverConn.id));\n              clientConn.disconnect();\n            },\n            function () {\n              test.fail(\"timed out waiting for user observe for connection \" +\n                        serverConn.id);\n              onComplete();\n            }\n          );\n        },\n        onComplete\n      );\n    }\n  );\n\n  Tinytest.add(\n    \"passwords - reset password doesn't work if email changed after email sent\",\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email,\n        password: \"old-password\"\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendResetPasswordEmail(userId, email);\n\n      var resetPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n      var match = resetPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var resetPasswordToken = match[1];\n\n      var newEmail = Random.id() + '-new@example.com';\n      Meteor.users.update(userId, {$set: {\"emails.0.address\": newEmail}});\n\n      test.throws(function () {\n        Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n      }, /Token has invalid email address/);\n      test.throws(function () {\n        Meteor.call(\"login\", {user: {username: username}, password: \"new-password\"});\n      }, /Incorrect password/);\n    });\n\n  Tinytest.addAsync(\n    'passwords - reset password should work when token is not expired',\n    function (test, onComplete) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email,\n        password: \"old-password\"\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendResetPasswordEmail(userId, email);\n\n      var resetPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n      var match = resetPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var resetPasswordToken = match[1];\n\n      makeTestConnection(\n        test,\n        function (clientConn) {\n          test.isTrue(clientConn.call(\n            \"resetPassword\",\n            resetPasswordToken,\n            \"new-password\"\n          ));\n\n          test.isTrue(clientConn.call(\"login\", {\n            user: { username },\n            password: \"new-password\"\n          }));\n\n          onComplete();\n      });\n    });\n\n  Tinytest.add(\n    'passwords - reset password should not work when token is expired',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email,\n        password: \"old-password\"\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendResetPasswordEmail(userId, email);\n\n      var resetPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n      var match = resetPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var resetPasswordToken = match[1];\n\n      Meteor.users.update(userId, {$set: {\"services.password.reset.when\":  new Date(Date.now() + -5 * 24 * 3600 * 1000) }});\n\n      test.throws(function () {\n        Meteor.call(\"resetPassword\", resetPasswordToken, \"new-password\");\n      }, /Token expired/);\n      test.throws(function () {\n        Meteor.call(\"login\", {user: {username: username}, password: \"new-password\"});\n      }, /Incorrect password/);\n    });\n\n  Tinytest.add(\n    'passwords - reset tokens with reasons get cleaned up',\n    function (test) {\n      var email = test.id + '-intercept@example.com';\n      var userId = Accounts.createUser({email: email, password: 'password'});\n      Accounts.sendResetPasswordEmail(userId, email);\n      test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n\n      Accounts._expirePasswordResetTokens(new Date(), userId);\n\n      test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n    });\n\n  Tinytest.add(\n    'passwords - reset tokens without reasons get cleaned up',\n    function (test) {\n      var email = test.id + '-intercept@example.com';\n      var userId = Accounts.createUser({email: email, password: 'password'});\n      Accounts.sendResetPasswordEmail(userId, email);\n      Meteor.users.update({_id: userId}, {$unset: {\"services.password.reset.reason\": 1}});\n      test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n      test.isUndefined(Meteor.users.findOne(userId).services.password.reset.reason);\n\n      Accounts._expirePasswordResetTokens(new Date(), userId);\n\n      test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n    });\n\n  Tinytest.addAsync(\n    'passwords - enroll password should work when token is not expired',\n    function (test, onComplete) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendEnrollmentEmail(userId, email);\n\n      var enrollPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\");\n      var match = enrollPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var enrollPasswordToken = match[1];\n\n      makeTestConnection(\n        test,\n        function (clientConn) {\n          test.isTrue(clientConn.call(\n            \"resetPassword\",\n            enrollPasswordToken,\n            \"new-password\"\n          ));\n\n          test.isTrue(clientConn.call(\"login\", {\n            user: { username },\n            password: \"new-password\"\n          }));\n\n          onComplete();\n        });\n    });\n\n  Tinytest.add(\n    'passwords - enroll password should not work when token is expired',\n    function (test) {\n      var username = Random.id();\n      var email = username + '-intercept@example.com';\n\n      var userId = Accounts.createUser({\n        username: username,\n        email: email\n      });\n\n      var user = Meteor.users.findOne(userId);\n\n      Accounts.sendEnrollmentEmail(userId, email);\n\n      var enrollPasswordEmailOptions =\n        Meteor.call(\"getInterceptedEmails\", email)[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\");\n      var match = enrollPasswordEmailOptions.text.match(re);\n      test.isTrue(match);\n      var enrollPasswordToken = match[1];\n\n      Meteor.users.update(userId, {$set: {\"services.password.reset.when\":  new Date(Date.now() + -35 * 24 * 3600 * 1000) }});\n\n      test.throws(function () {\n        Meteor.call(\"resetPassword\", enrollPasswordToken, \"new-password\");\n      }, /Token expired/);\n    });\n\n  Tinytest.add(\n    'passwords - enroll tokens get cleaned up',\n    function (test) {\n      var email = test.id + '-intercept@example.com';\n      var userId = Accounts.createUser({email: email, password: 'password'});\n\n      Accounts.sendEnrollmentEmail(userId, email);\n      test.isTrue(!!Meteor.users.findOne(userId).services.password.reset);\n\n      Accounts._expirePasswordEnrollTokens(new Date(), userId);\n      test.isUndefined(Meteor.users.findOne(userId).services.password.reset);\n    }\n  )\n\n  Tinytest.add(\n    \"passwords - enroll tokens don't get cleaned up when reset tokens are cleaned up\",\n    function (test) {\n      var email = test.id + '-intercept@example.com';\n      var userId = Accounts.createUser({email: email, password: 'password'});\n\n      Accounts.sendEnrollmentEmail(userId, email);\n      var enrollToken = Meteor.users.findOne(userId).services.password.reset;\n      test.isTrue(enrollToken);\n\n      Accounts._expirePasswordResetTokens(new Date(), userId);\n      test.equal(enrollToken, Meteor.users.findOne(userId).services.password.reset);\n    }\n  )\n\n  Tinytest.add(\n    \"passwords - reset tokens don't get cleaned up when enroll tokens are cleaned up\",\n    function (test) {\n      var email = test.id + '-intercept@example.com';\n      var userId = Accounts.createUser({email: email, password: 'password'});\n\n      Accounts.sendResetPasswordEmail(userId, email);\n      var resetToken = Meteor.users.findOne(userId).services.password.reset;\n      test.isTrue(resetToken);\n\n      Accounts._expirePasswordEnrollTokens(new Date(), userId);\n      test.equal(resetToken,Meteor.users.findOne(userId).services.password.reset);\n    }\n  )\n\n  // We should be able to change the username\n  Tinytest.add(\"passwords - change username\", function (test) {\n    var username = Random.id();\n    var userId = Accounts.createUser({\n      username: username\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = Random.id();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).username, newUsername);\n\n    // Test findUserByUsername as well while we're here\n    test.equal(Accounts.findUserByUsername(newUsername)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - change username to a new one only differing \" +\n      \"in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var userId = Accounts.createUser({\n      username: username.toUpperCase()\n    });\n\n    test.isTrue(userId);\n\n    var newUsername = username.toLowerCase();\n    Accounts.setUsername(userId, newUsername);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).username, newUsername);\n  });\n\n  // We should not be able to change the username to one that only\n  // differs in case from an existing one\n  Tinytest.add(\"passwords - change username should fail when there are \" +\n      \"existing users with a username only differing in case\", function (test) {\n    var username = Random.id() + \"user\";\n    var usernameUpper = username.toUpperCase();\n\n    var userId1 = Accounts.createUser({\n      username: username\n    });\n\n    var user2OriginalUsername = Random.id();\n    var userId2 = Accounts.createUser({\n      username: user2OriginalUsername\n    });\n\n    test.isTrue(userId1);\n    test.isTrue(userId2);\n\n    test.throws(function () {\n      Accounts.setUsername(userId2, usernameUpper);\n    }, /Username already exists/);\n\n    test.equal(Accounts._findUserByQuery({id: userId2}).username,\n      user2OriginalUsername);\n  });\n\n  Tinytest.add(\"passwords - add email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: newEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    // Test findUserByEmail as well while we're here\n    test.equal(Accounts.findUserByEmail(origEmail)._id, userId);\n  });\n\n  Tinytest.add(\"passwords - add email when the user has an existing email \" +\n      \"only differing in case\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = origEmail.toUpperCase();\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: thirdEmail, verified: true },\n      { address: newEmail, verified: false }\n    ]);\n  });\n\n  Tinytest.add(\"passwords - add email should fail when there is an existing \" +\n      \"user with an email only differing in case\", function (test) {\n    var user1Email = Random.id() + \"@turing.com\";\n    var userId1 = Accounts.createUser({\n      email: user1Email\n    });\n\n    var user2Email = Random.id() + \"@turing.com\";\n    var userId2 = Accounts.createUser({\n      email: user2Email\n    });\n\n    var dupEmail = user1Email.toUpperCase();\n    test.throws(function () {\n      Accounts.addEmail(userId2, dupEmail);\n    }, /Email already exists/);\n\n    test.equal(Accounts._findUserByQuery({id: userId1}).emails, [\n      { address: user1Email, verified: false }\n    ]);\n\n    test.equal(Accounts._findUserByQuery({id: userId2}).emails, [\n      { address: user2Email, verified: false }\n    ]);\n  });\n\n  Tinytest.add(\"passwords - remove email\", function (test) {\n    var origEmail = Random.id() + \"@turing.com\";\n    var userId = Accounts.createUser({\n      email: origEmail\n    });\n\n    var newEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, newEmail);\n\n    var thirdEmail = Random.id() + \"@turing.com\";\n    Accounts.addEmail(userId, thirdEmail, true);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: newEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    Accounts.removeEmail(userId, newEmail);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: origEmail, verified: false },\n      { address: thirdEmail, verified: true }\n    ]);\n\n    Accounts.removeEmail(userId, origEmail);\n\n    test.equal(Accounts._findUserByQuery({id: userId}).emails, [\n      { address: thirdEmail, verified: true }\n    ]);\n  });\n\n  Tinytest.addAsync(\n    'passwords - allow custom bcrypt rounds',\n    function (test, done) {\n      function getUserHashRounds(user) {\n        return Number(user.services.password.bcrypt.substring(4, 6));\n      }\n\n      // Verify that a bcrypt hash generated for a new account uses the\n      // default number of rounds.\n      let username = Random.id();\n      const password = 'abc123';\n      const userId1 = Accounts.createUser({ username, password });\n      let user1 = Meteor.users.findOne(userId1);\n      let rounds = getUserHashRounds(user1);\n      test.equal(rounds, Accounts._bcryptRounds());\n\n      // When a custom number of bcrypt rounds is set via Accounts.config,\n      // and an account was already created using the default number of rounds,\n      // make sure that a new hash is created (and stored) using the new number\n      // of rounds, the next time the password is checked.\n      const defaultRounds = Accounts._bcryptRounds();\n      const customRounds = 11;\n      Accounts._options.bcryptRounds = customRounds;\n      Accounts._checkPassword(user1, password);\n      Meteor.setTimeout(() => {\n        user1 = Meteor.users.findOne(userId1);\n        rounds = getUserHashRounds(user1);\n        test.equal(rounds, customRounds);\n\n        // When a custom number of bcrypt rounds is set, make sure it's\n        // used for new bcrypt password hashes.\n        username = Random.id();\n        const userId2 = Accounts.createUser({ username, password });\n        const user2 = Meteor.users.findOne(userId2);\n        rounds = getUserHashRounds(user2);\n        test.equal(rounds, customRounds);\n\n        // Cleanup\n        Accounts._options.bcryptRounds = defaultRounds;\n        Meteor.users.remove(userId1);\n        Meteor.users.remove(userId2);\n        done();\n      }, 5000);\n    }\n  );\n\n}) ();\n"]},"sourceType":"script","hash":"aedaf531be6b4e565842cc7553677f0b763dfb43"}
