{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/mongo/observe_multiplex.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/mongo/observe_multiplex.js","filename":"packages/mongo/observe_multiplex.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/mongo/observe_multiplex.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/observe_multiplex.js"}},"code":"var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n  if (!options || !_.has(options, 'ordered')) throw Error(\"must specified ordered\");\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", 1);\n  self._ordered = options.ordered;\n\n  self._onStop = options.onStop || function () {};\n\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future();\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered\n  }); // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function ()\n    /* ... */\n    {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this; // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n\n    if (!self._queue.safeToRunTask()) throw new Error(\"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle; // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n\n      self._sendAdds(handle);\n\n      --self._addHandleTasksScheduledButNotPerformed;\n    }); // *outside* the task, since otherwise we'd deadlock\n\n\n    self._readyFuture.wait();\n  },\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this; // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n\n    if (!self._ready()) throw new Error(\"Can't remove handles until the multiplex is ready\");\n    delete self._handles[id];\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) && self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {}; // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n\n    if (!self._ready() && !options.fromQueryError) throw Error(\"surprising _stop: not ready\"); // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n\n    self._onStop();\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", -1); // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n\n    self._handles = null;\n  },\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n\n    self._queue.queueTask(function () {\n      if (self._ready()) throw Error(\"can't make ObserveMultiplex ready twice!\");\n\n      self._readyFuture.return();\n    });\n  },\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n\n    self._queue.runTask(function () {\n      if (self._ready()) throw Error(\"can't claim query has an error after it worked!\");\n\n      self._stop({\n        fromQueryError: true\n      });\n\n      self._readyFuture.throw(err);\n    });\n  },\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n\n    self._queue.queueTask(function () {\n      if (!self._ready()) throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered) return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];else return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles) return; // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args)); // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n\n\n      if (!self._ready() && callbackName !== 'added' && callbackName !== 'addedBefore') {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      } // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n\n\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle) return;\n        var callback = handle['_' + callbackName]; // clone arguments so that callbacks can mutate their arguments\n\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask()) throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add) return; // note: docs may be an _IdMap or an OrderedDict\n\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id)) throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered) add(id, fields, null); // we're going in order, so add at end\n      else add(id, fields);\n    });\n  }\n});\n\nvar nextObserveHandleId = 1;\n\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this; // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n\n  self._multiplexer = multiplexer;\n\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\n\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped) return;\n  self._stopped = true;\n\n  self._multiplexer.removeHandle(self._id);\n};","map":{"version":3,"sources":["packages/mongo/observe_multiplex.js"],"names":["Future","Npm","require","ObserveMultiplexer","options","self","_","has","Error","Package","Facts","incrementServerFact","_ordered","ordered","_onStop","onStop","_queue","Meteor","_SynchronousQueue","_handles","_readyFuture","_cache","LocalCollection","_CachingChangeObserver","_addHandleTasksScheduledButNotPerformed","each","callbackNames","callbackName","_applyCallback","toArray","arguments","extend","prototype","addHandleAndSendInitialAdds","handle","safeToRunTask","runTask","_id","_sendAdds","wait","removeHandle","id","_ready","isEmpty","_stop","fromQueryError","ready","queueTask","return","queryError","err","throw","onFlush","cb","isResolved","args","applyChange","apply","EJSON","clone","keys","handleId","callback","add","_addedBefore","_added","docs","forEach","doc","fields","nextObserveHandleId","ObserveHandle","multiplexer","callbacks","_multiplexer","name","added","before","_stopped","stop"],"mappings":"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","sourcesContent":["var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered'))\n    throw Error(\"must specified ordered\");\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future;\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered});\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function (/* ... */) {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n    if (!self._queue.safeToRunTask())\n      throw new Error(\"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle;\n      // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n      self._sendAdds(handle);\n      --self._addHandleTasksScheduledButNotPerformed;\n    });\n    // *outside* the task, since otherwise we'd deadlock\n    self._readyFuture.wait();\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this;\n\n    // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n    if (!self._ready())\n      throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n    delete self._handles[id];\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {};\n\n    // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n    if (! self._ready() && ! options.fromQueryError)\n      throw Error(\"surprising _stop: not ready\");\n\n    // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n    self._onStop();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-multiplexers\", -1);\n\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n    self._handles = null;\n  },\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (self._ready())\n        throw Error(\"can't make ObserveMultiplex ready twice!\");\n      self._readyFuture.return();\n    });\n  },\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n    self._queue.runTask(function () {\n      if (self._ready())\n        throw Error(\"can't claim query has an error after it worked!\");\n      self._stop({fromQueryError: true});\n      self._readyFuture.throw(err);\n    });\n  },\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (!self._ready())\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered)\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];\n    else\n      return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles)\n        return;\n\n      // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n      // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n      if (!self._ready() &&\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      }\n\n      // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle)\n          return;\n        var callback = handle['_' + callbackName];\n        // clone arguments so that callbacks can mutate their arguments\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask())\n      throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add)\n      return;\n    // note: docs may be an _IdMap or an OrderedDict\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id))\n        throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered)\n        add(id, fields, null); // we're going in order, so add at end\n      else\n        add(id, fields);\n    });\n  }\n});\n\n\nvar nextObserveHandleId = 1;\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped)\n    return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};\n"]},"sourceType":"script","hash":"a7f6b353aadfe76c3012f7ed489911ca12a13512"}
