{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/mongo/mongo_livedata_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/mongo/mongo_livedata_tests.js","filename":"packages/mongo/mongo_livedata_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/mongo/mongo_livedata_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/mongo_livedata_tests.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\n// This is a magic collection that fails its writes on the server when\n// the selector (or inserted document) contains fail: true.\nvar TRANSFORMS = {}; // We keep track of the collections, so we can refer to them by name\n\nvar COLLECTIONS = {};\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    createInsecureCollection: function (name, options) {\n      check(name, String);\n      check(options, Match.Optional({\n        transformName: Match.Optional(String),\n        idGeneration: Match.Optional(String)\n      }));\n\n      if (options && options.transformName) {\n        options.transform = TRANSFORMS[options.transformName];\n      }\n\n      var c = new Mongo.Collection(name, options);\n      COLLECTIONS[name] = c;\n      c._insecure = true;\n      Meteor.publish('c-' + name, function () {\n        return c.find();\n      });\n    },\n    dropInsecureCollection: function (name) {\n      var c = COLLECTIONS[name];\n\n      c._dropCollection();\n    }\n  });\n} // We store the generated id, keyed by collection, for each insert\n// This is so we can test the stub and the server generate the same id\n\n\nvar INSERTED_IDS = {};\nMeteor.methods({\n  insertObjects: function (collectionName, doc, count) {\n    var c = COLLECTIONS[collectionName];\n    var ids = [];\n\n    for (var i = 0; i < count; i++) {\n      var id = c.insert(doc);\n      INSERTED_IDS[collectionName] = (INSERTED_IDS[collectionName] || []).concat([id]);\n      ids.push(id);\n    }\n\n    return ids;\n  },\n  upsertObject: function (collectionName, selector, modifier) {\n    var c = COLLECTIONS[collectionName];\n    return c.upsert(selector, modifier);\n  },\n  doMeteorCall: function (name\n  /*, arguments */\n  ) {\n    var args = Array.prototype.slice.call(arguments);\n    return Meteor.call.apply(null, args);\n  }\n});\n\nvar runInFence = function (f) {\n  if (Meteor.isClient) {\n    f();\n  } else {\n    var fence = new DDPServer._WriteFence();\n\n    DDPServer._CurrentWriteFence.withValue(fence, f);\n\n    fence.armAndWait();\n  }\n}; // Helpers for upsert tests\n\n\nvar stripId = function (obj) {\n  delete obj._id;\n};\n\nvar compareResults = function (test, skipIds, actual, expected) {\n  if (skipIds) {\n    _.map(actual, stripId);\n\n    _.map(expected, stripId);\n  } // (technically should ignore order in comparison)\n\n\n  test.equal(actual, expected);\n};\n\nvar upsert = function (coll, useUpdate, query, mod, options, callback) {\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  if (useUpdate) {\n    if (callback) return coll.update(query, mod, _.extend({\n      upsert: true\n    }, options), function (err, result) {\n      callback(err, !err && {\n        numberAffected: result\n      });\n    });\n    return {\n      numberAffected: coll.update(query, mod, _.extend({\n        upsert: true\n      }, options))\n    };\n  } else {\n    return coll.upsert(query, mod, options, callback);\n  }\n};\n\nvar upsertTestMethod = \"livedata_upsert_test_method\";\nvar upsertTestMethodColl; // This is the implementation of the upsert test method on both the client and\n// the server. On the client, we get a test object. On the server, we just throw\n// errors if something doesn't go according to plan, and when the client\n// receives those errors it will cause the test to fail.\n//\n// Client-side exceptions in here will NOT cause the test to fail! Because it's\n// a stub, those exceptions will get caught and logged.\n\nvar upsertTestMethodImpl = function (coll, useUpdate, test) {\n  coll.remove({});\n  var result1 = upsert(coll, useUpdate, {\n    foo: \"bar\"\n  }, {\n    foo: \"bar\"\n  });\n\n  if (!test) {\n    test = {\n      equal: function (a, b) {\n        if (!EJSON.equals(a, b)) throw new Error(\"Not equal: \" + JSON.stringify(a) + \", \" + JSON.stringify(b));\n      },\n      isTrue: function (a) {\n        if (!a) throw new Error(\"Not truthy: \" + JSON.stringify(a));\n      },\n      isFalse: function (a) {\n        if (a) throw new Error(\"Not falsey: \" + JSON.stringify(a));\n      }\n    };\n  } // if we don't test this, then testing result1.numberAffected will throw,\n  // which will get caught and logged and the whole test will pass!\n\n\n  test.isTrue(result1);\n  test.equal(result1.numberAffected, 1);\n  if (!useUpdate) test.isTrue(result1.insertedId);\n  var fooId = result1.insertedId;\n  var obj = coll.findOne({\n    foo: \"bar\"\n  });\n  test.isTrue(obj);\n  if (!useUpdate) test.equal(obj._id, result1.insertedId);\n  var result2 = upsert(coll, useUpdate, {\n    _id: fooId\n  }, {\n    $set: {\n      foo: \"baz \"\n    }\n  });\n  test.isTrue(result2);\n  test.equal(result2.numberAffected, 1);\n  test.isFalse(result2.insertedId);\n};\n\nif (Meteor.isServer) {\n  var m = {};\n\n  m[upsertTestMethod] = function (run, useUpdate, options) {\n    check(run, String);\n    check(useUpdate, Boolean);\n    upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, options);\n    upsertTestMethodImpl(upsertTestMethodColl, useUpdate);\n  };\n\n  Meteor.methods(m);\n}\n\nMeteor._FailureTestCollection = new Mongo.Collection(\"___meteor_failure_test_collection\"); // For test \"document with a custom type\"\n\nvar Dog = function (name, color, actions) {\n  var self = this;\n  self.color = color;\n  self.name = name;\n  self.actions = actions || [{\n    name: \"wag\"\n  }, {\n    name: \"swim\"\n  }];\n};\n\n_.extend(Dog.prototype, {\n  getName: function () {\n    return this.name;\n  },\n  getColor: function () {\n    return this.name;\n  },\n  equals: function (other) {\n    return other.name === this.name && other.color === this.color && EJSON.equals(other.actions, this.actions);\n  },\n  toJSONValue: function () {\n    return {\n      color: this.color,\n      name: this.name,\n      actions: this.actions\n    };\n  },\n  typeName: function () {\n    return \"dog\";\n  },\n  clone: function () {\n    return new Dog(this.name, this.color);\n  },\n  speak: function () {\n    return \"woof\";\n  }\n});\n\nEJSON.addType(\"dog\", function (o) {\n  return new Dog(o.name, o.color, o.actions);\n}); // Parameterize tests.\n\n_.each(['STRING', 'MONGO'], function (idGeneration) {\n  var collectionOptions = {\n    idGeneration: idGeneration\n  };\n  testAsyncMulti(\"mongo-livedata - database error reporting. \" + idGeneration, [function (test, expect) {\n    var ftc = Meteor._FailureTestCollection;\n\n    var exception = function (err, res) {\n      test.instanceOf(err, Error);\n    };\n\n    _.each([\"insert\", \"remove\", \"update\"], function (op) {\n      var arg = op === \"insert\" ? {} : 'bla';\n      var arg2 = {};\n\n      var callOp = function (callback) {\n        if (op === \"update\") {\n          ftc[op](arg, arg2, callback);\n        } else {\n          ftc[op](arg, callback);\n        }\n      };\n\n      if (Meteor.isServer) {\n        test.throws(function () {\n          callOp();\n        });\n        callOp(expect(exception));\n      }\n\n      if (Meteor.isClient) {\n        callOp(expect(exception)); // This would log to console in normal operation.\n\n        Meteor._suppress_log(1);\n\n        callOp();\n      }\n    });\n  }]);\n  Tinytest.addAsync(\"mongo-livedata - basics, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll, coll2;\n\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n\n      coll2 = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n      coll = new Mongo.Collection(\"livedata_test_collection_\" + run, collectionOptions);\n      coll2 = new Mongo.Collection(\"livedata_test_collection_2_\" + run, collectionOptions);\n    }\n\n    var log = '';\n    var obs = coll.find({\n      run: run\n    }, {\n      sort: [\"x\"]\n    }).observe({\n      addedAt: function (doc, before_index, before) {\n        log += 'a(' + doc.x + ',' + before_index + ',' + before + ')';\n      },\n      changedAt: function (new_doc, old_doc, at_index) {\n        log += 'c(' + new_doc.x + ',' + at_index + ',' + old_doc.x + ')';\n      },\n      movedTo: function (doc, old_index, new_index) {\n        log += 'm(' + doc.x + ',' + old_index + ',' + new_index + ')';\n      },\n      removedAt: function (doc, at_index) {\n        log += 'r(' + doc.x + ',' + at_index + ')';\n      }\n    });\n\n    var captureObserve = function (f) {\n      if (Meteor.isClient) {\n        f();\n      } else {\n        var fence = new DDPServer._WriteFence();\n\n        DDPServer._CurrentWriteFence.withValue(fence, f);\n\n        fence.armAndWait();\n      }\n\n      var ret = log;\n      log = '';\n      return ret;\n    };\n\n    var expectObserve = function (expected, f) {\n      if (!(expected instanceof Array)) expected = [expected];\n      test.include(expected, captureObserve(f));\n    };\n\n    test.equal(coll.find({\n      run: run\n    }).count(), 0);\n    test.equal(coll.findOne(\"abc\"), undefined);\n    test.equal(coll.findOne({\n      run: run\n    }), undefined);\n    expectObserve('a(1,0,null)', function () {\n      var id = coll.insert({\n        run: run,\n        x: 1\n      });\n      test.equal(coll.find({\n        run: run\n      }).count(), 1);\n      test.equal(coll.findOne(id).x, 1);\n      test.equal(coll.findOne({\n        run: run\n      }).x, 1);\n    });\n    expectObserve('a(4,1,null)', function () {\n      var id2 = coll.insert({\n        run: run,\n        x: 4\n      });\n      test.equal(coll.find({\n        run: run\n      }).count(), 2);\n      test.equal(coll.find({\n        _id: id2\n      }).count(), 1);\n      test.equal(coll.findOne(id2).x, 4);\n    });\n    test.equal(coll.findOne({\n      run: run\n    }, {\n      sort: [\"x\"],\n      skip: 0\n    }).x, 1);\n    test.equal(coll.findOne({\n      run: run\n    }, {\n      sort: [\"x\"],\n      skip: 1\n    }).x, 4);\n    test.equal(coll.findOne({\n      run: run\n    }, {\n      sort: {\n        x: -1\n      },\n      skip: 0\n    }).x, 4);\n    test.equal(coll.findOne({\n      run: run\n    }, {\n      sort: {\n        x: -1\n      },\n      skip: 1\n    }).x, 1); // Regression test for https://github.com/meteor/meteor/issues/7436\n    //  - ensure applySkipLimit defaults to false for count()\n    // Note that the current behavior is inconsistent on the client.\n    //  (https://github.com/meteor/meteor/issues/1201)\n\n    if (Meteor.isServer) {\n      test.equal(coll.find({\n        run: run\n      }, {\n        limit: 1\n      }).count(), 2);\n      test.equal(coll.find({\n        run: run\n      }, {\n        limit: 1\n      }).count(true), 1);\n      test.equal(coll.find({\n        run: run\n      }, {\n        limit: 1\n      }).count(false), 2);\n    }\n\n    var cur = coll.find({\n      run: run\n    }, {\n      sort: [\"x\"]\n    });\n    var total = 0;\n    var index = 0;\n    var context = {};\n    cur.forEach(function (doc, i, cursor) {\n      test.equal(i, index++);\n      test.isTrue(cursor === cur);\n      test.isTrue(context === this);\n      total *= 10;\n\n      if (Meteor.isServer) {\n        // Verify that the callbacks from forEach run sequentially and that\n        // forEach waits for them to complete (issue# 321). If they do not run\n        // sequentially, then the second callback could execute during the first\n        // callback's sleep sleep and the *= 10 will occur before the += 1, then\n        // total (at test.equal time) will be 5. If forEach does not wait for the\n        // callbacks to complete, then total (at test.equal time) will be 0.\n        Meteor._sleepForMs(5);\n      }\n\n      total += doc.x; // verify the meteor environment is set up here\n\n      coll2.insert({\n        total: total\n      });\n    }, context);\n    test.equal(total, 14);\n    index = 0;\n    test.equal(cur.map(function (doc, i, cursor) {\n      // XXX we could theoretically make map run its iterations in parallel or\n      // something which would make this fail\n      test.equal(i, index++);\n      test.isTrue(cursor === cur);\n      test.isTrue(context === this);\n      return doc.x * 2;\n    }, context), [2, 8]);\n    test.equal(_.pluck(coll.find({\n      run: run\n    }, {\n      sort: {\n        x: -1\n      }\n    }).fetch(), \"x\"), [4, 1]);\n    expectObserve('', function () {\n      var count = coll.update({\n        run: run,\n        x: -1\n      }, {\n        $inc: {\n          x: 2\n        }\n      }, {\n        multi: true\n      });\n      test.equal(count, 0);\n    });\n    expectObserve('c(3,0,1)c(6,1,4)', function () {\n      var count = coll.update({\n        run: run\n      }, {\n        $inc: {\n          x: 2\n        }\n      }, {\n        multi: true\n      });\n      test.equal(count, 2);\n      test.equal(_.pluck(coll.find({\n        run: run\n      }, {\n        sort: {\n          x: -1\n        }\n      }).fetch(), \"x\"), [6, 3]);\n    });\n    expectObserve(['c(13,0,3)m(13,0,1)', 'm(6,1,0)c(13,1,3)', 'c(13,0,3)m(6,1,0)', 'm(3,0,1)c(13,1,3)'], function () {\n      coll.update({\n        run: run,\n        x: 3\n      }, {\n        $inc: {\n          x: 10\n        }\n      }, {\n        multi: true\n      });\n      test.equal(_.pluck(coll.find({\n        run: run\n      }, {\n        sort: {\n          x: -1\n        }\n      }).fetch(), \"x\"), [13, 6]);\n    });\n    expectObserve('r(13,1)', function () {\n      var count = coll.remove({\n        run: run,\n        x: {\n          $gt: 10\n        }\n      });\n      test.equal(count, 1);\n      test.equal(coll.find({\n        run: run\n      }).count(), 1);\n    });\n    expectObserve('r(6,0)', function () {\n      coll.remove({\n        run: run\n      });\n      test.equal(coll.find({\n        run: run\n      }).count(), 0);\n    });\n    expectObserve('', function () {\n      var count = coll.remove({\n        run: run\n      });\n      test.equal(count, 0);\n      test.equal(coll.find({\n        run: run\n      }).count(), 0);\n    });\n    obs.stop();\n    onComplete();\n  });\n  Tinytest.addAsync(\"mongo-livedata - fuzz test, \" + idGeneration, function (test, onComplete) {\n    var run = Random.id();\n    var coll;\n\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n      coll = new Mongo.Collection(\"livedata_test_collection_\" + run, collectionOptions);\n    } // fuzz test of observe(), especially the server-side diffing\n\n\n    var actual = [];\n    var correct = [];\n    var counters = {\n      add: 0,\n      change: 0,\n      move: 0,\n      remove: 0\n    };\n    var obs = coll.find({\n      run: run\n    }, {\n      sort: [\"x\"]\n    }).observe({\n      addedAt: function (doc, before_index) {\n        counters.add++;\n        actual.splice(before_index, 0, doc.x);\n      },\n      changedAt: function (new_doc, old_doc, at_index) {\n        counters.change++;\n        test.equal(actual[at_index], old_doc.x);\n        actual[at_index] = new_doc.x;\n      },\n      movedTo: function (doc, old_index, new_index) {\n        counters.move++;\n        test.equal(actual[old_index], doc.x);\n        actual.splice(old_index, 1);\n        actual.splice(new_index, 0, doc.x);\n      },\n      removedAt: function (doc, at_index) {\n        counters.remove++;\n        test.equal(actual[at_index], doc.x);\n        actual.splice(at_index, 1);\n      }\n    });\n\n    if (Meteor.isServer) {\n      // For now, has to be polling (not oplog) because it is ordered observe.\n      test.isTrue(obs._multiplexer._observeDriver._suspendPolling);\n    }\n\n    var step = 0; // Use non-deterministic randomness so we can have a shorter fuzz\n    // test (fewer iterations).  For deterministic (fully seeded)\n    // randomness, remove the call to Random.fraction().\n\n    var seededRandom = new SeededRandom(\"foobard\" + Random.fraction()); // Random integer in [0,n)\n\n    var rnd = function (n) {\n      return seededRandom.nextIntBetween(0, n - 1);\n    };\n\n    var finishObserve = function (f) {\n      if (Meteor.isClient) {\n        f();\n      } else {\n        var fence = new DDPServer._WriteFence();\n\n        DDPServer._CurrentWriteFence.withValue(fence, f);\n\n        fence.armAndWait();\n      }\n    };\n\n    var doStep = function () {\n      if (step++ === 5) {\n        // run N random tests\n        obs.stop();\n        onComplete();\n        return;\n      }\n\n      var max_counters = _.clone(counters);\n\n      finishObserve(function () {\n        if (Meteor.isServer) obs._multiplexer._observeDriver._suspendPolling(); // Do a batch of 1-10 operations\n\n        var batch_count = rnd(10) + 1;\n\n        for (var i = 0; i < batch_count; i++) {\n          // 25% add, 25% remove, 25% change in place, 25% change and move\n          var x;\n          var op = rnd(4);\n          var which = rnd(correct.length);\n\n          if (op === 0 || step < 2 || !correct.length) {\n            // Add\n            x = rnd(1000000);\n            coll.insert({\n              run: run,\n              x: x\n            });\n            correct.push(x);\n            max_counters.add++;\n          } else if (op === 1 || op === 2) {\n            var val;\n            x = correct[which];\n\n            if (op === 1) {\n              // Small change, not likely to cause a move\n              val = x + (rnd(2) ? -1 : 1);\n            } else {\n              // Large change, likely to cause a move\n              val = rnd(1000000);\n            }\n\n            coll.update({\n              run: run,\n              x: x\n            }, {\n              $set: {\n                x: val\n              }\n            });\n            correct[which] = val;\n            max_counters.change++;\n            max_counters.move++;\n          } else {\n            coll.remove({\n              run: run,\n              x: correct[which]\n            });\n            correct.splice(which, 1);\n            max_counters.remove++;\n          }\n        }\n\n        if (Meteor.isServer) obs._multiplexer._observeDriver._resumePolling();\n      }); // Did we actually deliver messages that mutated the array in the\n      // right way?\n\n      correct.sort(function (a, b) {\n        return a - b;\n      });\n      test.equal(actual, correct); // Did we limit ourselves to one 'moved' message per change,\n      // rather than O(results) moved messages?\n\n      _.each(max_counters, function (v, k) {\n        test.isTrue(max_counters[k] >= counters[k], k);\n      });\n\n      Meteor.defer(doStep);\n    };\n\n    doStep();\n  });\n  Tinytest.addAsync(\"mongo-livedata - scribbling, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll;\n\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n      coll = new Mongo.Collection(\"livedata_test_collection_\" + run, collectionOptions);\n    }\n\n    var numAddeds = 0;\n    var handle = coll.find({\n      run: run\n    }).observe({\n      addedAt: function (o) {\n        // test that we can scribble on the object we get back from Mongo without\n        // breaking anything.  The worst possible scribble is messing with _id.\n        delete o._id;\n        numAddeds++;\n      }\n    });\n\n    _.each([123, 456, 789], function (abc) {\n      runInFence(function () {\n        coll.insert({\n          run: run,\n          abc: abc\n        });\n      });\n    });\n\n    handle.stop(); // will be 6 (1+2+3) if we broke diffing!\n\n    test.equal(numAddeds, 3);\n    onComplete();\n  });\n  Tinytest.addAsync(\"mongo-livedata - stop handle in callback, \" + idGeneration, function (test, onComplete) {\n    var run = Random.id();\n    var coll;\n\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n      coll = new Mongo.Collection(\"stopHandleInCallback-\" + run, collectionOptions);\n    }\n\n    var output = [];\n    var handle = coll.find().observe({\n      added: function (doc) {\n        output.push({\n          added: doc._id\n        });\n      },\n      changed: function (newDoc) {\n        output.push('changed');\n        handle.stop();\n      }\n    });\n    test.equal(output, []); // Insert a document. Observe that the added callback is called.\n\n    var docId;\n    runInFence(function () {\n      docId = coll.insert({\n        foo: 42\n      });\n    });\n    test.length(output, 1);\n    test.equal(output.shift(), {\n      added: docId\n    }); // Update it. Observe that the changed callback is called. This should also\n    // stop the observation.\n\n    runInFence(function () {\n      coll.update(docId, {\n        $set: {\n          bar: 10\n        }\n      });\n    });\n    test.length(output, 1);\n    test.equal(output.shift(), 'changed'); // Update again. This shouldn't call the callback because we stopped the\n    // observation.\n\n    runInFence(function () {\n      coll.update(docId, {\n        $set: {\n          baz: 40\n        }\n      });\n    });\n    test.length(output, 0);\n    test.equal(coll.find().count(), 1);\n    test.equal(coll.findOne(docId), {\n      _id: docId,\n      foo: 42,\n      bar: 10,\n      baz: 40\n    });\n    onComplete();\n  }); // This behavior isn't great, but it beats deadlock.\n\n  if (Meteor.isServer) {\n    Tinytest.addAsync(\"mongo-livedata - recursive observe throws, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeInCallback-\" + run, collectionOptions);\n      var callbackCalled = false;\n      var handle = coll.find({}).observe({\n        added: function (newDoc) {\n          callbackCalled = true;\n          test.throws(function () {\n            coll.find({}).observe();\n          });\n        }\n      });\n      test.isFalse(callbackCalled); // Insert a document. Observe that the added callback is called.\n\n      runInFence(function () {\n        coll.insert({\n          foo: 42\n        });\n      });\n      test.isTrue(callbackCalled);\n      handle.stop();\n      onComplete();\n    });\n    Tinytest.addAsync(\"mongo-livedata - cursor dedup, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"cursorDedup-\" + run, collectionOptions);\n\n      var observer = function (noAdded) {\n        var output = [];\n        var callbacks = {\n          changed: function (newDoc) {\n            output.push({\n              changed: newDoc._id\n            });\n          }\n        };\n\n        if (!noAdded) {\n          callbacks.added = function (doc) {\n            output.push({\n              added: doc._id\n            });\n          };\n        }\n\n        var handle = coll.find({\n          foo: 22\n        }).observe(callbacks);\n        return {\n          output: output,\n          handle: handle\n        };\n      }; // Insert a doc and start observing.\n\n\n      var docId1 = coll.insert({\n        foo: 22\n      });\n      var o1 = observer(); // Initial add.\n\n      test.length(o1.output, 1);\n      test.equal(o1.output.shift(), {\n        added: docId1\n      }); // Insert another doc (blocking until observes have fired).\n\n      var docId2;\n      runInFence(function () {\n        docId2 = coll.insert({\n          foo: 22,\n          bar: 5\n        });\n      }); // Observed add.\n\n      test.length(o1.output, 1);\n      test.equal(o1.output.shift(), {\n        added: docId2\n      }); // Second identical observe.\n\n      var o2 = observer(); // Initial adds.\n\n      test.length(o2.output, 2);\n      test.include([docId1, docId2], o2.output[0].added);\n      test.include([docId1, docId2], o2.output[1].added);\n      test.notEqual(o2.output[0].added, o2.output[1].added);\n      o2.output.length = 0; // Original observe not affected.\n\n      test.length(o1.output, 0); // White-box test: both observes should share an ObserveMultiplexer.\n\n      var observeMultiplexer = o1.handle._multiplexer;\n      test.isTrue(observeMultiplexer);\n      test.isTrue(observeMultiplexer === o2.handle._multiplexer); // Update. Both observes fire.\n\n      runInFence(function () {\n        coll.update(docId1, {\n          $set: {\n            x: 'y'\n          }\n        });\n      });\n      test.length(o1.output, 1);\n      test.length(o2.output, 1);\n      test.equal(o1.output.shift(), {\n        changed: docId1\n      });\n      test.equal(o2.output.shift(), {\n        changed: docId1\n      }); // Stop first handle. Second handle still around.\n\n      o1.handle.stop();\n      test.length(o1.output, 0);\n      test.length(o2.output, 0); // Another update. Just the second handle should fire.\n\n      runInFence(function () {\n        coll.update(docId2, {\n          $set: {\n            z: 'y'\n          }\n        });\n      });\n      test.length(o1.output, 0);\n      test.length(o2.output, 1);\n      test.equal(o2.output.shift(), {\n        changed: docId2\n      }); // Stop second handle. Nothing should happen, but the multiplexer should\n      // be stopped.\n\n      test.isTrue(observeMultiplexer._handles); // This will change.\n\n      o2.handle.stop();\n      test.length(o1.output, 0);\n      test.length(o2.output, 0); // White-box: ObserveMultiplexer has nulled its _handles so you can't\n      // accidentally join to it.\n\n      test.isNull(observeMultiplexer._handles); // Start yet another handle on the same query.\n\n      var o3 = observer(); // Initial adds.\n\n      test.length(o3.output, 2);\n      test.include([docId1, docId2], o3.output[0].added);\n      test.include([docId1, docId2], o3.output[1].added);\n      test.notEqual(o3.output[0].added, o3.output[1].added); // Old observers not called.\n\n      test.length(o1.output, 0);\n      test.length(o2.output, 0); // White-box: Different ObserveMultiplexer.\n\n      test.isTrue(observeMultiplexer !== o3.handle._multiplexer); // Start another handle with no added callback. Regression test for #589.\n\n      var o4 = observer(true);\n      o3.handle.stop();\n      o4.handle.stop();\n      onComplete();\n    });\n    Tinytest.addAsync(\"mongo-livedata - async server-side insert, \" + idGeneration, function (test, onComplete) {\n      // Tests that insert returns before the callback runs. Relies on the fact\n      // that mongo does not run the callback before spinning off the event loop.\n      var cname = Random.id();\n      var coll = new Mongo.Collection(cname);\n      var doc = {\n        foo: \"bar\"\n      };\n      var x = 0;\n      coll.insert(doc, function (err, result) {\n        test.equal(err, null);\n        test.equal(x, 1);\n        onComplete();\n      });\n      x++;\n    });\n    Tinytest.addAsync(\"mongo-livedata - async server-side update, \" + idGeneration, function (test, onComplete) {\n      // Tests that update returns before the callback runs.\n      var cname = Random.id();\n      var coll = new Mongo.Collection(cname);\n      var doc = {\n        foo: \"bar\"\n      };\n      var x = 0;\n      var id = coll.insert(doc);\n      coll.update(id, {\n        $set: {\n          foo: \"baz\"\n        }\n      }, function (err, result) {\n        test.equal(err, null);\n        test.equal(result, 1);\n        test.equal(x, 1);\n        onComplete();\n      });\n      x++;\n    });\n    Tinytest.addAsync(\"mongo-livedata - async server-side remove, \" + idGeneration, function (test, onComplete) {\n      // Tests that remove returns before the callback runs.\n      var cname = Random.id();\n      var coll = new Mongo.Collection(cname);\n      var doc = {\n        foo: \"bar\"\n      };\n      var x = 0;\n      var id = coll.insert(doc);\n      coll.remove(id, function (err, result) {\n        test.equal(err, null);\n        test.isFalse(coll.findOne(id));\n        test.equal(x, 1);\n        onComplete();\n      });\n      x++;\n    }); // compares arrays a and b w/o looking at order\n\n    var setsEqual = function (a, b) {\n      a = _.map(a, EJSON.stringify);\n      b = _.map(b, EJSON.stringify);\n      return _.isEmpty(_.difference(a, b)) && _.isEmpty(_.difference(b, a));\n    }; // This test mainly checks the correctness of oplog code dealing with limited\n    // queries. Compitablity with poll-diff is added as well.\n\n\n    Tinytest.addAsync(\"mongo-livedata - observe sorted, limited \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeLimit-\" + run, collectionOptions);\n\n      var observer = function () {\n        var state = {};\n        var output = [];\n        var callbacks = {\n          changed: function (newDoc) {\n            output.push({\n              changed: newDoc._id\n            });\n            state[newDoc._id] = newDoc;\n          },\n          added: function (newDoc) {\n            output.push({\n              added: newDoc._id\n            });\n            state[newDoc._id] = newDoc;\n          },\n          removed: function (oldDoc) {\n            output.push({\n              removed: oldDoc._id\n            });\n            delete state[oldDoc._id];\n          }\n        };\n        var handle = coll.find({\n          foo: 22\n        }, {\n          sort: {\n            bar: 1\n          },\n          limit: 3\n        }).observe(callbacks);\n        return {\n          output: output,\n          handle: handle,\n          state: state\n        };\n      };\n\n      var clearOutput = function (o) {\n        o.output.splice(0, o.output.length);\n      };\n\n      var ins = function (doc) {\n        var id;\n        runInFence(function () {\n          id = coll.insert(doc);\n        });\n        return id;\n      };\n\n      var rem = function (sel) {\n        runInFence(function () {\n          coll.remove(sel);\n        });\n      };\n\n      var upd = function (sel, mod, opt) {\n        runInFence(function () {\n          coll.update(sel, mod, opt);\n        });\n      }; // tests '_id' subfields for all documents in oplog buffer\n\n\n      var testOplogBufferIds = function (ids) {\n        if (!usesOplog) return;\n        var bufferIds = [];\n\n        o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n          bufferIds.push(id);\n        });\n\n        test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n      };\n\n      var testSafeAppendToBufferFlag = function (expected) {\n        if (!usesOplog) return;\n        test.equal(o.handle._multiplexer._observeDriver._safeAppendToBuffer, expected);\n      }; // We'll describe our state as follows.  5:1 means \"the document with\n      // _id=docId1 and bar=5\".  We list documents as\n      //   [ currently published | in the buffer ] outside the buffer\n      // If safeToAppendToBuffer is true, we'll say ]! instead.\n      // Insert a doc and start observing.\n\n\n      var docId1 = ins({\n        foo: 22,\n        bar: 5\n      });\n      waitUntilOplogCaughtUp(); // State: [ 5:1 | ]!\n\n      var o = observer();\n      var usesOplog = o.handle._multiplexer._observeDriver._usesOplog; // Initial add.\n\n      test.length(o.output, 1);\n      test.equal(o.output.shift(), {\n        added: docId1\n      });\n      testSafeAppendToBufferFlag(true); // Insert another doc (blocking until observes have fired).\n      // State: [ 5:1 6:2 | ]!\n\n      var docId2 = ins({\n        foo: 22,\n        bar: 6\n      }); // Observed add.\n\n      test.length(o.output, 1);\n      test.equal(o.output.shift(), {\n        added: docId2\n      });\n      testSafeAppendToBufferFlag(true);\n      var docId3 = ins({\n        foo: 22,\n        bar: 3\n      }); // State: [ 3:3 5:1 6:2 | ]!\n\n      test.length(o.output, 1);\n      test.equal(o.output.shift(), {\n        added: docId3\n      });\n      testSafeAppendToBufferFlag(true); // Add a non-matching document\n\n      ins({\n        foo: 13\n      }); // It shouldn't be added\n\n      test.length(o.output, 0); // Add something that matches but is too big to fit in\n\n      var docId4 = ins({\n        foo: 22,\n        bar: 7\n      }); // State: [ 3:3 5:1 6:2 | 7:4 ]!\n      // It shouldn't be added but should end up in the buffer.\n\n      test.length(o.output, 0);\n      testOplogBufferIds([docId4]);\n      testSafeAppendToBufferFlag(true); // Let's add something small enough to fit in\n\n      var docId5 = ins({\n        foo: 22,\n        bar: -1\n      }); // State: [ -1:5 3:3 5:1 | 6:2 7:4 ]!\n      // We should get an added and a removed events\n\n      test.length(o.output, 2); // doc 2 was removed from the published set as it is too big to be in\n\n      test.isTrue(setsEqual(o.output, [{\n        added: docId5\n      }, {\n        removed: docId2\n      }]));\n      clearOutput(o);\n      testOplogBufferIds([docId2, docId4]);\n      testSafeAppendToBufferFlag(true); // Now remove something and that doc 2 should be right back\n\n      rem(docId5); // State: [ 3:3 5:1 6:2 | 7:4 ]!\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{\n        removed: docId5\n      }, {\n        added: docId2\n      }]));\n      clearOutput(o);\n      testOplogBufferIds([docId4]);\n      testSafeAppendToBufferFlag(true); // Add some negative numbers overflowing the buffer.\n      // New documents will take the published place, [3 5 6] will take the buffer\n      // and 7 will be outside of the buffer in MongoDB.\n\n      var docId6 = ins({\n        foo: 22,\n        bar: -1\n      });\n      var docId7 = ins({\n        foo: 22,\n        bar: -2\n      });\n      var docId8 = ins({\n        foo: 22,\n        bar: -3\n      }); // State: [ -3:8 -2:7 -1:6 | 3:3 5:1 6:2 ] 7:4\n\n      test.length(o.output, 6);\n      var expected = [{\n        added: docId6\n      }, {\n        removed: docId2\n      }, {\n        added: docId7\n      }, {\n        removed: docId1\n      }, {\n        added: docId8\n      }, {\n        removed: docId3\n      }];\n      test.isTrue(setsEqual(o.output, expected));\n      clearOutput(o);\n      testOplogBufferIds([docId1, docId2, docId3]);\n      testSafeAppendToBufferFlag(false); // If we update first 3 docs (increment them by 20), it would be\n      // interesting.\n\n      upd({\n        bar: {\n          $lt: 0\n        }\n      }, {\n        $inc: {\n          bar: 20\n        }\n      }, {\n        multi: true\n      }); // State: [ 3:3 5:1 6:2 | ] 7:4 17:8 18:7 19:6\n      //   which triggers re-poll leaving us at\n      // State: [ 3:3 5:1 6:2 | 7:4 17:8 18:7 ] 19:6\n      // The updated documents can't find their place in published and they can't\n      // be buffered as we are not aware of the situation outside of the buffer.\n      // But since our buffer becomes empty, it will be refilled partially with\n      // updated documents.\n\n      test.length(o.output, 6);\n      var expectedRemoves = [{\n        removed: docId6\n      }, {\n        removed: docId7\n      }, {\n        removed: docId8\n      }];\n      var expectedAdds = [{\n        added: docId3\n      }, {\n        added: docId1\n      }, {\n        added: docId2\n      }];\n      test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n      clearOutput(o);\n      testOplogBufferIds([docId4, docId7, docId8]);\n      testSafeAppendToBufferFlag(false); // Remove first 4 docs (3, 1, 2, 4) forcing buffer to become empty and\n      // schedule a repoll.\n\n      rem({\n        bar: {\n          $lt: 10\n        }\n      }); // State: [ 17:8 18:7 19:6 | ]!\n      // XXX the oplog code analyzes the events one by one: one remove after\n      // another. Poll-n-diff code, on the other side, analyzes the batch action\n      // of multiple remove. Because of that difference, expected outputs differ.\n\n      if (usesOplog) {\n        expectedRemoves = [{\n          removed: docId3\n        }, {\n          removed: docId1\n        }, {\n          removed: docId2\n        }, {\n          removed: docId4\n        }];\n        expectedAdds = [{\n          added: docId4\n        }, {\n          added: docId8\n        }, {\n          added: docId7\n        }, {\n          added: docId6\n        }];\n        test.length(o.output, 8);\n      } else {\n        expectedRemoves = [{\n          removed: docId3\n        }, {\n          removed: docId1\n        }, {\n          removed: docId2\n        }];\n        expectedAdds = [{\n          added: docId8\n        }, {\n          added: docId7\n        }, {\n          added: docId6\n        }];\n        test.length(o.output, 6);\n      }\n\n      test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n      clearOutput(o);\n      testOplogBufferIds([]);\n      testSafeAppendToBufferFlag(true);\n      var docId9 = ins({\n        foo: 22,\n        bar: 21\n      });\n      var docId10 = ins({\n        foo: 22,\n        bar: 31\n      });\n      var docId11 = ins({\n        foo: 22,\n        bar: 41\n      });\n      var docId12 = ins({\n        foo: 22,\n        bar: 51\n      }); // State: [ 17:8 18:7 19:6 | 21:9 31:10 41:11 ] 51:12\n\n      testOplogBufferIds([docId9, docId10, docId11]);\n      testSafeAppendToBufferFlag(false);\n      test.length(o.output, 0);\n      upd({\n        bar: {\n          $lt: 20\n        }\n      }, {\n        $inc: {\n          bar: 5\n        }\n      }, {\n        multi: true\n      }); // State: [ 21:9 22:8 23:7 | 24:6 31:10 41:11 ] 51:12\n\n      test.length(o.output, 4);\n      test.isTrue(setsEqual(o.output, [{\n        removed: docId6\n      }, {\n        added: docId9\n      }, {\n        changed: docId7\n      }, {\n        changed: docId8\n      }]));\n      clearOutput(o);\n      testOplogBufferIds([docId6, docId10, docId11]);\n      testSafeAppendToBufferFlag(false);\n      rem(docId9); // State: [ 22:8 23:7 24:6 | 31:10 41:11 ] 51:12\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{\n        removed: docId9\n      }, {\n        added: docId6\n      }]));\n      clearOutput(o);\n      testOplogBufferIds([docId10, docId11]);\n      testSafeAppendToBufferFlag(false);\n      upd({\n        bar: {\n          $gt: 25\n        }\n      }, {\n        $inc: {\n          bar: -7.5\n        }\n      }, {\n        multi: true\n      }); // State: [ 22:8 23:7 23.5:10 | 24:6 ] 33.5:11 43.5:12\n      // 33.5 doesn't update in-place in buffer, because it the driver is not sure\n      // it can do it: because the buffer does not have the safe append flag set,\n      // for all it knows there is a different doc which is less than 33.5.\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{\n        removed: docId6\n      }, {\n        added: docId10\n      }]));\n      clearOutput(o);\n      testOplogBufferIds([docId6]);\n      testSafeAppendToBufferFlag(false); // Force buffer objects to be moved into published set so we can check them\n\n      rem(docId7);\n      rem(docId8);\n      rem(docId10); // State: [ 24:6 | ] 33.5:11 43.5:12\n      //    triggers repoll\n      // State: [ 24:6 33.5:11 43.5:12 | ]!\n\n      test.length(o.output, 6);\n      test.isTrue(setsEqual(o.output, [{\n        removed: docId7\n      }, {\n        removed: docId8\n      }, {\n        removed: docId10\n      }, {\n        added: docId6\n      }, {\n        added: docId11\n      }, {\n        added: docId12\n      }]));\n      test.length(_.keys(o.state), 3);\n      test.equal(o.state[docId6], {\n        _id: docId6,\n        foo: 22,\n        bar: 24\n      });\n      test.equal(o.state[docId11], {\n        _id: docId11,\n        foo: 22,\n        bar: 33.5\n      });\n      test.equal(o.state[docId12], {\n        _id: docId12,\n        foo: 22,\n        bar: 43.5\n      });\n      clearOutput(o);\n      testOplogBufferIds([]);\n      testSafeAppendToBufferFlag(true);\n      var docId13 = ins({\n        foo: 22,\n        bar: 50\n      });\n      var docId14 = ins({\n        foo: 22,\n        bar: 51\n      });\n      var docId15 = ins({\n        foo: 22,\n        bar: 52\n      });\n      var docId16 = ins({\n        foo: 22,\n        bar: 53\n      }); // State: [ 24:6 33.5:11 43.5:12 | 50:13 51:14 52:15 ] 53:16\n\n      test.length(o.output, 0);\n      testOplogBufferIds([docId13, docId14, docId15]);\n      testSafeAppendToBufferFlag(false); // Update something that's outside the buffer to be in the buffer, writing\n      // only to the sort key.\n\n      upd(docId16, {\n        $set: {\n          bar: 10\n        }\n      }); // State: [ 10:16 24:6 33.5:11 | 43.5:12 50:13 51:14 ] 52:15\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{\n        removed: docId12\n      }, {\n        added: docId16\n      }]));\n      clearOutput(o);\n      testOplogBufferIds([docId12, docId13, docId14]);\n      testSafeAppendToBufferFlag(false);\n      o.handle.stop();\n      onComplete();\n    });\n    Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, sort fields \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeLimit-\" + run, collectionOptions);\n\n      var observer = function () {\n        var state = {};\n        var output = [];\n        var callbacks = {\n          changed: function (newDoc) {\n            output.push({\n              changed: newDoc._id\n            });\n            state[newDoc._id] = newDoc;\n          },\n          added: function (newDoc) {\n            output.push({\n              added: newDoc._id\n            });\n            state[newDoc._id] = newDoc;\n          },\n          removed: function (oldDoc) {\n            output.push({\n              removed: oldDoc._id\n            });\n            delete state[oldDoc._id];\n          }\n        };\n        var handle = coll.find({}, {\n          sort: {\n            x: 1\n          },\n          limit: 2,\n          fields: {\n            y: 1\n          }\n        }).observe(callbacks);\n        return {\n          output: output,\n          handle: handle,\n          state: state\n        };\n      };\n\n      var clearOutput = function (o) {\n        o.output.splice(0, o.output.length);\n      };\n\n      var ins = function (doc) {\n        var id;\n        runInFence(function () {\n          id = coll.insert(doc);\n        });\n        return id;\n      };\n\n      var rem = function (id) {\n        runInFence(function () {\n          coll.remove(id);\n        });\n      };\n\n      var o = observer();\n      var docId1 = ins({\n        x: 1,\n        y: 1222\n      });\n      var docId2 = ins({\n        x: 5,\n        y: 5222\n      });\n      test.length(o.output, 2);\n      test.equal(o.output, [{\n        added: docId1\n      }, {\n        added: docId2\n      }]);\n      clearOutput(o);\n      var docId3 = ins({\n        x: 7,\n        y: 7222\n      });\n      test.length(o.output, 0);\n      var docId4 = ins({\n        x: -1,\n        y: -1222\n      }); // Becomes [docId4 docId1 | docId2 docId3]\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{\n        added: docId4\n      }, {\n        removed: docId2\n      }]));\n      test.equal(_.size(o.state), 2);\n      test.equal(o.state[docId4], {\n        _id: docId4,\n        y: -1222\n      });\n      test.equal(o.state[docId1], {\n        _id: docId1,\n        y: 1222\n      });\n      clearOutput(o);\n      rem(docId2); // Becomes [docId4 docId1 | docId3]\n\n      test.length(o.output, 0);\n      rem(docId4); // Becomes [docId1 docId3]\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{\n        added: docId3\n      }, {\n        removed: docId4\n      }]));\n      test.equal(_.size(o.state), 2);\n      test.equal(o.state[docId3], {\n        _id: docId3,\n        y: 7222\n      });\n      test.equal(o.state[docId1], {\n        _id: docId1,\n        y: 1222\n      });\n      clearOutput(o);\n      onComplete();\n    });\n    Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, big initial set\" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeLimit-\" + run, collectionOptions);\n\n      var observer = function () {\n        var state = {};\n        var output = [];\n        var callbacks = {\n          changed: function (newDoc) {\n            output.push({\n              changed: newDoc._id\n            });\n            state[newDoc._id] = newDoc;\n          },\n          added: function (newDoc) {\n            output.push({\n              added: newDoc._id\n            });\n            state[newDoc._id] = newDoc;\n          },\n          removed: function (oldDoc) {\n            output.push({\n              removed: oldDoc._id\n            });\n            delete state[oldDoc._id];\n          }\n        };\n        var handle = coll.find({}, {\n          sort: {\n            x: 1,\n            y: 1\n          },\n          limit: 3\n        }).observe(callbacks);\n        return {\n          output: output,\n          handle: handle,\n          state: state\n        };\n      };\n\n      var clearOutput = function (o) {\n        o.output.splice(0, o.output.length);\n      };\n\n      var ins = function (doc) {\n        var id;\n        runInFence(function () {\n          id = coll.insert(doc);\n        });\n        return id;\n      };\n\n      var rem = function (id) {\n        runInFence(function () {\n          coll.remove(id);\n        });\n      }; // tests '_id' subfields for all documents in oplog buffer\n\n\n      var testOplogBufferIds = function (ids) {\n        var bufferIds = [];\n\n        o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n          bufferIds.push(id);\n        });\n\n        test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n      };\n\n      var testSafeAppendToBufferFlag = function (expected) {\n        if (expected) {\n          test.isTrue(o.handle._multiplexer._observeDriver._safeAppendToBuffer);\n        } else {\n          test.isFalse(o.handle._multiplexer._observeDriver._safeAppendToBuffer);\n        }\n      };\n\n      var ids = {};\n\n      _.each([2, 4, 1, 3, 5, 5, 9, 1, 3, 2, 5], function (x, i) {\n        ids[i] = ins({\n          x: x,\n          y: i\n        });\n      }); // Ensure that we are past all the 'i' entries before we run the query, so\n      // that we get the expected phase transitions.\n\n\n      waitUntilOplogCaughtUp();\n      var o = observer();\n      var usesOplog = o.handle._multiplexer._observeDriver._usesOplog; //  x: [1 1 2 | 2 3 3] 4 5 5 5  9\n      // id: [2 7 0 | 9 3 8] 1 4 5 10 6\n\n      test.length(o.output, 3);\n      test.isTrue(setsEqual([{\n        added: ids[2]\n      }, {\n        added: ids[7]\n      }, {\n        added: ids[0]\n      }], o.output));\n      usesOplog && testOplogBufferIds([ids[9], ids[3], ids[8]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n      rem(ids[0]); //  x: [1 1 2 | 3 3] 4 5 5 5  9\n      // id: [2 7 9 | 3 8] 1 4 5 10 6\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual([{\n        removed: ids[0]\n      }, {\n        added: ids[9]\n      }], o.output));\n      usesOplog && testOplogBufferIds([ids[3], ids[8]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n      rem(ids[7]); //  x: [1 2 3 | 3] 4 5 5 5  9\n      // id: [2 9 3 | 8] 1 4 5 10 6\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual([{\n        removed: ids[7]\n      }, {\n        added: ids[3]\n      }], o.output));\n      usesOplog && testOplogBufferIds([ids[8]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n      rem(ids[3]); //  x: [1 2 3 | 4 5 5] 5  9\n      // id: [2 9 8 | 1 4 5] 10 6\n\n      test.length(o.output, 2);\n      test.isTrue(setsEqual([{\n        removed: ids[3]\n      }, {\n        added: ids[8]\n      }], o.output));\n      usesOplog && testOplogBufferIds([ids[1], ids[4], ids[5]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n      rem({\n        x: {\n          $lt: 4\n        }\n      }); //  x: [4 5 5 | 5  9]\n      // id: [1 4 5 | 10 6]\n\n      test.length(o.output, 6);\n      test.isTrue(setsEqual([{\n        removed: ids[2]\n      }, {\n        removed: ids[9]\n      }, {\n        removed: ids[8]\n      }, {\n        added: ids[5]\n      }, {\n        added: ids[4]\n      }, {\n        added: ids[1]\n      }], o.output));\n      usesOplog && testOplogBufferIds([ids[10], ids[6]]);\n      usesOplog && testSafeAppendToBufferFlag(true);\n      clearOutput(o);\n      onComplete();\n    });\n  }\n\n  testAsyncMulti('mongo-livedata - empty documents, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n    }));\n  }]); // Regression test for #2413.\n\n  testAsyncMulti('mongo-livedata - upsert without callback, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions); // No callback!  Before fixing #2413, this method never returned and\n    // so no future DDP methods worked either.\n\n    coll.upsert('foo', {\n      bar: 1\n    }); // Do something else on the same method and expect it to actually work.\n    // (If the bug comes back, this will 'async batch timeout'.)\n\n    coll.insert({}, expect(function () {}));\n  }]); // Regression test for https://github.com/meteor/meteor/issues/8666.\n\n  testAsyncMulti('mongo-livedata - upsert with an undefined selector, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var testWidget = {\n      name: 'Widget name'\n    };\n    coll.upsert(testWidget._id, testWidget, expect(function (error, insertDetails) {\n      test.isFalse(error);\n      test.equal(coll.findOne(insertDetails.insertedId), Object.assign({\n        _id: insertDetails.insertedId\n      }, testWidget));\n    }));\n  }]); // See https://github.com/meteor/meteor/issues/594.\n\n  testAsyncMulti('mongo-livedata - document with length, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    var coll = self.coll = new Mongo.Collection(self.collectionName, collectionOptions);\n    coll.insert({\n      foo: 'x',\n      length: 0\n    }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.docId = id;\n      test.equal(coll.findOne(self.docId), {\n        _id: self.docId,\n        foo: 'x',\n        length: 0\n      });\n    }));\n  }, function (test, expect) {\n    var self = this;\n    var coll = self.coll;\n    coll.update(self.docId, {\n      $set: {\n        length: 5\n      }\n    }, expect(function (err) {\n      test.isFalse(err);\n      test.equal(coll.findOne(self.docId), {\n        _id: self.docId,\n        foo: 'x',\n        length: 5\n      });\n    }));\n  }]);\n  testAsyncMulti('mongo-livedata - document with a date, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({\n      d: new Date(1356152390004)\n    }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      test.equal(coll.findOne().d.getFullYear(), 2012);\n    }));\n  }]);\n  testAsyncMulti('mongo-livedata - document goes through a transform, ' + idGeneration, [function (test, expect) {\n    var self = this;\n\n    var seconds = function (doc) {\n      doc.seconds = function () {\n        return doc.d.getSeconds();\n      };\n\n      return doc;\n    };\n\n    TRANSFORMS[\"seconds\"] = seconds;\n    self.collectionOptions = {\n      idGeneration: idGeneration,\n      transform: seconds,\n      transformName: \"seconds\"\n    };\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(self.collectionName, self.collectionOptions);\n    var obs;\n    var expectAdd = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n    });\n    var expectRemove = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n      obs.stop();\n    });\n    self.coll.insert({\n      d: new Date(1356152390004)\n    }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = self.coll.find();\n      obs = cursor.observe({\n        added: expectAdd,\n        removed: expectRemove\n      });\n      test.equal(cursor.count(), 1);\n      test.equal(cursor.fetch()[0].seconds(), 50);\n      test.equal(self.coll.findOne().seconds(), 50);\n      test.equal(self.coll.findOne({}, {\n        transform: null\n      }).seconds, undefined);\n      test.equal(self.coll.findOne({}, {\n        transform: function (doc) {\n          return {\n            seconds: doc.d.getSeconds()\n          };\n        }\n      }).seconds, 50);\n      self.coll.remove(id);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.insert({\n      d: new Date(1356152390004)\n    }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id1 = id;\n    }));\n    self.coll.insert({\n      d: new Date(1356152391004)\n    }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id2 = id;\n    }));\n  }]);\n  testAsyncMulti('mongo-livedata - transform sets _id if not present, ' + idGeneration, [function (test, expect) {\n    var self = this;\n\n    var justId = function (doc) {\n      return _.omit(doc, '_id');\n    };\n\n    TRANSFORMS[\"justId\"] = justId;\n    var collectionOptions = {\n      idGeneration: idGeneration,\n      transform: justId,\n      transformName: \"justId\"\n    };\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    self.coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      test.equal(self.coll.findOne()._id, id);\n    }));\n  }]);\n  var bin = Base64.decode(\"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyBy\" + \"ZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJv\" + \"bSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhl\" + \"IG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdo\" + \"dCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdl\" + \"bmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9y\" + \"dCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=\");\n  testAsyncMulti('mongo-livedata - document with binary data, ' + idGeneration, [function (test, expect) {\n    // XXX probably shouldn't use EJSON's private test symbols\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({\n      b: bin\n    }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = coll.findOne();\n      test.isTrue(EJSON.isBinary(inColl.b));\n      test.equal(inColl.b, bin);\n    }));\n  }]);\n  testAsyncMulti('mongo-livedata - document with a custom type, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId; // Dog is implemented at the top of the file, outside of the idGeneration\n    // loop (so that we only call EJSON.addType once).\n\n    var d = new Dog(\"reginald\", null);\n    self.coll.insert({\n      d: d\n    }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      self.docId = docId;\n      var cursor = self.coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = self.coll.findOne();\n      test.isTrue(inColl);\n      inColl && test.equal(inColl.d.speak(), \"woof\");\n      inColl && test.isNull(inColl.d.color);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.insert(new Dog(\"rover\", \"orange\"), expect(function (err, id) {\n      test.isTrue(err);\n      test.isFalse(id);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.update(self.docId, new Dog(\"rover\", \"orange\"), expect(function (err) {\n      test.isTrue(err);\n    }));\n  }]);\n\n  if (Meteor.isServer) {\n    Tinytest.addAsync(\"mongo-livedata - update return values, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_update_result_\" + run, collectionOptions);\n      coll.insert({\n        foo: \"bar\"\n      });\n      coll.insert({\n        foo: \"baz\"\n      });\n      test.equal(coll.update({}, {\n        $set: {\n          foo: \"qux\"\n        }\n      }, {\n        multi: true\n      }), 2);\n      coll.update({}, {\n        $set: {\n          foo: \"quux\"\n        }\n      }, {\n        multi: true\n      }, function (err, result) {\n        test.isFalse(err);\n        test.equal(result, 2);\n        onComplete();\n      });\n    });\n    Tinytest.addAsync(\"mongo-livedata - remove return values, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_update_result_\" + run, collectionOptions);\n      coll.insert({\n        foo: \"bar\"\n      });\n      coll.insert({\n        foo: \"baz\"\n      });\n      test.equal(coll.remove({}), 2);\n      coll.insert({\n        foo: \"bar\"\n      });\n      coll.insert({\n        foo: \"baz\"\n      });\n      coll.remove({}, function (err, result) {\n        test.isFalse(err);\n        test.equal(result, 2);\n        onComplete();\n      });\n    });\n    Tinytest.addAsync(\"mongo-livedata - id-based invalidation, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_invalidation_collection_\" + run, collectionOptions);\n      coll.allow({\n        update: function () {\n          return true;\n        },\n        remove: function () {\n          return true;\n        }\n      });\n      var id1 = coll.insert({\n        x: 42,\n        is1: true\n      });\n      var id2 = coll.insert({\n        x: 50,\n        is2: true\n      });\n      var polls = {};\n      var handlesToStop = [];\n\n      var observe = function (name, query) {\n        var handle = coll.find(query).observeChanges({\n          // Make sure that we only poll on invalidation, not due to time, and\n          // keep track of when we do. Note: this option disables the use of\n          // oplogs (which admittedly is somewhat irrelevant to this feature).\n          _testOnlyPollCallback: function () {\n            polls[name] = name in polls ? polls[name] + 1 : 1;\n          }\n        });\n        handlesToStop.push(handle);\n      };\n\n      observe(\"all\", {});\n      observe(\"id1Direct\", id1);\n      observe(\"id1InQuery\", {\n        _id: id1,\n        z: null\n      });\n      observe(\"id2Direct\", id2);\n      observe(\"id2InQuery\", {\n        _id: id2,\n        z: null\n      });\n      observe(\"bothIds\", {\n        _id: {\n          $in: [id1, id2]\n        }\n      });\n\n      var resetPollsAndRunInFence = function (f) {\n        polls = {};\n        runInFence(f);\n      }; // Update id1 directly. This should poll all but the \"id2\" queries. \"all\"\n      // and \"bothIds\" increment by 2 because they are looking at both.\n\n\n      resetPollsAndRunInFence(function () {\n        coll.update(id1, {\n          $inc: {\n            x: 1\n          }\n        });\n      });\n      test.equal(polls, {\n        all: 1,\n        id1Direct: 1,\n        id1InQuery: 1,\n        bothIds: 1\n      }); // Update id2 using a funny query. This should poll all but the \"id1\"\n      // queries.\n\n      resetPollsAndRunInFence(function () {\n        coll.update({\n          _id: id2,\n          q: null\n        }, {\n          $inc: {\n            x: 1\n          }\n        });\n      });\n      test.equal(polls, {\n        all: 1,\n        id2Direct: 1,\n        id2InQuery: 1,\n        bothIds: 1\n      }); // Update both using a $in query. Should poll each of them exactly once.\n\n      resetPollsAndRunInFence(function () {\n        coll.update({\n          _id: {\n            $in: [id1, id2]\n          },\n          q: null\n        }, {\n          $inc: {\n            x: 1\n          }\n        });\n      });\n      test.equal(polls, {\n        all: 1,\n        id1Direct: 1,\n        id1InQuery: 1,\n        id2Direct: 1,\n        id2InQuery: 1,\n        bothIds: 1\n      });\n\n      _.each(handlesToStop, function (h) {\n        h.stop();\n      });\n\n      onComplete();\n    });\n    Tinytest.add(\"mongo-livedata - upsert error parse, \" + idGeneration, function (test) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_upsert_errorparse_collection_\" + run, collectionOptions);\n      coll.insert({\n        _id: 'foobar',\n        foo: 'bar'\n      });\n      var err;\n\n      try {\n        coll.update({\n          foo: 'bar'\n        }, {\n          _id: 'cowbar'\n        });\n      } catch (e) {\n        err = e;\n      }\n\n      test.isTrue(err);\n      test.isTrue(MongoInternals.Connection._isCannotChangeIdError(err));\n\n      try {\n        coll.insert({\n          _id: 'foobar'\n        });\n      } catch (e) {\n        err = e;\n      }\n\n      test.isTrue(err); // duplicate id error is not same as change id error\n\n      test.isFalse(MongoInternals.Connection._isCannotChangeIdError(err));\n    });\n  } // end Meteor.isServer\n  // This test is duplicated below (with some changes) for async upserts that go\n  // over the network.\n\n\n  _.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n    _.each([true, false], function (useUpdate) {\n      _.each([true, false], function (useDirectCollection) {\n        Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert\" + (minimongo ? \" minimongo\" : \"\") + (useDirectCollection ? \" direct collection \" : \"\") + \", \" + idGeneration, function (test) {\n          var run = test.runId();\n          var options = collectionOptions; // We don't get ids back when we use update() to upsert, or when we are\n          // directly calling MongoConnection.upsert().\n\n          var skipIds = useUpdate || !minimongo && useDirectCollection;\n          if (minimongo) options = _.extend({}, collectionOptions, {\n            connection: null\n          });\n          var coll = new Mongo.Collection(\"livedata_upsert_collection_\" + run + (useUpdate ? \"_update_\" : \"\") + (minimongo ? \"_minimongo_\" : \"\") + (useDirectCollection ? \"_direct_\" : \"\") + \"\", options);\n          if (useDirectCollection) coll = coll._collection;\n          var result1 = upsert(coll, useUpdate, {\n            foo: 'bar'\n          }, {\n            foo: 'bar'\n          });\n          test.equal(result1.numberAffected, 1);\n          if (!skipIds) test.isTrue(result1.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            foo: 'bar',\n            _id: result1.insertedId\n          }]);\n          var result2 = upsert(coll, useUpdate, {\n            foo: 'bar'\n          }, {\n            foo: 'baz'\n          });\n          test.equal(result2.numberAffected, 1);\n          if (!skipIds) test.isFalse(result2.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            foo: 'baz',\n            _id: result1.insertedId\n          }]);\n          coll.remove({}); // Test values that require transformation to go into Mongo:\n\n          var t1 = new Mongo.ObjectID();\n          var t2 = new Mongo.ObjectID();\n          var result3 = upsert(coll, useUpdate, {\n            foo: t1\n          }, {\n            foo: t1\n          });\n          test.equal(result3.numberAffected, 1);\n          if (!skipIds) test.isTrue(result3.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            foo: t1,\n            _id: result3.insertedId\n          }]);\n          var result4 = upsert(coll, useUpdate, {\n            foo: t1\n          }, {\n            foo: t2\n          });\n          test.equal(result2.numberAffected, 1);\n          if (!skipIds) test.isFalse(result2.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            foo: t2,\n            _id: result3.insertedId\n          }]);\n          coll.remove({}); // Test modification by upsert\n\n          var result5 = upsert(coll, useUpdate, {\n            name: 'David'\n          }, {\n            $set: {\n              foo: 1\n            }\n          });\n          test.equal(result5.numberAffected, 1);\n          if (!skipIds) test.isTrue(result5.insertedId);\n          var davidId = result5.insertedId;\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            name: 'David',\n            foo: 1,\n            _id: davidId\n          }]);\n          test.throws(function () {\n            // test that bad modifier fails fast\n            upsert(coll, useUpdate, {\n              name: 'David'\n            }, {\n              $blah: {\n                foo: 2\n              }\n            });\n          });\n          var result6 = upsert(coll, useUpdate, {\n            name: 'David'\n          }, {\n            $set: {\n              foo: 2\n            }\n          });\n          test.equal(result6.numberAffected, 1);\n          if (!skipIds) test.isFalse(result6.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            name: 'David',\n            foo: 2,\n            _id: result5.insertedId\n          }]);\n          var emilyId = coll.insert({\n            name: 'Emily',\n            foo: 2\n          });\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            name: 'David',\n            foo: 2,\n            _id: davidId\n          }, {\n            name: 'Emily',\n            foo: 2,\n            _id: emilyId\n          }]); // multi update by upsert\n\n          var result7 = upsert(coll, useUpdate, {\n            foo: 2\n          }, {\n            $set: {\n              bar: 7\n            },\n            $setOnInsert: {\n              name: 'Fred',\n              foo: 2\n            }\n          }, {\n            multi: true\n          });\n          test.equal(result7.numberAffected, 2);\n          if (!skipIds) test.isFalse(result7.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            name: 'David',\n            foo: 2,\n            bar: 7,\n            _id: davidId\n          }, {\n            name: 'Emily',\n            foo: 2,\n            bar: 7,\n            _id: emilyId\n          }]); // insert by multi upsert\n\n          var result8 = upsert(coll, useUpdate, {\n            foo: 3\n          }, {\n            $set: {\n              bar: 7\n            },\n            $setOnInsert: {\n              name: 'Fred',\n              foo: 2\n            }\n          }, {\n            multi: true\n          });\n          test.equal(result8.numberAffected, 1);\n          if (!skipIds) test.isTrue(result8.insertedId);\n          var fredId = result8.insertedId;\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            name: 'David',\n            foo: 2,\n            bar: 7,\n            _id: davidId\n          }, {\n            name: 'Emily',\n            foo: 2,\n            bar: 7,\n            _id: emilyId\n          }, {\n            name: 'Fred',\n            foo: 2,\n            bar: 7,\n            _id: fredId\n          }]); // test `insertedId` option\n\n          var result9 = upsert(coll, useUpdate, {\n            name: 'Steve'\n          }, {\n            name: 'Steve'\n          }, {\n            insertedId: 'steve'\n          });\n          test.equal(result9.numberAffected, 1);\n          if (!skipIds) test.equal(result9.insertedId, 'steve');\n          compareResults(test, skipIds, coll.find().fetch(), [{\n            name: 'David',\n            foo: 2,\n            bar: 7,\n            _id: davidId\n          }, {\n            name: 'Emily',\n            foo: 2,\n            bar: 7,\n            _id: emilyId\n          }, {\n            name: 'Fred',\n            foo: 2,\n            bar: 7,\n            _id: fredId\n          }, {\n            name: 'Steve',\n            _id: 'steve'\n          }]);\n          test.isTrue(coll.findOne('steve'));\n          test.isFalse(coll.findOne('fred')); // Test $ operator in selectors.\n\n          var result10 = upsert(coll, useUpdate, {\n            $or: [{\n              name: 'David'\n            }, {\n              name: 'Emily'\n            }]\n          }, {\n            $set: {\n              foo: 3\n            }\n          }, {\n            multi: true\n          });\n          test.equal(result10.numberAffected, 2);\n          if (!skipIds) test.isFalse(result10.insertedId);\n          compareResults(test, skipIds, [coll.findOne({\n            name: 'David'\n          }), coll.findOne({\n            name: 'Emily'\n          })], [{\n            name: 'David',\n            foo: 3,\n            bar: 7,\n            _id: davidId\n          }, {\n            name: 'Emily',\n            foo: 3,\n            bar: 7,\n            _id: emilyId\n          }]);\n          var result11 = upsert(coll, useUpdate, {\n            name: 'Charlie',\n            $or: [{\n              foo: 2\n            }, {\n              bar: 7\n            }]\n          }, {\n            $set: {\n              foo: 3\n            }\n          });\n          test.equal(result11.numberAffected, 1);\n          if (!skipIds) test.isTrue(result11.insertedId);\n          var charlieId = result11.insertedId;\n          compareResults(test, skipIds, coll.find({\n            name: 'Charlie'\n          }).fetch(), [{\n            name: 'Charlie',\n            foo: 3,\n            _id: charlieId\n          }]);\n        });\n      });\n    });\n  });\n\n  var asyncUpsertTestName = function (useNetwork, useDirectCollection, useUpdate, idGeneration) {\n    return \"mongo-livedata - async \" + (useUpdate ? \"update \" : \"\") + \"upsert \" + (useNetwork ? \"over network \" : \"\") + (useDirectCollection ? \", direct collection \" : \"\") + idGeneration;\n  }; // This is a duplicate of the test above, with some changes to make it work for\n  // callback style. On the client, we test server-backed and in-memory\n  // collections, and run the tests for both the Mongo.Collection and the\n  // LocalCollection. On the server, we test mongo-backed collections, for both\n  // the Mongo.Collection and the MongoConnection.\n  //\n  // XXX Rewrite with testAsyncMulti, that would simplify things a lot!\n\n\n  _.each(Meteor.isServer ? [false] : [true, false], function (useNetwork) {\n    _.each(useNetwork ? [false] : [true, false], function (useDirectCollection) {\n      _.each([true, false], function (useUpdate) {\n        Tinytest.addAsync(asyncUpsertTestName(useNetwork, useDirectCollection, useUpdate, idGeneration), function (test, onComplete) {\n          var coll;\n          var run = test.runId();\n          var collName = \"livedata_upsert_collection_\" + run + (useUpdate ? \"_update_\" : \"\") + (useNetwork ? \"_network_\" : \"\") + (useDirectCollection ? \"_direct_\" : \"\");\n\n          var next0 = function () {\n            // Test starts here.\n            upsert(coll, useUpdate, {\n              _id: 'foo'\n            }, {\n              _id: 'foo',\n              foo: 'bar'\n            }, next1);\n          };\n\n          if (useNetwork) {\n            Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n            coll = new Mongo.Collection(collName, collectionOptions);\n            Meteor.subscribe(\"c-\" + collName, next0);\n          } else {\n            var opts = _.clone(collectionOptions);\n\n            if (Meteor.isClient) opts.connection = null;\n            coll = new Mongo.Collection(collName, opts);\n            if (useDirectCollection) coll = coll._collection;\n          }\n\n          var result1;\n\n          var next1 = function (err, result) {\n            result1 = result;\n            test.equal(result1.numberAffected, 1);\n\n            if (!useUpdate) {\n              test.isTrue(result1.insertedId);\n              test.equal(result1.insertedId, 'foo');\n            }\n\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              foo: 'bar',\n              _id: 'foo'\n            }]);\n            upsert(coll, useUpdate, {\n              _id: 'foo'\n            }, {\n              foo: 'baz'\n            }, next2);\n          };\n\n          if (!useNetwork) {\n            next0();\n          }\n\n          var t1, t2, result2;\n\n          var next2 = function (err, result) {\n            result2 = result;\n            test.equal(result2.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result2.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              foo: 'baz',\n              _id: result1.insertedId\n            }]);\n            coll.remove({\n              _id: 'foo'\n            });\n            compareResults(test, useUpdate, coll.find().fetch(), []); // Test values that require transformation to go into Mongo:\n\n            t1 = new Mongo.ObjectID();\n            t2 = new Mongo.ObjectID();\n            upsert(coll, useUpdate, {\n              _id: t1\n            }, {\n              _id: t1,\n              foo: 'bar'\n            }, next3);\n          };\n\n          var result3;\n\n          var next3 = function (err, result) {\n            result3 = result;\n            test.equal(result3.numberAffected, 1);\n\n            if (!useUpdate) {\n              test.isTrue(result3.insertedId);\n              test.equal(t1, result3.insertedId);\n            }\n\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              _id: t1,\n              foo: 'bar'\n            }]);\n            upsert(coll, useUpdate, {\n              _id: t1\n            }, {\n              foo: t2\n            }, next4);\n          };\n\n          var next4 = function (err, result4) {\n            test.equal(result2.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result2.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              foo: t2,\n              _id: result3.insertedId\n            }]);\n            coll.remove({\n              _id: t1\n            }); // Test modification by upsert\n\n            upsert(coll, useUpdate, {\n              _id: 'David'\n            }, {\n              $set: {\n                foo: 1\n              }\n            }, next5);\n          };\n\n          var result5;\n\n          var next5 = function (err, result) {\n            result5 = result;\n            test.equal(result5.numberAffected, 1);\n\n            if (!useUpdate) {\n              test.isTrue(result5.insertedId);\n              test.equal(result5.insertedId, 'David');\n            }\n\n            var davidId = result5.insertedId;\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              foo: 1,\n              _id: davidId\n            }]);\n\n            if (!Meteor.isClient && useDirectCollection) {\n              // test that bad modifier fails\n              // The stub throws an exception about the invalid modifier, which\n              // livedata logs (so we suppress it).\n              Meteor._suppress_log(1);\n\n              upsert(coll, useUpdate, {\n                _id: 'David'\n              }, {\n                $blah: {\n                  foo: 2\n                }\n              }, function (err) {\n                if (!(Meteor.isClient && useDirectCollection)) test.isTrue(err);\n                upsert(coll, useUpdate, {\n                  _id: 'David'\n                }, {\n                  $set: {\n                    foo: 2\n                  }\n                }, next6);\n              });\n            } else {\n              // XXX skip this test for now for LocalCollection; the fact that\n              // we're in a nested sequence of callbacks means we're inside a\n              // Meteor.defer, which means the exception just gets\n              // logged. Something should be done about this at some point?  Maybe\n              // LocalCollection callbacks don't really have to be deferred.\n              upsert(coll, useUpdate, {\n                _id: 'David'\n              }, {\n                $set: {\n                  foo: 2\n                }\n              }, next6);\n            }\n          };\n\n          var result6;\n\n          var next6 = function (err, result) {\n            result6 = result;\n            test.equal(result6.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result6.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              _id: 'David',\n              foo: 2\n            }]);\n            var emilyId = coll.insert({\n              _id: 'Emily',\n              foo: 2\n            });\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              _id: 'David',\n              foo: 2\n            }, {\n              _id: 'Emily',\n              foo: 2\n            }]); // multi update by upsert.\n            // We can't actually update multiple documents since we have to do it by\n            // id, but at least make sure the multi flag doesn't mess anything up.\n\n            upsert(coll, useUpdate, {\n              _id: 'Emily'\n            }, {\n              $set: {\n                bar: 7\n              },\n              $setOnInsert: {\n                name: 'Fred',\n                foo: 2\n              }\n            }, {\n              multi: true\n            }, next7);\n          };\n\n          var result7;\n\n          var next7 = function (err, result) {\n            result7 = result;\n            test.equal(result7.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result7.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              _id: 'David',\n              foo: 2\n            }, {\n              _id: 'Emily',\n              foo: 2,\n              bar: 7\n            }]); // insert by multi upsert\n\n            upsert(coll, useUpdate, {\n              _id: 'Fred'\n            }, {\n              $set: {\n                bar: 7\n              },\n              $setOnInsert: {\n                name: 'Fred',\n                foo: 2\n              }\n            }, {\n              multi: true\n            }, next8);\n          };\n\n          var result8;\n\n          var next8 = function (err, result) {\n            result8 = result;\n            test.equal(result8.numberAffected, 1);\n\n            if (!useUpdate) {\n              test.isTrue(result8.insertedId);\n              test.equal(result8.insertedId, 'Fred');\n            }\n\n            var fredId = result8.insertedId;\n            compareResults(test, useUpdate, coll.find().fetch(), [{\n              _id: 'David',\n              foo: 2\n            }, {\n              _id: 'Emily',\n              foo: 2,\n              bar: 7\n            }, {\n              name: 'Fred',\n              foo: 2,\n              bar: 7,\n              _id: fredId\n            }]);\n            onComplete();\n          };\n        });\n      });\n    });\n  });\n\n  if (Meteor.isClient) {\n    Tinytest.addAsync(\"mongo-livedata - async update/remove return values over network \" + idGeneration, function (test, onComplete) {\n      var coll;\n      var run = test.runId();\n      var collName = \"livedata_upsert_collection_\" + run;\n      Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n      coll = new Mongo.Collection(collName, collectionOptions);\n      Meteor.subscribe(\"c-\" + collName, function () {\n        coll.insert({\n          _id: \"foo\"\n        });\n        coll.insert({\n          _id: \"bar\"\n        });\n        coll.update({\n          _id: \"foo\"\n        }, {\n          $set: {\n            foo: 1\n          }\n        }, {\n          multi: true\n        }, function (err, result) {\n          test.isFalse(err);\n          test.equal(result, 1);\n          coll.update({\n            _id: \"foo\"\n          }, {\n            _id: \"foo\",\n            foo: 2\n          }, function (err, result) {\n            test.isFalse(err);\n            test.equal(result, 1);\n            coll.update({\n              _id: \"baz\"\n            }, {\n              $set: {\n                foo: 1\n              }\n            }, function (err, result) {\n              test.isFalse(err);\n              test.equal(result, 0);\n              coll.remove({\n                _id: \"foo\"\n              }, function (err, result) {\n                test.equal(result, 1);\n                coll.remove({\n                  _id: \"baz\"\n                }, function (err, result) {\n                  test.equal(result, 0);\n                  onComplete();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  } // Runs a method and its stub which do some upserts. The method throws an error\n  // if we don't get the right return values.\n\n\n  if (Meteor.isClient) {\n    _.each([true, false], function (useUpdate) {\n      Tinytest.addAsync(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert in method, \" + idGeneration, function (test, onComplete) {\n        var run = test.runId();\n        upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, collectionOptions);\n        var m = {};\n        delete Meteor.connection._methodHandlers[upsertTestMethod];\n\n        m[upsertTestMethod] = function (run, useUpdate, options) {\n          upsertTestMethodImpl(upsertTestMethodColl, useUpdate, test);\n        };\n\n        Meteor.methods(m);\n        Meteor.call(upsertTestMethod, run, useUpdate, collectionOptions, function (err, result) {\n          test.isFalse(err);\n          onComplete();\n        });\n      });\n    });\n  }\n\n  _.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n    _.each([true, false], function (useUpdate) {\n      Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert by id\" + (minimongo ? \" minimongo\" : \"\") + \", \" + idGeneration, function (test) {\n        var run = test.runId();\n        var options = collectionOptions;\n        if (minimongo) options = _.extend({}, collectionOptions, {\n          connection: null\n        });\n        var coll = new Mongo.Collection(\"livedata_upsert_by_id_collection_\" + run, options);\n        var ret;\n        ret = upsert(coll, useUpdate, {\n          _id: 'foo'\n        }, {\n          $set: {\n            x: 1\n          }\n        });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.equal(ret.insertedId, 'foo');\n        compareResults(test, useUpdate, coll.find().fetch(), [{\n          _id: 'foo',\n          x: 1\n        }]);\n        ret = upsert(coll, useUpdate, {\n          _id: 'foo'\n        }, {\n          $set: {\n            x: 2\n          }\n        });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.isFalse(ret.insertedId);\n        compareResults(test, useUpdate, coll.find().fetch(), [{\n          _id: 'foo',\n          x: 2\n        }]);\n        ret = upsert(coll, useUpdate, {\n          _id: 'bar'\n        }, {\n          $set: {\n            x: 1\n          }\n        });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.equal(ret.insertedId, 'bar');\n        compareResults(test, useUpdate, coll.find().fetch(), [{\n          _id: 'foo',\n          x: 2\n        }, {\n          _id: 'bar',\n          x: 1\n        }]);\n        coll.remove({});\n        ret = upsert(coll, useUpdate, {\n          _id: 'traq'\n        }, {\n          x: 1\n        });\n        test.equal(ret.numberAffected, 1);\n        var myId = ret.insertedId;\n\n        if (useUpdate) {\n          myId = coll.findOne()._id;\n        } // Starting with Mongo 2.6, upsert with entire document takes _id from the\n        // query, so the above upsert actually does an insert with _id traq\n        // instead of a random _id.  Whenever we are using our simulated upsert,\n        // we have this behavior (whether running against Mongo 2.4 or 2.6).\n        // https://jira.mongodb.org/browse/SERVER-5289\n\n\n        test.equal(myId, 'traq');\n        compareResults(test, useUpdate, coll.find().fetch(), [{\n          x: 1,\n          _id: 'traq'\n        }]); // this time, insert as _id 'traz'\n\n        ret = upsert(coll, useUpdate, {\n          _id: 'traz'\n        }, {\n          _id: 'traz',\n          x: 2\n        });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.equal(ret.insertedId, 'traz');\n        compareResults(test, useUpdate, coll.find().fetch(), [{\n          x: 1,\n          _id: 'traq'\n        }, {\n          x: 2,\n          _id: 'traz'\n        }]); // now update _id 'traz'\n\n        ret = upsert(coll, useUpdate, {\n          _id: 'traz'\n        }, {\n          x: 3\n        });\n        test.equal(ret.numberAffected, 1);\n        test.isFalse(ret.insertedId);\n        compareResults(test, useUpdate, coll.find().fetch(), [{\n          x: 1,\n          _id: 'traq'\n        }, {\n          x: 3,\n          _id: 'traz'\n        }]); // now update, passing _id (which is ok as long as it's the same)\n\n        ret = upsert(coll, useUpdate, {\n          _id: 'traz'\n        }, {\n          _id: 'traz',\n          x: 4\n        });\n        test.equal(ret.numberAffected, 1);\n        test.isFalse(ret.insertedId);\n        compareResults(test, useUpdate, coll.find().fetch(), [{\n          x: 1,\n          _id: 'traq'\n        }, {\n          x: 4,\n          _id: 'traz'\n        }]);\n      });\n    });\n  });\n}); // end idGeneration parametrization\n\n\nTinytest.add('mongo-livedata - rewrite selector', function (test) {\n  test.equal(Mongo.Collection._rewriteSelector('foo'), {\n    _id: 'foo'\n  });\n  var oid = new Mongo.ObjectID();\n  test.equal(Mongo.Collection._rewriteSelector(oid), {\n    _id: oid\n  });\n  test.matches(Mongo.Collection._rewriteSelector({\n    _id: null\n  })._id, /^\\S+$/, 'Passing in a falsey selector _id should return a selector with a new ' + 'auto-generated _id string');\n  test.equal(Mongo.Collection._rewriteSelector({\n    _id: null\n  }, {\n    fallbackId: oid\n  }), {\n    _id: oid\n  }, 'Passing in a falsey selector _id and a fallback ID should return a ' + 'selector with an _id using the fallback ID');\n});\ntestAsyncMulti('mongo-livedata - specified _id', [function (test, expect) {\n  this.collectionName = Random.id();\n\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', this.collectionName);\n    Meteor.subscribe('c-' + this.collectionName, expect());\n  }\n}, function (test, expect) {\n  var expectError = expect(function (err, result) {\n    test.isTrue(err);\n    var doc = coll.findOne();\n    test.equal(doc.name, \"foo\");\n  });\n  var coll = new Mongo.Collection(this.collectionName);\n  coll.insert({\n    _id: \"foo\",\n    name: \"foo\"\n  }, expect(function (err1, id) {\n    test.equal(id, \"foo\");\n    var doc = coll.findOne();\n    test.equal(doc._id, \"foo\");\n\n    Meteor._suppress_log(1);\n\n    coll.insert({\n      _id: \"foo\",\n      name: \"bar\"\n    }, expectError);\n  }));\n}]); // Consistent id generation tests\n\nfunction collectionInsert(test, expect, coll, index) {\n  var clientSideId = coll.insert({\n    name: \"foo\"\n  }, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction collectionUpsert(test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  coll.upsert(upsertId, {\n    $set: {\n      name: \"foo\"\n    }\n  }, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction collectionUpsertExisting(test, expect, coll, index) {\n  var clientSideId = coll.insert({\n    name: \"foo\"\n  }, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o)); // We're not testing sequencing/visibility rules here, so skip this check\n    // test.equal(o.name, 'foo');\n  }));\n  coll.upsert(clientSideId, {\n    $set: {\n      name: \"bar\"\n    }\n  }, expect(function (err1, result) {\n    test.equal(result.insertedId, clientSideId);\n    test.equal(result.numberAffected, 1);\n    var o = coll.findOne(clientSideId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n}\n\nfunction functionCallsInsert(test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, {\n    name: \"foo\"\n  }, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionCallsUpsert(test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"upsertObject\", coll._name, upsertId, {\n    $set: {\n      name: \"foo\"\n    }\n  }, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionCallsUpsertExisting(test, expect, coll, index) {\n  var id = coll.insert({\n    name: \"foo\"\n  });\n  var o = coll.findOne(id);\n  test.notEqual(null, o);\n  test.equal(o.name, 'foo');\n  Meteor.call(\"upsertObject\", coll._name, id, {\n    $set: {\n      name: \"bar\"\n    }\n  }, expect(function (err1, result) {\n    test.equal(result.numberAffected, 1);\n    test.equal(result.insertedId, undefined);\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n}\n\nfunction functionCalls3Inserts(test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, {\n    name: \"foo\"\n  }, 3, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    test.equal(ids.length, 3);\n\n    for (var i = 0; i < 3; i++) {\n      var stubId = INSERTED_IDS[coll._name][3 * index + i];\n      test.equal(ids[i], stubId);\n      var o = coll.findOne(stubId);\n      test.isTrue(_.isObject(o));\n      test.equal(o.name, 'foo');\n    }\n  }));\n}\n\nfunction functionChainInsert(test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"insertObjects\", coll._name, {\n    name: \"foo\"\n  }, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionChain2Insert(test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"insertObjects\", coll._name, {\n    name: \"foo\"\n  }, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionChain2Upsert(test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"upsertObject\", coll._name, upsertId, {\n    $set: {\n      name: \"foo\"\n    }\n  }, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\n_.each({\n  collectionInsert: collectionInsert,\n  collectionUpsert: collectionUpsert,\n  functionCallsInsert: functionCallsInsert,\n  functionCallsUpsert: functionCallsUpsert,\n  functionCallsUpsertExisting: functionCallsUpsertExisting,\n  functionCalls3Insert: functionCalls3Inserts,\n  functionChainInsert: functionChainInsert,\n  functionChain2Insert: functionChain2Insert,\n  functionChain2Upsert: functionChain2Upsert\n}, function (fn, name) {\n  _.each([1, 3], function (repetitions) {\n    _.each([1, 3], function (collectionCount) {\n      _.each(['STRING', 'MONGO'], function (idGeneration) {\n        testAsyncMulti('mongo-livedata - consistent _id generation ' + name + ', ' + repetitions + ' repetitions on ' + collectionCount + ' collections, idGeneration=' + idGeneration, [function (test, expect) {\n          var collectionOptions = {\n            idGeneration: idGeneration\n          };\n          var cleanups = this.cleanups = [];\n          this.collections = _.times(collectionCount, function () {\n            var collectionName = \"consistentid_\" + Random.id();\n\n            if (Meteor.isClient) {\n              Meteor.call('createInsecureCollection', collectionName, collectionOptions);\n              Meteor.subscribe('c-' + collectionName, expect());\n              cleanups.push(function (expect) {\n                Meteor.call('dropInsecureCollection', collectionName, expect(function () {}));\n              });\n            }\n\n            var collection = new Mongo.Collection(collectionName, collectionOptions);\n\n            if (Meteor.isServer) {\n              cleanups.push(function () {\n                collection._dropCollection();\n              });\n            }\n\n            COLLECTIONS[collectionName] = collection;\n            return collection;\n          });\n        }, function (test, expect) {\n          // now run the actual test\n          for (var i = 0; i < repetitions; i++) {\n            for (var j = 0; j < collectionCount; j++) {\n              fn(test, expect, this.collections[j], i);\n            }\n          }\n        }, function (test, expect) {\n          // Run any registered cleanup functions (e.g. to drop collections)\n          _.each(this.cleanups, function (cleanup) {\n            cleanup(expect);\n          });\n        }]);\n      });\n    });\n  });\n});\n\ntestAsyncMulti('mongo-livedata - empty string _id', [function (test, expect) {\n  var self = this;\n  self.collectionName = Random.id();\n\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', self.collectionName);\n    Meteor.subscribe('c-' + self.collectionName, expect());\n  }\n\n  self.coll = new Mongo.Collection(self.collectionName);\n\n  try {\n    self.coll.insert({\n      _id: \"\",\n      f: \"foo\"\n    });\n    test.fail(\"Insert with an empty _id should fail\");\n  } catch (e) {// ok\n  }\n\n  self.coll.insert({\n    _id: \"realid\",\n    f: \"bar\"\n  }, expect(function (err, res) {\n    test.equal(res, \"realid\");\n  }));\n}, function (test, expect) {\n  var self = this;\n  var docs = self.coll.find().fetch();\n  test.equal(docs, [{\n    _id: \"realid\",\n    f: \"bar\"\n  }]);\n}, function (test, expect) {\n  var self = this;\n\n  if (Meteor.isServer) {\n    self.coll._collection.insert({\n      _id: \"\",\n      f: \"baz\"\n    });\n\n    test.equal(self.coll.find().fetch().length, 2);\n  }\n}]);\n\nif (Meteor.isServer) {\n  testAsyncMulti(\"mongo-livedata - minimongo on server to server connection\", [function (test, expect) {\n    var self = this;\n\n    Meteor._debug(\"connection setup\");\n\n    self.id = Random.id();\n    var C = self.C = new Mongo.Collection(\"ServerMinimongo_\" + self.id);\n    C.allow({\n      insert: function () {\n        return true;\n      },\n      update: function () {\n        return true;\n      },\n      remove: function () {\n        return true;\n      }\n    });\n    C.insert({\n      a: 0,\n      b: 1\n    });\n    C.insert({\n      a: 0,\n      b: 2\n    });\n    C.insert({\n      a: 1,\n      b: 3\n    });\n    Meteor.publish(self.id, function () {\n      return C.find({\n        a: 0\n      });\n    });\n    self.conn = DDP.connect(Meteor.absoluteUrl());\n    pollUntil(expect, function () {\n      return self.conn.status().connected;\n    }, 10000);\n  }, function (test, expect) {\n    var self = this;\n\n    if (self.conn.status().connected) {\n      self.miniC = new Mongo.Collection(\"ServerMinimongo_\" + self.id, {\n        connection: self.conn\n      });\n      var exp = expect(function (err) {\n        test.isFalse(err);\n      });\n      self.conn.subscribe(self.id, {\n        onError: exp,\n        onReady: exp\n      });\n    }\n  }, function (test, expect) {\n    var self = this;\n\n    if (self.miniC) {\n      var contents = self.miniC.find().fetch();\n      test.equal(contents.length, 2);\n      test.equal(contents[0].a, 0);\n    }\n  }, function (test, expect) {\n    var self = this;\n    if (!self.miniC) return;\n    self.miniC.insert({\n      a: 0,\n      b: 3\n    });\n    var contents = self.miniC.find({\n      b: 3\n    }).fetch();\n    test.equal(contents.length, 1);\n    test.equal(contents[0].a, 0);\n  }]);\n  testAsyncMulti(\"mongo-livedata - minimongo observe on server\", [function (test, expect) {\n    var self = this;\n    self.id = Random.id();\n    self.C = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id);\n    self.events = [];\n    Meteor.publish(self.id, function () {\n      return self.C.find();\n    });\n    self.conn = DDP.connect(Meteor.absoluteUrl());\n    pollUntil(expect, function () {\n      return self.conn.status().connected;\n    }, 10000);\n  }, function (test, expect) {\n    var self = this;\n\n    if (self.conn.status().connected) {\n      self.miniC = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id, {\n        connection: self.conn\n      });\n      var exp = expect(function (err) {\n        test.isFalse(err);\n      });\n      self.conn.subscribe(self.id, {\n        onError: exp,\n        onReady: exp\n      });\n    }\n  }, function (test, expect) {\n    var self = this;\n\n    if (self.miniC) {\n      self.obs = self.miniC.find().observeChanges({\n        added: function (id, fields) {\n          self.events.push({\n            evt: \"a\",\n            id: id\n          });\n\n          Meteor._sleepForMs(200);\n\n          self.events.push({\n            evt: \"b\",\n            id: id\n          });\n\n          if (!self.two) {\n            self.two = self.C.insert({});\n          }\n        }\n      });\n      self.one = self.C.insert({});\n      pollUntil(expect, function () {\n        return self.events.length === 4;\n      }, 10000);\n    }\n  }, function (test, expect) {\n    var self = this;\n\n    if (self.miniC) {\n      test.equal(self.events, [{\n        evt: \"a\",\n        id: self.one\n      }, {\n        evt: \"b\",\n        id: self.one\n      }, {\n        evt: \"a\",\n        id: self.two\n      }, {\n        evt: \"b\",\n        id: self.two\n      }]);\n    }\n\n    self.obs && self.obs.stop();\n  }]);\n}\n\nTinytest.addAsync(\"mongo-livedata - local collections with different connections\", function (test, onComplete) {\n  var cname = Random.id();\n  var cname2 = Random.id();\n  var coll1 = new Mongo.Collection(cname);\n  var doc = {\n    foo: \"bar\"\n  };\n  var coll2 = new Mongo.Collection(cname2, {\n    connection: null\n  });\n  coll2.insert(doc, function (err, id) {\n    test.equal(coll1.find(doc).count(), 0);\n    test.equal(coll2.find(doc).count(), 1);\n    onComplete();\n  });\n});\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/ callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, {\n    connection: null\n  });\n  var doc = {\n    foo: \"bar\"\n  };\n  var docId = coll1.insert(doc, function (err, id) {\n    test.equal(docId, id);\n    test.equal(coll1.findOne(doc)._id, id);\n    onComplete();\n  });\n});\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/o callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, {\n    connection: null\n  });\n  var doc = {\n    foo: \"bar\"\n  };\n  var docId = coll1.insert(doc);\n  test.equal(coll1.findOne(doc)._id, docId);\n  onComplete();\n});\ntestAsyncMulti(\"mongo-livedata - update handles $push with $each correctly\", [function (test, expect) {\n  var self = this;\n  var collectionName = Random.id();\n\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', collectionName);\n    Meteor.subscribe('c-' + collectionName, expect());\n  }\n\n  self.collection = new Mongo.Collection(collectionName);\n  self.id = self.collection.insert({\n    name: 'jens',\n    elements: ['X', 'Y']\n  }, expect(function (err, res) {\n    test.isFalse(err);\n    test.equal(self.id, res);\n  }));\n}, function (test, expect) {\n  var self = this;\n  self.collection.update(self.id, {\n    $push: {\n      elements: {\n        $each: ['A', 'B', 'C'],\n        $slice: -4\n      }\n    }\n  }, expect(function (err, res) {\n    test.isFalse(err);\n    test.equal(self.collection.findOne(self.id), {\n      _id: self.id,\n      name: 'jens',\n      elements: ['Y', 'A', 'B', 'C']\n    });\n  }));\n}]);\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - upsert handles $push with $each correctly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n    var result = collection.upsert({\n      name: 'jens'\n    }, {\n      $push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }\n      }\n    });\n    test.equal(collection.findOne(result.insertedId), {\n      _id: result.insertedId,\n      name: 'jens',\n      elements: ['A', 'B', 'C']\n    });\n    var id = collection.insert({\n      name: \"david\",\n      elements: ['X', 'Y']\n    });\n    result = collection.upsert({\n      name: 'david'\n    }, {\n      $push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }\n      }\n    });\n    test.equal(collection.findOne(id), {\n      _id: id,\n      name: 'david',\n      elements: ['Y', 'A', 'B', 'C']\n    });\n  });\n  Tinytest.add(\"mongo-livedata - upsert handles dotted selectors corrrectly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n    var result1 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: {\n        message: \"upsert 1\"\n      }\n    });\n    test.equal(collection.findOne(result1.insertedId), {\n      _id: result1.insertedId,\n      subdocument: {\n        a: 1\n      },\n      message: \"upsert 1\"\n    });\n    var result2 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: {\n        message: \"upsert 2\"\n      }\n    });\n    test.equal(result2, {\n      numberAffected: 1\n    });\n    test.equal(collection.findOne(result1.insertedId), {\n      _id: result1.insertedId,\n      subdocument: {\n        a: 1\n      },\n      message: \"upsert 2\"\n    });\n    var result3 = collection.upsert({\n      \"subdocument.a.b\": 1,\n      \"subdocument.c\": 2\n    }, {\n      $set: {\n        message: \"upsert3\"\n      }\n    });\n    test.equal(collection.findOne(result3.insertedId), {\n      _id: result3.insertedId,\n      subdocument: {\n        a: {\n          b: 1\n        },\n        c: 2\n      },\n      message: \"upsert3\"\n    });\n    var result4 = collection.upsert({\n      \"subdocument.a\": 4\n    }, {\n      $set: {\n        \"subdocument.a\": \"upsert 4\"\n      }\n    });\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: {\n        a: \"upsert 4\"\n      }\n    });\n    var result5 = collection.upsert({\n      \"subdocument.a\": \"upsert 4\"\n    }, {\n      $set: {\n        \"subdocument.a\": \"upsert 5\"\n      }\n    });\n    test.equal(result5, {\n      numberAffected: 1\n    });\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: {\n        a: \"upsert 5\"\n      }\n    });\n    var result6 = collection.upsert({\n      \"subdocument.a\": \"upsert 5\"\n    }, {\n      $set: {\n        \"subdocument\": \"upsert 6\"\n      }\n    });\n    test.equal(result6, {\n      numberAffected: 1\n    });\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: \"upsert 6\"\n    });\n    var result7 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert7\"\n      }\n    });\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {\n          b: 7,\n          c: \"upsert7\"\n        }\n      }\n    });\n    var result8 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert8\"\n      }\n    });\n    test.equal(result8, {\n      numberAffected: 1\n    });\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {\n          b: 7,\n          c: \"upsert8\"\n        }\n      }\n    });\n    var result9 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.b\": \"upsert9\"\n      }\n    });\n    test.equal(result9, {\n      numberAffected: 1\n    });\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {\n          b: \"upsert9\",\n          c: \"upsert8\"\n        }\n      }\n    });\n  });\n} // This is a VERY white-box test.\n\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - _disableOplog\", function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection(collName);\n\n  if (MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle) {\n    var observeWithOplog = coll.find({\n      x: 5\n    }).observeChanges({\n      added: function () {}\n    });\n    test.isTrue(observeWithOplog._multiplexer._observeDriver._usesOplog);\n    observeWithOplog.stop();\n  }\n\n  var observeWithoutOplog = coll.find({\n    x: 6\n  }, {\n    _disableOplog: true\n  }).observeChanges({\n    added: function () {}\n  });\n  test.isFalse(observeWithoutOplog._multiplexer._observeDriver._usesOplog);\n  observeWithoutOplog.stop();\n});\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - include selector fields\", function (test) {\n  var collName = \"includeSelector\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n  var docId = coll.insert({\n    a: 1,\n    b: [3, 2],\n    c: 'foo'\n  });\n  test.isTrue(docId); // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n\n  waitUntilOplogCaughtUp();\n  var output = [];\n  var handle = coll.find({\n    a: 1,\n    b: 2\n  }, {\n    fields: {\n      c: 1\n    }\n  }).observeChanges({\n    added: function (id, fields) {\n      output.push(['added', id, fields]);\n    },\n    changed: function (id, fields) {\n      output.push(['changed', id, fields]);\n    },\n    removed: function (id) {\n      output.push(['removed', id]);\n    }\n  }); // Initially should match the document.\n\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', docId, {\n    c: 'foo'\n  }]); // Update in such a way that, if we only knew about the published field 'c'\n  // and the changed field 'b' (but not the field 'a'), we would think it didn't\n  // match any more.  (This is a regression test for a bug that existed because\n  // we used to not use the shared projection in the initial query.)\n\n  runInFence(function () {\n    coll.update(docId, {\n      $set: {\n        'b.0': 2,\n        c: 'bar'\n      }\n    });\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), ['changed', docId, {\n    c: 'bar'\n  }]);\n  handle.stop();\n});\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - transform\", function (test) {\n  var collName = \"oplogTransform\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n  var docId = coll.insert({\n    a: 25,\n    x: {\n      x: 5,\n      y: 9\n    }\n  });\n  test.isTrue(docId); // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n\n  waitUntilOplogCaughtUp();\n  var cursor = coll.find({}, {\n    transform: function (doc) {\n      return doc.x;\n    }\n  });\n  var changesOutput = [];\n  var changesHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      changesOutput.push(['added', fields]);\n    }\n  }); // We should get untransformed fields via observeChanges.\n\n  test.length(changesOutput, 1);\n  test.equal(changesOutput.shift(), ['added', {\n    a: 25,\n    x: {\n      x: 5,\n      y: 9\n    }\n  }]);\n  changesHandle.stop();\n  var transformedOutput = [];\n  var transformedHandle = cursor.observe({\n    added: function (doc) {\n      transformedOutput.push(['added', doc]);\n    }\n  });\n  test.length(transformedOutput, 1);\n  test.equal(transformedOutput.shift(), ['added', {\n    x: 5,\n    y: 9\n  }]);\n  transformedHandle.stop();\n});\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - drop collection/db\", function (test) {\n  // This test uses a random database, so it can be dropped without affecting\n  // anything else.\n  var mongodbUri = Npm.require('mongodb-uri');\n\n  var parsedUri = mongodbUri.parse(process.env.MONGO_URL);\n  parsedUri.database = 'dropDB' + Random.id();\n  var driver = new MongoInternals.RemoteCollectionDriver(mongodbUri.format(parsedUri), {\n    oplogUrl: process.env.MONGO_OPLOG_URL\n  });\n  var collName = \"dropCollection\" + Random.id();\n  var coll = new Mongo.Collection(collName, {\n    _driver: driver\n  });\n  var doc1Id = coll.insert({\n    a: 'foo',\n    c: 1\n  });\n  var doc2Id = coll.insert({\n    b: 'bar'\n  });\n  var doc3Id = coll.insert({\n    a: 'foo',\n    c: 2\n  });\n  var tmp;\n  var output = [];\n  var handle = coll.find({\n    a: 'foo'\n  }).observeChanges({\n    added: function (id, fields) {\n      output.push(['added', id, fields]);\n    },\n    changed: function (id) {\n      output.push(['changed']);\n    },\n    removed: function (id) {\n      output.push(['removed', id]);\n    }\n  });\n  test.length(output, 2); // make order consistent\n\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n\n  test.equal(output.shift(), ['added', doc1Id, {\n    a: 'foo',\n    c: 1\n  }]);\n  test.equal(output.shift(), ['added', doc3Id, {\n    a: 'foo',\n    c: 2\n  }]); // Wait until we've processed the insert oplog entry, so that we are in a\n  // steady state (and we don't see the dropped docs because we are FETCHING).\n\n  waitUntilOplogCaughtUp(); // Drop the collection. Should remove all docs.\n\n  runInFence(function () {\n    coll._dropCollection();\n  });\n  test.length(output, 2); // make order consistent\n\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n\n  test.equal(output.shift(), ['removed', doc1Id]);\n  test.equal(output.shift(), ['removed', doc3Id]); // Put something back in.\n\n  var doc4Id;\n  runInFence(function () {\n    doc4Id = coll.insert({\n      a: 'foo',\n      c: 3\n    });\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', doc4Id, {\n    a: 'foo',\n    c: 3\n  }]); // XXX: this was intermittently failing for unknown reasons.\n  // Now drop the database. Should remove all docs again.\n  // runInFence(function () {\n  //   driver.mongo.dropDatabase();\n  // });\n  //\n  // test.length(output, 1);\n  // test.equal(output.shift(), ['removed', doc4Id]);\n\n  handle.stop();\n  driver.mongo.close();\n});\n\nvar TestCustomType = function (head, tail) {\n  // use different field names on the object than in JSON, to ensure we are\n  // actually treating this as an opaque object.\n  this.myHead = head;\n  this.myTail = tail;\n};\n\n_.extend(TestCustomType.prototype, {\n  clone: function () {\n    return new TestCustomType(this.myHead, this.myTail);\n  },\n  equals: function (other) {\n    return other instanceof TestCustomType && EJSON.equals(this.myHead, other.myHead) && EJSON.equals(this.myTail, other.myTail);\n  },\n  typeName: function () {\n    return 'someCustomType';\n  },\n  toJSONValue: function () {\n    return {\n      head: this.myHead,\n      tail: this.myTail\n    };\n  }\n});\n\nEJSON.addType('someCustomType', function (json) {\n  return new TestCustomType(json.head, json.tail);\n});\ntestAsyncMulti(\"mongo-livedata - oplog - update EJSON\", [function (test, expect) {\n  var self = this;\n  var collectionName = \"ejson\" + Random.id();\n\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', collectionName);\n    Meteor.subscribe('c-' + collectionName, expect());\n  }\n\n  self.collection = new Mongo.Collection(collectionName);\n  self.date = new Date();\n  self.objId = new Mongo.ObjectID();\n  self.id = self.collection.insert({\n    d: self.date,\n    oi: self.objId,\n    custom: new TestCustomType('a', 'b')\n  }, expect(function (err, res) {\n    test.isFalse(err);\n    test.equal(self.id, res);\n  }));\n}, function (test, expect) {\n  var self = this;\n  self.changes = [];\n  self.handle = self.collection.find({}).observeChanges({\n    added: function (id, fields) {\n      self.changes.push(['a', id, fields]);\n    },\n    changed: function (id, fields) {\n      self.changes.push(['c', id, fields]);\n    },\n    removed: function (id) {\n      self.changes.push(['r', id]);\n    }\n  });\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['a', self.id, {\n    d: self.date,\n    oi: self.objId,\n    custom: new TestCustomType('a', 'b')\n  }]); // First, replace the entire custom object.\n  // (runInFence is useful for the server, using expect() is useful for the\n  // client)\n\n  runInFence(function () {\n    self.collection.update(self.id, {\n      $set: {\n        custom: new TestCustomType('a', 'c')\n      }\n    }, expect(function (err) {\n      test.isFalse(err);\n    }));\n  });\n}, function (test, expect) {\n  var self = this;\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['c', self.id, {\n    custom: new TestCustomType('a', 'c')\n  }]); // Now, sneakily replace just a piece of it. Meteor won't do this, but\n  // perhaps you are accessing Mongo directly.\n\n  runInFence(function () {\n    self.collection.update(self.id, {\n      $set: {\n        'custom.EJSON$value.EJSONtail': 'd'\n      }\n    }, expect(function (err) {\n      test.isFalse(err);\n    }));\n  });\n}, function (test, expect) {\n  var self = this;\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['c', self.id, {\n    custom: new TestCustomType('a', 'd')\n  }]); // Update a date and an ObjectID too.\n\n  self.date2 = new Date(self.date.valueOf() + 1000);\n  self.objId2 = new Mongo.ObjectID();\n  runInFence(function () {\n    self.collection.update(self.id, {\n      $set: {\n        d: self.date2,\n        oi: self.objId2\n      }\n    }, expect(function (err) {\n      test.isFalse(err);\n    }));\n  });\n}, function (test, expect) {\n  var self = this;\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['c', self.id, {\n    d: self.date2,\n    oi: self.objId2\n  }]);\n  self.handle.stop();\n}]);\n\nvar waitUntilOplogCaughtUp = function () {\n  var oplogHandle = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n\n  if (oplogHandle) oplogHandle.waitUntilCaughtUp();\n};\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - cursor dedup stop\", function (test) {\n  var coll = new Mongo.Collection(Random.id());\n\n  _.times(100, function () {\n    coll.insert({\n      foo: 'baz'\n    });\n  });\n\n  var handler = coll.find({}).observeChanges({\n    added: function (id) {\n      coll.update(id, {\n        $set: {\n          foo: 'bar'\n        }\n      });\n    }\n  });\n  handler.stop(); // Previously, this would print\n  //    Exception in queued task: TypeError: Object.keys called on non-object\n  // Unfortunately, this test didn't fail before the bugfix, but it at least\n  // would print the error and no longer does.\n  // See https://github.com/meteor/meteor/issues/2070\n});\ntestAsyncMulti(\"mongo-livedata - undefined find options\", [function (test, expect) {\n  var self = this;\n  self.collName = Random.id();\n\n  if (Meteor.isClient) {\n    Meteor.call(\"createInsecureCollection\", self.collName);\n    Meteor.subscribe(\"c-\" + self.collName, expect());\n  }\n}, function (test, expect) {\n  var self = this;\n  self.coll = new Mongo.Collection(self.collName);\n  self.doc = {\n    foo: 1,\n    bar: 2,\n    _id: \"foobar\"\n  };\n  self.coll.insert(self.doc, expect(function (err, id) {\n    test.isFalse(err);\n  }));\n}, function (test, expect) {\n  var self = this;\n  var result = self.coll.findOne({\n    foo: 1\n  }, {\n    fields: undefined,\n    sort: undefined,\n    limit: undefined,\n    skip: undefined\n  });\n  test.equal(result, self.doc);\n}]); // Regression test for #2274.\n\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - observe limit bug\", [function (test, expect) {\n  var self = this;\n  self.coll = new Mongo.Collection(Random.id());\n  var state = {};\n  var callbacks = {\n    changed: function (newDoc) {\n      state[newDoc._id] = newDoc;\n    },\n    added: function (newDoc) {\n      state[newDoc._id] = newDoc;\n    },\n    removed: function (oldDoc) {\n      delete state[oldDoc._id];\n    }\n  };\n  self.observe = self.coll.find({}, {\n    limit: 1,\n    sort: {\n      sortField: -1\n    }\n  }).observe(callbacks); // Insert some documents.\n\n  runInFence(function () {\n    self.id0 = self.coll.insert({\n      sortField: 0,\n      toDelete: true\n    });\n    self.id1 = self.coll.insert({\n      sortField: 1,\n      toDelete: true\n    });\n    self.id2 = self.coll.insert({\n      sortField: 2,\n      toDelete: true\n    });\n  });\n  test.equal(_.keys(state), [self.id2]); // Mutate the one in the unpublished buffer and the one below the\n  // buffer. Before the fix for #2274, this left the observe state machine in\n  // a broken state where the buffer was empty but it wasn't try to re-fill\n  // it.\n\n  runInFence(function () {\n    self.coll.update({\n      _id: {\n        $ne: self.id2\n      }\n    }, {\n      $set: {\n        toDelete: false\n      }\n    }, {\n      multi: 1\n    });\n  });\n  test.equal(_.keys(state), [self.id2]); // Now remove the one published document. This should slide up id1 from the\n  // buffer, but this didn't work before the #2274 fix.\n\n  runInFence(function () {\n    self.coll.remove({\n      toDelete: true\n    });\n  });\n  test.equal(_.keys(state), [self.id1]);\n}]);\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - update with replace forbidden\", [function (test, expect) {\n  var c = new Mongo.Collection(Random.id());\n  var id = c.insert({\n    foo: \"bar\"\n  });\n  c.update(id, {\n    foo2: \"bar2\"\n  });\n  test.equal(c.findOne(id), {\n    _id: id,\n    foo2: \"bar2\"\n  });\n  test.throws(function () {\n    c.update(id, {\n      foo3: \"bar3\"\n    }, {\n      _forbidReplace: true\n    });\n  }, \"Replacements are forbidden\");\n  test.equal(c.findOne(id), {\n    _id: id,\n    foo2: \"bar2\"\n  });\n  test.throws(function () {\n    c.update(id, {\n      foo3: \"bar3\",\n      $set: {\n        blah: 1\n      }\n    });\n  }, \"cannot have both modifier and non-modifier fields\");\n  test.equal(c.findOne(id), {\n    _id: id,\n    foo2: \"bar2\"\n  });\n}]);\nMeteor.isServer && Tinytest.add(\"mongo-livedata - connection failure throws\", function (test) {\n  test.throws(function () {\n    new MongoInternals.Connection('mongodb://this-does-not-exist.test/asdf');\n  });\n});\nMeteor.isServer && Tinytest.add(\"mongo-livedata - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(MongoInternals.NpmModules.mongodb.version, /^2\\.(\\d+)\\.(\\d+)/);\n  test.equal((0, _typeof2.default)(MongoInternals.NpmModules.mongodb.module), 'function');\n  test.equal((0, _typeof2.default)(MongoInternals.NpmModules.mongodb.module.connect), 'function');\n  test.equal((0, _typeof2.default)(MongoInternals.NpmModules.mongodb.module.ObjectID), 'function');\n  var c = new Mongo.Collection(Random.id());\n  var rawCollection = c.rawCollection();\n  test.isTrue(rawCollection);\n  test.isTrue(rawCollection.findAndModify);\n  var rawDb = c.rawDatabase();\n  test.isTrue(rawDb);\n  test.isTrue(rawDb.admin);\n});\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - update/remove don't accept an array as a selector #4804\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    _.times(10, function () {\n      collection.insert({\n        data: \"Hello\"\n      });\n    });\n\n    test.equal(collection.find().count(), 10); // Test several array-related selectors\n\n    _.each([[], [1, 2, 3], [{}]], function (selector) {\n      test.throws(function () {\n        collection.remove(selector);\n      });\n      test.throws(function () {\n        collection.update(selector, {\n          $set: 5\n        });\n      });\n    });\n\n    test.equal(collection.find().count(), 10);\n  });\n} // This is a regression test for https://github.com/meteor/meteor/issues/4839.\n// Prior to fixing the issue (but after applying\n// https://github.com/meteor/meteor/pull/4694), doing a Mongo write from a\n// timeout that ran after a method body (invoked via the client) would throw an\n// error \"fence has already activated -- too late to add a callback\" and not\n// properly call the Mongo write's callback.  In this test:\n//  - The client invokes a method (fenceOnBeforeFireError1) which\n//    - Starts an observe on a query\n//    - Creates a timeout (which shares a write fence with the method)\n//    - Lets the method return (firing the write fence)\n//  - The timeout runs and does a Mongo write. This write is inside a write\n//    fence (because timeouts preserve the fence, see dcd26415) but the write\n//    fence already fired.\n//  - The Mongo write's callback confirms that there is no error. This was\n//    not the case before fixing the bug!  (Note that the observe was necessary\n//    for the error to occur, because the error was thrown from the observe's\n//    crossbar listener callback).  It puts the confirmation into a Future.\n//  - The client invokes another method which reads the confirmation from\n//    the future. (Well, the invocation happened earlier but the use of the\n//    Future sequences it so that the confirmation only gets read at this point.)\n\n\nif (Meteor.isClient) {\n  testAsyncMulti(\"mongo-livedata - fence onBeforeFire error\", [function (test, expect) {\n    var self = this;\n    self.nonce = Random.id();\n    Meteor.call('fenceOnBeforeFireError1', self.nonce, expect(function (err) {\n      test.isFalse(err);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call('fenceOnBeforeFireError2', self.nonce, expect(function (err, success) {\n      test.isFalse(err);\n      test.isTrue(success);\n    }));\n  }]);\n} else {\n  var fenceOnBeforeFireErrorCollection = new Mongo.Collection(\"FOBFE\");\n\n  var Future = Npm.require('fibers/future');\n\n  var futuresByNonce = {};\n  Meteor.methods({\n    fenceOnBeforeFireError1: function (nonce) {\n      futuresByNonce[nonce] = new Future();\n      var observe = fenceOnBeforeFireErrorCollection.find({\n        nonce: nonce\n      }).observeChanges({\n        added: function () {}\n      });\n      Meteor.setTimeout(function () {\n        fenceOnBeforeFireErrorCollection.insert({\n          nonce: nonce\n        }, function (err, result) {\n          var success = !err && result;\n          futuresByNonce[nonce].return(success);\n          observe.stop();\n        });\n      }, 10);\n    },\n    fenceOnBeforeFireError2: function (nonce) {\n      try {\n        return futuresByNonce[nonce].wait();\n      } finally {\n        delete futuresByNonce[nonce];\n      }\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Tinytest.add('mongo update/upsert - returns nMatched as numberAffected', function (test, onComplete) {\n    var collName = Random.id();\n    var coll = new Mongo.Collection('update_nmatched' + collName);\n    coll.insert({\n      animal: 'cat',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'dog',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'echidna',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'platypus',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'starfish',\n      legs: 5\n    });\n    var affected = coll.update({\n      legs: 4\n    }, {\n      $set: {\n        category: 'quadruped'\n      }\n    });\n    test.equal(affected, 1); //Changes only 3 but matched 4 documents\n\n    affected = coll.update({\n      legs: 4\n    }, {\n      $set: {\n        category: 'quadruped'\n      }\n    }, {\n      multi: true\n    });\n    test.equal(affected, 4); //Again, changes nothing but returns nModified\n\n    affected = coll.update({\n      legs: 4\n    }, {\n      $set: {\n        category: 'quadruped'\n      }\n    }, {\n      multi: true\n    });\n    test.equal(affected, 4); //upsert:true changes nothing, 4 modified\n\n    affected = coll.update({\n      legs: 4\n    }, {\n      $set: {\n        category: 'quadruped'\n      }\n    }, {\n      multi: true,\n      upsert: true\n    });\n    test.equal(affected, 4); //upsert method works as upsert:true\n\n    var result = coll.upsert({\n      legs: 4\n    }, {\n      $set: {\n        category: 'quadruped'\n      }\n    }, {\n      multi: true\n    });\n    test.equal(result.numberAffected, 4);\n  });\n  Tinytest.addAsync('mongo livedata - update/upsert callback returns nMatched as numberAffected', function (test, onComplete) {\n    var collName = Random.id();\n    var coll = new Mongo.Collection('update_nmatched' + collName);\n    coll.insert({\n      animal: 'cat',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'dog',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'echidna',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'platypus',\n      legs: 4\n    });\n    coll.insert({\n      animal: 'starfish',\n      legs: 5\n    });\n\n    var test1 = function () {\n      coll.update({\n        legs: 4\n      }, {\n        $set: {\n          category: 'quadruped'\n        }\n      }, function (err, result) {\n        test.equal(result, 1);\n        test2();\n      });\n    };\n\n    var test2 = function () {\n      //Changes only 3 but matched 4 documents\n      coll.update({\n        legs: 4\n      }, {\n        $set: {\n          category: 'quadruped'\n        }\n      }, {\n        multi: true\n      }, function (err, result) {\n        test.equal(result, 4);\n        test3();\n      });\n    };\n\n    var test3 = function () {\n      //Again, changes nothing but returns nModified\n      coll.update({\n        legs: 4\n      }, {\n        $set: {\n          category: 'quadruped'\n        }\n      }, {\n        multi: true\n      }, function (err, result) {\n        test.equal(result, 4);\n        test4();\n      });\n    };\n\n    var test4 = function () {\n      //upsert:true changes nothing, 4 modified\n      coll.update({\n        legs: 4\n      }, {\n        $set: {\n          category: 'quadruped'\n        }\n      }, {\n        multi: true,\n        upsert: true\n      }, function (err, result) {\n        test.equal(result, 4);\n        test5();\n      });\n    };\n\n    var test5 = function () {\n      //upsert method works as upsert:true\n      coll.upsert({\n        legs: 4\n      }, {\n        $set: {\n          category: 'quadruped'\n        }\n      }, {\n        multi: true\n      }, function (err, result) {\n        test.equal(result.numberAffected, 4);\n        onComplete();\n      });\n    };\n\n    test1();\n  });\n}","map":{"version":3,"sources":["packages/mongo/mongo_livedata_tests.js"],"names":["TRANSFORMS","COLLECTIONS","Meteor","isServer","methods","createInsecureCollection","name","options","check","String","Match","Optional","transformName","idGeneration","transform","c","Mongo","Collection","_insecure","publish","find","dropInsecureCollection","_dropCollection","INSERTED_IDS","insertObjects","collectionName","doc","count","ids","i","id","insert","concat","push","upsertObject","selector","modifier","upsert","doMeteorCall","args","Array","prototype","slice","call","arguments","apply","runInFence","f","isClient","fence","DDPServer","_WriteFence","_CurrentWriteFence","withValue","armAndWait","stripId","obj","_id","compareResults","test","skipIds","actual","expected","_","map","equal","coll","useUpdate","query","mod","callback","update","extend","err","result","numberAffected","upsertTestMethod","upsertTestMethodColl","upsertTestMethodImpl","remove","result1","foo","a","b","EJSON","equals","Error","JSON","stringify","isTrue","isFalse","insertedId","fooId","findOne","result2","$set","m","run","Boolean","_FailureTestCollection","Dog","color","actions","self","getName","getColor","other","toJSONValue","typeName","clone","speak","addType","o","each","collectionOptions","testAsyncMulti","expect","ftc","exception","res","instanceOf","op","arg","arg2","callOp","throws","_suppress_log","Tinytest","addAsync","onComplete","runId","coll2","log","obs","sort","observe","addedAt","before_index","before","x","changedAt","new_doc","old_doc","at_index","movedTo","old_index","new_index","removedAt","captureObserve","ret","expectObserve","include","undefined","id2","skip","limit","cur","total","index","context","forEach","cursor","_sleepForMs","pluck","fetch","$inc","multi","$gt","stop","Random","correct","counters","add","change","move","splice","_multiplexer","_observeDriver","_suspendPolling","step","seededRandom","SeededRandom","fraction","rnd","n","nextIntBetween","finishObserve","doStep","max_counters","batch_count","which","length","val","_resumePolling","v","k","defer","numAddeds","handle","abc","output","added","changed","newDoc","docId","shift","bar","baz","callbackCalled","observer","noAdded","callbacks","docId1","o1","docId2","o2","notEqual","observeMultiplexer","z","_handles","isNull","o3","o4","cname","setsEqual","isEmpty","difference","state","removed","oldDoc","clearOutput","ins","rem","sel","upd","opt","testOplogBufferIds","usesOplog","bufferIds","_unpublishedBuffer","testSafeAppendToBufferFlag","_safeAppendToBuffer","waitUntilOplogCaughtUp","_usesOplog","docId3","docId4","docId5","docId6","docId7","docId8","$lt","expectedRemoves","expectedAdds","docId9","docId10","docId11","docId12","keys","docId13","docId14","docId15","docId16","fields","y","size","subscribe","testWidget","error","insertDetails","Object","assign","d","Date","getFullYear","seconds","getSeconds","expectAdd","expectRemove","id1","justId","omit","bin","Base64","decode","inColl","isBinary","allow","is1","is2","polls","handlesToStop","observeChanges","_testOnlyPollCallback","$in","resetPollsAndRunInFence","all","id1Direct","id1InQuery","bothIds","q","id2Direct","id2InQuery","h","e","MongoInternals","Connection","_isCannotChangeIdError","minimongo","useDirectCollection","connection","_collection","t1","ObjectID","t2","result3","result4","result5","davidId","$blah","result6","emilyId","result7","$setOnInsert","result8","fredId","result9","result10","$or","result11","charlieId","asyncUpsertTestName","useNetwork","collName","next0","next1","opts","next2","next3","next4","next5","next6","next7","next8","_methodHandlers","myId","_rewriteSelector","oid","matches","fallbackId","expectError","err1","collectionInsert","clientSideId","isObject","collectionUpsert","upsertId","collectionUpsertExisting","functionCallsInsert","_name","stubId","functionCallsUpsert","functionCallsUpsertExisting","functionCalls3Inserts","functionChainInsert","functionChain2Insert","functionChain2Upsert","functionCalls3Insert","fn","repetitions","collectionCount","cleanups","collections","times","collection","j","cleanup","fail","docs","_debug","C","conn","DDP","connect","absoluteUrl","pollUntil","status","connected","miniC","exp","onError","onReady","contents","events","evt","two","one","cname2","coll1","elements","$push","$each","$slice","message","subdocument","defaultRemoteCollectionDriver","mongo","_oplogHandle","observeWithOplog","observeWithoutOplog","_disableOplog","changesOutput","changesHandle","transformedOutput","transformedHandle","mongodbUri","Npm","require","parsedUri","parse","process","env","MONGO_URL","database","driver","RemoteCollectionDriver","format","oplogUrl","MONGO_OPLOG_URL","_driver","doc1Id","doc2Id","doc3Id","tmp","doc4Id","close","TestCustomType","head","tail","myHead","myTail","json","date","objId","oi","custom","changes","date2","valueOf","objId2","oplogHandle","waitUntilCaughtUp","handler","sortField","id0","toDelete","$ne","foo2","foo3","_forbidReplace","blah","NpmModules","mongodb","version","module","rawCollection","findAndModify","rawDb","rawDatabase","admin","data","nonce","success","fenceOnBeforeFireErrorCollection","Future","futuresByNonce","fenceOnBeforeFireError1","setTimeout","return","fenceOnBeforeFireError2","wait","animal","legs","affected","category","test1","test2","test3","test4","test5"],"mappings":"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","sourcesContent":["// This is a magic collection that fails its writes on the server when\n// the selector (or inserted document) contains fail: true.\n\nvar TRANSFORMS = {};\n\n// We keep track of the collections, so we can refer to them by name\nvar COLLECTIONS = {};\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    createInsecureCollection: function (name, options) {\n      check(name, String);\n      check(options, Match.Optional({\n        transformName: Match.Optional(String),\n        idGeneration: Match.Optional(String)\n      }));\n\n      if (options && options.transformName) {\n        options.transform = TRANSFORMS[options.transformName];\n      }\n      var c = new Mongo.Collection(name, options);\n      COLLECTIONS[name] = c;\n      c._insecure = true;\n      Meteor.publish('c-' + name, function () {\n        return c.find();\n      });\n    },\n    dropInsecureCollection: function(name) {\n      var c = COLLECTIONS[name];\n      c._dropCollection();\n    }\n  });\n}\n\n// We store the generated id, keyed by collection, for each insert\n// This is so we can test the stub and the server generate the same id\nvar INSERTED_IDS = {};\n\nMeteor.methods({\n  insertObjects: function (collectionName, doc, count) {\n    var c = COLLECTIONS[collectionName];\n    var ids = [];\n    for (var i = 0; i < count; i++) {\n      var id = c.insert(doc);\n      INSERTED_IDS[collectionName] = (INSERTED_IDS[collectionName] || []).concat([id]);\n      ids.push(id);\n    }\n    return ids;\n  },\n  upsertObject: function (collectionName, selector, modifier) {\n    var c = COLLECTIONS[collectionName];\n    return c.upsert(selector, modifier);\n  },\n  doMeteorCall: function (name /*, arguments */) {\n    var args = Array.prototype.slice.call(arguments);\n\n    return Meteor.call.apply(null, args);\n  }\n});\n\nvar runInFence = function (f) {\n  if (Meteor.isClient) {\n    f();\n  } else {\n    var fence = new DDPServer._WriteFence;\n    DDPServer._CurrentWriteFence.withValue(fence, f);\n    fence.armAndWait();\n  }\n};\n\n// Helpers for upsert tests\n\nvar stripId = function (obj) {\n  delete obj._id;\n};\n\nvar compareResults = function (test, skipIds, actual, expected) {\n  if (skipIds) {\n    _.map(actual, stripId);\n    _.map(expected, stripId);\n  }\n  // (technically should ignore order in comparison)\n  test.equal(actual, expected);\n};\n\nvar upsert = function (coll, useUpdate, query, mod, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  if (useUpdate) {\n    if (callback)\n      return coll.update(query, mod,\n                         _.extend({ upsert: true }, options),\n                         function (err, result) {\n                           callback(err, ! err && {\n                             numberAffected: result\n                           });\n                         });\n    return {\n      numberAffected: coll.update(query, mod,\n                                  _.extend({ upsert: true }, options))\n    };\n  } else {\n    return coll.upsert(query, mod, options, callback);\n  }\n};\n\nvar upsertTestMethod = \"livedata_upsert_test_method\";\nvar upsertTestMethodColl;\n\n// This is the implementation of the upsert test method on both the client and\n// the server. On the client, we get a test object. On the server, we just throw\n// errors if something doesn't go according to plan, and when the client\n// receives those errors it will cause the test to fail.\n//\n// Client-side exceptions in here will NOT cause the test to fail! Because it's\n// a stub, those exceptions will get caught and logged.\nvar upsertTestMethodImpl = function (coll, useUpdate, test) {\n  coll.remove({});\n  var result1 = upsert(coll, useUpdate, { foo: \"bar\" }, { foo: \"bar\" });\n\n  if (! test) {\n    test = {\n      equal: function (a, b) {\n        if (! EJSON.equals(a, b))\n          throw new Error(\"Not equal: \" +\n                          JSON.stringify(a) + \", \" + JSON.stringify(b));\n      },\n      isTrue: function (a) {\n        if (! a)\n          throw new Error(\"Not truthy: \" + JSON.stringify(a));\n      },\n      isFalse: function (a) {\n        if (a)\n          throw new Error(\"Not falsey: \" + JSON.stringify(a));\n      }\n    };\n  }\n\n  // if we don't test this, then testing result1.numberAffected will throw,\n  // which will get caught and logged and the whole test will pass!\n  test.isTrue(result1);\n\n  test.equal(result1.numberAffected, 1);\n  if (! useUpdate)\n    test.isTrue(result1.insertedId);\n  var fooId = result1.insertedId;\n  var obj = coll.findOne({ foo: \"bar\" });\n  test.isTrue(obj);\n  if (! useUpdate)\n    test.equal(obj._id, result1.insertedId);\n  var result2 = upsert(coll, useUpdate, { _id: fooId },\n                       { $set: { foo: \"baz \" } });\n  test.isTrue(result2);\n  test.equal(result2.numberAffected, 1);\n  test.isFalse(result2.insertedId);\n};\n\nif (Meteor.isServer) {\n  var m = {};\n  m[upsertTestMethod] = function (run, useUpdate, options) {\n    check(run, String);\n    check(useUpdate, Boolean);\n    upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, options);\n    upsertTestMethodImpl(upsertTestMethodColl, useUpdate);\n  };\n  Meteor.methods(m);\n}\n\nMeteor._FailureTestCollection =\n  new Mongo.Collection(\"___meteor_failure_test_collection\");\n\n// For test \"document with a custom type\"\nvar Dog = function (name, color, actions) {\n  var self = this;\n  self.color = color;\n  self.name = name;\n  self.actions = actions || [{name: \"wag\"}, {name: \"swim\"}];\n};\n_.extend(Dog.prototype, {\n  getName: function () { return this.name;},\n  getColor: function () { return this.name;},\n  equals: function (other) { return other.name === this.name &&\n                             other.color === this.color &&\n                             EJSON.equals(other.actions, this.actions);},\n  toJSONValue: function () { return {color: this.color, name: this.name, actions: this.actions};},\n  typeName: function () { return \"dog\"; },\n  clone: function () { return new Dog(this.name, this.color); },\n  speak: function () { return \"woof\"; }\n});\nEJSON.addType(\"dog\", function (o) { return new Dog(o.name, o.color, o.actions);});\n\n\n// Parameterize tests.\n_.each( ['STRING', 'MONGO'], function(idGeneration) {\n\nvar collectionOptions = { idGeneration: idGeneration};\n\ntestAsyncMulti(\"mongo-livedata - database error reporting. \" + idGeneration, [\n  function (test, expect) {\n    var ftc = Meteor._FailureTestCollection;\n\n    var exception = function (err, res) {\n      test.instanceOf(err, Error);\n    };\n\n    _.each([\"insert\", \"remove\", \"update\"], function (op) {\n      var arg = (op === \"insert\" ? {} : 'bla');\n      var arg2 = {};\n\n      var callOp = function (callback) {\n        if (op === \"update\") {\n          ftc[op](arg, arg2, callback);\n        } else {\n          ftc[op](arg, callback);\n        }\n      };\n\n      if (Meteor.isServer) {\n        test.throws(function () {\n          callOp();\n        });\n\n        callOp(expect(exception));\n      }\n\n      if (Meteor.isClient) {\n        callOp(expect(exception));\n\n        // This would log to console in normal operation.\n        Meteor._suppress_log(1);\n        callOp();\n      }\n    });\n  }\n]);\n\n\nTinytest.addAsync(\"mongo-livedata - basics, \" + idGeneration, function (test, onComplete) {\n  var run = test.runId();\n  var coll, coll2;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions) ; // local, unmanaged\n    coll2 = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"livedata_test_collection_\"+run, collectionOptions);\n    coll2 = new Mongo.Collection(\"livedata_test_collection_2_\"+run, collectionOptions);\n  }\n\n  var log = '';\n  var obs = coll.find({run: run}, {sort: [\"x\"]}).observe({\n    addedAt: function (doc, before_index, before) {\n      log += 'a(' + doc.x + ',' + before_index + ',' + before + ')';\n    },\n    changedAt: function (new_doc, old_doc, at_index) {\n      log += 'c(' + new_doc.x + ',' + at_index + ',' + old_doc.x + ')';\n    },\n    movedTo: function (doc, old_index, new_index) {\n      log += 'm(' + doc.x + ',' + old_index + ',' + new_index + ')';\n    },\n    removedAt: function (doc, at_index) {\n      log += 'r(' + doc.x + ',' + at_index + ')';\n    }\n  });\n\n  var captureObserve = function (f) {\n    if (Meteor.isClient) {\n      f();\n    } else {\n      var fence = new DDPServer._WriteFence;\n      DDPServer._CurrentWriteFence.withValue(fence, f);\n      fence.armAndWait();\n    }\n\n    var ret = log;\n    log = '';\n    return ret;\n  };\n\n  var expectObserve = function (expected, f) {\n    if (!(expected instanceof Array))\n      expected = [expected];\n\n    test.include(expected, captureObserve(f));\n  };\n\n  test.equal(coll.find({run: run}).count(), 0);\n  test.equal(coll.findOne(\"abc\"), undefined);\n  test.equal(coll.findOne({run: run}), undefined);\n\n  expectObserve('a(1,0,null)', function () {\n    var id = coll.insert({run: run, x: 1});\n    test.equal(coll.find({run: run}).count(), 1);\n    test.equal(coll.findOne(id).x, 1);\n    test.equal(coll.findOne({run: run}).x, 1);\n  });\n\n  expectObserve('a(4,1,null)', function () {\n    var id2 = coll.insert({run: run, x: 4});\n    test.equal(coll.find({run: run}).count(), 2);\n    test.equal(coll.find({_id: id2}).count(), 1);\n    test.equal(coll.findOne(id2).x, 4);\n  });\n\n  test.equal(coll.findOne({run: run}, {sort: [\"x\"], skip: 0}).x, 1);\n  test.equal(coll.findOne({run: run}, {sort: [\"x\"], skip: 1}).x, 4);\n  test.equal(coll.findOne({run: run}, {sort: {x: -1}, skip: 0}).x, 4);\n  test.equal(coll.findOne({run: run}, {sort: {x: -1}, skip: 1}).x, 1);\n\n\n  // Regression test for https://github.com/meteor/meteor/issues/7436\n  //  - ensure applySkipLimit defaults to false for count()\n  // Note that the current behavior is inconsistent on the client.\n  //  (https://github.com/meteor/meteor/issues/1201)\n  if (Meteor.isServer) {\n    test.equal(coll.find({run: run}, {limit: 1}).count(), 2);\n    test.equal(coll.find({run: run}, {limit: 1}).count(true), 1);\n    test.equal(coll.find({run: run}, {limit: 1}).count(false), 2);\n  }\n\n  var cur = coll.find({run: run}, {sort: [\"x\"]});\n  var total = 0;\n  var index = 0;\n  var context = {};\n  cur.forEach(function (doc, i, cursor) {\n    test.equal(i, index++);\n    test.isTrue(cursor === cur);\n    test.isTrue(context === this);\n    total *= 10;\n    if (Meteor.isServer) {\n      // Verify that the callbacks from forEach run sequentially and that\n      // forEach waits for them to complete (issue# 321). If they do not run\n      // sequentially, then the second callback could execute during the first\n      // callback's sleep sleep and the *= 10 will occur before the += 1, then\n      // total (at test.equal time) will be 5. If forEach does not wait for the\n      // callbacks to complete, then total (at test.equal time) will be 0.\n      Meteor._sleepForMs(5);\n    }\n    total += doc.x;\n    // verify the meteor environment is set up here\n    coll2.insert({total:total});\n  }, context);\n  test.equal(total, 14);\n\n  index = 0;\n  test.equal(cur.map(function (doc, i, cursor) {\n    // XXX we could theoretically make map run its iterations in parallel or\n    // something which would make this fail\n    test.equal(i, index++);\n    test.isTrue(cursor === cur);\n    test.isTrue(context === this);\n    return doc.x * 2;\n  }, context), [2, 8]);\n\n  test.equal(_.pluck(coll.find({run: run}, {sort: {x: -1}}).fetch(), \"x\"),\n             [4, 1]);\n\n  expectObserve('', function () {\n    var count = coll.update({run: run, x: -1}, {$inc: {x: 2}}, {multi: true});\n    test.equal(count, 0);\n  });\n\n  expectObserve('c(3,0,1)c(6,1,4)', function () {\n    var count = coll.update({run: run}, {$inc: {x: 2}}, {multi: true});\n    test.equal(count, 2);\n    test.equal(_.pluck(coll.find({run: run}, {sort: {x: -1}}).fetch(), \"x\"),\n               [6, 3]);\n  });\n\n  expectObserve(['c(13,0,3)m(13,0,1)', 'm(6,1,0)c(13,1,3)',\n                 'c(13,0,3)m(6,1,0)', 'm(3,0,1)c(13,1,3)'], function () {\n    coll.update({run: run, x: 3}, {$inc: {x: 10}}, {multi: true});\n    test.equal(_.pluck(coll.find({run: run}, {sort: {x: -1}}).fetch(), \"x\"),\n               [13, 6]);\n  });\n\n  expectObserve('r(13,1)', function () {\n    var count = coll.remove({run: run, x: {$gt: 10}});\n    test.equal(count, 1);\n    test.equal(coll.find({run: run}).count(), 1);\n  });\n\n  expectObserve('r(6,0)', function () {\n    coll.remove({run: run});\n    test.equal(coll.find({run: run}).count(), 0);\n  });\n\n  expectObserve('', function () {\n    var count = coll.remove({run: run});\n    test.equal(count, 0);\n    test.equal(coll.find({run: run}).count(), 0);\n  });\n\n  obs.stop();\n  onComplete();\n});\n\nTinytest.addAsync(\"mongo-livedata - fuzz test, \" + idGeneration, function(test, onComplete) {\n\n  var run = Random.id();\n  var coll;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"livedata_test_collection_\"+run, collectionOptions);\n  }\n\n  // fuzz test of observe(), especially the server-side diffing\n  var actual = [];\n  var correct = [];\n  var counters = {add: 0, change: 0, move: 0, remove: 0};\n\n  var obs = coll.find({run: run}, {sort: [\"x\"]}).observe({\n    addedAt: function (doc, before_index) {\n      counters.add++;\n      actual.splice(before_index, 0, doc.x);\n    },\n    changedAt: function (new_doc, old_doc, at_index) {\n      counters.change++;\n      test.equal(actual[at_index], old_doc.x);\n      actual[at_index] = new_doc.x;\n    },\n    movedTo: function (doc, old_index, new_index) {\n      counters.move++;\n      test.equal(actual[old_index], doc.x);\n      actual.splice(old_index, 1);\n      actual.splice(new_index, 0, doc.x);\n    },\n    removedAt: function (doc, at_index) {\n      counters.remove++;\n      test.equal(actual[at_index], doc.x);\n      actual.splice(at_index, 1);\n    }\n  });\n\n  if (Meteor.isServer) {\n    // For now, has to be polling (not oplog) because it is ordered observe.\n    test.isTrue(obs._multiplexer._observeDriver._suspendPolling);\n  }\n\n  var step = 0;\n\n  // Use non-deterministic randomness so we can have a shorter fuzz\n  // test (fewer iterations).  For deterministic (fully seeded)\n  // randomness, remove the call to Random.fraction().\n  var seededRandom = new SeededRandom(\"foobard\" + Random.fraction());\n  // Random integer in [0,n)\n  var rnd = function (n) {\n    return seededRandom.nextIntBetween(0, n-1);\n  };\n\n  var finishObserve = function (f) {\n    if (Meteor.isClient) {\n      f();\n    } else {\n      var fence = new DDPServer._WriteFence;\n      DDPServer._CurrentWriteFence.withValue(fence, f);\n      fence.armAndWait();\n    }\n  };\n\n  var doStep = function () {\n    if (step++ === 5) { // run N random tests\n      obs.stop();\n      onComplete();\n      return;\n    }\n\n    var max_counters = _.clone(counters);\n\n    finishObserve(function () {\n      if (Meteor.isServer)\n        obs._multiplexer._observeDriver._suspendPolling();\n\n      // Do a batch of 1-10 operations\n      var batch_count = rnd(10) + 1;\n      for (var i = 0; i < batch_count; i++) {\n        // 25% add, 25% remove, 25% change in place, 25% change and move\n        var x;\n        var op = rnd(4);\n        var which = rnd(correct.length);\n        if (op === 0 || step < 2 || !correct.length) {\n          // Add\n          x = rnd(1000000);\n          coll.insert({run: run, x: x});\n          correct.push(x);\n          max_counters.add++;\n        } else if (op === 1 || op === 2) {\n          var val;\n          x = correct[which];\n          if (op === 1) {\n            // Small change, not likely to cause a move\n            val = x + (rnd(2) ? -1 : 1);\n          } else {\n            // Large change, likely to cause a move\n            val = rnd(1000000);\n          }\n          coll.update({run: run, x: x}, {$set: {x: val}});\n          correct[which] = val;\n          max_counters.change++;\n          max_counters.move++;\n        } else {\n          coll.remove({run: run, x: correct[which]});\n          correct.splice(which, 1);\n          max_counters.remove++;\n        }\n      }\n      if (Meteor.isServer)\n        obs._multiplexer._observeDriver._resumePolling();\n\n    });\n\n    // Did we actually deliver messages that mutated the array in the\n    // right way?\n    correct.sort(function (a,b) {return a-b;});\n    test.equal(actual, correct);\n\n    // Did we limit ourselves to one 'moved' message per change,\n    // rather than O(results) moved messages?\n    _.each(max_counters, function (v, k) {\n      test.isTrue(max_counters[k] >= counters[k], k);\n    });\n\n    Meteor.defer(doStep);\n  };\n\n  doStep();\n\n});\n\nTinytest.addAsync(\"mongo-livedata - scribbling, \" + idGeneration, function (test, onComplete) {\n  var run = test.runId();\n  var coll;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"livedata_test_collection_\"+run, collectionOptions);\n  }\n\n  var numAddeds = 0;\n  var handle = coll.find({run: run}).observe({\n    addedAt: function (o) {\n      // test that we can scribble on the object we get back from Mongo without\n      // breaking anything.  The worst possible scribble is messing with _id.\n      delete o._id;\n      numAddeds++;\n    }\n  });\n  _.each([123, 456, 789], function (abc) {\n    runInFence(function () {\n      coll.insert({run: run, abc: abc});\n    });\n  });\n  handle.stop();\n  // will be 6 (1+2+3) if we broke diffing!\n  test.equal(numAddeds, 3);\n\n  onComplete();\n});\n\nTinytest.addAsync(\"mongo-livedata - stop handle in callback, \" + idGeneration, function (test, onComplete) {\n  var run = Random.id();\n  var coll;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"stopHandleInCallback-\"+run, collectionOptions);\n  }\n\n  var output = [];\n\n  var handle = coll.find().observe({\n    added: function (doc) {\n      output.push({added: doc._id});\n    },\n    changed: function (newDoc) {\n      output.push('changed');\n      handle.stop();\n    }\n  });\n\n  test.equal(output, []);\n\n  // Insert a document. Observe that the added callback is called.\n  var docId;\n  runInFence(function () {\n    docId = coll.insert({foo: 42});\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), {added: docId});\n\n  // Update it. Observe that the changed callback is called. This should also\n  // stop the observation.\n  runInFence(function() {\n    coll.update(docId, {$set: {bar: 10}});\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), 'changed');\n\n  // Update again. This shouldn't call the callback because we stopped the\n  // observation.\n  runInFence(function() {\n    coll.update(docId, {$set: {baz: 40}});\n  });\n  test.length(output, 0);\n\n  test.equal(coll.find().count(), 1);\n  test.equal(coll.findOne(docId),\n             {_id: docId, foo: 42, bar: 10, baz: 40});\n\n  onComplete();\n});\n\n// This behavior isn't great, but it beats deadlock.\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"mongo-livedata - recursive observe throws, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeInCallback-\"+run, collectionOptions);\n\n    var callbackCalled = false;\n    var handle = coll.find({}).observe({\n      added: function (newDoc) {\n        callbackCalled = true;\n        test.throws(function () {\n          coll.find({}).observe();\n        });\n      }\n    });\n    test.isFalse(callbackCalled);\n    // Insert a document. Observe that the added callback is called.\n    runInFence(function () {\n      coll.insert({foo: 42});\n    });\n    test.isTrue(callbackCalled);\n\n    handle.stop();\n\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - cursor dedup, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"cursorDedup-\"+run, collectionOptions);\n\n    var observer = function (noAdded) {\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n        }\n      };\n      if (!noAdded) {\n        callbacks.added = function (doc) {\n          output.push({added: doc._id});\n        };\n      }\n      var handle = coll.find({foo: 22}).observe(callbacks);\n      return {output: output, handle: handle};\n    };\n\n    // Insert a doc and start observing.\n    var docId1 = coll.insert({foo: 22});\n    var o1 = observer();\n    // Initial add.\n    test.length(o1.output, 1);\n    test.equal(o1.output.shift(), {added: docId1});\n\n    // Insert another doc (blocking until observes have fired).\n    var docId2;\n    runInFence(function () {\n      docId2 = coll.insert({foo: 22, bar: 5});\n    });\n    // Observed add.\n    test.length(o1.output, 1);\n    test.equal(o1.output.shift(), {added: docId2});\n\n    // Second identical observe.\n    var o2 = observer();\n    // Initial adds.\n    test.length(o2.output, 2);\n    test.include([docId1, docId2], o2.output[0].added);\n    test.include([docId1, docId2], o2.output[1].added);\n    test.notEqual(o2.output[0].added, o2.output[1].added);\n    o2.output.length = 0;\n    // Original observe not affected.\n    test.length(o1.output, 0);\n\n    // White-box test: both observes should share an ObserveMultiplexer.\n    var observeMultiplexer = o1.handle._multiplexer;\n    test.isTrue(observeMultiplexer);\n    test.isTrue(observeMultiplexer === o2.handle._multiplexer);\n\n    // Update. Both observes fire.\n    runInFence(function () {\n      coll.update(docId1, {$set: {x: 'y'}});\n    });\n    test.length(o1.output, 1);\n    test.length(o2.output, 1);\n    test.equal(o1.output.shift(), {changed: docId1});\n    test.equal(o2.output.shift(), {changed: docId1});\n\n    // Stop first handle. Second handle still around.\n    o1.handle.stop();\n    test.length(o1.output, 0);\n    test.length(o2.output, 0);\n\n    // Another update. Just the second handle should fire.\n    runInFence(function () {\n      coll.update(docId2, {$set: {z: 'y'}});\n    });\n    test.length(o1.output, 0);\n    test.length(o2.output, 1);\n    test.equal(o2.output.shift(), {changed: docId2});\n\n    // Stop second handle. Nothing should happen, but the multiplexer should\n    // be stopped.\n    test.isTrue(observeMultiplexer._handles);  // This will change.\n    o2.handle.stop();\n    test.length(o1.output, 0);\n    test.length(o2.output, 0);\n    // White-box: ObserveMultiplexer has nulled its _handles so you can't\n    // accidentally join to it.\n    test.isNull(observeMultiplexer._handles);\n\n    // Start yet another handle on the same query.\n    var o3 = observer();\n    // Initial adds.\n    test.length(o3.output, 2);\n    test.include([docId1, docId2], o3.output[0].added);\n    test.include([docId1, docId2], o3.output[1].added);\n    test.notEqual(o3.output[0].added, o3.output[1].added);\n    // Old observers not called.\n    test.length(o1.output, 0);\n    test.length(o2.output, 0);\n    // White-box: Different ObserveMultiplexer.\n    test.isTrue(observeMultiplexer !== o3.handle._multiplexer);\n\n    // Start another handle with no added callback. Regression test for #589.\n    var o4 = observer(true);\n\n    o3.handle.stop();\n    o4.handle.stop();\n\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - async server-side insert, \" + idGeneration, function (test, onComplete) {\n    // Tests that insert returns before the callback runs. Relies on the fact\n    // that mongo does not run the callback before spinning off the event loop.\n    var cname = Random.id();\n    var coll = new Mongo.Collection(cname);\n    var doc = { foo: \"bar\" };\n    var x = 0;\n    coll.insert(doc, function (err, result) {\n      test.equal(err, null);\n      test.equal(x, 1);\n      onComplete();\n    });\n    x++;\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - async server-side update, \" + idGeneration, function (test, onComplete) {\n    // Tests that update returns before the callback runs.\n    var cname = Random.id();\n    var coll = new Mongo.Collection(cname);\n    var doc = { foo: \"bar\" };\n    var x = 0;\n    var id = coll.insert(doc);\n    coll.update(id, { $set: { foo: \"baz\" } }, function (err, result) {\n      test.equal(err, null);\n      test.equal(result, 1);\n      test.equal(x, 1);\n      onComplete();\n    });\n    x++;\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - async server-side remove, \" + idGeneration, function (test, onComplete) {\n    // Tests that remove returns before the callback runs.\n    var cname = Random.id();\n    var coll = new Mongo.Collection(cname);\n    var doc = { foo: \"bar\" };\n    var x = 0;\n    var id = coll.insert(doc);\n    coll.remove(id, function (err, result) {\n      test.equal(err, null);\n      test.isFalse(coll.findOne(id));\n      test.equal(x, 1);\n      onComplete();\n    });\n    x++;\n  });\n\n  // compares arrays a and b w/o looking at order\n  var setsEqual = function (a, b) {\n    a = _.map(a, EJSON.stringify);\n    b = _.map(b, EJSON.stringify);\n    return _.isEmpty(_.difference(a, b)) && _.isEmpty(_.difference(b, a));\n  };\n\n  // This test mainly checks the correctness of oplog code dealing with limited\n  // queries. Compitablity with poll-diff is added as well.\n  Tinytest.addAsync(\"mongo-livedata - observe sorted, limited \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeLimit-\"+run, collectionOptions);\n\n    var observer = function () {\n      var state = {};\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        added: function (newDoc) {\n          output.push({added: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        removed: function (oldDoc) {\n          output.push({removed: oldDoc._id});\n          delete state[oldDoc._id];\n        }\n      };\n      var handle = coll.find({foo: 22},\n                             {sort: {bar: 1}, limit: 3}).observe(callbacks);\n\n      return {output: output, handle: handle, state: state};\n    };\n    var clearOutput = function (o) { o.output.splice(0, o.output.length); };\n\n    var ins = function (doc) {\n      var id; runInFence(function () { id = coll.insert(doc); });\n      return id;\n    };\n    var rem = function (sel) { runInFence(function () { coll.remove(sel); }); };\n    var upd = function (sel, mod, opt) {\n      runInFence(function () {\n        coll.update(sel, mod, opt);\n      });\n    };\n    // tests '_id' subfields for all documents in oplog buffer\n    var testOplogBufferIds = function (ids) {\n      if (!usesOplog)\n        return;\n      var bufferIds = [];\n      o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n        bufferIds.push(id);\n      });\n\n      test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n    };\n    var testSafeAppendToBufferFlag = function (expected) {\n      if (!usesOplog)\n        return;\n      test.equal(o.handle._multiplexer._observeDriver._safeAppendToBuffer,\n                 expected);\n    };\n\n    // We'll describe our state as follows.  5:1 means \"the document with\n    // _id=docId1 and bar=5\".  We list documents as\n    //   [ currently published | in the buffer ] outside the buffer\n    // If safeToAppendToBuffer is true, we'll say ]! instead.\n\n    // Insert a doc and start observing.\n    var docId1 = ins({foo: 22, bar: 5});\n    waitUntilOplogCaughtUp();\n\n    // State: [ 5:1 | ]!\n    var o = observer();\n    var usesOplog = o.handle._multiplexer._observeDriver._usesOplog;\n    // Initial add.\n    test.length(o.output, 1);\n    test.equal(o.output.shift(), {added: docId1});\n    testSafeAppendToBufferFlag(true);\n\n    // Insert another doc (blocking until observes have fired).\n    // State: [ 5:1 6:2 | ]!\n    var docId2 = ins({foo: 22, bar: 6});\n    // Observed add.\n    test.length(o.output, 1);\n    test.equal(o.output.shift(), {added: docId2});\n    testSafeAppendToBufferFlag(true);\n\n    var docId3 = ins({ foo: 22, bar: 3 });\n    // State: [ 3:3 5:1 6:2 | ]!\n    test.length(o.output, 1);\n    test.equal(o.output.shift(), {added: docId3});\n    testSafeAppendToBufferFlag(true);\n\n    // Add a non-matching document\n    ins({ foo: 13 });\n    // It shouldn't be added\n    test.length(o.output, 0);\n\n    // Add something that matches but is too big to fit in\n    var docId4 = ins({ foo: 22, bar: 7 });\n    // State: [ 3:3 5:1 6:2 | 7:4 ]!\n    // It shouldn't be added but should end up in the buffer.\n    test.length(o.output, 0);\n    testOplogBufferIds([docId4]);\n    testSafeAppendToBufferFlag(true);\n\n    // Let's add something small enough to fit in\n    var docId5 = ins({ foo: 22, bar: -1 });\n    // State: [ -1:5 3:3 5:1 | 6:2 7:4 ]!\n    // We should get an added and a removed events\n    test.length(o.output, 2);\n    // doc 2 was removed from the published set as it is too big to be in\n    test.isTrue(setsEqual(o.output, [{added: docId5}, {removed: docId2}]));\n    clearOutput(o);\n    testOplogBufferIds([docId2, docId4]);\n    testSafeAppendToBufferFlag(true);\n\n    // Now remove something and that doc 2 should be right back\n    rem(docId5);\n    // State: [ 3:3 5:1 6:2 | 7:4 ]!\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId5}, {added: docId2}]));\n    clearOutput(o);\n    testOplogBufferIds([docId4]);\n    testSafeAppendToBufferFlag(true);\n\n    // Add some negative numbers overflowing the buffer.\n    // New documents will take the published place, [3 5 6] will take the buffer\n    // and 7 will be outside of the buffer in MongoDB.\n    var docId6 = ins({ foo: 22, bar: -1 });\n    var docId7 = ins({ foo: 22, bar: -2 });\n    var docId8 = ins({ foo: 22, bar: -3 });\n    // State: [ -3:8 -2:7 -1:6 | 3:3 5:1 6:2 ] 7:4\n    test.length(o.output, 6);\n    var expected = [{added: docId6}, {removed: docId2},\n                    {added: docId7}, {removed: docId1},\n                    {added: docId8}, {removed: docId3}];\n    test.isTrue(setsEqual(o.output, expected));\n    clearOutput(o);\n    testOplogBufferIds([docId1, docId2, docId3]);\n    testSafeAppendToBufferFlag(false);\n\n    // If we update first 3 docs (increment them by 20), it would be\n    // interesting.\n    upd({ bar: { $lt: 0 }}, { $inc: { bar: 20 } }, { multi: true });\n    // State: [ 3:3 5:1 6:2 | ] 7:4 17:8 18:7 19:6\n    //   which triggers re-poll leaving us at\n    // State: [ 3:3 5:1 6:2 | 7:4 17:8 18:7 ] 19:6\n\n    // The updated documents can't find their place in published and they can't\n    // be buffered as we are not aware of the situation outside of the buffer.\n    // But since our buffer becomes empty, it will be refilled partially with\n    // updated documents.\n    test.length(o.output, 6);\n    var expectedRemoves = [{removed: docId6},\n                           {removed: docId7},\n                           {removed: docId8}];\n    var expectedAdds = [{added: docId3},\n                        {added: docId1},\n                        {added: docId2}];\n\n    test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n    clearOutput(o);\n    testOplogBufferIds([docId4, docId7, docId8]);\n    testSafeAppendToBufferFlag(false);\n\n    // Remove first 4 docs (3, 1, 2, 4) forcing buffer to become empty and\n    // schedule a repoll.\n    rem({ bar: { $lt: 10 } });\n    // State: [ 17:8 18:7 19:6 | ]!\n\n    // XXX the oplog code analyzes the events one by one: one remove after\n    // another. Poll-n-diff code, on the other side, analyzes the batch action\n    // of multiple remove. Because of that difference, expected outputs differ.\n    if (usesOplog) {\n      expectedRemoves = [{removed: docId3}, {removed: docId1},\n                             {removed: docId2}, {removed: docId4}];\n      expectedAdds = [{added: docId4}, {added: docId8},\n                          {added: docId7}, {added: docId6}];\n\n      test.length(o.output, 8);\n    } else {\n      expectedRemoves = [{removed: docId3}, {removed: docId1},\n                             {removed: docId2}];\n      expectedAdds = [{added: docId8}, {added: docId7}, {added: docId6}];\n\n      test.length(o.output, 6);\n    }\n\n    test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n    clearOutput(o);\n    testOplogBufferIds([]);\n    testSafeAppendToBufferFlag(true);\n\n    var docId9 = ins({ foo: 22, bar: 21 });\n    var docId10 = ins({ foo: 22, bar: 31 });\n    var docId11 = ins({ foo: 22, bar: 41 });\n    var docId12 = ins({ foo: 22, bar: 51 });\n    // State: [ 17:8 18:7 19:6 | 21:9 31:10 41:11 ] 51:12\n\n    testOplogBufferIds([docId9, docId10, docId11]);\n    testSafeAppendToBufferFlag(false);\n    test.length(o.output, 0);\n    upd({ bar: { $lt: 20 } }, { $inc: { bar: 5 } }, { multi: true });\n    // State: [ 21:9 22:8 23:7 | 24:6 31:10 41:11 ] 51:12\n    test.length(o.output, 4);\n    test.isTrue(setsEqual(o.output, [{removed: docId6},\n                                     {added: docId9},\n                                     {changed: docId7},\n                                     {changed: docId8}]));\n    clearOutput(o);\n    testOplogBufferIds([docId6, docId10, docId11]);\n    testSafeAppendToBufferFlag(false);\n\n    rem(docId9);\n    // State: [ 22:8 23:7 24:6 | 31:10 41:11 ] 51:12\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId9}, {added: docId6}]));\n    clearOutput(o);\n    testOplogBufferIds([docId10, docId11]);\n    testSafeAppendToBufferFlag(false);\n\n    upd({ bar: { $gt: 25 } }, { $inc: { bar: -7.5 } }, { multi: true });\n    // State: [ 22:8 23:7 23.5:10 | 24:6 ] 33.5:11 43.5:12\n    // 33.5 doesn't update in-place in buffer, because it the driver is not sure\n    // it can do it: because the buffer does not have the safe append flag set,\n    // for all it knows there is a different doc which is less than 33.5.\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId6}, {added: docId10}]));\n    clearOutput(o);\n    testOplogBufferIds([docId6]);\n    testSafeAppendToBufferFlag(false);\n\n    // Force buffer objects to be moved into published set so we can check them\n    rem(docId7);\n    rem(docId8);\n    rem(docId10);\n    // State: [ 24:6 | ] 33.5:11 43.5:12\n    //    triggers repoll\n    // State: [ 24:6 33.5:11 43.5:12 | ]!\n    test.length(o.output, 6);\n    test.isTrue(setsEqual(o.output, [{removed: docId7}, {removed: docId8},\n                                     {removed: docId10}, {added: docId6},\n                                     {added: docId11}, {added: docId12}]));\n\n    test.length(_.keys(o.state), 3);\n    test.equal(o.state[docId6], { _id: docId6, foo: 22, bar: 24 });\n    test.equal(o.state[docId11], { _id: docId11, foo: 22, bar: 33.5 });\n    test.equal(o.state[docId12], { _id: docId12, foo: 22, bar: 43.5 });\n    clearOutput(o);\n    testOplogBufferIds([]);\n    testSafeAppendToBufferFlag(true);\n\n    var docId13 = ins({ foo: 22, bar: 50 });\n    var docId14 = ins({ foo: 22, bar: 51 });\n    var docId15 = ins({ foo: 22, bar: 52 });\n    var docId16 = ins({ foo: 22, bar: 53 });\n    // State: [ 24:6 33.5:11 43.5:12 | 50:13 51:14 52:15 ] 53:16\n    test.length(o.output, 0);\n    testOplogBufferIds([docId13, docId14, docId15]);\n    testSafeAppendToBufferFlag(false);\n\n    // Update something that's outside the buffer to be in the buffer, writing\n    // only to the sort key.\n    upd(docId16, {$set: {bar: 10}});\n    // State: [ 10:16 24:6 33.5:11 | 43.5:12 50:13 51:14 ] 52:15\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId12}, {added: docId16}]));\n    clearOutput(o);\n    testOplogBufferIds([docId12, docId13, docId14]);\n    testSafeAppendToBufferFlag(false);\n\n    o.handle.stop();\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, sort fields \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeLimit-\"+run, collectionOptions);\n\n    var observer = function () {\n      var state = {};\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        added: function (newDoc) {\n          output.push({added: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        removed: function (oldDoc) {\n          output.push({removed: oldDoc._id});\n          delete state[oldDoc._id];\n        }\n      };\n      var handle = coll.find({}, {sort: {x: 1},\n                                  limit: 2,\n                                  fields: {y: 1}}).observe(callbacks);\n\n      return {output: output, handle: handle, state: state};\n    };\n    var clearOutput = function (o) { o.output.splice(0, o.output.length); };\n    var ins = function (doc) {\n      var id; runInFence(function () { id = coll.insert(doc); });\n      return id;\n    };\n    var rem = function (id) {\n      runInFence(function () { coll.remove(id); });\n    };\n\n    var o = observer();\n\n    var docId1 = ins({ x: 1, y: 1222 });\n    var docId2 = ins({ x: 5, y: 5222 });\n\n    test.length(o.output, 2);\n    test.equal(o.output, [{added: docId1}, {added: docId2}]);\n    clearOutput(o);\n\n    var docId3 = ins({ x: 7, y: 7222 });\n    test.length(o.output, 0);\n\n    var docId4 = ins({ x: -1, y: -1222 });\n\n    // Becomes [docId4 docId1 | docId2 docId3]\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{added: docId4}, {removed: docId2}]));\n\n    test.equal(_.size(o.state), 2);\n    test.equal(o.state[docId4], {_id: docId4, y: -1222});\n    test.equal(o.state[docId1], {_id: docId1, y: 1222});\n    clearOutput(o);\n\n    rem(docId2);\n    // Becomes [docId4 docId1 | docId3]\n    test.length(o.output, 0);\n\n    rem(docId4);\n    // Becomes [docId1 docId3]\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{added: docId3}, {removed: docId4}]));\n\n    test.equal(_.size(o.state), 2);\n    test.equal(o.state[docId3], {_id: docId3, y: 7222});\n    test.equal(o.state[docId1], {_id: docId1, y: 1222});\n    clearOutput(o);\n\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, big initial set\" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeLimit-\"+run, collectionOptions);\n\n    var observer = function () {\n      var state = {};\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        added: function (newDoc) {\n          output.push({added: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        removed: function (oldDoc) {\n          output.push({removed: oldDoc._id});\n          delete state[oldDoc._id];\n        }\n      };\n      var handle = coll.find({}, {sort: {x: 1, y: 1}, limit: 3})\n                    .observe(callbacks);\n\n      return {output: output, handle: handle, state: state};\n    };\n    var clearOutput = function (o) { o.output.splice(0, o.output.length); };\n    var ins = function (doc) {\n      var id; runInFence(function () { id = coll.insert(doc); });\n      return id;\n    };\n    var rem = function (id) {\n      runInFence(function () { coll.remove(id); });\n    };\n    // tests '_id' subfields for all documents in oplog buffer\n    var testOplogBufferIds = function (ids) {\n      var bufferIds = [];\n      o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n        bufferIds.push(id);\n      });\n\n      test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n    };\n    var testSafeAppendToBufferFlag = function (expected) {\n      if (expected) {\n        test.isTrue(o.handle._multiplexer._observeDriver._safeAppendToBuffer);\n      } else {\n        test.isFalse(o.handle._multiplexer._observeDriver._safeAppendToBuffer);\n      }\n    };\n\n    var ids = {};\n    _.each([2, 4, 1, 3, 5, 5, 9, 1, 3, 2, 5], function (x, i) {\n      ids[i] = ins({ x: x, y: i });\n    });\n\n    // Ensure that we are past all the 'i' entries before we run the query, so\n    // that we get the expected phase transitions.\n    waitUntilOplogCaughtUp();\n\n    var o = observer();\n    var usesOplog = o.handle._multiplexer._observeDriver._usesOplog;\n    //  x: [1 1 2 | 2 3 3] 4 5 5 5  9\n    // id: [2 7 0 | 9 3 8] 1 4 5 10 6\n\n    test.length(o.output, 3);\n    test.isTrue(setsEqual([{added: ids[2]}, {added: ids[7]}, {added: ids[0]}], o.output));\n    usesOplog && testOplogBufferIds([ids[9], ids[3], ids[8]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem(ids[0]);\n    //  x: [1 1 2 | 3 3] 4 5 5 5  9\n    // id: [2 7 9 | 3 8] 1 4 5 10 6\n    test.length(o.output, 2);\n    test.isTrue(setsEqual([{removed: ids[0]}, {added: ids[9]}], o.output));\n    usesOplog && testOplogBufferIds([ids[3], ids[8]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem(ids[7]);\n    //  x: [1 2 3 | 3] 4 5 5 5  9\n    // id: [2 9 3 | 8] 1 4 5 10 6\n    test.length(o.output, 2);\n    test.isTrue(setsEqual([{removed: ids[7]}, {added: ids[3]}], o.output));\n    usesOplog && testOplogBufferIds([ids[8]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem(ids[3]);\n    //  x: [1 2 3 | 4 5 5] 5  9\n    // id: [2 9 8 | 1 4 5] 10 6\n    test.length(o.output, 2);\n    test.isTrue(setsEqual([{removed: ids[3]}, {added: ids[8]}], o.output));\n    usesOplog && testOplogBufferIds([ids[1], ids[4], ids[5]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem({ x: {$lt: 4} });\n    //  x: [4 5 5 | 5  9]\n    // id: [1 4 5 | 10 6]\n    test.length(o.output, 6);\n    test.isTrue(setsEqual([{removed: ids[2]}, {removed: ids[9]}, {removed: ids[8]},\n                           {added: ids[5]}, {added: ids[4]}, {added: ids[1]}], o.output));\n    usesOplog && testOplogBufferIds([ids[10], ids[6]]);\n    usesOplog && testSafeAppendToBufferFlag(true);\n    clearOutput(o);\n\n\n    onComplete();\n  });\n}\n\n\ntestAsyncMulti('mongo-livedata - empty documents, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n\n    coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n    }));\n  }\n]);\n\n// Regression test for #2413.\ntestAsyncMulti('mongo-livedata - upsert without callback, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n\n    // No callback!  Before fixing #2413, this method never returned and\n    // so no future DDP methods worked either.\n    coll.upsert('foo', {bar: 1});\n    // Do something else on the same method and expect it to actually work.\n    // (If the bug comes back, this will 'async batch timeout'.)\n    coll.insert({}, expect(function(){}));\n  }\n]);\n\n// Regression test for https://github.com/meteor/meteor/issues/8666.\ntestAsyncMulti('mongo-livedata - upsert with an undefined selector, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var testWidget = {\n      name: 'Widget name'\n    };\n    coll.upsert(testWidget._id, testWidget, expect(function (error, insertDetails) {\n      test.isFalse(error);\n      test.equal(\n        coll.findOne(insertDetails.insertedId),\n        Object.assign({ _id: insertDetails.insertedId }, testWidget)\n      );\n    }));\n  }\n]);\n\n// See https://github.com/meteor/meteor/issues/594.\ntestAsyncMulti('mongo-livedata - document with length, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    var coll = self.coll = new Mongo.Collection(self.collectionName, collectionOptions);\n\n    coll.insert({foo: 'x', length: 0}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.docId = id;\n      test.equal(coll.findOne(self.docId),\n                 {_id: self.docId, foo: 'x', length: 0});\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    var coll = self.coll;\n    coll.update(self.docId, {$set: {length: 5}}, expect(function (err) {\n      test.isFalse(err);\n      test.equal(coll.findOne(self.docId),\n                 {_id: self.docId, foo: 'x', length: 5});\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - document with a date, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({d: new Date(1356152390004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      test.equal(coll.findOne().d.getFullYear(), 2012);\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - document goes through a transform, ' + idGeneration, [\n  function (test, expect) {\n    var self = this;\n    var seconds = function (doc) {\n      doc.seconds = function () {return doc.d.getSeconds();};\n      return doc;\n    };\n    TRANSFORMS[\"seconds\"] = seconds;\n    self.collectionOptions = {\n      idGeneration: idGeneration,\n      transform: seconds,\n      transformName: \"seconds\"\n    };\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(self.collectionName, self.collectionOptions);\n    var obs;\n    var expectAdd = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n    });\n    var expectRemove = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n      obs.stop();\n    });\n    self.coll.insert({d: new Date(1356152390004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = self.coll.find();\n      obs = cursor.observe({\n        added: expectAdd,\n        removed: expectRemove\n      });\n      test.equal(cursor.count(), 1);\n      test.equal(cursor.fetch()[0].seconds(), 50);\n      test.equal(self.coll.findOne().seconds(), 50);\n      test.equal(self.coll.findOne({}, {transform: null}).seconds, undefined);\n      test.equal(self.coll.findOne({}, {\n        transform: function (doc) {return {seconds: doc.d.getSeconds()};}\n      }).seconds, 50);\n      self.coll.remove(id);\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    self.coll.insert({d: new Date(1356152390004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id1 = id;\n    }));\n    self.coll.insert({d: new Date(1356152391004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id2 = id;\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - transform sets _id if not present, ' + idGeneration, [\n  function (test, expect) {\n    var self = this;\n    var justId = function (doc) {\n      return _.omit(doc, '_id');\n    };\n    TRANSFORMS[\"justId\"] = justId;\n    var collectionOptions = {\n      idGeneration: idGeneration,\n      transform: justId,\n      transformName: \"justId\"\n    };\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    self.coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      test.equal(self.coll.findOne()._id, id);\n    }));\n  }\n]);\n\nvar bin = Base64.decode(\n  \"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyBy\" +\n    \"ZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJv\" +\n    \"bSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhl\" +\n    \"IG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdo\" +\n    \"dCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdl\" +\n    \"bmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9y\" +\n    \"dCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=\");\n\ntestAsyncMulti('mongo-livedata - document with binary data, ' + idGeneration, [\n  function (test, expect) {\n    // XXX probably shouldn't use EJSON's private test symbols\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({b: bin}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = coll.findOne();\n      test.isTrue(EJSON.isBinary(inColl.b));\n      test.equal(inColl.b, bin);\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - document with a custom type, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  },\n\n  function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    // Dog is implemented at the top of the file, outside of the idGeneration\n    // loop (so that we only call EJSON.addType once).\n    var d = new Dog(\"reginald\", null);\n    self.coll.insert({d: d}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      self.docId = docId;\n      var cursor = self.coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = self.coll.findOne();\n      test.isTrue(inColl);\n      inColl && test.equal(inColl.d.speak(), \"woof\");\n      inColl && test.isNull(inColl.d.color);\n    }));\n  },\n\n  function (test, expect) {\n    var self = this;\n    self.coll.insert(new Dog(\"rover\", \"orange\"), expect(function (err, id) {\n      test.isTrue(err);\n      test.isFalse(id);\n    }));\n  },\n\n  function (test, expect) {\n    var self = this;\n    self.coll.update(\n      self.docId, new Dog(\"rover\", \"orange\"), expect(function (err) {\n        test.isTrue(err);\n      }));\n  }\n]);\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"mongo-livedata - update return values, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_update_result_\"+run, collectionOptions);\n\n    coll.insert({ foo: \"bar\" });\n    coll.insert({ foo: \"baz\" });\n    test.equal(coll.update({}, { $set: { foo: \"qux\" } }, { multi: true }),\n               2);\n    coll.update({}, { $set: { foo: \"quux\" } }, { multi: true }, function (err, result) {\n      test.isFalse(err);\n      test.equal(result, 2);\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - remove return values, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_update_result_\"+run, collectionOptions);\n\n    coll.insert({ foo: \"bar\" });\n    coll.insert({ foo: \"baz\" });\n    test.equal(coll.remove({}), 2);\n    coll.insert({ foo: \"bar\" });\n    coll.insert({ foo: \"baz\" });\n    coll.remove({}, function (err, result) {\n      test.isFalse(err);\n      test.equal(result, 2);\n      onComplete();\n    });\n  });\n\n\n  Tinytest.addAsync(\"mongo-livedata - id-based invalidation, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_invalidation_collection_\"+run, collectionOptions);\n\n    coll.allow({\n      update: function () {return true;},\n      remove: function () {return true;}\n    });\n\n    var id1 = coll.insert({x: 42, is1: true});\n    var id2 = coll.insert({x: 50, is2: true});\n\n    var polls = {};\n    var handlesToStop = [];\n    var observe = function (name, query) {\n      var handle = coll.find(query).observeChanges({\n        // Make sure that we only poll on invalidation, not due to time, and\n        // keep track of when we do. Note: this option disables the use of\n        // oplogs (which admittedly is somewhat irrelevant to this feature).\n        _testOnlyPollCallback: function () {\n          polls[name] = (name in polls ? polls[name] + 1 : 1);\n        }\n      });\n      handlesToStop.push(handle);\n    };\n\n    observe(\"all\", {});\n    observe(\"id1Direct\", id1);\n    observe(\"id1InQuery\", {_id: id1, z: null});\n    observe(\"id2Direct\", id2);\n    observe(\"id2InQuery\", {_id: id2, z: null});\n    observe(\"bothIds\", {_id: {$in: [id1, id2]}});\n\n    var resetPollsAndRunInFence = function (f) {\n      polls = {};\n      runInFence(f);\n    };\n\n    // Update id1 directly. This should poll all but the \"id2\" queries. \"all\"\n    // and \"bothIds\" increment by 2 because they are looking at both.\n    resetPollsAndRunInFence(function () {\n      coll.update(id1, {$inc: {x: 1}});\n    });\n    test.equal(\n      polls,\n      {all: 1, id1Direct: 1, id1InQuery: 1, bothIds: 1});\n\n    // Update id2 using a funny query. This should poll all but the \"id1\"\n    // queries.\n    resetPollsAndRunInFence(function () {\n      coll.update({_id: id2, q: null}, {$inc: {x: 1}});\n    });\n    test.equal(\n      polls,\n      {all: 1, id2Direct: 1, id2InQuery: 1, bothIds: 1});\n\n    // Update both using a $in query. Should poll each of them exactly once.\n    resetPollsAndRunInFence(function () {\n      coll.update({_id: {$in: [id1, id2]}, q: null}, {$inc: {x: 1}});\n    });\n    test.equal(\n      polls,\n      {all: 1, id1Direct: 1, id1InQuery: 1, id2Direct: 1, id2InQuery: 1,\n       bothIds: 1});\n\n    _.each(handlesToStop, function (h) {h.stop();});\n    onComplete();\n  });\n\n  Tinytest.add(\"mongo-livedata - upsert error parse, \" + idGeneration, function (test) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_upsert_errorparse_collection_\"+run, collectionOptions);\n\n    coll.insert({_id:'foobar', foo: 'bar'});\n    var err;\n    try {\n      coll.update({foo: 'bar'}, {_id: 'cowbar'});\n    } catch (e) {\n      err = e;\n    }\n    test.isTrue(err);\n    test.isTrue(MongoInternals.Connection._isCannotChangeIdError(err));\n\n    try {\n      coll.insert({_id: 'foobar'});\n    } catch (e) {\n      err = e;\n    }\n    test.isTrue(err);\n    // duplicate id error is not same as change id error\n    test.isFalse(MongoInternals.Connection._isCannotChangeIdError(err));\n  });\n\n} // end Meteor.isServer\n\n// This test is duplicated below (with some changes) for async upserts that go\n// over the network.\n_.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n  _.each([true, false], function (useUpdate) {\n    _.each([true, false], function (useDirectCollection) {\n      Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert\" + (minimongo ? \" minimongo\" : \"\") + (useDirectCollection ? \" direct collection \" : \"\") + \", \" + idGeneration, function (test) {\n        var run = test.runId();\n        var options = collectionOptions;\n        // We don't get ids back when we use update() to upsert, or when we are\n        // directly calling MongoConnection.upsert().\n        var skipIds = useUpdate || (! minimongo && useDirectCollection);\n        if (minimongo)\n          options = _.extend({}, collectionOptions, { connection: null });\n        var coll = new Mongo.Collection(\n          \"livedata_upsert_collection_\"+run+\n            (useUpdate ? \"_update_\" : \"\") +\n            (minimongo ? \"_minimongo_\" : \"\") +\n            (useDirectCollection ? \"_direct_\" : \"\") + \"\",\n          options\n        );\n        if (useDirectCollection)\n          coll = coll._collection;\n\n        var result1 = upsert(coll, useUpdate, {foo: 'bar'}, {foo: 'bar'});\n        test.equal(result1.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result1.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: 'bar', _id: result1.insertedId}]);\n\n        var result2 = upsert(coll, useUpdate, {foo: 'bar'}, {foo: 'baz'});\n        test.equal(result2.numberAffected, 1);\n        if (! skipIds)\n          test.isFalse(result2.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: 'baz', _id: result1.insertedId}]);\n\n        coll.remove({});\n\n        // Test values that require transformation to go into Mongo:\n\n        var t1 = new Mongo.ObjectID();\n        var t2 = new Mongo.ObjectID();\n        var result3 = upsert(coll, useUpdate, {foo: t1}, {foo: t1});\n        test.equal(result3.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result3.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: t1, _id: result3.insertedId}]);\n\n        var result4 = upsert(coll, useUpdate, {foo: t1}, {foo: t2});\n        test.equal(result2.numberAffected, 1);\n        if (! skipIds)\n          test.isFalse(result2.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: t2, _id: result3.insertedId}]);\n\n        coll.remove({});\n\n        // Test modification by upsert\n\n        var result5 = upsert(coll, useUpdate, {name: 'David'}, {$set: {foo: 1}});\n        test.equal(result5.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result5.insertedId);\n        var davidId = result5.insertedId;\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 1, _id: davidId}]);\n\n        test.throws(function () {\n          // test that bad modifier fails fast\n          upsert(coll, useUpdate, {name: 'David'}, {$blah: {foo: 2}});\n        });\n\n\n        var result6 = upsert(coll, useUpdate, {name: 'David'}, {$set: {foo: 2}});\n        test.equal(result6.numberAffected, 1);\n        if (! skipIds)\n          test.isFalse(result6.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 2,\n                                                               _id: result5.insertedId}]);\n\n        var emilyId = coll.insert({name: 'Emily', foo: 2});\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 2, _id: davidId},\n                                                              {name: 'Emily', foo: 2, _id: emilyId}]);\n\n        // multi update by upsert\n        var result7 = upsert(coll, useUpdate, {foo: 2},\n                             {$set: {bar: 7},\n                              $setOnInsert: {name: 'Fred', foo: 2}},\n                             {multi: true});\n        test.equal(result7.numberAffected, 2);\n        if (! skipIds)\n          test.isFalse(result7.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 2, bar: 7, _id: davidId},\n                                                              {name: 'Emily', foo: 2, bar: 7, _id: emilyId}]);\n\n        // insert by multi upsert\n        var result8 = upsert(coll, useUpdate, {foo: 3},\n                             {$set: {bar: 7},\n                              $setOnInsert: {name: 'Fred', foo: 2}},\n                             {multi: true});\n        test.equal(result8.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result8.insertedId);\n        var fredId = result8.insertedId;\n        compareResults(test, skipIds, coll.find().fetch(),\n                       [{name: 'David', foo: 2, bar: 7, _id: davidId},\n                        {name: 'Emily', foo: 2, bar: 7, _id: emilyId},\n                        {name: 'Fred', foo: 2, bar: 7, _id: fredId}]);\n\n        // test `insertedId` option\n        var result9 = upsert(coll, useUpdate, {name: 'Steve'},\n                             {name: 'Steve'},\n                             {insertedId: 'steve'});\n        test.equal(result9.numberAffected, 1);\n        if (! skipIds)\n          test.equal(result9.insertedId, 'steve');\n        compareResults(test, skipIds, coll.find().fetch(),\n                       [{name: 'David', foo: 2, bar: 7, _id: davidId},\n                        {name: 'Emily', foo: 2, bar: 7, _id: emilyId},\n                        {name: 'Fred', foo: 2, bar: 7, _id: fredId},\n                        {name: 'Steve', _id: 'steve'}]);\n        test.isTrue(coll.findOne('steve'));\n        test.isFalse(coll.findOne('fred'));\n\n        // Test $ operator in selectors.\n\n        var result10 = upsert(coll, useUpdate,\n                              {$or: [{name: 'David'}, {name: 'Emily'}]},\n                              {$set: {foo: 3}}, {multi: true});\n        test.equal(result10.numberAffected, 2);\n        if (! skipIds)\n          test.isFalse(result10.insertedId);\n        compareResults(test, skipIds,\n                       [coll.findOne({name: 'David'}), coll.findOne({name: 'Emily'})],\n                       [{name: 'David', foo: 3, bar: 7, _id: davidId},\n                        {name: 'Emily', foo: 3, bar: 7, _id: emilyId}]\n                      );\n\n        var result11 = upsert(\n          coll, useUpdate,\n          {\n            name: 'Charlie',\n            $or: [{ foo: 2}, { bar: 7 }]\n          },\n          { $set: { foo: 3 } }\n        );\n        test.equal(result11.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result11.insertedId);\n        var charlieId = result11.insertedId;\n        compareResults(test, skipIds,\n                       coll.find({ name: 'Charlie' }).fetch(),\n                       [{name: 'Charlie', foo: 3, _id: charlieId}]);\n      });\n    });\n  });\n});\n\nvar asyncUpsertTestName = function (useNetwork, useDirectCollection,\n                                    useUpdate, idGeneration) {\n  return \"mongo-livedata - async \" +\n    (useUpdate ? \"update \" : \"\") +\n    \"upsert \" +\n    (useNetwork ? \"over network \" : \"\") +\n    (useDirectCollection ? \", direct collection \" : \"\") +\n    idGeneration;\n};\n\n// This is a duplicate of the test above, with some changes to make it work for\n// callback style. On the client, we test server-backed and in-memory\n// collections, and run the tests for both the Mongo.Collection and the\n// LocalCollection. On the server, we test mongo-backed collections, for both\n// the Mongo.Collection and the MongoConnection.\n//\n// XXX Rewrite with testAsyncMulti, that would simplify things a lot!\n_.each(Meteor.isServer ? [false] : [true, false], function (useNetwork) {\n  _.each(useNetwork ? [false] : [true, false], function (useDirectCollection) {\n    _.each([true, false], function (useUpdate) {\n      Tinytest.addAsync(asyncUpsertTestName(useNetwork, useDirectCollection, useUpdate, idGeneration), function (test, onComplete) {\n        var coll;\n        var run = test.runId();\n        var collName = \"livedata_upsert_collection_\"+run+\n              (useUpdate ? \"_update_\" : \"\") +\n              (useNetwork ? \"_network_\" : \"\") +\n              (useDirectCollection ? \"_direct_\" : \"\");\n\n        var next0 = function () {\n          // Test starts here.\n          upsert(coll, useUpdate, {_id: 'foo'}, {_id: 'foo', foo: 'bar'}, next1);\n        };\n\n        if (useNetwork) {\n          Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n          coll = new Mongo.Collection(collName, collectionOptions);\n          Meteor.subscribe(\"c-\" + collName, next0);\n        } else {\n          var opts = _.clone(collectionOptions);\n          if (Meteor.isClient)\n            opts.connection = null;\n          coll = new Mongo.Collection(collName, opts);\n          if (useDirectCollection)\n            coll = coll._collection;\n        }\n\n        var result1;\n        var next1 = function (err, result) {\n          result1 = result;\n          test.equal(result1.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result1.insertedId);\n            test.equal(result1.insertedId, 'foo');\n          }\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: 'bar', _id: 'foo'}]);\n          upsert(coll, useUpdate, {_id: 'foo'}, {foo: 'baz'}, next2);\n        };\n\n        if (! useNetwork) {\n          next0();\n        }\n\n        var t1, t2, result2;\n        var next2 = function (err, result) {\n          result2 = result;\n          test.equal(result2.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result2.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: 'baz', _id: result1.insertedId}]);\n          coll.remove({_id: 'foo'});\n          compareResults(test, useUpdate, coll.find().fetch(), []);\n\n          // Test values that require transformation to go into Mongo:\n\n          t1 = new Mongo.ObjectID();\n          t2 = new Mongo.ObjectID();\n          upsert(coll, useUpdate, {_id: t1}, {_id: t1, foo: 'bar'}, next3);\n        };\n\n        var result3;\n        var next3 = function (err, result) {\n          result3 = result;\n          test.equal(result3.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result3.insertedId);\n            test.equal(t1, result3.insertedId);\n          }\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: t1, foo: 'bar'}]);\n\n          upsert(coll, useUpdate, {_id: t1}, {foo: t2}, next4);\n        };\n\n        var next4 = function (err, result4) {\n          test.equal(result2.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result2.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: t2, _id: result3.insertedId}]);\n\n          coll.remove({_id: t1});\n\n          // Test modification by upsert\n          upsert(coll, useUpdate, {_id: 'David'}, {$set: {foo: 1}}, next5);\n        };\n\n        var result5;\n        var next5 = function (err, result) {\n          result5 = result;\n          test.equal(result5.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result5.insertedId);\n            test.equal(result5.insertedId, 'David');\n          }\n          var davidId = result5.insertedId;\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: 1, _id: davidId}]);\n\n          if (! Meteor.isClient && useDirectCollection) {\n            // test that bad modifier fails\n            // The stub throws an exception about the invalid modifier, which\n            // livedata logs (so we suppress it).\n            Meteor._suppress_log(1);\n            upsert(coll, useUpdate, {_id: 'David'}, {$blah: {foo: 2}}, function (err) {\n              if (! (Meteor.isClient && useDirectCollection))\n                test.isTrue(err);\n              upsert(coll, useUpdate, {_id: 'David'}, {$set: {foo: 2}}, next6);\n            });\n          } else {\n            // XXX skip this test for now for LocalCollection; the fact that\n            // we're in a nested sequence of callbacks means we're inside a\n            // Meteor.defer, which means the exception just gets\n            // logged. Something should be done about this at some point?  Maybe\n            // LocalCollection callbacks don't really have to be deferred.\n            upsert(coll, useUpdate, {_id: 'David'}, {$set: {foo: 2}}, next6);\n          }\n        };\n\n        var result6;\n        var next6 = function (err, result) {\n          result6 = result;\n          test.equal(result6.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result6.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: 'David', foo: 2}]);\n\n          var emilyId = coll.insert({_id: 'Emily', foo: 2});\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: 'David', foo: 2},\n                                                                {_id: 'Emily', foo: 2}]);\n\n          // multi update by upsert.\n          // We can't actually update multiple documents since we have to do it by\n          // id, but at least make sure the multi flag doesn't mess anything up.\n          upsert(coll, useUpdate, {_id: 'Emily'},\n                 {$set: {bar: 7},\n                  $setOnInsert: {name: 'Fred', foo: 2}},\n                 {multi: true}, next7);\n        };\n\n        var result7;\n        var next7 = function (err, result) {\n          result7 = result;\n          test.equal(result7.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result7.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: 'David', foo: 2},\n                                                                {_id: 'Emily', foo: 2, bar: 7}]);\n\n          // insert by multi upsert\n          upsert(coll, useUpdate, {_id: 'Fred'},\n                 {$set: {bar: 7},\n                  $setOnInsert: {name: 'Fred', foo: 2}},\n                 {multi: true}, next8);\n\n        };\n\n        var result8;\n        var next8 = function (err, result) {\n          result8 = result;\n\n          test.equal(result8.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result8.insertedId);\n            test.equal(result8.insertedId, 'Fred');\n          }\n          var fredId = result8.insertedId;\n          compareResults(test, useUpdate,  coll.find().fetch(),\n                         [{_id: 'David', foo: 2},\n                          {_id: 'Emily', foo: 2, bar: 7},\n                          {name: 'Fred', foo: 2, bar: 7, _id: fredId}]);\n          onComplete();\n        };\n      });\n    });\n  });\n});\n\nif (Meteor.isClient) {\n  Tinytest.addAsync(\"mongo-livedata - async update/remove return values over network \" + idGeneration, function (test, onComplete) {\n    var coll;\n    var run = test.runId();\n    var collName = \"livedata_upsert_collection_\"+run;\n    Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n    coll = new Mongo.Collection(collName, collectionOptions);\n    Meteor.subscribe(\"c-\" + collName, function () {\n      coll.insert({ _id: \"foo\" });\n      coll.insert({ _id: \"bar\" });\n      coll.update({ _id: \"foo\" }, { $set: { foo: 1 } }, { multi: true }, function (err, result) {\n        test.isFalse(err);\n        test.equal(result, 1);\n        coll.update({ _id: \"foo\" }, { _id: \"foo\", foo: 2 }, function (err, result) {\n          test.isFalse(err);\n          test.equal(result, 1);\n          coll.update({ _id: \"baz\" }, { $set: { foo: 1 } }, function (err, result) {\n            test.isFalse(err);\n            test.equal(result, 0);\n            coll.remove({ _id: \"foo\" }, function (err, result) {\n              test.equal(result, 1);\n              coll.remove({ _id: \"baz\" }, function (err, result) {\n                test.equal(result, 0);\n                onComplete();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\n// Runs a method and its stub which do some upserts. The method throws an error\n// if we don't get the right return values.\nif (Meteor.isClient) {\n  _.each([true, false], function (useUpdate) {\n    Tinytest.addAsync(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert in method, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, collectionOptions);\n      var m = {};\n      delete Meteor.connection._methodHandlers[upsertTestMethod];\n      m[upsertTestMethod] = function (run, useUpdate, options) {\n        upsertTestMethodImpl(upsertTestMethodColl, useUpdate, test);\n      };\n      Meteor.methods(m);\n      Meteor.call(upsertTestMethod, run, useUpdate, collectionOptions, function (err, result) {\n        test.isFalse(err);\n        onComplete();\n      });\n    });\n  });\n}\n\n_.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n  _.each([true, false], function (useUpdate) {\n    Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert by id\" + (minimongo ? \" minimongo\" : \"\") + \", \" + idGeneration, function (test) {\n      var run = test.runId();\n      var options = collectionOptions;\n      if (minimongo)\n        options = _.extend({}, collectionOptions, { connection: null });\n      var coll = new Mongo.Collection(\"livedata_upsert_by_id_collection_\"+run, options);\n\n      var ret;\n      ret = upsert(coll, useUpdate, {_id: 'foo'}, {$set: {x: 1}});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.equal(ret.insertedId, 'foo');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{_id: 'foo', x: 1}]);\n\n      ret = upsert(coll, useUpdate, {_id: 'foo'}, {$set: {x: 2}});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.isFalse(ret.insertedId);\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{_id: 'foo', x: 2}]);\n\n      ret = upsert(coll, useUpdate, {_id: 'bar'}, {$set: {x: 1}});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.equal(ret.insertedId, 'bar');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{_id: 'foo', x: 2},\n                      {_id: 'bar', x: 1}]);\n\n      coll.remove({});\n      ret = upsert(coll, useUpdate, {_id: 'traq'}, {x: 1});\n\n      test.equal(ret.numberAffected, 1);\n      var myId = ret.insertedId;\n      if (useUpdate) {\n        myId = coll.findOne()._id;\n      }\n      // Starting with Mongo 2.6, upsert with entire document takes _id from the\n      // query, so the above upsert actually does an insert with _id traq\n      // instead of a random _id.  Whenever we are using our simulated upsert,\n      // we have this behavior (whether running against Mongo 2.4 or 2.6).\n      // https://jira.mongodb.org/browse/SERVER-5289\n      test.equal(myId, 'traq');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'}]);\n\n      // this time, insert as _id 'traz'\n      ret = upsert(coll, useUpdate, {_id: 'traz'}, {_id: 'traz', x: 2});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.equal(ret.insertedId, 'traz');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'},\n                      {x: 2, _id: 'traz'}]);\n\n      // now update _id 'traz'\n      ret = upsert(coll, useUpdate, {_id: 'traz'}, {x: 3});\n      test.equal(ret.numberAffected, 1);\n      test.isFalse(ret.insertedId);\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'},\n                      {x: 3, _id: 'traz'}]);\n\n      // now update, passing _id (which is ok as long as it's the same)\n      ret = upsert(coll, useUpdate, {_id: 'traz'}, {_id: 'traz', x: 4});\n      test.equal(ret.numberAffected, 1);\n      test.isFalse(ret.insertedId);\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'},\n                      {x: 4, _id: 'traz'}]);\n\n    });\n  });\n});\n\n});  // end idGeneration parametrization\n\nTinytest.add('mongo-livedata - rewrite selector', function (test) {\n \n  test.equal(Mongo.Collection._rewriteSelector('foo'),\n             {_id: 'foo'});\n\n\n  var oid = new Mongo.ObjectID();\n  test.equal(Mongo.Collection._rewriteSelector(oid),\n             {_id: oid});\n\n  test.matches(\n    Mongo.Collection._rewriteSelector({ _id: null })._id,\n    /^\\S+$/,\n    'Passing in a falsey selector _id should return a selector with a new '\n    + 'auto-generated _id string'\n  );\n  test.equal(\n    Mongo.Collection._rewriteSelector({ _id: null }, { fallbackId: oid }),\n    { _id: oid },\n    'Passing in a falsey selector _id and a fallback ID should return a '\n    + 'selector with an _id using the fallback ID'\n  );\n});\n\ntestAsyncMulti('mongo-livedata - specified _id', [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var expectError = expect(function (err, result) {\n      test.isTrue(err);\n      var doc = coll.findOne();\n      test.equal(doc.name, \"foo\");\n    });\n    var coll = new Mongo.Collection(this.collectionName);\n    coll.insert({_id: \"foo\", name: \"foo\"}, expect(function (err1, id) {\n      test.equal(id, \"foo\");\n      var doc = coll.findOne();\n      test.equal(doc._id, \"foo\");\n      Meteor._suppress_log(1);\n      coll.insert({_id: \"foo\", name: \"bar\"}, expectError);\n    }));\n  }\n]);\n\n\n// Consistent id generation tests\nfunction collectionInsert (test, expect, coll, index) {\n  var clientSideId = coll.insert({name: \"foo\"}, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction collectionUpsert (test, expect, coll, index) {\n  var upsertId = '123456' + index;\n\n  coll.upsert(upsertId, {$set: {name: \"foo\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction collectionUpsertExisting (test, expect, coll, index) {\n  var clientSideId = coll.insert({name: \"foo\"}, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    // We're not testing sequencing/visibility rules here, so skip this check\n    // test.equal(o.name, 'foo');\n  }));\n\n  coll.upsert(clientSideId, {$set: {name: \"bar\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, clientSideId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(clientSideId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n}\n\nfunction functionCallsInsert (test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, {name: \"foo\"}, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionCallsUpsert (test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"upsertObject\", coll._name, upsertId, {$set:{name: \"foo\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionCallsUpsertExisting (test, expect, coll, index) {\n  var id = coll.insert({name: \"foo\"});\n\n  var o = coll.findOne(id);\n  test.notEqual(null, o);\n  test.equal(o.name, 'foo');\n\n  Meteor.call(\"upsertObject\", coll._name, id, {$set:{name: \"bar\"}}, expect(function (err1, result) {\n    test.equal(result.numberAffected, 1);\n    test.equal(result.insertedId, undefined);\n\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n}\n\nfunction functionCalls3Inserts (test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, {name: \"foo\"}, 3, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    test.equal(ids.length, 3);\n\n    for (var i = 0; i < 3; i++) {\n      var stubId = INSERTED_IDS[coll._name][(3 * index) + i];\n      test.equal(ids[i], stubId);\n\n      var o = coll.findOne(stubId);\n      test.isTrue(_.isObject(o));\n      test.equal(o.name, 'foo');\n    }\n  }));\n}\n\nfunction functionChainInsert (test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"insertObjects\", coll._name, {name: \"foo\"}, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionChain2Insert (test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"insertObjects\", coll._name, {name: \"foo\"}, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\nfunction functionChain2Upsert (test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"upsertObject\", coll._name, upsertId, {$set:{name: \"foo\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n}\n\n_.each( {collectionInsert: collectionInsert,\n         collectionUpsert: collectionUpsert,\n         functionCallsInsert: functionCallsInsert,\n         functionCallsUpsert: functionCallsUpsert,\n         functionCallsUpsertExisting: functionCallsUpsertExisting,\n         functionCalls3Insert: functionCalls3Inserts,\n         functionChainInsert: functionChainInsert,\n         functionChain2Insert: functionChain2Insert,\n         functionChain2Upsert: functionChain2Upsert}, function (fn, name) {\n_.each( [1, 3], function (repetitions) {\n_.each( [1, 3], function (collectionCount) {\n_.each( ['STRING', 'MONGO'], function (idGeneration) {\n\n  testAsyncMulti('mongo-livedata - consistent _id generation ' + name + ', ' + repetitions + ' repetitions on ' + collectionCount + ' collections, idGeneration=' + idGeneration, [ function (test, expect) {\n    var collectionOptions = { idGeneration: idGeneration };\n\n    var cleanups = this.cleanups = [];\n    this.collections = _.times(collectionCount, function () {\n      var collectionName = \"consistentid_\" + Random.id();\n      if (Meteor.isClient) {\n        Meteor.call('createInsecureCollection', collectionName, collectionOptions);\n        Meteor.subscribe('c-' + collectionName, expect());\n        cleanups.push(function (expect) { Meteor.call('dropInsecureCollection', collectionName, expect(function () {})); });\n      }\n\n      var collection = new Mongo.Collection(collectionName, collectionOptions);\n      if (Meteor.isServer) {\n        cleanups.push(function () { collection._dropCollection(); });\n      }\n      COLLECTIONS[collectionName] = collection;\n      return collection;\n    });\n  }, function (test, expect) {\n    // now run the actual test\n    for (var i = 0; i < repetitions; i++) {\n      for (var j = 0; j < collectionCount; j++) {\n        fn(test, expect, this.collections[j], i);\n      }\n    }\n  }, function (test, expect) {\n    // Run any registered cleanup functions (e.g. to drop collections)\n    _.each(this.cleanups, function(cleanup) {\n      cleanup(expect);\n    });\n  }]);\n\n});\n});\n});\n});\n\n\n\ntestAsyncMulti('mongo-livedata - empty string _id', [\n  function (test, expect) {\n    var self = this;\n    self.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', self.collectionName);\n      Meteor.subscribe('c-' + self.collectionName, expect());\n    }\n    self.coll = new Mongo.Collection(self.collectionName);\n    try {\n      self.coll.insert({_id: \"\", f: \"foo\"});\n      test.fail(\"Insert with an empty _id should fail\");\n    } catch (e) {\n      // ok\n    }\n    self.coll.insert({_id: \"realid\", f: \"bar\"}, expect(function (err, res) {\n      test.equal(res, \"realid\");\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    var docs = self.coll.find().fetch();\n    test.equal(docs, [{_id: \"realid\", f: \"bar\"}]);\n  },\n  function (test, expect) {\n    var self = this;\n    if (Meteor.isServer) {\n      self.coll._collection.insert({_id: \"\", f: \"baz\"});\n      test.equal(self.coll.find().fetch().length, 2);\n    }\n  }\n]);\n\n\nif (Meteor.isServer) {\n\n  testAsyncMulti(\"mongo-livedata - minimongo on server to server connection\", [\n    function (test, expect) {\n      var self = this;\n      Meteor._debug(\"connection setup\");\n      self.id = Random.id();\n      var C = self.C = new Mongo.Collection(\"ServerMinimongo_\" + self.id);\n      C.allow({\n        insert: function () {return true;},\n        update: function () {return true;},\n        remove: function () {return true;}\n      });\n      C.insert({a: 0, b: 1});\n      C.insert({a: 0, b: 2});\n      C.insert({a: 1, b: 3});\n      Meteor.publish(self.id, function () {\n        return C.find({a: 0});\n      });\n\n      self.conn = DDP.connect(Meteor.absoluteUrl());\n      pollUntil(expect, function () {\n        return self.conn.status().connected;\n      }, 10000);\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.conn.status().connected) {\n        self.miniC = new Mongo.Collection(\"ServerMinimongo_\" + self.id, {\n          connection: self.conn\n        });\n        var exp = expect(function (err) {\n          test.isFalse(err);\n        });\n        self.conn.subscribe(self.id, {\n          onError: exp,\n          onReady: exp\n        });\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.miniC) {\n        var contents = self.miniC.find().fetch();\n        test.equal(contents.length, 2);\n        test.equal(contents[0].a, 0);\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (!self.miniC)\n        return;\n      self.miniC.insert({a:0, b:3});\n      var contents = self.miniC.find({b:3}).fetch();\n      test.equal(contents.length, 1);\n      test.equal(contents[0].a, 0);\n    }\n  ]);\n\n  testAsyncMulti(\"mongo-livedata - minimongo observe on server\", [\n    function (test, expect) {\n      var self = this;\n      self.id = Random.id();\n      self.C = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id);\n      self.events = [];\n\n      Meteor.publish(self.id, function () {\n        return self.C.find();\n      });\n\n      self.conn = DDP.connect(Meteor.absoluteUrl());\n      pollUntil(expect, function () {\n        return self.conn.status().connected;\n      }, 10000);\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.conn.status().connected) {\n        self.miniC = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id, {\n          connection: self.conn\n        });\n        var exp = expect(function (err) {\n          test.isFalse(err);\n        });\n        self.conn.subscribe(self.id, {\n          onError: exp,\n          onReady: exp\n        });\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.miniC) {\n        self.obs = self.miniC.find().observeChanges({\n          added: function (id, fields) {\n            self.events.push({evt: \"a\", id: id});\n            Meteor._sleepForMs(200);\n            self.events.push({evt: \"b\", id: id});\n            if (! self.two) {\n              self.two = self.C.insert({});\n            }\n          }\n        });\n        self.one = self.C.insert({});\n        pollUntil(expect, function () {\n          return self.events.length === 4;\n        }, 10000);\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.miniC) {\n        test.equal(self.events, [\n          {evt: \"a\", id: self.one},\n          {evt: \"b\", id: self.one},\n          {evt: \"a\", id: self.two},\n          {evt: \"b\", id: self.two}\n        ]);\n      }\n      self.obs && self.obs.stop();\n    }\n  ]);\n}\n\nTinytest.addAsync(\"mongo-livedata - local collections with different connections\", function (test, onComplete) {\n  var cname = Random.id();\n  var cname2 = Random.id();\n  var coll1 = new Mongo.Collection(cname);\n  var doc = { foo: \"bar\" };\n  var coll2 = new Mongo.Collection(cname2, { connection: null });\n  coll2.insert(doc, function (err, id) {\n    test.equal(coll1.find(doc).count(), 0);\n    test.equal(coll2.find(doc).count(), 1);\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/ callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, { connection: null });\n  var doc = { foo: \"bar\" };\n  var docId = coll1.insert(doc, function (err, id) {\n    test.equal(docId, id);\n    test.equal(coll1.findOne(doc)._id, id);\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/o callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, { connection: null });\n  var doc = { foo: \"bar\" };\n  var docId = coll1.insert(doc);\n  test.equal(coll1.findOne(doc)._id, docId);\n  onComplete();\n});\n\ntestAsyncMulti(\"mongo-livedata - update handles $push with $each correctly\", [\n  function (test, expect) {\n    var self = this;\n    var collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', collectionName);\n      Meteor.subscribe('c-' + collectionName, expect());\n    }\n\n    self.collection = new Mongo.Collection(collectionName);\n\n    self.id = self.collection.insert(\n      {name: 'jens', elements: ['X', 'Y']}, expect(function (err, res) {\n        test.isFalse(err);\n        test.equal(self.id, res);\n        }));\n  },\n  function (test, expect) {\n    var self = this;\n    self.collection.update(self.id, {\n      $push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }}}, expect(function (err, res) {\n          test.isFalse(err);\n          test.equal(\n            self.collection.findOne(self.id),\n            {_id: self.id, name: 'jens', elements: ['Y', 'A', 'B', 'C']});\n        }));\n  }\n]);\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - upsert handles $push with $each correctly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    var result = collection.upsert(\n      {name: 'jens'},\n      {$push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }}});\n\n    test.equal(collection.findOne(result.insertedId),\n               {_id: result.insertedId,\n                name: 'jens',\n                elements: ['A', 'B', 'C']});\n\n    var id = collection.insert({name: \"david\", elements: ['X', 'Y']});\n    result = collection.upsert(\n      {name: 'david'},\n      {$push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }}});\n\n    test.equal(collection.findOne(id),\n               {_id: id,\n                name: 'david',\n                elements: ['Y', 'A', 'B', 'C']});\n  });\n\n  Tinytest.add(\"mongo-livedata - upsert handles dotted selectors corrrectly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    var result1 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: {message: \"upsert 1\"}\n    });\n\n    test.equal(collection.findOne(result1.insertedId),{\n      _id: result1.insertedId,\n      subdocument: {a: 1},\n      message: \"upsert 1\"\n    });\n\n    var result2 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: {message: \"upsert 2\"}\n    });\n\n    test.equal(result2, {numberAffected: 1});\n\n    test.equal(collection.findOne(result1.insertedId),{\n      _id: result1.insertedId,\n      subdocument: {a: 1},\n      message: \"upsert 2\"\n    });\n\n    var result3 = collection.upsert({\n      \"subdocument.a.b\": 1,\n      \"subdocument.c\": 2\n    }, {\n      $set: {message: \"upsert3\"}\n    });\n\n    test.equal(collection.findOne(result3.insertedId),{\n      _id: result3.insertedId,\n      subdocument: {a: {b: 1}, c: 2},\n      message: \"upsert3\"\n    });\n\n    var result4 = collection.upsert({\n      \"subdocument.a\": 4\n    }, {\n      $set: {\"subdocument.a\": \"upsert 4\"}\n    });\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: {a: \"upsert 4\"}\n    });\n\n    var result5 = collection.upsert({\n      \"subdocument.a\": \"upsert 4\"\n    }, {\n      $set: {\"subdocument.a\": \"upsert 5\"}\n    });\n\n    test.equal(result5, {numberAffected: 1});\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: {a: \"upsert 5\"}\n    });\n\n    var result6 = collection.upsert({\n      \"subdocument.a\": \"upsert 5\"\n    }, {\n      $set: {\"subdocument\": \"upsert 6\"}\n    });\n\n    test.equal(result6, {numberAffected: 1});\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: \"upsert 6\"\n    });\n\n    var result7 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert7\"\n      }\n    });\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {b: 7, c: \"upsert7\"}\n      }\n    });\n\n    var result8 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert8\"\n      }\n    });\n\n    test.equal(result8, {numberAffected: 1});\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {b: 7, c: \"upsert8\"}\n      }\n    });\n\n    var result9 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.b\": \"upsert9\"\n      }\n    });\n\n    test.equal(result9, {numberAffected: 1});\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {b: \"upsert9\", c: \"upsert8\"}\n      }\n    });\n\n  });\n}\n\n// This is a VERY white-box test.\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - _disableOplog\", function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection(collName);\n  if (MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle) {\n    var observeWithOplog = coll.find({x: 5})\n          .observeChanges({added: function () {}});\n    test.isTrue(observeWithOplog._multiplexer._observeDriver._usesOplog);\n    observeWithOplog.stop();\n  }\n  var observeWithoutOplog = coll.find({x: 6}, {_disableOplog: true})\n        .observeChanges({added: function () {}});\n  test.isFalse(observeWithoutOplog._multiplexer._observeDriver._usesOplog);\n  observeWithoutOplog.stop();\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - include selector fields\", function (test) {\n  var collName = \"includeSelector\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n\n  var docId = coll.insert({a: 1, b: [3, 2], c: 'foo'});\n  test.isTrue(docId);\n\n  // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n  waitUntilOplogCaughtUp();\n\n  var output = [];\n  var handle = coll.find({a: 1, b: 2}, {fields: {c: 1}}).observeChanges({\n    added: function (id, fields) {\n      output.push(['added', id, fields]);\n    },\n    changed: function (id, fields) {\n      output.push(['changed', id, fields]);\n    },\n    removed: function (id) {\n      output.push(['removed', id]);\n    }\n  });\n  // Initially should match the document.\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', docId, {c: 'foo'}]);\n\n  // Update in such a way that, if we only knew about the published field 'c'\n  // and the changed field 'b' (but not the field 'a'), we would think it didn't\n  // match any more.  (This is a regression test for a bug that existed because\n  // we used to not use the shared projection in the initial query.)\n  runInFence(function () {\n    coll.update(docId, {$set: {'b.0': 2, c: 'bar'}});\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), ['changed', docId, {c: 'bar'}]);\n\n  handle.stop();\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - transform\", function (test) {\n  var collName = \"oplogTransform\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n\n  var docId = coll.insert({a: 25, x: {x: 5, y: 9}});\n  test.isTrue(docId);\n\n  // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n  waitUntilOplogCaughtUp();\n\n  var cursor = coll.find({}, {transform: function (doc) {\n    return doc.x;\n  }});\n\n  var changesOutput = [];\n  var changesHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      changesOutput.push(['added', fields]);\n    }\n  });\n  // We should get untransformed fields via observeChanges.\n  test.length(changesOutput, 1);\n  test.equal(changesOutput.shift(), ['added', {a: 25, x: {x: 5, y: 9}}]);\n  changesHandle.stop();\n\n  var transformedOutput = [];\n  var transformedHandle = cursor.observe({\n    added: function (doc) {\n      transformedOutput.push(['added', doc]);\n    }\n  });\n  test.length(transformedOutput, 1);\n  test.equal(transformedOutput.shift(), ['added', {x: 5, y: 9}]);\n  transformedHandle.stop();\n});\n\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - drop collection/db\", function (test) {\n  // This test uses a random database, so it can be dropped without affecting\n  // anything else.\n  var mongodbUri = Npm.require('mongodb-uri');\n  var parsedUri = mongodbUri.parse(process.env.MONGO_URL);\n  parsedUri.database = 'dropDB' + Random.id();\n  var driver = new MongoInternals.RemoteCollectionDriver(\n    mongodbUri.format(parsedUri), {\n      oplogUrl: process.env.MONGO_OPLOG_URL\n    }\n  );\n\n  var collName = \"dropCollection\" + Random.id();\n  var coll = new Mongo.Collection(collName, { _driver: driver });\n\n  var doc1Id = coll.insert({a: 'foo', c: 1});\n  var doc2Id = coll.insert({b: 'bar'});\n  var doc3Id = coll.insert({a: 'foo', c: 2});\n  var tmp;\n\n  var output = [];\n  var handle = coll.find({a: 'foo'}).observeChanges({\n    added: function (id, fields) {\n      output.push(['added', id, fields]);\n    },\n    changed: function (id) {\n      output.push(['changed']);\n    },\n    removed: function (id) {\n      output.push(['removed', id]);\n    }\n  });\n  test.length(output, 2);\n  // make order consistent\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n  test.equal(output.shift(), ['added', doc1Id, {a: 'foo', c: 1}]);\n  test.equal(output.shift(), ['added', doc3Id, {a: 'foo', c: 2}]);\n\n  // Wait until we've processed the insert oplog entry, so that we are in a\n  // steady state (and we don't see the dropped docs because we are FETCHING).\n  waitUntilOplogCaughtUp();\n\n  // Drop the collection. Should remove all docs.\n  runInFence(function () {\n    coll._dropCollection();\n  });\n\n  test.length(output, 2);\n  // make order consistent\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n  test.equal(output.shift(), ['removed', doc1Id]);\n  test.equal(output.shift(), ['removed', doc3Id]);\n\n  // Put something back in.\n  var doc4Id;\n  runInFence(function () {\n    doc4Id = coll.insert({a: 'foo', c: 3});\n  });\n\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', doc4Id, {a: 'foo', c: 3}]);\n\n  // XXX: this was intermittently failing for unknown reasons.\n  // Now drop the database. Should remove all docs again.\n  // runInFence(function () {\n  //   driver.mongo.dropDatabase();\n  // });\n  //\n  // test.length(output, 1);\n  // test.equal(output.shift(), ['removed', doc4Id]);\n\n  handle.stop();\n  driver.mongo.close();\n});\n\nvar TestCustomType = function (head, tail) {\n  // use different field names on the object than in JSON, to ensure we are\n  // actually treating this as an opaque object.\n  this.myHead = head;\n  this.myTail = tail;\n};\n_.extend(TestCustomType.prototype, {\n  clone: function () {\n    return new TestCustomType(this.myHead, this.myTail);\n  },\n  equals: function (other) {\n    return other instanceof TestCustomType\n      && EJSON.equals(this.myHead, other.myHead)\n      && EJSON.equals(this.myTail, other.myTail);\n  },\n  typeName: function () {\n    return 'someCustomType';\n  },\n  toJSONValue: function () {\n    return {head: this.myHead, tail: this.myTail};\n  }\n});\n\nEJSON.addType('someCustomType', function (json) {\n  return new TestCustomType(json.head, json.tail);\n});\n\ntestAsyncMulti(\"mongo-livedata - oplog - update EJSON\", [\n  function (test, expect) {\n    var self = this;\n    var collectionName = \"ejson\" + Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', collectionName);\n      Meteor.subscribe('c-' + collectionName, expect());\n    }\n\n    self.collection = new Mongo.Collection(collectionName);\n    self.date = new Date;\n    self.objId = new Mongo.ObjectID;\n\n    self.id = self.collection.insert(\n      {d: self.date, oi: self.objId,\n       custom: new TestCustomType('a', 'b')},\n      expect(function (err, res) {\n        test.isFalse(err);\n        test.equal(self.id, res);\n      }));\n  },\n  function (test, expect) {\n    var self = this;\n    self.changes = [];\n    self.handle = self.collection.find({}).observeChanges({\n      added: function (id, fields) {\n        self.changes.push(['a', id, fields]);\n      },\n      changed: function (id, fields) {\n        self.changes.push(['c', id, fields]);\n      },\n      removed: function (id) {\n        self.changes.push(['r', id]);\n      }\n    });\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['a', self.id,\n                {d: self.date, oi: self.objId,\n                 custom: new TestCustomType('a', 'b')}]);\n\n    // First, replace the entire custom object.\n    // (runInFence is useful for the server, using expect() is useful for the\n    // client)\n    runInFence(function () {\n      self.collection.update(\n        self.id, {$set: {custom: new TestCustomType('a', 'c')}},\n        expect(function (err) {\n          test.isFalse(err);\n        }));\n    });\n  },\n  function (test, expect) {\n    var self = this;\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['c', self.id, {custom: new TestCustomType('a', 'c')}]);\n\n    // Now, sneakily replace just a piece of it. Meteor won't do this, but\n    // perhaps you are accessing Mongo directly.\n    runInFence(function () {\n      self.collection.update(\n        self.id, {$set: {'custom.EJSON$value.EJSONtail': 'd'}},\n      expect(function (err) {\n        test.isFalse(err);\n      }));\n    });\n  },\n  function (test, expect) {\n    var self = this;\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['c', self.id, {custom: new TestCustomType('a', 'd')}]);\n\n    // Update a date and an ObjectID too.\n    self.date2 = new Date(self.date.valueOf() + 1000);\n    self.objId2 = new Mongo.ObjectID;\n    runInFence(function () {\n      self.collection.update(\n        self.id, {$set: {d: self.date2, oi: self.objId2}},\n      expect(function (err) {\n        test.isFalse(err);\n      }));\n    });\n  },\n  function (test, expect) {\n    var self = this;\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['c', self.id, {d: self.date2, oi: self.objId2}]);\n\n    self.handle.stop();\n  }\n]);\n\n\nvar waitUntilOplogCaughtUp = function () {\n  var oplogHandle =\n        MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n  if (oplogHandle)\n    oplogHandle.waitUntilCaughtUp();\n};\n\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - cursor dedup stop\", function (test) {\n  var coll = new Mongo.Collection(Random.id());\n  _.times(100, function () {\n    coll.insert({foo: 'baz'});\n  });\n  var handler = coll.find({}).observeChanges({\n    added: function (id) {\n      coll.update(id, {$set: {foo: 'bar'}});\n    }\n  });\n  handler.stop();\n  // Previously, this would print\n  //    Exception in queued task: TypeError: Object.keys called on non-object\n  // Unfortunately, this test didn't fail before the bugfix, but it at least\n  // would print the error and no longer does.\n  // See https://github.com/meteor/meteor/issues/2070\n});\n\ntestAsyncMulti(\"mongo-livedata - undefined find options\", [\n  function (test, expect) {\n    var self = this;\n    self.collName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call(\"createInsecureCollection\", self.collName);\n      Meteor.subscribe(\"c-\" + self.collName, expect());\n    }\n  },\n  function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(self.collName);\n    self.doc = { foo: 1, bar: 2, _id: \"foobar\" };\n    self.coll.insert(self.doc, expect(function (err, id) {\n      test.isFalse(err);\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    var result = self.coll.findOne({ foo: 1 }, {\n      fields: undefined,\n      sort: undefined,\n      limit: undefined,\n      skip: undefined\n    });\n    test.equal(result, self.doc);\n  }\n]);\n\n// Regression test for #2274.\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - observe limit bug\", [\n  function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(Random.id());\n    var state = {};\n    var callbacks = {\n      changed: function (newDoc) {\n        state[newDoc._id] = newDoc;\n      },\n      added: function (newDoc) {\n        state[newDoc._id] = newDoc;\n      },\n      removed: function (oldDoc) {\n        delete state[oldDoc._id];\n      }\n    };\n    self.observe = self.coll.find(\n      {}, {limit: 1, sort: {sortField: -1}}).observe(callbacks);\n\n    // Insert some documents.\n    runInFence(function () {\n      self.id0 = self.coll.insert({sortField: 0, toDelete: true});\n      self.id1 = self.coll.insert({sortField: 1, toDelete: true});\n      self.id2 = self.coll.insert({sortField: 2, toDelete: true});\n    });\n    test.equal(_.keys(state), [self.id2]);\n\n    // Mutate the one in the unpublished buffer and the one below the\n    // buffer. Before the fix for #2274, this left the observe state machine in\n    // a broken state where the buffer was empty but it wasn't try to re-fill\n    // it.\n    runInFence(function () {\n      self.coll.update({_id: {$ne: self.id2}},\n                       {$set: {toDelete: false}},\n                       {multi: 1});\n    });\n    test.equal(_.keys(state), [self.id2]);\n\n    // Now remove the one published document. This should slide up id1 from the\n    // buffer, but this didn't work before the #2274 fix.\n    runInFence(function () {\n      self.coll.remove({toDelete: true});\n    });\n    test.equal(_.keys(state), [self.id1]);\n  }\n]);\n\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - update with replace forbidden\", [\n  function (test, expect) {\n    var c = new Mongo.Collection(Random.id());\n\n    var id = c.insert({ foo: \"bar\" });\n\n    c.update(id, { foo2: \"bar2\" });\n    test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n\n    test.throws(function () {\n      c.update(id, { foo3: \"bar3\" }, { _forbidReplace: true });\n    }, \"Replacements are forbidden\");\n    test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n\n    test.throws(function () {\n      c.update(id, { foo3: \"bar3\", $set: { blah: 1 } });\n    }, \"cannot have both modifier and non-modifier fields\");\n    test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n  }\n]);\n\nMeteor.isServer && Tinytest.add(\n  \"mongo-livedata - connection failure throws\",\n  function (test) {\n    test.throws(function () {\n      new MongoInternals.Connection('mongodb://this-does-not-exist.test/asdf');\n    });\n  }\n);\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(MongoInternals.NpmModules.mongodb.version, /^2\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof(MongoInternals.NpmModules.mongodb.module), 'function');\n  test.equal(typeof(MongoInternals.NpmModules.mongodb.module.connect),\n             'function');\n  test.equal(typeof(MongoInternals.NpmModules.mongodb.module.ObjectID),\n             'function');\n\n  var c = new Mongo.Collection(Random.id());\n  var rawCollection = c.rawCollection();\n  test.isTrue(rawCollection);\n  test.isTrue(rawCollection.findAndModify);\n  var rawDb = c.rawDatabase();\n  test.isTrue(rawDb);\n  test.isTrue(rawDb.admin);\n});\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - update/remove don't accept an array as a selector #4804\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    _.times(10, function () {\n      collection.insert({ data: \"Hello\" });\n    });\n\n    test.equal(collection.find().count(), 10);\n\n    // Test several array-related selectors\n    _.each([[], [1, 2, 3], [{}]], function (selector) {\n      test.throws(function () {\n        collection.remove(selector);\n      });\n\n      test.throws(function () {\n        collection.update(selector, {$set: 5});\n      });\n    });\n\n    test.equal(collection.find().count(), 10);\n  });\n}\n\n// This is a regression test for https://github.com/meteor/meteor/issues/4839.\n// Prior to fixing the issue (but after applying\n// https://github.com/meteor/meteor/pull/4694), doing a Mongo write from a\n// timeout that ran after a method body (invoked via the client) would throw an\n// error \"fence has already activated -- too late to add a callback\" and not\n// properly call the Mongo write's callback.  In this test:\n//  - The client invokes a method (fenceOnBeforeFireError1) which\n//    - Starts an observe on a query\n//    - Creates a timeout (which shares a write fence with the method)\n//    - Lets the method return (firing the write fence)\n//  - The timeout runs and does a Mongo write. This write is inside a write\n//    fence (because timeouts preserve the fence, see dcd26415) but the write\n//    fence already fired.\n//  - The Mongo write's callback confirms that there is no error. This was\n//    not the case before fixing the bug!  (Note that the observe was necessary\n//    for the error to occur, because the error was thrown from the observe's\n//    crossbar listener callback).  It puts the confirmation into a Future.\n//  - The client invokes another method which reads the confirmation from\n//    the future. (Well, the invocation happened earlier but the use of the\n//    Future sequences it so that the confirmation only gets read at this point.)\nif (Meteor.isClient) {\n  testAsyncMulti(\"mongo-livedata - fence onBeforeFire error\", [\n    function (test, expect) {\n      var self = this;\n      self.nonce = Random.id();\n      Meteor.call('fenceOnBeforeFireError1', self.nonce, expect(function (err) {\n        test.isFalse(err);\n      }));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call('fenceOnBeforeFireError2', self.nonce, expect(\n        function (err, success) {\n          test.isFalse(err);\n          test.isTrue(success);\n        }\n      ));\n    }\n  ]);\n} else {\n  var fenceOnBeforeFireErrorCollection = new Mongo.Collection(\"FOBFE\");\n  var Future = Npm.require('fibers/future');\n  var futuresByNonce = {};\n  Meteor.methods({\n    fenceOnBeforeFireError1: function (nonce) {\n      futuresByNonce[nonce] = new Future;\n      var observe = fenceOnBeforeFireErrorCollection.find({nonce: nonce})\n            .observeChanges({added: function (){}});\n      Meteor.setTimeout(function () {\n        fenceOnBeforeFireErrorCollection.insert(\n          {nonce: nonce},\n          function (err, result) {\n            var success = !err && result;\n            futuresByNonce[nonce].return(success);\n            observe.stop();\n          }\n        );\n      }, 10);\n    },\n    fenceOnBeforeFireError2: function (nonce) {\n      try {\n        return futuresByNonce[nonce].wait();\n      } finally {\n        delete futuresByNonce[nonce];\n      }\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Tinytest.add('mongo update/upsert - returns nMatched as numberAffected', function (test, onComplete) {\n    var collName = Random.id();\n    var coll = new Mongo.Collection('update_nmatched'+collName);\n\n    coll.insert({animal: 'cat', legs: 4});\n    coll.insert({animal: 'dog', legs: 4});\n    coll.insert({animal: 'echidna', legs: 4});\n    coll.insert({animal: 'platypus', legs: 4});\n    coll.insert({animal: 'starfish', legs: 5});\n\n    var affected = coll.update({legs: 4}, {$set: {category: 'quadruped'}});\n    test.equal(affected, 1);\n\n    //Changes only 3 but matched 4 documents\n    affected = coll.update({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true});\n    test.equal(affected, 4);\n\n    //Again, changes nothing but returns nModified\n    affected = coll.update({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true});\n    test.equal(affected, 4);\n\n    //upsert:true changes nothing, 4 modified\n    affected = coll.update({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true, upsert:true});\n    test.equal(affected, 4);\n\n    //upsert method works as upsert:true\n    var result = coll.upsert({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true});\n    test.equal(result.numberAffected, 4);\n  });\n\n  Tinytest.addAsync('mongo livedata - update/upsert callback returns nMatched as numberAffected', function (test, onComplete) {\n    var collName = Random.id();\n    var coll = new Mongo.Collection('update_nmatched'+collName);\n\n    coll.insert({animal: 'cat', legs: 4});\n    coll.insert({animal: 'dog', legs: 4});\n    coll.insert({animal: 'echidna', legs: 4});\n    coll.insert({animal: 'platypus', legs: 4});\n    coll.insert({animal: 'starfish', legs: 5});\n\n    var test1 = function () {\n      coll.update({legs: 4}, {$set: {category: 'quadruped'}}, function (err, result) {\n        test.equal(result, 1);\n        test2();\n      });\n    };\n\n    var test2 = function () {\n      //Changes only 3 but matched 4 documents\n      coll.update({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true}, function (err, result) {\n        test.equal(result, 4);\n        test3();\n      });\n    };\n\n    var test3 = function () {\n      //Again, changes nothing but returns nModified\n      coll.update({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true}, function (err, result) {\n        test.equal(result, 4);\n        test4();\n      });\n    };\n\n    var test4 = function () {\n      //upsert:true changes nothing, 4 modified\n      coll.update({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true, upsert:true}, function (err, result) {\n        test.equal(result, 4);\n        test5();\n      });\n    };\n\n    var test5 = function () {\n      //upsert method works as upsert:true\n      coll.upsert({legs: 4}, {$set: {category: 'quadruped'}}, {multi: true}, function (err, result) {\n        test.equal(result.numberAffected, 4);\n        onComplete();\n      });\n    };\n\n    test1();\n  });\n}\n"]},"sourceType":"script","hash":"20d2fb0a1e9e93896596d01c2af7623213dea3ec"}
