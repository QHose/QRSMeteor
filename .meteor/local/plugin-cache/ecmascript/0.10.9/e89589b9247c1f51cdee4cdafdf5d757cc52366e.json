{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/mongo/doc_fetcher_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/mongo/doc_fetcher_tests.js","filename":"packages/mongo/doc_fetcher_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/mongo/doc_fetcher_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/doc_fetcher_tests.js"}},"code":"var Fiber = Npm.require('fibers');\n\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [function (test, expect) {\n  var self = this;\n  var collName = \"docfetcher-\" + Random.id();\n  var collection = new Mongo.Collection(collName);\n  var id1 = collection.insert({\n    x: 1\n  });\n  var id2 = collection.insert({\n    y: 2\n  });\n  var fetcher = new MongoTest.DocFetcher(MongoInternals.defaultRemoteCollectionDriver().mongo); // Test basic operation.\n\n  fetcher.fetch(collName, id1, Random.id(), expect(null, {\n    _id: id1,\n    x: 1\n  }));\n  fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n  var fetched = false;\n  var cacheKey = Random.id();\n  var expected = {\n    _id: id2,\n    y: 2\n  };\n  fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n    fetched = true;\n    test.isFalse(e);\n    test.equal(d, expected);\n  })); // The fetcher yields.\n\n  test.isFalse(fetched); // Now ask for another document with the same cache key. Because a fetch for\n  // that cache key is in flight, we will get the other fetch's document, not\n  // this random document.\n\n  fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n    test.isFalse(e);\n    test.equal(d, expected);\n  }));\n}]);","map":{"version":3,"sources":["packages/mongo/doc_fetcher_tests.js"],"names":["Fiber","Npm","require","Future","testAsyncMulti","test","expect","self","collName","Random","id","collection","Mongo","Collection","id1","insert","x","id2","y","fetcher","MongoTest","DocFetcher","MongoInternals","defaultRemoteCollectionDriver","mongo","fetch","_id","fetched","cacheKey","expected","e","d","isFalse","equal"],"mappings":"AAAA,IAAIA,QAAQC,IAAIC,OAAJ,CAAY,QAAZ,CAAZ;;AACA,IAAIC,SAASF,IAAIC,OAAJ,CAAY,eAAZ,CAAb;;AAEAE,eAAe,8BAAf,EAA+C,CAC7C,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACtB,MAAIC,OAAO,IAAX;AACA,MAAIC,WAAW,gBAAgBC,OAAOC,EAAP,EAA/B;AACA,MAAIC,aAAa,IAAIC,MAAMC,UAAV,CAAqBL,QAArB,CAAjB;AACA,MAAIM,MAAMH,WAAWI,MAAX,CAAkB;AAACC,OAAG;AAAJ,GAAlB,CAAV;AACA,MAAIC,MAAMN,WAAWI,MAAX,CAAkB;AAACG,OAAG;AAAJ,GAAlB,CAAV;AAEA,MAAIC,UAAU,IAAIC,UAAUC,UAAd,CACZC,eAAeC,6BAAf,GAA+CC,KADnC,CAAd,CAPsB,CAUtB;;AACAL,UAAQM,KAAR,CAAcjB,QAAd,EAAwBM,GAAxB,EAA6BL,OAAOC,EAAP,EAA7B,EAA0CJ,OAAO,IAAP,EAAa;AAACoB,SAAKZ,GAAN;AAAWE,OAAG;AAAd,GAAb,CAA1C;AACAG,UAAQM,KAAR,CAAcjB,QAAd,EAAwB,cAAxB,EAAwCC,OAAOC,EAAP,EAAxC,EAAqDJ,OAAO,IAAP,EAAa,IAAb,CAArD;AAEA,MAAIqB,UAAU,KAAd;AACA,MAAIC,WAAWnB,OAAOC,EAAP,EAAf;AACA,MAAImB,WAAW;AAACH,SAAKT,GAAN;AAAWC,OAAG;AAAd,GAAf;AACAC,UAAQM,KAAR,CAAcjB,QAAd,EAAwBS,GAAxB,EAA6BW,QAA7B,EAAuCtB,OAAO,UAAUwB,CAAV,EAAaC,CAAb,EAAgB;AAC5DJ,cAAU,IAAV;AACAtB,SAAK2B,OAAL,CAAaF,CAAb;AACAzB,SAAK4B,KAAL,CAAWF,CAAX,EAAcF,QAAd;AACD,GAJsC,CAAvC,EAjBsB,CAsBtB;;AACAxB,OAAK2B,OAAL,CAAaL,OAAb,EAvBsB,CAyBtB;AACA;AACA;;AACAR,UAAQM,KAAR,CAAcjB,QAAd,EAAwBC,OAAOC,EAAP,EAAxB,EAAqCkB,QAArC,EAA+CtB,OAAO,UAAUwB,CAAV,EAAaC,CAAb,EAAgB;AACpE1B,SAAK2B,OAAL,CAAaF,CAAb;AACAzB,SAAK4B,KAAL,CAAWF,CAAX,EAAcF,QAAd;AACD,GAH8C,CAA/C;AAID,CAjC4C,CAA/C","sourcesContent":["var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [\n  function (test, expect) {\n    var self = this;\n    var collName = \"docfetcher-\" + Random.id();\n    var collection = new Mongo.Collection(collName);\n    var id1 = collection.insert({x: 1});\n    var id2 = collection.insert({y: 2});\n\n    var fetcher = new MongoTest.DocFetcher(\n      MongoInternals.defaultRemoteCollectionDriver().mongo);\n\n    // Test basic operation.\n    fetcher.fetch(collName, id1, Random.id(), expect(null, {_id: id1, x: 1}));\n    fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n\n    var fetched = false;\n    var cacheKey = Random.id();\n    var expected = {_id: id2, y: 2};\n    fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n      fetched = true;\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n    // The fetcher yields.\n    test.isFalse(fetched);\n\n    // Now ask for another document with the same cache key. Because a fetch for\n    // that cache key is in flight, we will get the other fetch's document, not\n    // this random document.\n    fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n  }\n]);\n"]},"sourceType":"script","hash":"e89589b9247c1f51cdee4cdafdf5d757cc52366e"}
