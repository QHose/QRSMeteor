{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/minimongo/cursor.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/minimongo/cursor.js","filename":"packages/minimongo/cursor.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/minimongo/cursor.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/cursor.js"}},"code":"module.export({\n  default: () => Cursor\n});\nlet LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  default(v) {\n    LocalCollection = v;\n  }\n\n}, 0);\nlet hasOwn;\nmodule.watch(require(\"./common.js\"), {\n  hasOwn(v) {\n    hasOwn = v;\n  }\n\n}, 1);\n\nclass Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || [], {\n          matcher: this.matcher\n        });\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n    this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.\n\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n\n\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({\n        added: true,\n        removed: true\n      }, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  }\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n\n\n  fetch() {\n    const result = [];\n    this.forEach(doc => {\n      result.push(doc);\n    });\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n\n    let index = 0;\n\n    const objects = this._getRawObjects({\n      ordered: true\n    });\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform) element = this._transform(element);\n          return {\n            value: element\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n\n\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n\n    this._getRawObjects({\n      ordered: true\n    }).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n\n\n  map(callback, thisArg) {\n    const result = [];\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n    return result;\n  } // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n\n\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n\n\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n\n\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher,\n      // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n    let qid; // Non-reactive queries call added[Before] and then never call anything\n    // else.\n\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({\n      ordered,\n      distances: query.distances\n    });\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();\n    } // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n\n\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function ()\n      /* args*/\n      {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle(), {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    } // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n\n\n    this.collection._observeQueue.drain();\n\n    return handle;\n  } // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n\n\n  rewind() {} // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n\n\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency();\n      const notify = dependency.changed.bind(dependency);\n      dependency.depend();\n      const options = {\n        _allow_unordered,\n        _suppress_initial: true\n      };\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(fn => {\n        if (changers[fn]) {\n          options[fn] = notify;\n        }\n      }); // observeChanges will stop() when this computation is invalidated\n\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  } // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n\n\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n\n    const results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value\n\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    } // slow path for arbitrary selector, sort, skip, limit\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n\n\n    let distances;\n\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      } // Override to ensure all docs are matched if ignoring skip & limit\n\n\n      if (!applySkipLimit) {\n        return true;\n      } // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n\n\n      return !this.limit || this.skip || this.sorter || results.length !== this.limit;\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({\n        distances\n      }));\n    } // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n\n\n    if (!applySkipLimit || !this.limit && !this.skip) {\n      return results;\n    }\n\n    return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');\n    }\n\n    if (!this.collection.name) {\n      throw new Error('Can\\'t publish a cursor from a collection without a name.');\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);\n  }\n\n}","map":{"version":3,"sources":["packages/minimongo/cursor.js"],"names":["module","export","default","Cursor","LocalCollection","watch","require","v","hasOwn","constructor","collection","selector","options","sorter","matcher","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","call","_id","undefined","hasGeoQuery","sort","Sorter","skip","limit","fields","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","applySkipLimit","_depend","added","removed","_getRawObjects","ordered","length","fetch","result","forEach","doc","push","Symbol","iterator","addedBefore","changed","movedBefore","index","objects","next","element","value","done","callback","thisArg","i","getTransform","map","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","Error","distances","_IdMap","query","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","fn","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","_map","Object","keys","key","EJSON","clone","handle","assign","ObserveHandle","stop","active","onInvalidate","drain","rewind","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","name","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","distance","getComparator","slice","_publishCursor","subscription","Package","mongo","Mongo","Collection"],"mappings":"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","sourcesContent":["import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(\n          options.sort || [],\n          {matcher: this.matcher}\n        );\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n  rewind() {}\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n"]},"sourceType":"script","hash":"8af97d75fa0eb37e7566a7e1e74cfb3bf4020421"}
