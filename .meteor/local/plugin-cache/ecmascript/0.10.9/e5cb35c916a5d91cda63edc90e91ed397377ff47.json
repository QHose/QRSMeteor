{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/webapp/webapp_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/webapp/webapp_tests.js","filename":"packages/webapp/webapp_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/webapp/webapp_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/webapp/webapp_tests.js"}},"code":"const url = require(\"url\");\n\nconst crypto = require(\"crypto\");\n\nconst http = require(\"http\");\n\nconst streamToString = require(\"stream-to-string\");\n\nconst additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nconst hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nconst additionalScriptPathname = hash.digest('hex') + \".js\"; // Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\n\nconst MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {// nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  const cssResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"css\";\n  });\n\n  const jsResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"js\";\n  });\n\n  let resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"application/javascript; charset=utf-8\");\n});\nTinytest.addAsync(\"webapp - additional static javascript\", function (test) {\n  return Promise.asyncApply(() => {\n    const origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n    const staticFilesOpts = {\n      staticFiles: {},\n      clientDir: \"/\"\n    }; // It's okay to set this global state because we're not going to yield\n    // before settng it back to what it was originally.\n\n    WebAppInternals.setInlineScriptsAllowed(true);\n    {\n      const {\n        stream\n      } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n      const boilerplate = Promise.await(streamToString(stream)); // When inline scripts are allowed, the script should be inlined.\n\n      test.isTrue(boilerplate.indexOf(additionalScript) !== -1); // And the script should not be served as its own separate resource,\n      // meaning that the static file handler should pass on this request.\n\n      const res = new MockResponse();\n      const req = new http.IncomingMessage();\n      req.headers = {};\n      req.method = \"GET\";\n      req.url = \"/\" + additionalScriptPathname;\n      let nextCalled = false;\n      WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res, function () {\n        nextCalled = true;\n      });\n      test.isTrue(nextCalled); // When inline scripts are disallowed, the script body should not be\n      // inlined, and the script should be included in a <script src=\"..\">\n      // tag.\n\n      WebAppInternals.setInlineScriptsAllowed(false);\n    }\n    {\n      const {\n        stream\n      } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n      const boilerplate = Promise.await(streamToString(stream)); // The script contents itself should not be present; the pathname\n      // where the script is served should be.\n\n      test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n      test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1);\n    } // And the static file handler should serve the script at that pathname.\n\n    const res = new MockResponse();\n    const req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res, function () {});\n    const resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n    WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n  });\n}); // Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\n\nTinytest.addAsync(\"webapp - generating boilerplate should not change runtime config\", function (test) {\n  return Promise.asyncApply(() => {\n    // Set a dummy key in the runtime config served in the\n    // boilerplate. Test that the dummy key appears in the boilerplate,\n    // but not in __meteor_runtime_config__ after generating the\n    // boilerplate.\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n    const boilerplate = WebAppInternals.generateBoilerplateInstance(\"web.browser\", [], // empty manifest\n    {\n      runtimeConfigOverrides: {\n        WEBAPP_TEST_KEY: true\n      }\n    });\n    const stream = boilerplate.toHTMLStream();\n    const boilerplateHtml = Promise.await(streamToString(stream));\n    test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n  });\n});\nTinytest.addAsync(\"webapp - WebAppInternals.registerBoilerplateDataCallback\", function (test) {\n  return Promise.asyncApply(() => {\n    const key = \"from webapp_tests.js\";\n    let callCount = 0;\n\n    function callback(request, data, arch) {\n      test.equal(arch, \"web.browser\");\n      test.equal(request.url, \"http://example.com\");\n      test.equal(data.dynamicHead.indexOf(\"so dynamic\"), 0);\n      test.equal(data.body, \"\");\n      data.body = \"<div>oyez</div>\";\n      ++callCount;\n    }\n\n    WebAppInternals.registerBoilerplateDataCallback(key, callback);\n    test.equal(callCount, 0);\n    const req = new http.IncomingMessage();\n    req.url = \"http://example.com\";\n    req.browser = {\n      name: \"headless\"\n    };\n    req.dynamicHead = \"so dynamic\";\n    const {\n      stream\n    } = WebAppInternals.getBoilerplate(req, \"web.browser\");\n    const html = Promise.await(streamToString(stream));\n    test.equal(callCount, 1);\n    test.isTrue(html.indexOf([\"<body>\", \"<div>oyez</div>\"].join(\"\")) >= 0);\n    test.equal( // Make sure this callback doesn't get called again after this test.\n    WebAppInternals.registerBoilerplateDataCallback(key, null), callback);\n  });\n}); // Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\n\nTinytest.add(\"webapp - port should be parsed as int unless it is a named pipe\", function (test) {\n  // Named pipes on Windows Server follow the format:\n  // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n  const namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n  const namedPipeServer = \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n  test.equal(WebAppInternals.parsePort(namedPipe), \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\");\n  test.equal(WebAppInternals.parsePort(namedPipeServer), \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\");\n  test.equal(WebAppInternals.parsePort(8080), 8080);\n  test.equal(WebAppInternals.parsePort(\"8080\"), 8080); // Ensure strangely formatted ports still work for backwards compatibility\n\n  test.equal(WebAppInternals.parsePort(\"8080abc\"), 8080);\n});\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^3\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof WebAppInternals.NpmModules.connect.module, 'function');\n  test.equal(typeof WebAppInternals.NpmModules.connect.module.basicAuth, 'function');\n});","map":{"version":3,"sources":["packages/webapp/webapp_tests.js"],"names":["url","require","crypto","http","streamToString","additionalScript","WebAppInternals","addStaticJs","hash","createHash","update","additionalScriptPathname","digest","MockResponse","buffer","statusCode","prototype","writeHead","setHeader","name","value","write","data","encoding","end","getBody","Tinytest","add","test","cssResource","_","find","keys","staticFiles","type","jsResource","resp","HTTP","get","resolve","Meteor","absoluteUrl","equal","headers","toLowerCase","addAsync","origInlineScriptsAllowed","inlineScriptsAllowed","staticFilesOpts","clientDir","setInlineScriptsAllowed","stream","getBoilerplate","browser","boilerplate","isTrue","indexOf","res","req","IncomingMessage","method","nextCalled","staticFilesMiddleware","resBody","isFalse","__meteor_runtime_config__","WEBAPP_TEST_KEY","generateBoilerplateInstance","runtimeConfigOverrides","toHTMLStream","boilerplateHtml","key","callCount","callback","request","arch","dynamicHead","body","registerBoilerplateDataCallback","html","join","namedPipe","namedPipeServer","parsePort","WEBAPP_TEST_A","WEBAPP_TEST_B","matches","NpmModules","connect","version","module","basicAuth"],"mappings":"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","sourcesContent":["const url = require(\"url\");\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst streamToString = require(\"stream-to-string\");\n\nconst additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nconst hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nconst additionalScriptPathname = hash.digest('hex') + \".js\";\n\n// Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\nconst MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {\n  // nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  const cssResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"css\";\n    }\n  );\n  const jsResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"js\";\n    }\n  );\n\n  let resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"application/javascript; charset=utf-8\");\n});\n\nTinytest.addAsync(\n  \"webapp - additional static javascript\",\n  async function (test) {\n    const origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n\n    const staticFilesOpts = {\n      staticFiles: {},\n      clientDir: \"/\"\n    };\n\n    // It's okay to set this global state because we're not going to yield\n    // before settng it back to what it was originally.\n    WebAppInternals.setInlineScriptsAllowed(true);\n\n    {\n      const { stream } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n\n      const boilerplate = await streamToString(stream);\n\n      // When inline scripts are allowed, the script should be inlined.\n      test.isTrue(boilerplate.indexOf(additionalScript) !== -1);\n\n      // And the script should not be served as its own separate resource,\n      // meaning that the static file handler should pass on this request.\n      const res = new MockResponse();\n      const req = new http.IncomingMessage();\n      req.headers = {};\n      req.method = \"GET\";\n      req.url = \"/\" + additionalScriptPathname;\n      let nextCalled = false;\n      WebAppInternals.staticFilesMiddleware(\n        staticFilesOpts, req, res, function () {\n          nextCalled = true;\n        });\n      test.isTrue(nextCalled);\n\n      // When inline scripts are disallowed, the script body should not be\n      // inlined, and the script should be included in a <script src=\"..\">\n      // tag.\n      WebAppInternals.setInlineScriptsAllowed(false);\n    }\n\n    {\n      const { stream } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n      const boilerplate = await streamToString(stream);\n\n      // The script contents itself should not be present; the pathname\n      // where the script is served should be.\n      test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n      test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1);\n    }\n\n    // And the static file handler should serve the script at that pathname.\n    const res = new MockResponse();\n    const req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res,\n                                          function () { });\n    const resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n\n    WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n  }\n);\n\n// Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\nTinytest.addAsync(\n  \"webapp - generating boilerplate should not change runtime config\",\n  async function (test) {\n    // Set a dummy key in the runtime config served in the\n    // boilerplate. Test that the dummy key appears in the boilerplate,\n    // but not in __meteor_runtime_config__ after generating the\n    // boilerplate.\n\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n    const boilerplate = WebAppInternals.generateBoilerplateInstance(\n      \"web.browser\",\n      [], // empty manifest\n      { runtimeConfigOverrides: { WEBAPP_TEST_KEY: true } }\n    );\n\n    const stream = boilerplate.toHTMLStream();\n    const boilerplateHtml = await streamToString(stream)\n    test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n  }\n);\n\nTinytest.addAsync(\n  \"webapp - WebAppInternals.registerBoilerplateDataCallback\",\n  async function (test) {\n    const key = \"from webapp_tests.js\";\n    let callCount = 0;\n\n    function callback(request, data, arch) {\n      test.equal(arch, \"web.browser\");\n      test.equal(request.url, \"http://example.com\");\n      test.equal(data.dynamicHead.indexOf(\"so dynamic\"), 0);\n      test.equal(data.body, \"\");\n      data.body = \"<div>oyez</div>\";\n      ++callCount;\n    }\n\n    WebAppInternals.registerBoilerplateDataCallback(key, callback);\n\n    test.equal(callCount, 0);\n\n    const req = new http.IncomingMessage();\n    req.url = \"http://example.com\";\n    req.browser = { name: \"headless\" };\n    req.dynamicHead = \"so dynamic\";\n\n    const { stream } = WebAppInternals.getBoilerplate(req, \"web.browser\");\n    const html = await streamToString(stream);\n\n    test.equal(callCount, 1);\n\n    test.isTrue(html.indexOf([\n      \"<body>\",\n      \"<div>oyez</div>\"\n    ].join(\"\")) >= 0);\n\n    test.equal(\n      // Make sure this callback doesn't get called again after this test.\n      WebAppInternals.registerBoilerplateDataCallback(key, null),\n      callback\n    );\n  }\n);\n\n// Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\nTinytest.add(\n  \"webapp - port should be parsed as int unless it is a named pipe\",\n  function (test) {\n    // Named pipes on Windows Server follow the format:\n    // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n    const namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n    const namedPipeServer =\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n\n    test.equal(\n      WebAppInternals.parsePort(namedPipe),\n      \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(namedPipeServer),\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(8080),\n      8080\n    );\n    test.equal(\n      WebAppInternals.parsePort(\"8080\"),\n      8080\n    );\n    // Ensure strangely formatted ports still work for backwards compatibility\n    test.equal(\n      WebAppInternals.parsePort(\"8080abc\"),\n      8080\n    );\n  }\n);\n\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\n\n\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^3\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module.basicAuth),\n             'function');\n});\n"]},"sourceType":"script","hash":"e5cb35c916a5d91cda63edc90e91ed397377ff47"}
