{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"server/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"server/methods.js","filename":"server/methods.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"server/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/methods.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./methods.js\"));\nlet http;\nmodule.watch(require(\"meteor/meteor\"), {\n  http(v) {\n    http = v;\n  }\n\n}, 1);\nlet Apps, TemplateApps, GeneratedResources;\nmodule.watch(require(\"/imports/api/apps\"), {\n  Apps(v) {\n    Apps = v;\n  },\n\n  TemplateApps(v) {\n    TemplateApps = v;\n  },\n\n  GeneratedResources(v) {\n    GeneratedResources = v;\n  }\n\n}, 2);\nlet SenseSelections;\nmodule.watch(require(\"/imports/api/logger\"), {\n  SenseSelections(v) {\n    SenseSelections = v;\n  }\n\n}, 3);\nlet APILogs, REST_Log;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  APILogs(v) {\n    APILogs = v;\n  },\n\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 4);\nlet Streams;\nmodule.watch(require(\"/imports/api/streams\"), {\n  Streams(v) {\n    Streams = v;\n  }\n\n}, 5);\nlet Customers;\nmodule.watch(require(\"/imports/api/customers\"), {\n  Customers(v) {\n    Customers = v;\n  }\n\n}, 6);\nlet QSApp;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsApp\"), {\n  \"*\"(v) {\n    QSApp = v;\n  }\n\n}, 7);\nlet QSStream;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsStream\"), {\n  \"*\"(v) {\n    QSStream = v;\n  }\n\n}, 8);\nlet QSLic;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsLicense\"), {\n  \"*\"(v) {\n    QSLic = v;\n  }\n\n}, 9);\nlet QSProxy;\nmodule.watch(require(\"/imports/api/server/QPSFunctions\"), {\n  \"*\"(v) {\n    QSProxy = v;\n  }\n\n}, 10);\nlet QSSystem;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsSystemRules\"), {\n  \"*\"(v) {\n    QSSystem = v;\n  }\n\n}, 11);\nlet QSExtensions;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsExtension\"), {\n  \"*\"(v) {\n    QSExtensions = v;\n  }\n\n}, 12);\nlet QSCustomProps;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsCustomProperties\"), {\n  \"*\"(v) {\n    QSCustomProps = v;\n  }\n\n}, 13);\nlet senseConfig, authHeaders;\nmodule.watch(require(\"/imports/api/config\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  }\n\n}, 14);\nmodule.watch(require(\"/imports/startup/accounts-config.js\"));\n//stop on unhandled errors\nprocess.on('unhandledRejection', up => {\n  throw up;\n}); //import config for Qlik Sense QRS and Engine API.\n\nconst path = require('path');\n\nvar fs = require('fs-extra');\n\nvar marked = require('marked'); //\n// ─── METEOR METHODS ─────────────────────────────────────────────────────────────\n//\n\n\nvar showdown = require(\"showdown\");\n\nvar converter = new showdown.Converter();\nMeteor.methods({\n  getHTMLFromMarkdownUrl(url) {\n    // console.log('get markdown from the server: '+url)\n    var markdownResult = HTTP.get(url); // var HTMLresult = converter.makeHtml(markdownResult.content);\n\n    var HTMLresult = marked.parse(markdownResult.content);\n    return HTMLresult;\n  },\n\n  getSenseSelectionObject(id) {\n    // console.log('------------------------------------');\n    // console.log('getSenseSelectionObject for id', id)\n    // console.log('------------------------------------');\n    check(id, String);\n    var result = SenseSelections.findOne({\n      _id: id\n    });\n    console.log('result of get selection by id', result);\n    return result;\n  },\n\n  getAppIDs() {\n    return {\n      SSBI: senseConfig.SSBIApp,\n      // QSApp.getApps(Meteor.settings.public.SSBI.name, Meteor.settings.public.SSBI.stream)[0].id,\n      slideGenerator: senseConfig.slideGeneratorAppId //QSApp.getApps(Meteor.settings.public.slideGenerator.name, Meteor.settings.public.slideGenerator.stream)[0].id\n\n    };\n  },\n\n  generateStreamAndApp(customers) {\n    return Promise.asyncApply(() => {\n      try {\n        check(customers, Array);\n      } catch (error) {\n        throw new Meteor.Error('Missing field', 'No customers supplied for the generation of apps.');\n      } // first clean the environment\n\n\n      Meteor.call('removeGeneratedResources', {\n        'generationUserId': Meteor.userId()\n      });\n      Promise.await(QSApp.generateStreamAndApp(customers, this.userId)); //then, create the new stuff\n\n      try {\n        if (!Meteor.settings.broker.qlikSense.multiTenantScenario) {\n          //on premise installation for a single tenant (e.g. with MS Active Directory)\n          var customerNames = customers.map(function (c) {\n            return c.name;\n          });\n          QSCustomProps.upsertCustomPropertyByName('customer', customerNames); //for non OEM scenarios (with MS AD), people like to use custom properties for authorization instead of the groups via a ticket.\n        }\n      } catch (error) {\n        console.log('error to create custom properties', error);\n      }\n\n      Meteor.call('updateLocalSenseCopy');\n    });\n  },\n\n  resetEnvironment() {\n    Meteor.call('resetLoggedInUser'); //logout all users before removing all the current customers. This to prevent the screen stays logged in at an old user.\n\n    Meteor.call('removeGeneratedResources', {\n      'generationUserId': Meteor.userId()\n    });\n    TemplateApps.remove({\n      'generationUserId': Meteor.userId()\n    });\n    Customers.remove({\n      'generationUserId': Meteor.userId()\n    });\n    APILogs.remove({\n      'generationUserId': Meteor.userId()\n    });\n\n    if (!Meteor.settings.broker.qlikSense.multiTenantScenario) {\n      //on premise installation for a single tenant (e.g. with MS Active Directory)\n      QSCustomProps.deleteCustomProperty('customers');\n    }\n  },\n\n  upsertTemplate(selector, currentApp) {\n    console.log('user ' + Meteor.userId() + ' selected a template app: ' + currentApp.name);\n    TemplateApps.upsert(selector, {\n      $set: {\n        name: currentApp.name,\n        id: currentApp.id,\n        generationUserId: Meteor.userId()\n      }\n    });\n  },\n\n  removeTemplate(selector, currentApp) {\n    console.log('remove template');\n    TemplateApps.remove(selector);\n  },\n\n  removeGeneratedResources(generationUserSelection) {\n    //console.log('remove GeneratedResources method, before we make new ones');\n    //logging only\n    if (generationUserSelection) {\n      const call = {};\n      call.action = 'Remove generated resources';\n      call.request = 'Remove all apps and streams in Qlik Sense for userId: ' + generationUserSelection.generationUserId;\n      REST_Log(call, generationUserSelection);\n    }\n\n    GeneratedResources.find(generationUserSelection).forEach(function (resource) {\n      // this.unblock()\n      //console.log('resetEnvironment for userId', Meteor.userId());generationUserSelection.generationUserId\n      //If not selection was given, we want to reset the whole environment, so also delete the streams.\n      // if (!generationUserSelection.generationUserId) {\n      try {\n        Meteor.call('deleteStream', resource.streamId); //added random company names, so this should not be an issue //26-9 can't delete stream, because each user creates a stream with the same name...\n      } catch (err) {} //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n      //don't bother if generated resources do not exists, just continue\n      // }\n      //delete apps always\n\n\n      try {\n        Meteor.call('deleteApp', resource.appId);\n      } catch (err) {//console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n      }\n    });\n    GeneratedResources.remove(generationUserSelection);\n    APILogs.remove(generationUserSelection);\n  },\n\n  copyApp(guid, name) {\n    check(guid, String);\n    check(name, String);\n    const id = QSApp.copyApp(guid, name);\n    Meteor.call('updateLocalSenseCopy');\n    return id;\n  },\n\n  copyAppSelectedCustomers(currentApp) {\n    //the app the user clicked on        \n    if (!currentApp) {\n      throw new Meteor.Error('No App selected to copy');\n    }\n\n    ;\n    customers = Customers.find({\n      'generationUserId': Meteor.userId(),\n      checked: true\n    }); //all selected customers\n\n    if (!customers) {\n      throw new Meteor.Error('No customers selected to copy the app for');\n    }\n\n    ;\n    customers.forEach(customer => {\n      const newAppId = Meteor.call('copyApp', currentApp.id, customer.name + '-' + currentApp.name);\n      Meteor.call('updateLocalSenseCopy'); //store in the database that the user generated something, so we can later on remove it.\n\n      GeneratedResources.insert({\n        'generationUserId': Meteor.userId(),\n        'customer': null,\n        'streamId': null,\n        'appId': newAppId\n      });\n    });\n  },\n\n  deleteApp(guid) {\n    check(guid, String);\n\n    if (guid !== Meteor.settings.public.templateAppId) {\n      //logging only\n      const call = {};\n      call.action = 'Delete app';\n      call.request = 'Delete app: ' + guid;\n      REST_Log(call);\n      const id = QSApp.deleteApp(guid);\n      Meteor.call('updateLocalSenseCopy');\n      return id;\n    } else {\n      throw new Meteor.Error(\"you can't delete the template app with guid: \", guid);\n    }\n  },\n\n  removeAllCustomers: function () {\n    return Customers.remove({\n      'generationUserId': Meteor.userId()\n    });\n  }\n});\nMeteor.methods({\n  updateLocalSenseCopyApps() {\n    //delete the local content of the database before updating it\n    Apps.remove({}); //Update the Apps with fresh info from Sense        \n\n    _.each(QSApp.getApps(), app => {\n      Apps.insert(app);\n    });\n  },\n\n  updateLocalSenseCopyStreams() {\n    //delete the local content of the database before updating it        \n    Streams.remove({}); //Update the Streams with fresh info from Sense        \n\n    _.each(QSStream.getStreams(), stream => {\n      Streams.insert(stream);\n    });\n  },\n\n  updateLocalSenseCopy() {\n    // //console.log('Method: update the local mongoDB with fresh data from Qlik Sense: call QRS API getStreams and getApps');\n    //delete the local content of the database before updating it\n    Apps.remove({});\n    Streams.remove({}); //Update the Apps and Streams with fresh info from Sense        \n\n    _.each(QSApp.getApps(), app => {\n      Apps.insert(app);\n    });\n\n    _.each(QSStream.getStreams(), stream => {\n      Streams.insert(stream);\n    });\n  },\n\n  getSecurityRules() {\n    return QSSystem.getSecurityRules();\n  }\n\n});","map":{"version":3,"sources":["server/methods.js"],"names":["Meteor","module","watch","require","v","http","Apps","TemplateApps","GeneratedResources","SenseSelections","APILogs","REST_Log","Streams","Customers","QSApp","QSStream","QSLic","QSProxy","QSSystem","QSExtensions","QSCustomProps","senseConfig","authHeaders","process","on","up","path","fs","marked","showdown","converter","Converter","methods","getHTMLFromMarkdownUrl","url","markdownResult","HTTP","get","HTMLresult","parse","content","getSenseSelectionObject","id","check","String","result","findOne","_id","console","log","getAppIDs","SSBI","SSBIApp","slideGenerator","slideGeneratorAppId","generateStreamAndApp","customers","Array","error","Error","call","userId","settings","broker","qlikSense","multiTenantScenario","customerNames","map","c","name","upsertCustomPropertyByName","resetEnvironment","remove","deleteCustomProperty","upsertTemplate","selector","currentApp","upsert","$set","generationUserId","removeTemplate","removeGeneratedResources","generationUserSelection","action","request","find","forEach","resource","streamId","err","appId","copyApp","guid","copyAppSelectedCustomers","checked","customer","newAppId","insert","deleteApp","public","templateAppId","removeAllCustomers","updateLocalSenseCopyApps","_","each","getApps","app","updateLocalSenseCopyStreams","getStreams","stream","updateLocalSenseCopy","getSecurityRules"],"mappings":"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","sourcesContent":["import {\n    Meteor\n} from 'meteor/meteor';\nimport './methods.js';\nimport {\n    http\n} from 'meteor/meteor';\nimport {\n    Apps,\n    TemplateApps,\n    GeneratedResources\n} from '/imports/api/apps';\nimport { SenseSelections } from '/imports/api/logger';\nimport {\n    APILogs,\n    REST_Log\n} from '/imports/api/APILogs';\n\n//import meteor collections\nimport {\n    Streams\n} from '/imports/api/streams';\nimport {\n    Customers\n} from '/imports/api/customers';\n\nimport * as QSApp from '/imports/api/server/QRSFunctionsApp';\nimport * as QSStream from '/imports/api/server/QRSFunctionsStream';\nimport * as QSLic from '/imports/api/server/QRSFunctionsLicense';\nimport * as QSProxy from '/imports/api/server/QPSFunctions';\nimport * as QSSystem from '/imports/api/server/QRSFunctionsSystemRules';\nimport * as QSExtensions from '/imports/api/server/QRSFunctionsExtension';\nimport * as QSCustomProps from '/imports/api/server/QRSFunctionsCustomProperties';\n\n//stop on unhandled errors\nprocess.on('unhandledRejection', up => {\n    throw up\n})\n\n//import config for Qlik Sense QRS and Engine API.\nimport {\n    senseConfig,\n    authHeaders\n} from '/imports/api/config';\nimport '/imports/startup/accounts-config.js';\nconst path = require('path');\nvar fs = require('fs-extra');\nvar marked = require('marked');\n\n//\n// ─── METEOR METHODS ─────────────────────────────────────────────────────────────\n//\n\nvar showdown = require(\"showdown\");\nvar converter = new showdown.Converter();\n\nMeteor.methods({\n    getHTMLFromMarkdownUrl(url){\n        // console.log('get markdown from the server: '+url)\n        var markdownResult = HTTP.get(url) \n        // var HTMLresult = converter.makeHtml(markdownResult.content);\n        var HTMLresult = marked.parse(markdownResult.content);\n        return HTMLresult;        \n    },\n    getSenseSelectionObject(id) {\n        // console.log('------------------------------------');\n        // console.log('getSenseSelectionObject for id', id)\n        // console.log('------------------------------------');\n        check(id, String);\n        var result = SenseSelections.findOne({\n            _id: id\n        });\n        console.log('result of get selection by id', result)\n        return result;\n    },\n    getAppIDs() {\n        return {\n            SSBI: senseConfig.SSBIApp, // QSApp.getApps(Meteor.settings.public.SSBI.name, Meteor.settings.public.SSBI.stream)[0].id,\n            slideGenerator: senseConfig.slideGeneratorAppId //QSApp.getApps(Meteor.settings.public.slideGenerator.name, Meteor.settings.public.slideGenerator.stream)[0].id\n        };\n    },\n    async generateStreamAndApp(customers) {\n        try {\n            check(customers, Array);\n        } catch (error) {\n            throw new Meteor.Error('Missing field', 'No customers supplied for the generation of apps.');\n        }\n        // first clean the environment\n        Meteor.call('removeGeneratedResources', {\n            'generationUserId': Meteor.userId()\n        });\n        await QSApp.generateStreamAndApp(customers, this.userId); //then, create the new stuff\n\n        try {\n            if (!Meteor.settings.broker.qlikSense.multiTenantScenario) { //on premise installation for a single tenant (e.g. with MS Active Directory)\n                var customerNames = customers.map(function(c) {\n                    return c.name;\n                });\n                QSCustomProps.upsertCustomPropertyByName('customer', customerNames); //for non OEM scenarios (with MS AD), people like to use custom properties for authorization instead of the groups via a ticket.\n            }\n        } catch (error) {\n            console.log('error to create custom properties', error);\n        }\n\n        Meteor.call('updateLocalSenseCopy');\n    },\n    resetEnvironment() {\n        Meteor.call('resetLoggedInUser'); //logout all users before removing all the current customers. This to prevent the screen stays logged in at an old user.\n        Meteor.call('removeGeneratedResources', {\n            'generationUserId': Meteor.userId()\n        });\n        TemplateApps.remove({\n            'generationUserId': Meteor.userId()\n        });\n        Customers.remove({\n            'generationUserId': Meteor.userId()\n        });\n        APILogs.remove({\n            'generationUserId': Meteor.userId()\n        });\n        if (!Meteor.settings.broker.qlikSense.multiTenantScenario) { //on premise installation for a single tenant (e.g. with MS Active Directory)\n            QSCustomProps.deleteCustomProperty('customers');\n        }\n    },\n    upsertTemplate(selector, currentApp) {\n        console.log('user ' + Meteor.userId() + ' selected a template app: ' + currentApp.name)\n        TemplateApps.upsert(selector, {\n            $set: {\n                name: currentApp.name,\n                id: currentApp.id,\n                generationUserId: Meteor.userId(),\n            },\n        });\n    },\n    removeTemplate(selector, currentApp) {\n        console.log('remove template')\n        TemplateApps.remove(selector);\n    },\n    removeGeneratedResources(generationUserSelection) {\n        //console.log('remove GeneratedResources method, before we make new ones');\n        //logging only\n        if (generationUserSelection) {\n            const call = {};\n            call.action = 'Remove generated resources';\n            call.request = 'Remove all apps and streams in Qlik Sense for userId: ' + generationUserSelection.generationUserId;\n            REST_Log(call, generationUserSelection);\n        }\n        GeneratedResources.find(generationUserSelection)\n            .forEach(function(resource) {\n                // this.unblock()\n                //console.log('resetEnvironment for userId', Meteor.userId());generationUserSelection.generationUserId\n\n                //If not selection was given, we want to reset the whole environment, so also delete the streams.\n                // if (!generationUserSelection.generationUserId) {\n                try {\n                    Meteor.call('deleteStream', resource.streamId); //added random company names, so this should not be an issue //26-9 can't delete stream, because each user creates a stream with the same name...\n                } catch (err) {\n                    //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n                } //don't bother if generated resources do not exists, just continue\n                // }\n                //delete apps always\n                try {\n                    Meteor.call('deleteApp', resource.appId);\n                } catch (err) {\n                    //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n                }\n            })\n        GeneratedResources.remove(generationUserSelection);\n        APILogs.remove(generationUserSelection);\n    },\n    copyApp(guid, name) {\n        check(guid, String);\n        check(name, String);\n        const id = QSApp.copyApp(guid, name);\n        Meteor.call('updateLocalSenseCopy');\n        return id;\n    },\n    copyAppSelectedCustomers(currentApp) { //the app the user clicked on        \n        if (!currentApp) {\n            throw new Meteor.Error('No App selected to copy')\n        };\n\n        customers = Customers.find({\n            'generationUserId': Meteor.userId(),\n            checked: true\n        }); //all selected customers\n        if (!customers) {\n            throw new Meteor.Error('No customers selected to copy the app for')\n        };\n\n        customers\n            .forEach(customer => {\n                const newAppId = Meteor.call('copyApp', currentApp.id, customer.name + '-' + currentApp.name);\n                Meteor.call('updateLocalSenseCopy');\n\n                //store in the database that the user generated something, so we can later on remove it.\n                GeneratedResources.insert({\n                    'generationUserId': Meteor.userId(),\n                    'customer': null,\n                    'streamId': null,\n                    'appId': newAppId\n                });\n            });\n    },\n    deleteApp(guid) {\n        check(guid, String);\n        if (guid !== Meteor.settings.public.templateAppId) {\n            //logging only\n            const call = {};\n            call.action = 'Delete app';\n            call.request = 'Delete app: ' + guid;\n            REST_Log(call);\n\n            const id = QSApp.deleteApp(guid);\n            Meteor.call('updateLocalSenseCopy');\n            return id;\n        } else {\n            throw new Meteor.Error(\"you can't delete the template app with guid: \", guid);\n        }\n    },\n    removeAllCustomers: function() {\n        return Customers.remove({\n            'generationUserId': Meteor.userId()\n        });\n    }\n})\n\nMeteor.methods({\n    updateLocalSenseCopyApps() {\n        //delete the local content of the database before updating it\n        Apps.remove({});\n\n        //Update the Apps with fresh info from Sense        \n        _.each(QSApp.getApps(), app => {\n            Apps.insert(app);\n        });\n    },\n    updateLocalSenseCopyStreams() {\n        //delete the local content of the database before updating it        \n        Streams.remove({});\n\n        //Update the Streams with fresh info from Sense        \n        _.each(QSStream.getStreams(), stream => {\n            Streams.insert(stream);\n        });\n    },\n    updateLocalSenseCopy() {\n        // //console.log('Method: update the local mongoDB with fresh data from Qlik Sense: call QRS API getStreams and getApps');\n        //delete the local content of the database before updating it\n        Apps.remove({});\n        Streams.remove({});\n\n        //Update the Apps and Streams with fresh info from Sense        \n        _.each(QSApp.getApps(), app => {\n            Apps.insert(app);\n        });\n\n        _.each(QSStream.getStreams(), stream => {\n            Streams.insert(stream);\n        });\n    },\n    getSecurityRules() {\n        return QSSystem.getSecurityRules();\n    }\n});"]},"sourceType":"script","hash":"a5a1a213afd11c2482f6c8b5af82e942099eb393"}
