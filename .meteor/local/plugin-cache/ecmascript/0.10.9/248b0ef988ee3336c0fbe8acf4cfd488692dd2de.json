{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/api/server/QRSFunctionsStream.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/server/QRSFunctionsStream.js","filename":"imports/api/server/QRSFunctionsStream.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"imports/api/server/QRSFunctionsStream.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/server/QRSFunctionsStream.js"}},"code":"module.export({\n  initSenseStreams: () => initSenseStreams,\n  deleteStream: () => deleteStream,\n  getStreamByName: () => getStreamByName,\n  getStreams: () => getStreams,\n  createStream: () => createStream\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet GeneratedResources;\nmodule.watch(require(\"/imports/api/apps.js\"), {\n  GeneratedResources(v) {\n    GeneratedResources = v;\n  }\n\n}, 1);\nlet gitHubLinks;\nmodule.watch(require(\"/imports/ui/UIHelpers\"), {\n  gitHubLinks(v) {\n    gitHubLinks = v;\n  }\n\n}, 2);\nlet senseConfig, authHeaders, qrsSrv, qrs, configCerticates;\nmodule.watch(require(\"/imports/api/config.js\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  },\n\n  qrsSrv(v) {\n    qrsSrv = v;\n  },\n\n  qrs(v) {\n    qrs = v;\n  },\n\n  configCerticates(v) {\n    configCerticates = v;\n  }\n\n}, 3);\nlet REST_Log;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 4);\nconst qlikServer = 'http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy; //\n// ─── CREATE STREAMS FOR THE INITIAL SETUP OF QLIK SENSE ─────────────────────────\n//\n\nfunction initSenseStreams() {\n  console.log('------------------------------------');\n  console.log('Create initial streams');\n  console.log('------------------------------------');\n\n  for (const streamName of Meteor.settings.broker.qlikSense.StreamsToCreateAutomatically) {\n    try {\n      console.log('Try to create stream: ' + streamName + ' if it not already exists');\n\n      if (!getStreamByName(streamName)) {\n        createStream(streamName);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction deleteStream(guid, generationUserId) {\n  console.log('deleteStream: ', guid);\n\n  try {\n    var request = qrsSrv + '/qrs/stream/' + guid;\n    var response = HTTP.del(request, {\n      'npmRequestOptions': configCerticates\n    }); // Logging\n\n    const call = {};\n    call.action = 'Delete stream';\n    call.request = \"HTTP.del(\" + qlikServer + '/qrs/stream/' + guid + '?xrfkey=' + senseConfig.xrfkey;\n    call.response = response;\n    REST_Log(call, generationUserId);\n    Meteor.call('updateLocalSenseCopy');\n    return response;\n  } catch (err) {// console.error(err);\n    // throw new Meteor.Error('Delete stream failed', err.message);\n  }\n}\n\n; //\n// ─── GET STREAM BY NAME ────────────────────────────────────────────────────────────\n//\n\nfunction getStreamByName(name) {\n  try {\n    var request = qrsSrv + \"/qrs/stream/full?filter=Name eq '\" + name + \"'\";\n    console.log('getStreamByName request', request);\n    var response = HTTP.get(request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates,\n      data: {}\n    });\n    return response.data[0];\n  } catch (err) {\n    console.error(err);\n    throw Error('get streamByName failed', err.message);\n  }\n}\n\nfunction getStreams() {\n  try {\n    const call = {};\n    call.action = 'Get list of streams';\n    call.request = qrsSrv + '/qrs/stream/full';\n    call.response = HTTP.get(call.request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates,\n      data: {}\n    }); // REST_Log(call);        \n\n    return call.response.data;\n  } catch (err) {\n    console.error(err);\n    throw new Meteor.Error('getStreams failed', err.message);\n  }\n}\n\n; //\n// ─── CREATE STREAM ──────────────────────────────────────────────────────────────\n//\n\nfunction createStream(name, generationUserId) {\n  console.log('QRS Functions Stream, create the stream with name', name);\n\n  try {\n    check(name, String);\n    var response = qrs.post('/qrs/stream', null, {\n      name: name\n    }); // Meteor.call('updateLocalSenseCopy');\n    //logging\n\n    const call = {\n      action: 'Create stream',\n      url: gitHubLinks.createStream,\n      request: \"HTTP.post(qlikServer + '/qrs/stream', { headers: \" + JSON.stringify(authHeaders) + \", params: { 'xrfkey': \" + senseConfig.xrfkey + \"}, data: { name: \" + name + \"}}) --> USE OF HEADER AUTH ONLY FOR DEMO/REVERSE PROXY PURPOSES\",\n      response: response\n    };\n    REST_Log(call, generationUserId);\n    console.log('Create stream call.response;', call.response);\n    return call.response;\n  } catch (err) {\n    console.error(err);\n    throw new Meteor.Error('Create stream failed ', err.message);\n  }\n}\n\n;\nMeteor.methods({\n  deleteStream(guid) {\n    check(guid, String); //logging only\n\n    const call = {};\n    call.action = 'Delete stream';\n    call.request = 'Delete stream: ' + guid;\n    REST_Log(call);\n    const id = deleteStream(guid, Meteor.userId());\n    Meteor.call('updateLocalSenseCopy');\n    return id;\n  },\n\n  createStream(name) {\n    const streamId = createStream(name);\n    Meteor.call('updateLocalSenseCopy'); //store in the database that the user generated something, so we can later on remove it.\n\n    GeneratedResources.insert({\n      'generationUserId': Meteor.userId(),\n      'customer': null,\n      'streamId': streamId.data.id,\n      'appId': null\n    });\n    return streamId;\n  },\n\n  getStreams() {\n    return getStreams();\n  }\n\n});","map":{"version":3,"sources":["imports/api/server/QRSFunctionsStream.js"],"names":["module","export","initSenseStreams","deleteStream","getStreamByName","getStreams","createStream","Meteor","watch","require","v","GeneratedResources","gitHubLinks","senseConfig","authHeaders","qrsSrv","qrs","configCerticates","REST_Log","qlikServer","SenseServerInternalLanIP","port","virtualProxy","console","log","streamName","settings","broker","qlikSense","StreamsToCreateAutomatically","err","guid","generationUserId","request","response","HTTP","del","call","action","xrfkey","name","get","params","npmRequestOptions","data","error","Error","message","check","String","post","url","JSON","stringify","methods","id","userId","streamId","insert"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { GeneratedResources } from '/imports/api/apps.js';\nimport { gitHubLinks } from '/imports/ui/UIHelpers';\n\n// import config for Qlik Sense QRS and Engine API\nimport { senseConfig, authHeaders, qrsSrv, qrs, configCerticates } from '/imports/api/config.js';\nimport { REST_Log } from '/imports/api/APILogs';\n\nconst qlikServer = 'http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy;\n\n\n//\n// ─── CREATE STREAMS FOR THE INITIAL SETUP OF QLIK SENSE ─────────────────────────\n//\n\n\nexport function initSenseStreams() {\n    console.log('------------------------------------');\n    console.log('Create initial streams');\n    console.log('------------------------------------');\n\n    for (const streamName of Meteor.settings.broker.qlikSense.StreamsToCreateAutomatically) {\n        try {\n            console.log('Try to create stream: ' + streamName + ' if it not already exists');\n            if (!getStreamByName(streamName)) {\n                createStream(streamName)\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}\n\n//\n// ─── GENERIC STREAM FUNCTIONS ───────────────────────────────────────────────────\n//\n\n\nexport function deleteStream(guid, generationUserId) {\n    console.log('deleteStream: ', guid);\n    try {\n\n        var request = qrsSrv + '/qrs/stream/' + guid;\n        var response = HTTP.del(request, {\n            'npmRequestOptions': configCerticates,\n        });\n\n        // Logging\n        const call = {};\n        call.action = 'Delete stream';\n        call.request = \"HTTP.del(\" + qlikServer + '/qrs/stream/' + guid + '?xrfkey=' + senseConfig.xrfkey;\n        call.response = response;\n        REST_Log(call, generationUserId);\n        Meteor.call('updateLocalSenseCopy');\n        return response;\n    } catch (err) {\n        // console.error(err);\n        // throw new Meteor.Error('Delete stream failed', err.message);\n    }\n};\n\n\n//\n// ─── GET STREAM BY NAME ────────────────────────────────────────────────────────────\n//\n\n\nexport function getStreamByName(name) {\n    try {\n        var request = qrsSrv + \"/qrs/stream/full?filter=Name eq '\" + name + \"'\";\n        console.log('getStreamByName request', request)\n        var response = HTTP.get(request, {\n            params: { xrfkey: senseConfig.xrfkey },\n            npmRequestOptions: configCerticates,\n            data: {}\n        });\n\n        return response.data[0];\n    } catch (err) {\n        console.error(err);\n        throw Error('get streamByName failed', err.message);\n    }\n}\n\n//\n// ─── GET STREAMS ─────────────────────────────────────────────────────────────────\n//\n\n\nexport function getStreams() {\n    try {\n        const call = {};\n        call.action = 'Get list of streams';\n        call.request = qrsSrv + '/qrs/stream/full';\n        call.response = HTTP.get(call.request, {\n            params: { xrfkey: senseConfig.xrfkey },\n            npmRequestOptions: configCerticates,\n            data: {}\n        });\n        // REST_Log(call);        \n        return call.response.data;\n    } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('getStreams failed', err.message);\n    }\n};\n\n//\n// ─── CREATE STREAM ──────────────────────────────────────────────────────────────\n//\n\n\nexport function createStream(name, generationUserId) {\n    console.log('QRS Functions Stream, create the stream with name', name);\n\n\n    try {\n        check(name, String);\n        var response = qrs.post('/qrs/stream', null, { name: name });\n\n        // Meteor.call('updateLocalSenseCopy');\n        //logging\n        const call = {\n            action: 'Create stream',\n            url: gitHubLinks.createStream,\n            request: \"HTTP.post(qlikServer + '/qrs/stream', { headers: \" + JSON.stringify(authHeaders) + \", params: { 'xrfkey': \" + senseConfig.xrfkey + \"}, data: { name: \" + name + \"}}) --> USE OF HEADER AUTH ONLY FOR DEMO/REVERSE PROXY PURPOSES\",\n            response: response\n        };\n\n        REST_Log(call, generationUserId);\n        console.log('Create stream call.response;', call.response)\n        return call.response;\n    } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('Create stream failed ', err.message);\n    }\n};\n\n\nMeteor.methods({\n    deleteStream(guid) {\n        check(guid, String);\n        //logging only\n        const call = {};\n        call.action = 'Delete stream';\n        call.request = 'Delete stream: ' + guid;\n        REST_Log(call);\n\n        const id = deleteStream(guid, Meteor.userId());\n        Meteor.call('updateLocalSenseCopy');\n        return id;\n    },\n    createStream(name) {\n        const streamId = createStream(name);\n        Meteor.call('updateLocalSenseCopy');\n\n        //store in the database that the user generated something, so we can later on remove it.\n        GeneratedResources.insert({\n            'generationUserId': Meteor.userId(),\n            'customer': null,\n            'streamId': streamId.data.id,\n            'appId': null\n        });\n        return streamId;\n    },\n    getStreams() {\n        return getStreams();\n    }\n});"]},"sourceType":"script","hash":"248b0ef988ee3336c0fbe8acf4cfd488692dd2de"}
