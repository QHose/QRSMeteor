{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/logging/logging_test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/logging/logging_test.js","filename":"packages/logging/logging_test.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/logging/logging_test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/logging/logging_test.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Log;\nmodule.watch(require(\"meteor/logging\"), {\n  Log(v) {\n    Log = v;\n  }\n\n}, 1);\nTinytest.add('logging - _getCallerDetails', function (test) {\n  const details = Log._getCallerDetails(); // Ignore this test for Opera, IE, Safari since this test would work only\n  // in Chrome and Firefox, other browsers don't give us an ability to get\n  // stacktrace.\n\n\n  if (new Error().stack) {\n    if (Meteor.isServer) {\n      test.equal(details.file, 'tinytest.js');\n    } else {\n      // Note that we want this to work in --production too, so we need to allow\n      // for the minified filename.\n      test.matches(details.file, /^(?:tinytest\\.js|[a-f0-9]{40}\\.js)$/);\n    } // evaled statements shouldn't crash\n\n\n    const code = 'Log._getCallerDetails().file'; // Note that we want this to work in --production too, so we need to allow\n    // for the minified filename\n\n    test.matches(module.runSetters(eval(code)), /^(?:eval|local-test_logging\\.js|[a-f0-9]{40}\\.js)/);\n  }\n});\nTinytest.add('logging - log', function (test) {\n  const logBothMessageAndObject = function (log, level) {\n    Log._intercept(3); // Tests for correctness\n\n\n    log('message');\n    log({\n      property1: 'foo',\n      property2: 'bar'\n    });\n    log({\n      message: 'mixed',\n      property1: 'foo',\n      property2: 'bar'\n    });\n\n    let intercepted = Log._intercepted();\n\n    test.equal(intercepted.length, 3);\n    const obj1 = EJSON.parse(intercepted[0]);\n    test.equal(obj1.message, 'message');\n    test.equal(obj1.level, level);\n    test.instanceOf(obj1.time, Date);\n    const obj2 = EJSON.parse(intercepted[1]);\n    test.isFalse(obj2.message);\n    test.equal(obj2.property1, 'foo');\n    test.equal(obj2.property2, 'bar');\n    test.equal(obj2.level, level);\n    test.instanceOf(obj2.time, Date);\n    const obj3 = EJSON.parse(intercepted[2]);\n    test.equal(obj3.message, 'mixed');\n    test.equal(obj3.property1, 'foo');\n    test.equal(obj3.property2, 'bar');\n    test.equal(obj3.level, level);\n    test.instanceOf(obj3.time, Date); // Test logging falsy values, as well as single digits\n    // and some other non-stringy things\n    // In a format of testcase, expected result, name of the test.\n\n    const testcases = [[1, '1', 'single digit'], [0, '0', 'falsy - 0'], [null, 'null', 'falsy - null'], [undefined, 'undefined', 'falsy - undefined'], [new Date('2013-06-13T01:15:16.000Z'), new Date('2013-06-13T01:15:16.000Z'), 'date'], [/[^regexp]{0,1}/g, '/[^regexp]{0,1}/g', 'regexp'], [true, 'true', 'boolean - true'], [false, 'false', 'boolean - false'], [-Infinity, '-Infinity', 'number - -Infinity']];\n\n    Log._intercept(testcases.length);\n\n    testcases.forEach(testcase => {\n      log(testcase[0]);\n    });\n    intercepted = Log._intercepted();\n    test.equal(intercepted.length, testcases.length);\n    testcases.forEach((testcase, index) => {\n      var expected = testcase[1];\n      var testName = testcase[2];\n      var recieved = intercepted[index];\n      var obj = EJSON.parse(recieved); // IE8 and old Safari don't support this date format. Skip it.\n\n      if (expected && expected.toString && (expected.toString() === 'NaN' || expected.toString() === 'Invalid Date')) {\n        return;\n      }\n\n      if (testcase[0] instanceof Date) {\n        obj.message = new Date(obj.message);\n      }\n\n      test.equal(obj.message, expected, `Logging ${testName}`);\n    }); // Tests for correct exceptions\n\n    Log._intercept(6);\n\n    test.throws(function () {\n      log({\n        time: 'not the right time'\n      });\n    });\n    test.throws(function () {\n      log({\n        level: 'not the right level'\n      });\n    });\n    ['file', 'line', 'program', 'originApp', 'satellite'].forEach(function (restrictedKey) {\n      test.throws(function () {\n        var obj = {};\n        obj[restrictedKey] = 'usage of restricted key';\n        log(obj);\n      });\n    }); // Can't pass numbers, objects, arrays, regexps or functions as message\n\n    var throwingTestcases = [1, NaN, {\n      foo: 'bar'\n    }, ['a', 'r', 'r'], null, undefined, new Date(), function () {\n      return 42;\n    }, /[regexp]/];\n\n    Log._intercept(throwingTestcases.length);\n\n    throwingTestcases.forEach(function (testcase) {\n      test.throws(function () {\n        log({\n          message: testcase\n        });\n      });\n    }); // Since all tests above should throw, nothing should be printed.\n    // This call will set the logging interception to the clean state as well.\n\n    test.equal(Log._intercepted().length, 0);\n  };\n\n  logBothMessageAndObject(Log, 'info');\n  ['info', 'warn', 'error'].forEach(level => {\n    logBothMessageAndObject(Log[level], level);\n  });\n});\nTinytest.add('logging - parse', function (test) {\n  test.equal(Log.parse(\"message\"), null);\n  test.equal(Log.parse('{\"foo\": \"bar\"}'), null);\n  var time = new Date();\n  test.equal(Log.parse(`{\"foo\": \"bar\", \"time\": ${EJSON.stringify(time)}}`), {\n    foo: \"bar\",\n    time: time\n  });\n  test.equal(Log.parse('{\"foo\": not json \"bar\"}'), null);\n  test.equal(Log.parse('{\"time\": \"not a date object\"}'), null);\n});\nTinytest.add('logging - format', function (test) {\n  var time = new Date(2012, 9 - 1\n  /*0-based*/\n  , 8, 7, 6, 5, 4);\n  var utcOffsetStr = '(' + -(new Date().getTimezoneOffset() / 60) + ')';\n  ['debug', 'info', 'warn', 'error'].forEach(function (level) {\n    test.equal(Log.format({\n      message: 'message',\n      time: time,\n      level: level\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} message`);\n    test.equal(Log.format({\n      message: 'message',\n      time: time,\n      timeInexact: true,\n      level: level\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr}? message`);\n    test.equal(Log.format({\n      foo1: 'bar1',\n      foo2: 'bar2',\n      time: time,\n      level: level\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} {\"foo1\":\"bar1\",\"foo2\":\"bar2\"}`);\n    test.equal(Log.format({\n      message: 'message',\n      foo: 'bar',\n      time: time,\n      level: level\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} message {\"foo\":\"bar\"}`); // Has everything except stderr field\n\n    test.equal(Log.format({\n      message: 'message',\n      foo: 'bar',\n      time: time,\n      level: level,\n      file: 'app.js',\n      line: 42,\n      app: 'myApp',\n      originApp: 'proxy',\n      program: 'server'\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} [myApp via proxy] (server:app.js:42) message {\\\"foo\\\":\\\"bar\\\"}`); // stderr\n\n    test.equal(Log.format({\n      message: 'message from stderr',\n      time: time,\n      level: level,\n      stderr: true\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} (STDERR) message from stderr`); // app/originApp\n\n    test.equal(Log.format({\n      message: 'message',\n      time: time,\n      level: level,\n      app: 'app',\n      originApp: 'app'\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} [app] message`);\n    test.equal(Log.format({\n      message: \"message\",\n      time: time,\n      level: level,\n      app: 'app',\n      originApp: 'proxy'\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} [app via proxy] message`); // source info\n\n    test.equal(Log.format({\n      message: 'message',\n      time: time,\n      level: level,\n      file: 'app.js',\n      line: 42,\n      program: 'server'\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} (server:app.js:42) message`);\n    test.equal(Log.format({\n      message: 'message',\n      time: time,\n      level: level,\n      file: 'app.js',\n      line: 42\n    }), `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} (app.js:42) message`);\n  });\n  test.matches(Log.format({\n    message: 'oyez',\n    time: new Date(),\n    level: 'error'\n  }, {\n    color: true\n  }), /oyez/);\n});","map":{"version":3,"sources":["packages/logging/logging_test.js"],"names":["Meteor","module","watch","require","v","Log","Tinytest","add","test","details","_getCallerDetails","Error","stack","isServer","equal","file","matches","code","eval","logBothMessageAndObject","log","level","_intercept","property1","property2","message","intercepted","_intercepted","length","obj1","EJSON","parse","instanceOf","time","Date","obj2","isFalse","obj3","testcases","undefined","Infinity","forEach","testcase","index","expected","testName","recieved","obj","toString","throws","restrictedKey","throwingTestcases","NaN","foo","stringify","utcOffsetStr","getTimezoneOffset","format","charAt","toUpperCase","timeInexact","foo1","foo2","line","app","originApp","program","stderr","color"],"mappings":"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","sourcesContent":["import { Meteor  } from 'meteor/meteor';\nimport { Log } from 'meteor/logging';\n\nTinytest.add('logging - _getCallerDetails', function (test) {\n  const details = Log._getCallerDetails();\n  // Ignore this test for Opera, IE, Safari since this test would work only\n  // in Chrome and Firefox, other browsers don't give us an ability to get\n  // stacktrace.\n  if ((new Error).stack) {\n    if (Meteor.isServer) {\n      test.equal(details.file, 'tinytest.js');\n    } else {\n      // Note that we want this to work in --production too, so we need to allow\n      // for the minified filename.\n      test.matches(details.file,\n                   /^(?:tinytest\\.js|[a-f0-9]{40}\\.js)$/);\n    }\n\n    // evaled statements shouldn't crash\n    const code = 'Log._getCallerDetails().file';\n    // Note that we want this to work in --production too, so we need to allow\n    // for the minified filename\n    test.matches(eval(code),\n                 /^(?:eval|local-test_logging\\.js|[a-f0-9]{40}\\.js)/);\n  }\n});\n\nTinytest.add('logging - log', function (test) {\n  const logBothMessageAndObject = function (log, level) {\n    Log._intercept(3);\n    // Tests for correctness\n    log('message');\n    log({property1: 'foo', property2: 'bar'});\n    log({message: 'mixed', property1: 'foo', property2: 'bar'});\n\n    let intercepted = Log._intercepted();\n    test.equal(intercepted.length, 3);\n\n    const obj1 = EJSON.parse(intercepted[0]);\n    test.equal(obj1.message, 'message');\n    test.equal(obj1.level, level);\n    test.instanceOf(obj1.time, Date);\n\n    const obj2 = EJSON.parse(intercepted[1]);\n    test.isFalse(obj2.message);\n    test.equal(obj2.property1, 'foo');\n    test.equal(obj2.property2, 'bar');\n    test.equal(obj2.level, level);\n    test.instanceOf(obj2.time, Date);\n\n    const obj3 = EJSON.parse(intercepted[2]);\n    test.equal(obj3.message, 'mixed');\n    test.equal(obj3.property1, 'foo');\n    test.equal(obj3.property2, 'bar');\n    test.equal(obj3.level, level);\n    test.instanceOf(obj3.time, Date);\n\n    // Test logging falsy values, as well as single digits\n    // and some other non-stringy things\n    // In a format of testcase, expected result, name of the test.\n    const testcases = [\n          [1, '1', 'single digit'],\n          [0, '0', 'falsy - 0'],\n          [null, 'null', 'falsy - null'],\n          [undefined, 'undefined', 'falsy - undefined'],\n          [new Date('2013-06-13T01:15:16.000Z'), new Date('2013-06-13T01:15:16.000Z'), 'date'],\n          [/[^regexp]{0,1}/g, '/[^regexp]{0,1}/g', 'regexp'],\n          [true, 'true', 'boolean - true'],\n          [false, 'false', 'boolean - false'],\n          [-Infinity, '-Infinity', 'number - -Infinity']];\n\n    Log._intercept(testcases.length);\n    testcases.forEach((testcase) => {\n      log(testcase[0]);\n    });\n\n    intercepted = Log._intercepted();\n\n    test.equal(intercepted.length, testcases.length);\n\n    testcases.forEach((testcase, index) => {\n      var expected = testcase[1];\n      var testName = testcase[2];\n      var recieved = intercepted[index];\n      var obj = EJSON.parse(recieved);\n\n      // IE8 and old Safari don't support this date format. Skip it.\n      if (expected && expected.toString &&\n          (expected.toString() === 'NaN' ||\n           expected.toString() === 'Invalid Date')) {\n            return;\n      }\n\n\n      if (testcase[0] instanceof Date) {\n        obj.message = new Date(obj.message);\n      }\n\n      test.equal(obj.message, expected, `Logging ${testName}`);\n    });\n\n    // Tests for correct exceptions\n    Log._intercept(6);\n\n    test.throws(function () {\n      log({time: 'not the right time'});\n    });\n    test.throws(function () {\n      log({level: 'not the right level'});\n    });\n    ['file', 'line', 'program', 'originApp', 'satellite'].forEach(\n      function (restrictedKey) {\n      test.throws(function () {\n        var obj = {};\n        obj[restrictedKey] = 'usage of restricted key';\n        log(obj);\n      });\n    });\n\n    // Can't pass numbers, objects, arrays, regexps or functions as message\n    var throwingTestcases = [1, NaN, {foo:'bar'}, ['a', 'r', 'r'], null,\n                             undefined, new Date, function () { return 42; },\n                             /[regexp]/ ];\n    Log._intercept(throwingTestcases.length);\n    throwingTestcases.forEach(function (testcase) {\n      test.throws(function () {\n        log({ message: testcase });\n      });\n    });\n\n    // Since all tests above should throw, nothing should be printed.\n    // This call will set the logging interception to the clean state as well.\n    test.equal(Log._intercepted().length, 0);\n  };\n\n  logBothMessageAndObject(Log, 'info');\n  ['info', 'warn', 'error'].forEach((level) => {\n    logBothMessageAndObject(Log[level], level);\n  });\n});\n\nTinytest.add('logging - parse', function (test) {\n  test.equal(Log.parse(\"message\"), null);\n  test.equal(Log.parse('{\"foo\": \"bar\"}'), null);\n  var time = new Date;\n  test.equal(Log.parse(`{\"foo\": \"bar\", \"time\": ${EJSON.stringify(time)}}`),\n                        { foo: \"bar\", time: time });\n  test.equal(Log.parse('{\"foo\": not json \"bar\"}'), null);\n  test.equal(Log.parse('{\"time\": \"not a date object\"}'), null);\n});\n\nTinytest.add('logging - format', function (test) {\n  var time = new Date(2012, 9 - 1/*0-based*/, 8, 7, 6, 5, 4);\n  var utcOffsetStr = '(' + (-(new Date().getTimezoneOffset() / 60)) + ')';\n\n  ['debug', 'info', 'warn', 'error'].forEach(function (level) {\n    test.equal(\n      Log.format({message: 'message', time: time, level: level}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} message`);\n\n    test.equal(\n      Log.format({message: 'message', time: time, timeInexact: true, level: level}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr}? message`);\n\n    test.equal(\n      Log.format({foo1: 'bar1', foo2: 'bar2', time: time, level: level}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} {\"foo1\":\"bar1\",\"foo2\":\"bar2\"}`);\n\n    test.equal(\n      Log.format({message: 'message', foo: 'bar', time: time, level: level}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} message {\"foo\":\"bar\"}`);\n\n    // Has everything except stderr field\n    test.equal(\n      Log.format({message: 'message', foo: 'bar', time: time, level: level, file: 'app.js', line:42, app: 'myApp', originApp: 'proxy', program: 'server'}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} [myApp via proxy] (server:app.js:42) message {\\\"foo\\\":\\\"bar\\\"}`);\n\n    // stderr\n    test.equal(\n      Log.format({message: 'message from stderr', time: time, level: level, stderr: true}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} (STDERR) message from stderr`);\n\n    // app/originApp\n    test.equal(\n      Log.format({message: 'message', time: time, level: level, app: 'app', originApp: 'app'}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} [app] message`);\n    test.equal(\n      Log.format({message: \"message\", time: time, level: level, app: 'app', originApp: 'proxy'}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} [app via proxy] message`);\n\n    // source info\n    test.equal(\n      Log.format({message: 'message', time: time, level: level, file: 'app.js', line: 42, program: 'server'}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} (server:app.js:42) message`);\n    test.equal(\n      Log.format({message: 'message', time: time, level: level, file: 'app.js', line: 42}),\n      `${level.charAt(0).toUpperCase()}20120908-07:06:05.004${utcOffsetStr} (app.js:42) message`);\n  });\n\n  test.matches(Log.format({\n    message: 'oyez',\n    time: new Date,\n    level: 'error'\n  }, {\n    color: true\n  }), /oyez/);\n});\n"]},"sourceType":"script","hash":"faf609ef99ab7bd4e008323b08b7341a39e54a93"}
