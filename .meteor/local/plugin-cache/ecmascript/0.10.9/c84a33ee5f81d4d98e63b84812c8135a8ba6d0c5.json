{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/api/config.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/config.js","filename":"imports/api/config.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"imports/api/config.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/config.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nmodule.export({\n  senseConfig: function () {\n    return senseConfig;\n  },\n  missingParameters: function () {\n    return missingParameters;\n  }\n});\nvar Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random: function (v) {\n    Random = v;\n  }\n}, 1);\n\nvar _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 2);\n\nvar _QIXSchema = require('enigma.js/schemas/3.2.json'); //This is the config that we need to make available on the client (the webpage)\n\n\nif (Meteor.isClient) {\n  var _senseConfig = {\n    \"host\": Meteor.settings.public.qlikSenseHost,\n    \"port\": Meteor.settings.public.qlikSensePort,\n    \"useSSL\": Meteor.settings.public.useSSL,\n    \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n    \"virtualProxySlideGenerator\": Meteor.settings.public.slideGenerator.virtualProxy,\n    \"webIntegrationDemoPort\": Meteor.settings.public.webIntegrationDemoPort,\n    \"QIXSchema\": _QIXSchema //ssbi and slide generator app id are set automatically on main.js (client side, via a call to the server)\n    // config.SSBIAppId = \n    // config.slideGeneratorAppId = \n\n  };\n} //SERVER SIDE\n\n\nif (Meteor.isServer) {\n  //END CODE THAT NEEDS CERTIFICATES\n  var generateXrfkey = function () {\n    return Random.hexString(16);\n  };\n\n  var _validateJSON = function (body) {\n    try {\n      var data = JSON.parse(body); // if came to here, then valid\n\n      return data;\n    } catch (e) {\n      // failed to parse\n      return null;\n    }\n  };\n\n  module.export({\n    authHeaders: function () {\n      return _authHeaders;\n    },\n    validateJSON: function () {\n      return _validateJSON;\n    },\n    QRSconfig: function () {\n      return _QRSconfig;\n    }\n  });\n  var sslRootCas;\n  module.watch(require(\"ssl-root-cas\"), {\n    \"default\": function (v) {\n      sslRootCas = v;\n    }\n  }, 3);\n  var crypto;\n  module.watch(require(\"crypto\"), {\n    \"default\": function (v) {\n      crypto = v;\n    }\n  }, 4);\n  var myQRS;\n  module.watch(require(\"/imports/api/server/QRSAPI\"), {\n    myQRS: function (v) {\n      myQRS = v;\n    }\n  }, 5);\n  process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n  sslRootCas.inject();\n  console.log('This tool uses this config as defined in the settings-XYZ.json file in the root folder: ', Meteor.settings);\n\n  var fs = require('fs-extra');\n\n  var path = require('path');\n\n  var os = require('os'); // import fs from 'fs';\n\n\n  var bluebird = require('bluebird');\n\n  var WebSocket = require('ws');\n\n  if (!Meteor.settings.public.qlikSenseHost) {\n    Meteor.settings.public.qlikSenseHost = os.hostname();\n  }\n\n  if (!Meteor.settings.public.SenseServerInternalLanIP) {\n    Meteor.settings.public.SenseServerInternalLanIP = os.hostname();\n  }\n\n  if (!Meteor.settings.public.webIntegrationHost) {\n    Meteor.settings.public.webIntegrationHost = os.hostname();\n  }\n\n  var _senseConfig = {\n    \"host\": Meteor.settings.public.qlikSenseHost,\n    \"SenseServerInternalLanIP\": Meteor.settings.public.SenseServerInternalLanIP,\n    \"port\": Meteor.settings.public.qlikSensePort,\n    \"useSSL\": Meteor.settings.public.useSSL,\n    \"xrfkey\": generateXrfkey(),\n    \"virtualProxy\": Meteor.settings.private.virtualProxy,\n    //used to connect via REST to Sense, we authenticate via a http header. not for production!!!\n    \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n    \"headerKey\": Meteor.settings.private.headerKey,\n    \"headerValue\": process.env.USERDOMAIN + '\\\\' + process.env.USERNAME,\n    //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n    \"isSecure\": Meteor.settings.private.isSecure,\n    \"qrsPort\": Meteor.settings.private.qrsPort,\n    \"enginePort\": Meteor.settings.private.enginePort\n  };\n\n  if (missingParameters(_senseConfig)) {\n    throw new Meteor.Error('Missing parameters in _senseConfig, you did not populate the settings.json file in the project root of MeteorQRS, or with docker: did you mount the volume with the config including the settings.json file? (with the correct name)');\n  }\n\n  if (!_senseConfig.host) {\n    throw new Meteor.Error('You have not started this meteor project with: meteor --settings settings-development.json ? You missed the reference to this settings file, or it is empty?');\n  } //CONFIG FOR HTTP MODULE WITH HEADER AUTH (TO MAKE REST CALLS TO SENSE VIA HTTP CALLS).\n\n\n  var _authHeaders = {\n    'hdr-usr': _senseConfig.headerValue,\n    'X-Qlik-xrfkey': _senseConfig.xrfkey //\n\n  };\n\n  if (!Meteor.settings.private.certificatesDirectory) {\n    Meteor.settings.private.certificatesDirectory = 'C:\\\\ProgramData\\\\Qlik\\\\Sense\\\\Repository\\\\Exported Certificates\\\\.Local Certificates';\n    console.log('Meteor.settings.private.certificatesDirectory was empty, setting it to default: ', Meteor.settings.private.certificatesDirectory);\n  }\n\n  try {\n    module.export({\n      _certs: function () {\n        return _certs2;\n      },\n      configCerticates: function () {\n        return configCerticates;\n      },\n      enigmaServerConfig: function () {\n        return _enigmaServerConfig;\n      },\n      engineConfig: function () {\n        return _engineConfig2;\n      },\n      qlikHDRServer: function () {\n        return _qlikHDRServer;\n      },\n      qrsSrv: function () {\n        return _qrsSrv;\n      },\n      qrs: function () {\n        return _qrs;\n      }\n    });\n    var _certs2 = {\n      ca: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/root.pem'),\n      key: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client_key.pem'),\n      cert: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client.pem') //if you use windows and this tool runs on the same machine, you can keep the parameters empty\n      // and we use the user the node service runs under... .\n\n    };\n    var qlikUserDomain = '';\n    var qlikUser = '';\n\n    if (!Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory) {\n      qlikUserDomain = process.env.USERDOMAIN;\n      qlikUser = process.env.USERNAME;\n    } else {\n      qlikUserDomain = Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory;\n      qlikUser = Meteor.settings.broker.qlikSense.connectToSenseAsUser;\n    }\n\n    var configCerticates = {\n      rejectUnauthorized: false,\n      hostname: _senseConfig.SenseServerInternalLanIP,\n      headers: {\n        'x-qlik-xrfkey': _senseConfig.xrfkey,\n        'X-Qlik-User': \"UserDirectory=\" + qlikUserDomain + \";UserId=\" + qlikUser,\n        //`UserDirectory=INTERNAL;UserId=sa_repository` you need to give this user extra roles before this works\n        'Content-Type': 'application/json'\n      },\n      key: _certs2.key,\n      cert: _certs2.cert,\n      ca: _certs2.ca\n    };\n    console.log('configCerticates: we connect to Qlik Sense via certificates using these credentials: ', configCerticates); //used for engimaJS, the engine API javascript wrapper\n\n    var _engineConfig = {\n      host: _senseConfig.SenseServerInternalLanIP,\n      isSecure: _senseConfig.isSecure,\n      port: Meteor.settings.private.enginePort,\n      headers: {\n        'X-Qlik-User': \"UserDirectory=\" + qlikUserDomain + \";UserId=\" + qlikUser\n      },\n      ca: _certs2.ca,\n      key: _certs2.key,\n      cert: _certs2.cert,\n      passphrase: Meteor.settings.private.passphrase,\n      rejectUnauthorized: false,\n      // Don't reject self-signed certs\n      appname: null,\n      QIXSchema: _QIXSchema\n    };\n    var _enigmaServerConfig = {\n      schema: _engineConfig.QIXSchema,\n      // appId: appId,\n      session: {\n        host: _engineConfig.host,\n        port: _engineConfig.port\n      },\n      Promise: bluebird,\n      createSocket: function (url) {\n        return new WebSocket(url, {\n          ca: _certs2.ca,\n          key: _certs2.key,\n          cert: _certs2.cert,\n          headers: {\n            'X-Qlik-User': \"UserDirectory=\" + qlikUserDomain + \";UserId=\" + qlikUser\n          }\n        });\n      }\n    };\n    var _engineConfig2 = _engineConfig;\n\n    var _qlikHDRServer = 'http://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.port + '/' + _senseConfig.virtualProxy;\n\n    var _qrsSrv = 'https://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.qrsPort;\n\n    var _qrs = new myQRS();\n  } catch (error) {\n    console.warn('Make sure you run the \"QRS START.BAT\" as administrator? Please note that Qlik Sense is not installed, or certificate directory wrong in the settings.json file.'); // throw new Meteor.Error(500, 'We can not connect to Sense yet: Because we can not find the Sense certificates yet in the ' + Meteor.settings.private.certificatesDirectory + '. This can happen if Sense has not yet been installed....');\n  }\n\n  var _QRSconfig = {\n    authentication: 'header',\n    host: _senseConfig.host,\n    port: _senseConfig.port,\n    useSSL: false,\n    virtualProxy: _senseConfig.virtualProxy,\n    //header proxy\n    headerKey: _senseConfig.headerKey,\n    headerValue: _senseConfig.headerValue //'mydomain\\\\justme'\n\n  };\n\n  try {\n    Meteor.startup(function () {\n      function _callee() {\n        var file, exampleSettingsFile, keysEqual;\n        return _regenerator.default.async(function () {\n          function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  console.log('------------------------------------');\n                  console.log('Validate settings.json parameters');\n                  console.log('------------------------------------');\n                  Meteor.absolutePath = path.resolve('.').split(path.sep + '.meteor')[0];\n                  console.log('Meteor tries to find the settings-development-example.json file in Meteor.absolutePath:', Meteor.absolutePath);\n                  file = path.join(Meteor.absolutePath, 'settings-development-example.json'); // READ THE FILE \n\n                  _context.prev = 6;\n                  _context.next = 9;\n                  return _regenerator.default.awrap(fs.readJson(file));\n\n                case 9:\n                  exampleSettingsFile = _context.sent;\n                  console.log('TCL: exampleSettingsFile', exampleSettingsFile);\n                  _context.next = 16;\n                  break;\n\n                case 13:\n                  _context.prev = 13;\n                  _context.t0 = _context[\"catch\"](6);\n                  throw new Error('Meteor can not find your example settings file: ' + file);\n\n                case 16:\n                  _context.prev = 16;\n\n                  _validateJSON(exampleSettingsFile);\n\n                  _context.next = 24;\n                  break;\n\n                case 20:\n                  _context.prev = 20;\n                  _context.t1 = _context[\"catch\"](16);\n                  console.log(_context.t1);\n                  throw new Error('Meteor wants to check your settings.json with the parameters in the example settings.json in the project root. Error: Cant read the example settings definitions file (not valid JSON): ' + file, _context.t1);\n\n                case 24:\n                  keysEqual = compareKeys(Meteor.settings, exampleSettingsFile);\n                  console.log('Settings file has all the keys as specified in the example json file?', keysEqual);\n\n                  if (keysEqual) {\n                    _context.next = 28;\n                    break;\n                  }\n\n                  throw new Error(\"Settings.json file does not have all keys as defined in the settings-development-example.json (in your project root), Please verify if you have all the keys as specified in the settings-development-example.json in the project root folder. In my dev environment: C:\\\\Users\\\\Qlikexternal\\\\Documents\\\\GitHub\\\\QRSMeteor\");\n\n                case 28:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }\n\n          return _callee$;\n        }(), null, this, [[6, 13], [16, 20]]);\n      }\n\n      return _callee;\n    }());\n  } catch (error) {\n    throw new Error(error);\n  }\n} //exit server side config\n\n\nvar senseConfig = _senseConfig;\n\nfunction missingParameters(obj) {\n  for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {\n    if (obj[key] !== null && obj[key] != \"\") return false;\n  }\n\n  return true;\n}\n\nfunction hasSameProps(obj1, obj2) {\n  return Object.keys(obj1).every(function (prop) {\n    return obj2.hasOwnProperty(prop);\n  });\n}\n\nfunction compareKeys() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  var allKeys = objects.reduce(function (keys, object) {\n    return keys.concat(Object.keys(object));\n  }, []);\n  var union = new Set(allKeys);\n  return objects.every(function (object) {\n    return union.size === Object.keys(object).length;\n  });\n}","map":{"version":3,"sources":["imports/api/config.js"],"names":["module","export","senseConfig","missingParameters","Mongo","watch","require","v","Random","_","_QIXSchema","Meteor","isClient","_senseConfig","settings","public","qlikSenseHost","qlikSensePort","useSSL","virtualProxyClientUsage","slideGenerator","virtualProxy","webIntegrationDemoPort","isServer","generateXrfkey","hexString","validateJSON","body","data","JSON","parse","e","authHeaders","QRSconfig","sslRootCas","crypto","myQRS","process","env","inject","console","log","fs","path","os","bluebird","WebSocket","hostname","SenseServerInternalLanIP","webIntegrationHost","private","headerKey","USERDOMAIN","USERNAME","isSecure","qrsPort","enginePort","Error","host","headerValue","xrfkey","certificatesDirectory","_certs","configCerticates","enigmaServerConfig","engineConfig","qlikHDRServer","qrsSrv","qrs","ca","readFileSync","key","cert","qlikUserDomain","qlikUser","broker","qlikSense","connectToSenseAsUserDirectory","connectToSenseAsUser","rejectUnauthorized","headers","_engineConfig","port","passphrase","appname","QIXSchema","schema","session","Promise","createSocket","url","error","warn","authentication","startup","absolutePath","resolve","split","sep","file","join","readJson","exampleSettingsFile","keysEqual","compareKeys","obj","hasSameProps","obj1","obj2","Object","keys","every","prop","hasOwnProperty","objects","allKeys","reduce","object","concat","union","Set","size","length"],"mappings":"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","sourcesContent":["import {\n    Mongo\n} from 'meteor/mongo';\nimport {\n    Random\n} from 'meteor/random';\nimport _ from 'meteor/underscore';\nconst _QIXSchema = require('enigma.js/schemas/3.2.json');\n\n//This is the config that we need to make available on the client (the webpage)\nif (Meteor.isClient) {\n    var _senseConfig = {\n        \"host\": Meteor.settings.public.qlikSenseHost,\n        \"port\": Meteor.settings.public.qlikSensePort,\n        \"useSSL\": Meteor.settings.public.useSSL,\n        \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n        \"virtualProxySlideGenerator\": Meteor.settings.public.slideGenerator.virtualProxy,\n        \"webIntegrationDemoPort\": Meteor.settings.public.webIntegrationDemoPort,\n        \"QIXSchema\": _QIXSchema,\n        //ssbi and slide generator app id are set automatically on main.js (client side, via a call to the server)\n        // config.SSBIAppId = \n        // config.slideGeneratorAppId = \n    };\n}\n\n\n//SERVER SIDE\nif (Meteor.isServer) {\n    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n    import sslRootCas from 'ssl-root-cas';\n    sslRootCas.inject();\n    \n    console.log('This tool uses this config as defined in the settings-XYZ.json file in the root folder: ', Meteor.settings);\n    import crypto from 'crypto';\n    var fs = require('fs-extra');\n    const path = require('path');\n    var os = require('os');\n    // import fs from 'fs';\n    import {\n        myQRS\n    } from '/imports/api/server/QRSAPI';\n    const bluebird = require('bluebird');\n    const WebSocket = require('ws');\n\n    if (!Meteor.settings.public.qlikSenseHost) {\n        Meteor.settings.public.qlikSenseHost = os.hostname();\n    }\n    if (!Meteor.settings.public.SenseServerInternalLanIP) {\n        Meteor.settings.public.SenseServerInternalLanIP = os.hostname();\n    }\n    if (!Meteor.settings.public.webIntegrationHost) {\n        Meteor.settings.public.webIntegrationHost = os.hostname();\n    }\n\n    var _senseConfig = {\n        \"host\": Meteor.settings.public.qlikSenseHost,\n        \"SenseServerInternalLanIP\": Meteor.settings.public.SenseServerInternalLanIP,\n        \"port\": Meteor.settings.public.qlikSensePort,\n        \"useSSL\": Meteor.settings.public.useSSL,\n        \"xrfkey\": generateXrfkey(),\n        \"virtualProxy\": Meteor.settings.private.virtualProxy, //used to connect via REST to Sense, we authenticate via a http header. not for production!!!\n        \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n        \"headerKey\": Meteor.settings.private.headerKey,\n        \"headerValue\": process.env.USERDOMAIN + '\\\\' + process.env.USERNAME, //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n        \"isSecure\": Meteor.settings.private.isSecure,\n        \"qrsPort\": Meteor.settings.private.qrsPort,\n        \"enginePort\": Meteor.settings.private.enginePort\n    };\n\n    if (missingParameters(_senseConfig)) {\n        throw new Meteor.Error('Missing parameters in _senseConfig, you did not populate the settings.json file in the project root of MeteorQRS, or with docker: did you mount the volume with the config including the settings.json file? (with the correct name)');\n    }\n\n    if (!_senseConfig.host) {\n        throw new Meteor.Error('You have not started this meteor project with: meteor --settings settings-development.json ? You missed the reference to this settings file, or it is empty?');\n    }\n\n    //CONFIG FOR HTTP MODULE WITH HEADER AUTH (TO MAKE REST CALLS TO SENSE VIA HTTP CALLS).\n    export const authHeaders = {\n            'hdr-usr': _senseConfig.headerValue,\n            'X-Qlik-xrfkey': _senseConfig.xrfkey\n        } //\n    if (!Meteor.settings.private.certificatesDirectory) {\n        Meteor.settings.private.certificatesDirectory = 'C:\\\\ProgramData\\\\Qlik\\\\Sense\\\\Repository\\\\Exported Certificates\\\\.Local Certificates';\n        console.log('Meteor.settings.private.certificatesDirectory was empty, setting it to default: ', Meteor.settings.private.certificatesDirectory)\n    }\n\n    try {\n        export const _certs = {\n            ca: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/root.pem'),\n            key: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client_key.pem'),\n            cert: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client.pem'),\n        }\n\n        //if you use windows and this tool runs on the same machine, you can keep the parameters empty\n        // and we use the user the node service runs under... .\n        var qlikUserDomain = '';\n        var qlikUser = '';\n\n        if (!Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory) {\n            qlikUserDomain = process.env.USERDOMAIN;\n            qlikUser = process.env.USERNAME;\n        } else {\n            qlikUserDomain = Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory;\n            qlikUser = Meteor.settings.broker.qlikSense.connectToSenseAsUser\n        }\n\n        export var configCerticates = {\n            rejectUnauthorized: false,\n            hostname: _senseConfig.SenseServerInternalLanIP,\n            headers: {\n                'x-qlik-xrfkey': _senseConfig.xrfkey,\n                'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`, //`UserDirectory=INTERNAL;UserId=sa_repository` you need to give this user extra roles before this works\n                'Content-Type': 'application/json'\n            },\n            key: _certs.key,\n            cert: _certs.cert,\n            ca: _certs.ca\n        };\n        console.log('configCerticates: we connect to Qlik Sense via certificates using these credentials: ', configCerticates);\n\n        //used for engimaJS, the engine API javascript wrapper\n        var _engineConfig = {\n            host: _senseConfig.SenseServerInternalLanIP,\n            isSecure: _senseConfig.isSecure,\n            port: Meteor.settings.private.enginePort,\n            headers: {\n                'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n            },\n            ca: _certs.ca,\n            key: _certs.key,\n            cert: _certs.cert,\n            passphrase: Meteor.settings.private.passphrase,\n            rejectUnauthorized: false, // Don't reject self-signed certs\n            appname: null,\n            QIXSchema: _QIXSchema\n        };\n\n        export const enigmaServerConfig = {\n            schema: _engineConfig.QIXSchema,\n            // appId: appId,\n            session: {\n                host: _engineConfig.host,\n                port: _engineConfig.port,\n            },\n            Promise: bluebird,\n            createSocket(url) {\n                return new WebSocket(url, {\n                    ca: _certs.ca,\n                    key: _certs.key,\n                    cert: _certs.cert,\n                    headers: {\n                        'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n                    },\n                });\n            },\n            // handleLog: logRow => console.log(JSON.stringify(logRow)),\n        }\n\n        //for enigma.js\n        export const engineConfig = _engineConfig;\n        //for general (mostly client side) stuff\n\n        // Qlik sense QRS endpoint via header authentication\n        export const qlikHDRServer = 'http://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.port + '/' + _senseConfig.virtualProxy;\n        export const qrsSrv = 'https://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.qrsPort;\n\n        export const qrs = new myQRS();\n    } catch (error) {\n        console.warn('Make sure you run the \"QRS START.BAT\" as administrator? Please note that Qlik Sense is not installed, or certificate directory wrong in the settings.json file.');\n        // throw new Meteor.Error(500, 'We can not connect to Sense yet: Because we can not find the Sense certificates yet in the ' + Meteor.settings.private.certificatesDirectory + '. This can happen if Sense has not yet been installed....');\n\n    } //END CODE THAT NEEDS CERTIFICATES\n\n    function generateXrfkey() {\n        return Random.hexString(16);\n    }\n\n    export function validateJSON(body) {\n        try {\n            var data = JSON.parse(body);\n            // if came to here, then valid\n            return data;\n        } catch (e) {\n            // failed to parse\n            return null;\n        }\n    }\n\n    // //https://www.npmjs.com/package/qrs\n    //HEADER AUTHENTICATION\n    export const QRSconfig = {\n        authentication: 'header',\n        host: _senseConfig.host,\n        port: _senseConfig.port,\n        useSSL: false,\n        virtualProxy: _senseConfig.virtualProxy, //header proxy\n        headerKey: _senseConfig.headerKey,\n        headerValue: _senseConfig.headerValue, //'mydomain\\\\justme'\n    };\n\n    try {\n        Meteor.startup(async function() {\n            console.log('------------------------------------');\n            console.log('Validate settings.json parameters');\n            console.log('------------------------------------');\n            Meteor.absolutePath = path.resolve('.').split(path.sep + '.meteor')[0];\n            console.log('Meteor tries to find the settings-development-example.json file in Meteor.absolutePath:', Meteor.absolutePath)\n            var file = path.join(Meteor.absolutePath, 'settings-development-example.json');\t\t\t\n\n            // READ THE FILE \n            try {\n                var exampleSettingsFile = await fs.readJson(file);                \n\t\t\t\tconsole.log('TCL: exampleSettingsFile', exampleSettingsFile)\n            } catch (error) {\n                throw new Error('Meteor can not find your example settings file: ' + file);\n            }\n\n            // VALIDATE JSON OF SETTINGS FILE AGAINST EXAMPLE SETTINGS FILE\n            try {\n                validateJSON(exampleSettingsFile)\n            } catch (err) {\n                console.log(err);\n                throw new Error('Meteor wants to check your settings.json with the parameters in the example settings.json in the project root. Error: Cant read the example settings definitions file (not valid JSON): ' + file, err);\n            }\n\n            var keysEqual = compareKeys(Meteor.settings, exampleSettingsFile);\n            console.log('Settings file has all the keys as specified in the example json file?', keysEqual)\n            if (!keysEqual) {\n                throw new Error('Settings.json file does not have all keys as defined in the settings-development-example.json (in your project root), Please verify if you have all the keys as specified in the settings-development-example.json in the project root folder. In my dev environment: C:\\\\Users\\\\Qlikexternal\\\\Documents\\\\GitHub\\\\QRSMeteor');\n            }\n        })\n\n    } catch (error) {\n        throw new Error(error);\n    }\n} //exit server side config\n\nexport const senseConfig = _senseConfig;\n\nexport function missingParameters(obj) {\n    for (var key in obj) {\n        if (obj[key] !== null && obj[key] != \"\")\n            return false;\n    }\n    return true;\n}\n\nfunction hasSameProps(obj1, obj2) {\n    return Object.keys(obj1).every(function(prop) {\n        return obj2.hasOwnProperty(prop);\n    });\n}\n\nfunction compareKeys(...objects) {\n    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n    const union = new Set(allKeys);\n    return objects.every(object => union.size === Object.keys(object).length);\n}"]},"sourceType":"script","hash":"c84a33ee5f81d4d98e63b84812c8135a8ba6d0c5"}
