{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/server-render/server-render-tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/server-render/server-render-tests.js","filename":"packages/server-render/server-render-tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/server-render/server-render-tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/server-render/server-render-tests.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar Tinytest;\nmodule.watch(require(\"meteor/tinytest\"), {\n  Tinytest: function (v) {\n    Tinytest = v;\n  }\n}, 0);\nvar WebAppInternals;\nmodule.watch(require(\"meteor/webapp\"), {\n  WebAppInternals: function (v) {\n    WebAppInternals = v;\n  }\n}, 1);\nvar onPageLoad;\nmodule.watch(require(\"meteor/server-render\"), {\n  onPageLoad: function (v) {\n    onPageLoad = v;\n  }\n}, 2);\nvar parse;\nmodule.watch(require(\"parse5\"), {\n  parse: function (v) {\n    parse = v;\n  }\n}, 3);\nvar streamToString;\nmodule.watch(require(\"stream-to-string\"), {\n  \"default\": function (v) {\n    streamToString = v;\n  }\n}, 4);\nvar skeleton = \"\\n  <h1>Look, Ma... static HTML!</h1>\\n  <div id=\\\"container-2\\\"></div>\\n  <p>\\n    <div id=\\\"container-1\\\">\\n    </div>\\n  </p>\";\nTinytest.addAsync('server-render - boilerplate', function () {\n  function _callee2(test) {\n    var _this = this;\n\n    var realCallback, callback1, callback2, _walk, _WebAppInternals$getB, stream, boilerplate, ids, seen;\n\n    return _regenerator.default.async(function () {\n      function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // This test is not a very good demonstration of the server-render\n              // abstraction. In normal usage, you would call renderIntoElementById\n              // and not think about the rest of this stuff. The extra complexity owes\n              // to the trickiness of testing this package without using a real\n              // browser to parse the resulting HTTP response.\n              realCallback = // Use the underlying abstraction to set the static HTML skeleton.\n              WebAppInternals.registerBoilerplateDataCallback(\"meteor/server-render\", function (request, data, arch) {\n                if (request.isServerRenderTest) {\n                  test.equal(arch, \"web.browser\");\n                  test.equal(request.url, \"/server-render/test\");\n                  data.body = skeleton;\n                }\n\n                return realCallback.call(_this, request, data, arch);\n              });\n              callback1 = onPageLoad(function (sink) {\n                sink.renderIntoElementById(\"container-1\", \"<oyez/>\");\n              }); // This callback is async, and that's fine because\n              // WebAppInternals.getBoilerplate is able to yield. Internally the\n              // webapp package uses a function called getBoilerplateAsync, so the\n              // Fiber power-tools need not be involved in typical requests.\n\n              callback2 = onPageLoad(function () {\n                function _callee(sink) {\n                  return _regenerator.default.async(function () {\n                    function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.t0 = sink;\n                            _context.next = 3;\n                            return _regenerator.default.awrap(\"oy\");\n\n                          case 3:\n                            _context.t1 = _context.sent;\n                            _context.next = 6;\n                            return _regenerator.default.awrap(\"ez\");\n\n                          case 6:\n                            _context.t2 = _context.sent;\n                            _context.t3 = _context.t1 + _context.t2;\n\n                            _context.t0.renderIntoElementById.call(_context.t0, \"container-2\", _context.t3);\n\n                          case 9:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }\n\n                    return _callee$;\n                  }(), null, this);\n                }\n\n                return _callee;\n              }());\n              _context2.prev = 3;\n\n              _walk = function (node) {\n                if (node && !seen.has(node)) {\n                  seen.add(node);\n\n                  if (node.nodeName === \"div\" && node.attrs) {\n                    node.attrs.some(function (attr) {\n                      if (attr.name === \"id\") {\n                        var id = attr.value;\n\n                        if (id === \"container-1\") {\n                          test.equal(node.childNodes[0].nodeName, \"oyez\");\n                          ids.push(id);\n                        } else if (id === \"container-2\") {\n                          var child = node.childNodes[0];\n                          test.equal(child.nodeName, \"#text\");\n                          test.equal(child.value.trim(), \"oyez\");\n                          ids.push(id);\n                        }\n\n                        return true;\n                      }\n                    });\n                  }\n\n                  if (node.childNodes) {\n                    node.childNodes.forEach(_walk);\n                  }\n                }\n              };\n\n              _WebAppInternals$getB = WebAppInternals.getBoilerplate({\n                isServerRenderTest: true,\n                browser: {\n                  name: \"fake\"\n                },\n                url: \"/server-render/test\"\n              }, \"web.browser\"), stream = _WebAppInternals$getB.stream;\n              _context2.next = 8;\n              return _regenerator.default.awrap(streamToString(stream));\n\n            case 8:\n              boilerplate = _context2.sent;\n              ids = [];\n              seen = new Set();\n\n              _walk(parse(boilerplate));\n\n              test.equal(ids, [\"container-2\", \"container-1\"]);\n\n            case 13:\n              _context2.prev = 13;\n              // Cleanup to minimize interference with other tests:\n              WebAppInternals.registerBoilerplateDataCallback(\"meteor/server-render\", realCallback);\n              onPageLoad.remove(callback1);\n              onPageLoad.remove(callback2);\n              return _context2.finish(13);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }\n\n      return _callee2$;\n    }(), null, this, [[3,, 13, 18]]);\n  }\n\n  return _callee2;\n}());","map":{"version":3,"sources":["packages/server-render/server-render-tests.js"],"names":["Tinytest","module","watch","require","v","WebAppInternals","onPageLoad","parse","streamToString","skeleton","addAsync","test","realCallback","registerBoilerplateDataCallback","request","data","arch","isServerRenderTest","equal","url","body","call","callback1","sink","renderIntoElementById","callback2","walk","node","seen","has","add","nodeName","attrs","some","attr","name","id","value","childNodes","ids","push","child","trim","forEach","getBoilerplate","browser","stream","boilerplate","Set","remove"],"mappings":"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","sourcesContent":["import { Tinytest } from \"meteor/tinytest\";\nimport { WebAppInternals } from \"meteor/webapp\";\nimport { onPageLoad } from \"meteor/server-render\";\nimport { parse } from \"parse5\";\nimport streamToString from \"stream-to-string\";\n\nconst skeleton = `\n  <h1>Look, Ma... static HTML!</h1>\n  <div id=\"container-2\"></div>\n  <p>\n    <div id=\"container-1\">\n    </div>\n  </p>`;\n\nTinytest.addAsync(\n  'server-render - boilerplate',\n  async function (test) {\n    // This test is not a very good demonstration of the server-render\n    // abstraction. In normal usage, you would call renderIntoElementById\n    // and not think about the rest of this stuff. The extra complexity owes\n    // to the trickiness of testing this package without using a real\n    // browser to parse the resulting HTTP response.\n\n    const realCallback =\n      // Use the underlying abstraction to set the static HTML skeleton.\n      WebAppInternals.registerBoilerplateDataCallback(\n        \"meteor/server-render\",\n        (request, data, arch) => {\n          if (request.isServerRenderTest) {\n            test.equal(arch, \"web.browser\");\n            test.equal(request.url, \"/server-render/test\");\n            data.body = skeleton;\n          }\n          return realCallback.call(this, request, data, arch);\n        }\n      );\n\n    const callback1 = onPageLoad(sink => {\n      sink.renderIntoElementById(\"container-1\", \"<oyez/>\");\n    });\n\n    // This callback is async, and that's fine because\n    // WebAppInternals.getBoilerplate is able to yield. Internally the\n    // webapp package uses a function called getBoilerplateAsync, so the\n    // Fiber power-tools need not be involved in typical requests.\n    const callback2 = onPageLoad(async sink => {\n      sink.renderIntoElementById(\n        \"container-2\",\n        (await \"oy\") + (await \"ez\")\n      );\n    });\n\n    try {\n      const { stream } = WebAppInternals.getBoilerplate({\n        isServerRenderTest: true,\n        browser: { name: \"fake\" },\n        url: \"/server-render/test\",\n      }, \"web.browser\");\n\n      const boilerplate = await streamToString(stream);\n\n      const ids = [];\n      const seen = new Set;\n\n      function walk(node) {\n        if (node && ! seen.has(node)) {\n          seen.add(node);\n\n          if (node.nodeName === \"div\" && node.attrs) {\n            node.attrs.some(attr => {\n              if (attr.name === \"id\") {\n                const id = attr.value;\n\n                if (id === \"container-1\") {\n                  test.equal(node.childNodes[0].nodeName, \"oyez\");\n                  ids.push(id);\n                } else if (id === \"container-2\") {\n                  const child = node.childNodes[0];\n                  test.equal(child.nodeName, \"#text\");\n                  test.equal(child.value.trim(), \"oyez\");\n                  ids.push(id);\n                }\n\n                return true;\n              }\n            });\n          }\n\n          if (node.childNodes) {\n            node.childNodes.forEach(walk)\n          }\n        }\n      }\n\n      walk(parse(boilerplate));\n\n      test.equal(ids, [\"container-2\", \"container-1\"]);\n\n    } finally {\n      // Cleanup to minimize interference with other tests:\n      WebAppInternals.registerBoilerplateDataCallback(\n        \"meteor/server-render\",\n        realCallback\n      );\n\n      onPageLoad.remove(callback1);\n      onPageLoad.remove(callback2);\n    }\n  }\n);\n"]},"sourceType":"script","hash":"a61b672cb030f344afae45d4ce5db80b430745d5"}
