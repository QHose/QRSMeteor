{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/socket-stream-client/browser.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/socket-stream-client/browser.js","filename":"packages/socket-stream-client/browser.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/socket-stream-client/browser.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/socket-stream-client/browser.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  ClientStream: () => ClientStream\n});\nlet toSockjsUrl, toWebsocketUrl;\nmodule.watch(require(\"./urls.js\"), {\n  toSockjsUrl(v) {\n    toSockjsUrl = v;\n  },\n\n  toWebsocketUrl(v) {\n    toWebsocketUrl = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./sockjs-0.3.4.js\"));\nlet StreamClientCommon;\nmodule.watch(require(\"./common.js\"), {\n  StreamClientCommon(v) {\n    StreamClientCommon = v;\n  }\n\n}, 1);\n\nclass ClientStream extends StreamClientCommon {\n  // @param url {String} URL to Meteor app\n  //   \"http://subdomain.meteor.com/\" or \"/\" or\n  //   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\n  constructor(url, options) {\n    super(options);\n\n    this._initCommon(this.options); //// Constants\n    // how long between hearing heartbeat from the server until we declare\n    // the connection dead. heartbeats come every 45s (stream_server.js)\n    //\n    // NOTE: this is a older timeout mechanism. We now send heartbeats at\n    // the DDP level (https://github.com/meteor/meteor/pull/1865), and\n    // expect those timeouts to kill a non-responsive connection before\n    // this timeout fires. This is kept around for compatibility (when\n    // talking to a server that doesn't support DDP heartbeats) and can be\n    // removed later.\n\n\n    this.HEARTBEAT_TIMEOUT = 100 * 1000;\n    this.rawUrl = url;\n    this.socket = null;\n    this.lastError = null;\n    this.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.\n    // (IE8 does not support addEventListener)\n\n    if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener('online', this._online.bind(this), false\n    /* useCapture. make FF3.6 happy. */\n    ); //// Kickoff!\n\n    this._launchConnection();\n  } // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n\n\n  send(data) {\n    if (this.currentStatus.connected) {\n      this.socket.send(data);\n    }\n  } // Changes where this connection points\n\n\n  _changeUrl(url) {\n    this.rawUrl = url;\n  }\n\n  _connected() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n\n    if (this.currentStatus.connected) {\n      // already connected. do nothing. this probably shouldn't happen.\n      return;\n    } // update status\n\n\n    this.currentStatus.status = 'connected';\n    this.currentStatus.connected = true;\n    this.currentStatus.retryCount = 0;\n    this.statusChanged(); // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n\n    this.forEachCallback('reset', callback => {\n      callback();\n    });\n  }\n\n  _cleanup(maybeError) {\n    this._clearConnectionAndHeartbeatTimers();\n\n    if (this.socket) {\n      this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};\n\n      this.socket.close();\n      this.socket = null;\n    }\n\n    this.forEachCallback('disconnect', callback => {\n      callback(maybeError);\n    });\n  }\n\n  _clearConnectionAndHeartbeatTimers() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n\n    if (this.heartbeatTimer) {\n      clearTimeout(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  _heartbeat_timeout() {\n    console.log('Connection timeout. No sockjs heartbeat received.');\n\n    this._lostConnection(new this.ConnectionError(\"Heartbeat timed out\"));\n  }\n\n  _heartbeat_received() {\n    // If we've already permanently shut down this stream, the timeout is\n    // already cleared, and we don't need to set it again.\n    if (this._forcedToDisconnect) return;\n    if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);\n    this.heartbeatTimer = setTimeout(this._heartbeat_timeout.bind(this), this.HEARTBEAT_TIMEOUT);\n  }\n\n  _sockjsProtocolsWhitelist() {\n    // only allow polling protocols. no streaming.  streaming\n    // makes safari spin.\n    var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain\n    // proxies. this seems to be resolved with iOS 6. eg\n    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.\n    //\n    // iOS <4 doesn't support websockets at all so sockjs will just\n    // immediately fall back to http\n\n    var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);\n    if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);\n    return protocolsWhitelist;\n  }\n\n  _launchConnection() {\n    this._cleanup(); // cleanup the old socket, if there was one.\n\n\n    var options = (0, _objectSpread2.default)({\n      protocols_whitelist: this._sockjsProtocolsWhitelist()\n    }, this.options._sockjsOptions);\n    const hasSockJS = typeof SockJS === \"function\";\n    this.socket = hasSockJS // Convert raw URL to SockJS URL each time we open a connection, so\n    // that we can connect to random hostnames and get around browser\n    // per-host connection limits.\n    ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options) : new WebSocket(toWebsocketUrl(this.rawUrl));\n\n    this.socket.onopen = data => {\n      this.lastError = null;\n\n      this._connected();\n    };\n\n    this.socket.onmessage = data => {\n      this.lastError = null;\n\n      this._heartbeat_received();\n\n      if (this.currentStatus.connected) {\n        this.forEachCallback('message', callback => {\n          callback(data.data);\n        });\n      }\n    };\n\n    this.socket.onclose = () => {\n      if (this.lastError) {\n        this._lostConnection(this.lastError);\n      } else {\n        this._lostConnection();\n      }\n    };\n\n    this.socket.onerror = error => {\n      const {\n        lastError\n      } = this;\n      this.lastError = error;\n      if (lastError) return;\n      console.log('stream error', error, new Date().toDateString());\n    };\n\n    this.socket.onheartbeat = () => {\n      this.lastError = null;\n\n      this._heartbeat_received();\n    };\n\n    if (this.connectionTimer) clearTimeout(this.connectionTimer);\n    this.connectionTimer = setTimeout(() => {\n      this._lostConnection(new this.ConnectionError(\"DDP connection timed out\"));\n    }, this.CONNECT_TIMEOUT);\n  }\n\n}","map":{"version":3,"sources":["packages/socket-stream-client/browser.js"],"names":["module","export","ClientStream","toSockjsUrl","toWebsocketUrl","watch","require","v","StreamClientCommon","constructor","url","options","_initCommon","HEARTBEAT_TIMEOUT","rawUrl","socket","lastError","heartbeatTimer","window","addEventListener","_online","bind","_launchConnection","send","data","currentStatus","connected","_changeUrl","_connected","connectionTimer","clearTimeout","status","retryCount","statusChanged","forEachCallback","callback","_cleanup","maybeError","_clearConnectionAndHeartbeatTimers","onmessage","onclose","onerror","onheartbeat","close","_heartbeat_timeout","console","log","_lostConnection","ConnectionError","_heartbeat_received","_forcedToDisconnect","setTimeout","_sockjsProtocolsWhitelist","protocolsWhitelist","noWebsockets","navigator","test","userAgent","concat","protocols_whitelist","_sockjsOptions","hasSockJS","SockJS","undefined","WebSocket","onopen","error","Date","toDateString","CONNECT_TIMEOUT"],"mappings":"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","sourcesContent":["import {\n  toSockjsUrl,\n  toWebsocketUrl,\n} from \"./urls.js\";\nimport \"./sockjs-0.3.4.js\";\nimport { StreamClientCommon } from \"./common.js\";\n\nexport class ClientStream extends StreamClientCommon {\n  // @param url {String} URL to Meteor app\n  //   \"http://subdomain.meteor.com/\" or \"/\" or\n  //   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\n  constructor(url, options) {\n    super(options);\n\n    this._initCommon(this.options);\n\n    //// Constants\n\n    // how long between hearing heartbeat from the server until we declare\n    // the connection dead. heartbeats come every 45s (stream_server.js)\n    //\n    // NOTE: this is a older timeout mechanism. We now send heartbeats at\n    // the DDP level (https://github.com/meteor/meteor/pull/1865), and\n    // expect those timeouts to kill a non-responsive connection before\n    // this timeout fires. This is kept around for compatibility (when\n    // talking to a server that doesn't support DDP heartbeats) and can be\n    // removed later.\n    this.HEARTBEAT_TIMEOUT = 100 * 1000;\n\n    this.rawUrl = url;\n    this.socket = null;\n    this.lastError = null;\n\n    this.heartbeatTimer = null;\n\n    // Listen to global 'online' event if we are running in a browser.\n    // (IE8 does not support addEventListener)\n    if (typeof window !== 'undefined' && window.addEventListener)\n      window.addEventListener(\n        'online',\n        this._online.bind(this),\n        false /* useCapture. make FF3.6 happy. */\n      );\n\n    //// Kickoff!\n    this._launchConnection();\n  }\n\n  // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n  send(data) {\n    if (this.currentStatus.connected) {\n      this.socket.send(data);\n    }\n  }\n\n  // Changes where this connection points\n  _changeUrl(url) {\n    this.rawUrl = url;\n  }\n\n  _connected() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n\n    if (this.currentStatus.connected) {\n      // already connected. do nothing. this probably shouldn't happen.\n      return;\n    }\n\n    // update status\n    this.currentStatus.status = 'connected';\n    this.currentStatus.connected = true;\n    this.currentStatus.retryCount = 0;\n    this.statusChanged();\n\n    // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n    this.forEachCallback('reset', callback => {\n      callback();\n    });\n  }\n\n  _cleanup(maybeError) {\n    this._clearConnectionAndHeartbeatTimers();\n    if (this.socket) {\n      this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};\n      this.socket.close();\n      this.socket = null;\n    }\n\n    this.forEachCallback('disconnect', callback => {\n      callback(maybeError);\n    });\n  }\n\n  _clearConnectionAndHeartbeatTimers() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n    if (this.heartbeatTimer) {\n      clearTimeout(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  _heartbeat_timeout() {\n    console.log('Connection timeout. No sockjs heartbeat received.');\n    this._lostConnection(new this.ConnectionError(\"Heartbeat timed out\"));\n  }\n\n  _heartbeat_received() {\n    // If we've already permanently shut down this stream, the timeout is\n    // already cleared, and we don't need to set it again.\n    if (this._forcedToDisconnect) return;\n    if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);\n    this.heartbeatTimer = setTimeout(\n      this._heartbeat_timeout.bind(this),\n      this.HEARTBEAT_TIMEOUT\n    );\n  }\n\n  _sockjsProtocolsWhitelist() {\n    // only allow polling protocols. no streaming.  streaming\n    // makes safari spin.\n    var protocolsWhitelist = [\n      'xdr-polling',\n      'xhr-polling',\n      'iframe-xhr-polling',\n      'jsonp-polling'\n    ];\n\n    // iOS 4 and 5 and below crash when using websockets over certain\n    // proxies. this seems to be resolved with iOS 6. eg\n    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.\n    //\n    // iOS <4 doesn't support websockets at all so sockjs will just\n    // immediately fall back to http\n    var noWebsockets =\n      navigator &&\n      /iPhone|iPad|iPod/.test(navigator.userAgent) &&\n      /OS 4_|OS 5_/.test(navigator.userAgent);\n\n    if (!noWebsockets)\n      protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);\n\n    return protocolsWhitelist;\n  }\n\n  _launchConnection() {\n    this._cleanup(); // cleanup the old socket, if there was one.\n\n    var options = {\n      protocols_whitelist: this._sockjsProtocolsWhitelist(),\n      ...this.options._sockjsOptions\n    };\n\n    const hasSockJS = typeof SockJS === \"function\";\n\n    this.socket = hasSockJS\n      // Convert raw URL to SockJS URL each time we open a connection, so\n      // that we can connect to random hostnames and get around browser\n      // per-host connection limits.\n      ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options)\n      : new WebSocket(toWebsocketUrl(this.rawUrl));\n\n    this.socket.onopen = data => {\n      this.lastError = null;\n      this._connected();\n    };\n\n    this.socket.onmessage = data => {\n      this.lastError = null;\n      this._heartbeat_received();\n      if (this.currentStatus.connected) {\n        this.forEachCallback('message', callback => {\n          callback(data.data);\n        });\n      }\n    };\n\n    this.socket.onclose = () => {\n      if (this.lastError) {\n        this._lostConnection(this.lastError);\n      } else {\n        this._lostConnection();\n      }\n    };\n\n    this.socket.onerror = error => {\n      const { lastError } = this;\n      this.lastError = error;\n      if (lastError) return;\n      console.log(\n        'stream error',\n        error,\n        new Date().toDateString()\n      );\n    };\n\n    this.socket.onheartbeat = () => {\n      this.lastError = null;\n      this._heartbeat_received();\n    };\n\n    if (this.connectionTimer) clearTimeout(this.connectionTimer);\n    this.connectionTimer = setTimeout(() => {\n      this._lostConnection(\n        new this.ConnectionError(\"DDP connection timed out\")\n      );\n    }, this.CONNECT_TIMEOUT);\n  }\n}\n"]},"sourceType":"script","hash":"e2b109ce1ec9b64b4be60db4949476450e190419"}
