{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/mongo/collection_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/mongo/collection_tests.js","filename":"packages/mongo/collection_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/mongo/collection_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/collection_tests.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nTinytest.add('collection - call Mongo.Collection without new', function (test) {\n  test.throws(function () {\n    Mongo.Collection(null);\n  });\n});\nTinytest.add('collection - call new Mongo.Collection multiple times', function (test) {\n  var collectionName = 'multiple_times_1_' + test.id;\n  new Mongo.Collection(collectionName);\n  test.throws(function () {\n    new Mongo.Collection(collectionName);\n  }, /There is already a collection named/);\n});\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true', function (test) {\n  var collectionName = 'multiple_times_2_' + test.id;\n  new Mongo.Collection(collectionName);\n\n  try {\n    new Mongo.Collection(collectionName, {\n      _suppressSameNameError: true\n    });\n    test.ok();\n  } catch (error) {\n    console.log(error);\n    test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n  }\n});\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false', function (test) {\n  var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n  var methodCollectionName = 'hasmethods' + test.id;\n  var hasmethods = new Mongo.Collection(methodCollectionName);\n  test.equal((0, _typeof2.default)(hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert']), 'function');\n  var noMethodCollectionName = 'nomethods' + test.id;\n  var nomethods = new Mongo.Collection(noMethodCollectionName, {\n    defineMutationMethods: false\n  });\n  test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n});\nTinytest.add('collection - call find with sort function', function (test) {\n  var initialize = function (collection) {\n    collection.insert({\n      a: 2\n    });\n    collection.insert({\n      a: 3\n    });\n    collection.insert({\n      a: 1\n    });\n  };\n\n  var sorter = function (a, b) {\n    return a.a - b.a;\n  };\n\n  var getSorted = function (collection) {\n    return collection.find({}, {\n      sort: sorter\n    }).map(function (doc) {\n      return doc.a;\n    });\n  };\n\n  var collectionName = 'sort' + test.id;\n  var localCollection = new Mongo.Collection(null);\n  var namedCollection = new Mongo.Collection(collectionName, {\n    connection: null\n  });\n  initialize(localCollection);\n  test.equal(getSorted(localCollection), [1, 2, 3]);\n  initialize(namedCollection);\n  test.equal(getSorted(namedCollection), [1, 2, 3]);\n});\nTinytest.add('collection - call native find with sort function', function (test) {\n  var collectionName = 'sortNative' + test.id;\n  var nativeCollection = new Mongo.Collection(collectionName);\n\n  if (Meteor.isServer) {\n    test.throws(function () {\n      nativeCollection.find({}, {\n        sort: function () {}\n      }).map(function (doc) {\n        return doc.a;\n      });\n    }, /Illegal sort clause/);\n  }\n});\nTinytest.add('collection - calling native find with maxTimeMs should timeout', function (test) {\n  var collectionName = 'findOptions1' + test.id;\n  var collection = new Mongo.Collection(collectionName);\n  collection.insert({\n    a: 1\n  });\n\n  function doTest() {\n    return collection.find({\n      $where: \"sleep(100) || true\"\n    }, {\n      maxTimeMs: 50\n    }).count();\n  }\n\n  if (Meteor.isServer) {\n    test.throws(doTest);\n  }\n});\nTinytest.add('collection - calling native find with $reverse hint should reverse on server', function (test) {\n  var collectionName = 'findOptions2' + test.id;\n  var collection = new Mongo.Collection(collectionName);\n  collection.insert({\n    a: 1\n  });\n  collection.insert({\n    a: 2\n  });\n\n  function m(doc) {\n    return doc.a;\n  }\n\n  var fwd = collection.find({}, {\n    hint: {\n      $natural: 1\n    }\n  }).map(m);\n  var rev = collection.find({}, {\n    hint: {\n      $natural: -1\n    }\n  }).map(m);\n\n  if (Meteor.isServer) {\n    test.equal(fwd, rev.reverse());\n  } else {\n    // NOTE: should be documented that hints don't work on client\n    test.equal(fwd, rev);\n  }\n});\nTinytest.addAsync('collection - calling native find with good hint and maxTimeMs should succeed', function (test, done) {\n  var collectionName = 'findOptions3' + test.id;\n  var collection = new Mongo.Collection(collectionName);\n  collection.insert({\n    a: 1\n  });\n  Promise.resolve(Meteor.isServer && collection.rawCollection().createIndex({\n    a: 1\n  })).then(function () {\n    test.equal(collection.find({}, {\n      hint: {\n        a: 1\n      },\n      maxTimeMs: 1000\n    }).count(), 1);\n    done();\n  }).catch(function (error) {\n    return test.fail(error.message);\n  });\n});","map":{"version":3,"sources":["packages/mongo/collection_tests.js"],"names":["Tinytest","add","test","throws","Mongo","Collection","collectionName","id","_suppressSameNameError","ok","error","console","log","fail","handlerPropName","Meteor","isClient","methodCollectionName","hasmethods","equal","_connection","noMethodCollectionName","nomethods","defineMutationMethods","undefined","initialize","collection","insert","a","sorter","b","getSorted","find","sort","map","doc","localCollection","namedCollection","connection","nativeCollection","isServer","doTest","$where","maxTimeMs","count","m","fwd","hint","$natural","rev","reverse","addAsync","done","Promise","resolve","rawCollection","createIndex","then","catch","message"],"mappings":"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","sourcesContent":["Tinytest.add(\n  'collection - call Mongo.Collection without new',\n  function (test) {\n    test.throws(function () {\n      Mongo.Collection(null);\n    });\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times',\n  function (test) {\n    var collectionName = 'multiple_times_1_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    test.throws(\n      function () {\n        new Mongo.Collection(collectionName);\n      },\n      /There is already a collection named/\n    );\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true',\n  function (test) {\n    var collectionName = 'multiple_times_2_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    try {\n      new Mongo.Collection(collectionName, {_suppressSameNameError: true});\n      test.ok();\n    } catch (error) {\n      console.log(error);\n      test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n    }\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false',\n  function (test) {\n    var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n\n    var methodCollectionName = 'hasmethods' + test.id;\n    var hasmethods = new Mongo.Collection(methodCollectionName);\n    test.equal(typeof hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert'], 'function');\n\n    var noMethodCollectionName = 'nomethods' + test.id;\n    var nomethods = new Mongo.Collection(noMethodCollectionName, {defineMutationMethods: false});\n    test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n  }\n);\n\nTinytest.add('collection - call find with sort function',\n  function (test) {\n    var initialize = function (collection) {\n      collection.insert({a: 2});\n      collection.insert({a: 3});\n      collection.insert({a: 1});\n    };\n\n    var sorter = function (a, b) {\n      return a.a - b.a;\n    };\n\n    var getSorted = function (collection) {\n      return collection.find({}, {sort: sorter}).map(function (doc) { return doc.a; });\n    };\n\n    var collectionName = 'sort' + test.id;\n    var localCollection = new Mongo.Collection(null);\n    var namedCollection = new Mongo.Collection(collectionName, {connection: null});\n\n    initialize(localCollection);\n    test.equal(getSorted(localCollection), [1, 2, 3]);\n\n    initialize(namedCollection);\n    test.equal(getSorted(namedCollection), [1, 2, 3]);\n  }\n);\n\nTinytest.add('collection - call native find with sort function',\n  function (test) {\n    var collectionName = 'sortNative' + test.id;\n    var nativeCollection = new Mongo.Collection(collectionName);\n\n    if (Meteor.isServer) {\n      test.throws(\n        function () {\n          nativeCollection\n            .find({}, {\n              sort: function () {},\n            })\n            .map(function (doc) {\n              return doc.a;\n            });\n        },\n        /Illegal sort clause/\n      );\n    }\n  }\n);\n\nTinytest.add('collection - calling native find with maxTimeMs should timeout',\n  function(test) {\n    var collectionName = 'findOptions1' + test.id;\n    var collection = new Mongo.Collection(collectionName);\n    collection.insert({a: 1});\n\n    function doTest() {\n      return collection.find({$where: \"sleep(100) || true\"}, {maxTimeMs: 50}).count();\n    }\n    if (Meteor.isServer) {\n      test.throws(doTest);\n    }\n  }\n);\n\n\nTinytest.add('collection - calling native find with $reverse hint should reverse on server',\n  function(test) {\n    var collectionName = 'findOptions2' + test.id;\n    var collection = new Mongo.Collection(collectionName);\n    collection.insert({a: 1});\n    collection.insert({a: 2});\n\n    function m(doc) { return doc.a; }\n    var fwd = collection.find({}, {hint: {$natural: 1}}).map(m);\n    var rev = collection.find({}, {hint: {$natural: -1}}).map(m);\n    if (Meteor.isServer) {\n      test.equal(fwd, rev.reverse());\n    } else {\n      // NOTE: should be documented that hints don't work on client\n      test.equal(fwd, rev);\n    }\n  }\n);\n\nTinytest.addAsync('collection - calling native find with good hint and maxTimeMs should succeed',\n  function(test, done) {\n    var collectionName = 'findOptions3' + test.id;\n    var collection = new Mongo.Collection(collectionName);\n    collection.insert({a: 1});\n\n    Promise.resolve(\n      Meteor.isServer &&\n        collection.rawCollection().createIndex({ a: 1 })\n    ).then(() => {\n      test.equal(collection.find({}, {\n        hint: {a: 1},\n        maxTimeMs: 1000\n      }).count(), 1);\n      done();\n    }).catch(error => test.fail(error.message));\n  }\n);\n"]},"sourceType":"script","hash":"a136d4842d183ac67d1da254edf9ec58f96cd333"}
