{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/base64/base64_test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/base64/base64_test.js","filename":"packages/base64/base64_test.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/base64/base64_test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/base64/base64_test.js"}},"code":"var Base64;\nmodule.watch(require(\"./base64.js\"), {\n  Base64: function (v) {\n    Base64 = v;\n  }\n}, 0);\n\nvar asciiToArray = function (str) {\n  var arr = Base64.newBinary(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n\n    if (c > 0xFF) {\n      throw new Error(\"Not ascii\");\n    }\n\n    arr[i] = c;\n  }\n\n  return arr;\n};\n\nvar arrayToAscii = function (arr) {\n  return arr.reduce(function (prev, charCode) {\n    return prev.push(String.fromCharCode(charCode)) && prev;\n  }, []).join('');\n};\n\nTinytest.add(\"base64 - testing the test\", function (test) {\n  test.equal(arrayToAscii(asciiToArray(\"The quick brown fox jumps over the lazy dog\")), \"The quick brown fox jumps over the lazy dog\");\n});\nTinytest.add(\"base64 - empty\", function (test) {\n  test.equal(Base64.encode(EJSON.newBinary(0)), \"\");\n  test.equal(Base64.decode(\"\"), EJSON.newBinary(0));\n});\nTinytest.add(\"base64 - wikipedia examples\", function (test) {\n  var tests = [{\n    txt: \"pleasure.\",\n    res: \"cGxlYXN1cmUu\"\n  }, {\n    txt: \"leasure.\",\n    res: \"bGVhc3VyZS4=\"\n  }, {\n    txt: \"easure.\",\n    res: \"ZWFzdXJlLg==\"\n  }, {\n    txt: \"asure.\",\n    res: \"YXN1cmUu\"\n  }, {\n    txt: \"sure.\",\n    res: \"c3VyZS4=\"\n  }];\n  tests.forEach(function (t) {\n    test.equal(Base64.encode(asciiToArray(t.txt)), t.res);\n    test.equal(arrayToAscii(Base64.decode(t.res)), t.txt);\n  });\n});\nTinytest.add(\"base64 - non-text examples\", function (test) {\n  var tests = [{\n    array: [0, 0, 0],\n    b64: \"AAAA\"\n  }, {\n    array: [0, 0, 1],\n    b64: \"AAAB\"\n  }];\n  tests.forEach(function (t) {\n    test.equal(Base64.encode(t.array), t.b64);\n    var expectedAsBinary = EJSON.newBinary(t.array.length);\n    t.array.forEach(function (val, i) {\n      return expectedAsBinary[i] = val;\n    });\n    test.equal(Base64.decode(t.b64), expectedAsBinary);\n  });\n});","map":{"version":3,"sources":["packages/base64/base64_test.js"],"names":["Base64","module","watch","require","v","asciiToArray","arr","newBinary","str","length","i","c","charCodeAt","Error","arrayToAscii","reduce","prev","charCode","push","String","fromCharCode","join","Tinytest","add","test","equal","encode","EJSON","decode","tests","txt","res","forEach","t","array","b64","expectedAsBinary","val"],"mappings":"AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACH,QAAD,YAAQI,CAAR,EAAU;AAACJ,aAAOI,CAAP;AAAS;AAApB,CAApC,EAA0D,CAA1D;;AAEX,IAAMC,eAAe,eAAO;AAC1B,MAAMC,MAAMN,OAAOO,SAAP,CAAiBC,IAAIC,MAArB,CAAZ;;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,IAAIC,MAAxB,EAAgCC,GAAhC,EAAqC;AACnC,QAAMC,IAAIH,IAAII,UAAJ,CAAeF,CAAf,CAAV;;AACA,QAAIC,IAAI,IAAR,EAAc;AACZ,YAAM,IAAIE,KAAJ,CAAU,WAAV,CAAN;AACD;;AAEDP,QAAII,CAAJ,IAASC,CAAT;AACD;;AAED,SAAOL,GAAP;AACD,CAZD;;AAcA,IAAMQ,eAAe;AAAA,SAAOR,IACzBS,MADyB,CAExB,UAACC,IAAD,EAAOC,QAAP;AAAA,WAAoBD,KAAKE,IAAL,CAAUC,OAAOC,YAAP,CAAoBH,QAApB,CAAV,KAA4CD,IAAhE;AAAA,GAFwB,EAE8C,EAF9C,EAGxBK,IAHwB,CAGnB,EAHmB,CAAP;AAAA,CAArB;;AAKAC,SAASC,GAAT,CAAa,2BAAb,EAA0C,gBAAQ;AAChDC,OAAKC,KAAL,CAAWX,aAAaT,aAAa,6CAAb,CAAb,CAAX,EACW,6CADX;AAED,CAHD;AAKAiB,SAASC,GAAT,CAAa,gBAAb,EAA+B,gBAAQ;AACrCC,OAAKC,KAAL,CAAWzB,OAAO0B,MAAP,CAAcC,MAAMpB,SAAN,CAAgB,CAAhB,CAAd,CAAX,EAA8C,EAA9C;AACAiB,OAAKC,KAAL,CAAWzB,OAAO4B,MAAP,CAAc,EAAd,CAAX,EAA8BD,MAAMpB,SAAN,CAAgB,CAAhB,CAA9B;AACD,CAHD;AAMAe,SAASC,GAAT,CAAa,6BAAb,EAA4C,gBAAQ;AAClD,MAAMM,QAAQ,CACZ;AAACC,SAAK,WAAN;AAAmBC,SAAK;AAAxB,GADY,EAEZ;AAACD,SAAK,UAAN;AAAkBC,SAAK;AAAvB,GAFY,EAGZ;AAACD,SAAK,SAAN;AAAiBC,SAAK;AAAtB,GAHY,EAIZ;AAACD,SAAK,QAAN;AAAgBC,SAAK;AAArB,GAJY,EAKZ;AAACD,SAAK,OAAN;AAAeC,SAAK;AAApB,GALY,CAAd;AAOAF,QAAMG,OAAN,CAAc,aAAK;AACjBR,SAAKC,KAAL,CAAWzB,OAAO0B,MAAP,CAAcrB,aAAa4B,EAAEH,GAAf,CAAd,CAAX,EAA+CG,EAAEF,GAAjD;AACAP,SAAKC,KAAL,CAAWX,aAAad,OAAO4B,MAAP,CAAcK,EAAEF,GAAhB,CAAb,CAAX,EAA+CE,EAAEH,GAAjD;AACD,GAHD;AAID,CAZD;AAcAR,SAASC,GAAT,CAAa,4BAAb,EAA2C,gBAAQ;AACjD,MAAMM,QAAQ,CACZ;AAACK,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR;AAAmBC,SAAK;AAAxB,GADY,EAEZ;AAACD,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR;AAAmBC,SAAK;AAAxB,GAFY,CAAd;AAIAN,QAAMG,OAAN,CAAc,aAAK;AACjBR,SAAKC,KAAL,CAAWzB,OAAO0B,MAAP,CAAcO,EAAEC,KAAhB,CAAX,EAAmCD,EAAEE,GAArC;AACA,QAAMC,mBAAmBT,MAAMpB,SAAN,CAAgB0B,EAAEC,KAAF,CAAQzB,MAAxB,CAAzB;AACAwB,MAAEC,KAAF,CAAQF,OAAR,CAAgB,UAACK,GAAD,EAAM3B,CAAN;AAAA,aAAY0B,iBAAiB1B,CAAjB,IAAsB2B,GAAlC;AAAA,KAAhB;AACAb,SAAKC,KAAL,CAAWzB,OAAO4B,MAAP,CAAcK,EAAEE,GAAhB,CAAX,EAAiCC,gBAAjC;AACD,GALD;AAMD,CAXD","sourcesContent":["import { Base64 } from './base64.js';\n\nconst asciiToArray = str => {\n  const arr = Base64.newBinary(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c > 0xFF) {\n      throw new Error(\"Not ascii\");\n    }\n\n    arr[i] = c;\n  }\n  \n  return arr;\n};\n\nconst arrayToAscii = arr => arr\n  .reduce(\n    (prev, charCode) => prev.push(String.fromCharCode(charCode)) && prev, []\n  ).join('');\n\nTinytest.add(\"base64 - testing the test\", test => {\n  test.equal(arrayToAscii(asciiToArray(\"The quick brown fox jumps over the lazy dog\")),\n             \"The quick brown fox jumps over the lazy dog\");\n});\n\nTinytest.add(\"base64 - empty\", test => {\n  test.equal(Base64.encode(EJSON.newBinary(0)), \"\");\n  test.equal(Base64.decode(\"\"), EJSON.newBinary(0));\n});\n\n\nTinytest.add(\"base64 - wikipedia examples\", test => {\n  const tests = [\n    {txt: \"pleasure.\", res: \"cGxlYXN1cmUu\"},\n    {txt: \"leasure.\", res: \"bGVhc3VyZS4=\"},\n    {txt: \"easure.\", res: \"ZWFzdXJlLg==\"},\n    {txt: \"asure.\", res: \"YXN1cmUu\"},\n    {txt: \"sure.\", res: \"c3VyZS4=\"}\n  ];\n  tests.forEach(t => {\n    test.equal(Base64.encode(asciiToArray(t.txt)), t.res);\n    test.equal(arrayToAscii(Base64.decode(t.res)), t.txt);\n  });\n});\n\nTinytest.add(\"base64 - non-text examples\", test => {\n  const tests = [\n    {array: [0, 0, 0], b64: \"AAAA\"},\n    {array: [0, 0, 1], b64: \"AAAB\"}\n  ];\n  tests.forEach(t => {\n    test.equal(Base64.encode(t.array), t.b64);\n    const expectedAsBinary = EJSON.newBinary(t.array.length);\n    t.array.forEach((val, i) => expectedAsBinary[i] = val);\n    test.equal(Base64.decode(t.b64), expectedAsBinary);\n  });\n});\n"]},"sourceType":"script","hash":"74b69bb9cf062de621576b3a3de581b35a64e0e1"}
