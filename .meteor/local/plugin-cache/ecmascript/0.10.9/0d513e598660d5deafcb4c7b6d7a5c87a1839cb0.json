{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/accounts-password/password_tests_setup.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/accounts-password/password_tests_setup.js","filename":"packages/accounts-password/password_tests_setup.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/accounts-password/password_tests_setup.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/password_tests_setup.js"}},"code":"Accounts.validateNewUser(function (user) {\n  if (user.profile && user.profile.invalidAndThrowException) throw new Meteor.Error(403, \"An exception thrown within Accounts.validateNewUser\");\n  return !(user.profile && user.profile.invalid);\n});\nAccounts.onCreateUser(function (options, user) {\n  if (options.testOnCreateUserHook) {\n    user.profile = user.profile || {};\n    user.profile.touchedByOnCreateUser = true;\n    return user;\n  } else {\n    return 'TEST DEFAULT HOOK';\n  }\n}); // connection id -> action\n\nvar invalidateLogins = {};\nMeteor.methods({\n  testInvalidateLogins: function (action) {\n    if (action) invalidateLogins[this.connection.id] = action;else delete invalidateLogins[this.connection.id];\n  }\n});\nAccounts.validateLoginAttempt(function (attempt) {\n  var action = attempt && attempt.connection && invalidateLogins[attempt.connection.id];\n  if (!action) return true;else if (action === 'fail') return false;else if (action === 'hide') throw new Meteor.Error(403, 'hide actual error');else throw new Error('unknown action: ' + action);\n}); // connection id -> [{successful: boolean, attempt: object}]\n\nvar capturedLogins = {};\nMeteor.methods({\n  testCaptureLogins: function () {\n    capturedLogins[this.connection.id] = [];\n  },\n  testCaptureLogouts: function () {\n    capturedLogouts = [];\n  },\n  testFetchCapturedLogins: function () {\n    if (capturedLogins[this.connection.id]) {\n      var logins = capturedLogins[this.connection.id];\n      delete capturedLogins[this.connection.id];\n      return logins;\n    } else return [];\n  },\n  testFetchCapturedLogouts: function () {\n    return capturedLogouts;\n  }\n});\nAccounts.onLogin(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n  if (capturedLogins[attempt.connection.id]) capturedLogins[attempt.connection.id].push({\n    successful: true,\n    attempt: _.omit(attempt, 'connection')\n  });\n});\nAccounts.onLoginFailure(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n\n  if (capturedLogins[attempt.connection.id]) {\n    capturedLogins[attempt.connection.id].push({\n      successful: false,\n      attempt: _.omit(attempt, 'connection')\n    });\n  }\n});\nvar capturedLogouts = [];\nAccounts.onLogout(function () {\n  capturedLogouts.push({\n    successful: true\n  });\n}); // Because this is global state that affects every client, we can't turn\n// it on and off during the tests. Doing so would mean two simultaneous\n// test runs could collide with each other.\n//\n// We should probably have some sort of server-isolation between\n// multiple test runs. Perhaps a separate server instance per run. This\n// problem isn't unique to this test, there are other places in the code\n// where we do various hacky things to work around the lack of\n// server-side isolation.\n//\n// For now, we just test the one configuration state. You can comment\n// out each configuration option and see that the tests fail.\n\nAccounts.config({\n  sendVerificationEmail: true\n});\nMeteor.methods({\n  testMeteorUser: function () {\n    return Meteor.user();\n  },\n  clearUsernameAndProfile: function () {\n    if (!this.userId) throw new Error(\"Not logged in!\");\n    Meteor.users.update(this.userId, {\n      $unset: {\n        profile: 1,\n        username: 1\n      }\n    });\n  },\n  expireTokens: function () {\n    Accounts._expireTokens(new Date(), this.userId);\n  },\n  removeUser: function (username) {\n    Meteor.users.remove({\n      \"username\": username\n    });\n  }\n}); // Create a user that had previously logged in with SRP.\n\nMeteor.methods({\n  testCreateSRPUser: function () {\n    var username = Random.id();\n    Meteor.users.remove({\n      username: username\n    });\n    var userId = Accounts.createUser({\n      username: username\n    });\n    Meteor.users.update(userId, {\n      '$set': {\n        'services.password.srp': {\n          \"identity\": \"iPNrshUEcpOSO5fRDu7o4RRDc9OJBCGGljYpcXCuyg9\",\n          \"salt\": \"Dk3lFggdEtcHU3aKm6Odx7sdcaIrMskQxBbqtBtFzt6\",\n          \"verifier\": \"2e8bce266b1357edf6952cc56d979db19f699ced97edfb2854b95972f820b0c7006c1a18e98aad40edf3fe111b87c52ef7dd06b320ce452d01376df2d560fdc4d8e74f7a97bca1f67b3cfaef34dee34dd6c76571c247d762624dc166dab5499da06bc9358528efa75bf74e2e7f5a80d09e60acf8856069ae5cfb080f2239ee76\"\n        }\n      }\n    });\n    return username;\n  },\n  testSRPUpgrade: function (username) {\n    var user = Meteor.users.findOne({\n      username: username\n    });\n    if (user.services && user.services.password && user.services.password.srp) throw new Error(\"srp wasn't removed\");\n    if (!(user.services && user.services.password && user.services.password.bcrypt)) throw new Error(\"bcrypt wasn't added\");\n  },\n  testNoSRPUpgrade: function (username) {\n    var user = Meteor.users.findOne({\n      username: username\n    });\n    if (user.services && user.services.password && user.services.password.bcrypt) throw new Error(\"bcrypt was added\");\n    if (user.services && user.services.password && !user.services.password.srp) throw new Error(\"srp was removed\");\n  }\n});","map":{"version":3,"sources":["packages/accounts-password/password_tests_setup.js"],"names":["Accounts","validateNewUser","user","profile","invalidAndThrowException","Meteor","Error","invalid","onCreateUser","options","testOnCreateUserHook","touchedByOnCreateUser","invalidateLogins","methods","testInvalidateLogins","action","connection","id","validateLoginAttempt","attempt","capturedLogins","testCaptureLogins","testCaptureLogouts","capturedLogouts","testFetchCapturedLogins","logins","testFetchCapturedLogouts","onLogin","push","successful","_","omit","onLoginFailure","onLogout","config","sendVerificationEmail","testMeteorUser","clearUsernameAndProfile","userId","users","update","$unset","username","expireTokens","_expireTokens","Date","removeUser","remove","testCreateSRPUser","Random","createUser","testSRPUpgrade","findOne","services","password","srp","bcrypt","testNoSRPUpgrade"],"mappings":"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","sourcesContent":["Accounts.validateNewUser(function (user) {\n  if (user.profile && user.profile.invalidAndThrowException)\n    throw new Meteor.Error(403, \"An exception thrown within Accounts.validateNewUser\");\n  return !(user.profile && user.profile.invalid);\n});\n\nAccounts.onCreateUser(function (options, user) {\n  if (options.testOnCreateUserHook) {\n    user.profile = user.profile || {};\n    user.profile.touchedByOnCreateUser = true;\n    return user;\n  } else {\n    return 'TEST DEFAULT HOOK';\n  }\n});\n\n\n// connection id -> action\nvar invalidateLogins = {};\n\n\nMeteor.methods({\n  testInvalidateLogins: function (action) {\n    if (action)\n      invalidateLogins[this.connection.id] = action;\n    else\n      delete invalidateLogins[this.connection.id];\n  }\n});\n\n\nAccounts.validateLoginAttempt(function (attempt) {\n  var action =\n    attempt &&\n    attempt.connection &&\n    invalidateLogins[attempt.connection.id];\n\n  if (! action)\n    return true;\n  else if (action === 'fail')\n    return false;\n  else if (action === 'hide')\n    throw new Meteor.Error(403, 'hide actual error');\n  else\n    throw new Error('unknown action: ' + action);\n});\n\n\n// connection id -> [{successful: boolean, attempt: object}]\nvar capturedLogins = {};\n\nMeteor.methods({\n  testCaptureLogins: function () {\n    capturedLogins[this.connection.id] = [];\n  },\n\n  testCaptureLogouts: function() {\n    capturedLogouts = [];\n  },\n\n  testFetchCapturedLogins: function () {\n    if (capturedLogins[this.connection.id]) {\n      var logins = capturedLogins[this.connection.id];\n      delete capturedLogins[this.connection.id];\n      return logins;\n    }\n    else\n      return [];\n  },\n\n  testFetchCapturedLogouts: function() {\n    return capturedLogouts;\n  }\n});\n\nAccounts.onLogin(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n\n  if (capturedLogins[attempt.connection.id])\n    capturedLogins[attempt.connection.id].push({\n      successful: true,\n      attempt: _.omit(attempt, 'connection')\n    });\n});\n\nAccounts.onLoginFailure(function (attempt) {\n  if (!attempt.connection) // if login method called from the server\n    return;\n\n  if (capturedLogins[attempt.connection.id]) {\n    capturedLogins[attempt.connection.id].push({\n      successful: false,\n      attempt: _.omit(attempt, 'connection')\n    });\n  }\n});\n\nvar capturedLogouts = [];\n\nAccounts.onLogout(function() {\n  capturedLogouts.push({\n    successful: true\n  });\n});\n\n// Because this is global state that affects every client, we can't turn\n// it on and off during the tests. Doing so would mean two simultaneous\n// test runs could collide with each other.\n//\n// We should probably have some sort of server-isolation between\n// multiple test runs. Perhaps a separate server instance per run. This\n// problem isn't unique to this test, there are other places in the code\n// where we do various hacky things to work around the lack of\n// server-side isolation.\n//\n// For now, we just test the one configuration state. You can comment\n// out each configuration option and see that the tests fail.\nAccounts.config({\n  sendVerificationEmail: true\n});\n\n\nMeteor.methods({\n  testMeteorUser: function () { return Meteor.user(); },\n  clearUsernameAndProfile: function () {\n    if (!this.userId)\n      throw new Error(\"Not logged in!\");\n    Meteor.users.update(this.userId,\n                        {$unset: {profile: 1, username: 1}});\n  },\n\n  expireTokens: function () {\n    Accounts._expireTokens(new Date(), this.userId);\n  },\n  removeUser: function (username) {\n    Meteor.users.remove({ \"username\": username });\n  }\n});\n\n\n// Create a user that had previously logged in with SRP.\n\nMeteor.methods({\n  testCreateSRPUser: function () {\n    var username = Random.id();\n    Meteor.users.remove({username: username});\n    var userId = Accounts.createUser({username: username});\n    Meteor.users.update(\n      userId,\n      { '$set': { 'services.password.srp': {\n          \"identity\" : \"iPNrshUEcpOSO5fRDu7o4RRDc9OJBCGGljYpcXCuyg9\",\n          \"salt\" : \"Dk3lFggdEtcHU3aKm6Odx7sdcaIrMskQxBbqtBtFzt6\",\n          \"verifier\" : \"2e8bce266b1357edf6952cc56d979db19f699ced97edfb2854b95972f820b0c7006c1a18e98aad40edf3fe111b87c52ef7dd06b320ce452d01376df2d560fdc4d8e74f7a97bca1f67b3cfaef34dee34dd6c76571c247d762624dc166dab5499da06bc9358528efa75bf74e2e7f5a80d09e60acf8856069ae5cfb080f2239ee76\"\n      } } }\n    );\n    return username;\n  },\n\n  testSRPUpgrade: function (username) {\n    var user = Meteor.users.findOne({username: username});\n    if (user.services && user.services.password && user.services.password.srp)\n      throw new Error(\"srp wasn't removed\");\n    if (!(user.services && user.services.password && user.services.password.bcrypt))\n      throw new Error(\"bcrypt wasn't added\");\n  },\n\n  testNoSRPUpgrade: function (username) {\n    var user = Meteor.users.findOne({username: username});\n    if (user.services && user.services.password && user.services.password.bcrypt)\n      throw new Error(\"bcrypt was added\");\n    if (user.services && user.services.password && ! user.services.password.srp)\n      throw new Error(\"srp was removed\");\n  }\n});\n"]},"sourceType":"script","hash":"0d513e598660d5deafcb4c7b6d7a5c87a1839cb0"}
