{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/minimongo/minimongo_tests_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/minimongo/minimongo_tests_client.js","filename":"packages/minimongo/minimongo_tests_client.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/minimongo/minimongo_tests_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/minimongo_tests_client.js"}},"code":"let hasOwn;\nmodule.watch(require(\"./common\"), {\n  hasOwn(v) {\n    hasOwn = v;\n  }\n\n}, 0);\n// Hack to make LocalCollection generate ObjectIDs by default.\nLocalCollection._useOID = true; // assert that f is a strcmp-style comparison function that puts\n// 'values' in the provided order\n\nconst assert_ordering = (test, f, values) => {\n  for (let i = 0; i < values.length; i++) {\n    let x = f(values[i], values[i]);\n\n    if (x !== 0) {\n      // XXX super janky\n      test.fail({\n        type: 'minimongo-ordering',\n        message: \"value doesn't order as equal to itself\",\n        value: JSON.stringify(values[i]),\n        should_be_zero_but_got: JSON.stringify(x)\n      });\n    }\n\n    if (i + 1 < values.length) {\n      const less = values[i];\n      const more = values[i + 1];\n      x = f(less, more);\n\n      if (!(x < 0)) {\n        // XXX super janky\n        test.fail({\n          type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_negative_but_got: JSON.stringify(x)\n        });\n      }\n\n      x = f(more, less);\n\n      if (!(x > 0)) {\n        // XXX super janky\n        test.fail({\n          type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_positive_but_got: JSON.stringify(x)\n        });\n      }\n    }\n  }\n};\n\nconst log_callbacks = operations => ({\n  addedAt(obj, idx, before) {\n    delete obj._id;\n    operations.push(EJSON.clone(['added', obj, idx, before]));\n  },\n\n  changedAt(obj, old_obj, at) {\n    delete obj._id;\n    delete old_obj._id;\n    operations.push(EJSON.clone(['changed', obj, at, old_obj]));\n  },\n\n  movedTo(obj, old_at, new_at, before) {\n    delete obj._id;\n    operations.push(EJSON.clone(['moved', obj, old_at, new_at, before]));\n  },\n\n  removedAt(old_obj, at) {\n    const id = old_obj._id;\n    delete old_obj._id;\n    operations.push(EJSON.clone(['removed', id, at, old_obj]));\n  }\n\n}); // XXX test shared structure in all MM entrypoints\n\n\nTinytest.add('minimongo - basics', test => {\n  const c = new LocalCollection();\n  let fluffyKitten_id;\n  let count;\n  fluffyKitten_id = c.insert({\n    type: 'kitten',\n    name: 'fluffy'\n  });\n  c.insert({\n    type: 'kitten',\n    name: 'snookums'\n  });\n  c.insert({\n    type: 'cryptographer',\n    name: 'alice'\n  });\n  c.insert({\n    type: 'cryptographer',\n    name: 'bob'\n  });\n  c.insert({\n    type: 'cryptographer',\n    name: 'cara'\n  });\n  test.equal(c.find().count(), 5);\n  test.equal(c.find({\n    type: 'kitten'\n  }).count(), 2);\n  test.equal(c.find({\n    type: 'cryptographer'\n  }).count(), 3);\n  test.length(c.find({\n    type: 'kitten'\n  }).fetch(), 2);\n  test.length(c.find({\n    type: 'cryptographer'\n  }).fetch(), 3);\n  test.equal(fluffyKitten_id, c.findOne({\n    type: 'kitten',\n    name: 'fluffy'\n  })._id);\n  c.remove({\n    name: 'cara'\n  });\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({\n    type: 'kitten'\n  }).count(), 2);\n  test.equal(c.find({\n    type: 'cryptographer'\n  }).count(), 2);\n  test.length(c.find({\n    type: 'kitten'\n  }).fetch(), 2);\n  test.length(c.find({\n    type: 'cryptographer'\n  }).fetch(), 2);\n  count = c.update({\n    name: 'snookums'\n  }, {\n    $set: {\n      type: 'cryptographer'\n    }\n  });\n  test.equal(count, 1);\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({\n    type: 'kitten'\n  }).count(), 1);\n  test.equal(c.find({\n    type: 'cryptographer'\n  }).count(), 3);\n  test.length(c.find({\n    type: 'kitten'\n  }).fetch(), 1);\n  test.length(c.find({\n    type: 'cryptographer'\n  }).fetch(), 3);\n  c.remove(null);\n  c.remove(false);\n  c.remove(undefined);\n  test.equal(c.find().count(), 4);\n  c.remove({\n    _id: null\n  });\n  c.remove({\n    _id: false\n  });\n  c.remove({\n    _id: undefined\n  });\n  count = c.remove();\n  test.equal(count, 0);\n  test.equal(c.find().count(), 4);\n  count = c.remove({});\n  test.equal(count, 4);\n  test.equal(c.find().count(), 0);\n  c.insert({\n    _id: 1,\n    name: 'strawberry',\n    tags: ['fruit', 'red', 'squishy']\n  });\n  c.insert({\n    _id: 2,\n    name: 'apple',\n    tags: ['fruit', 'red', 'hard']\n  });\n  c.insert({\n    _id: 3,\n    name: 'rose',\n    tags: ['flower', 'red', 'squishy']\n  });\n  test.equal(c.find({\n    tags: 'flower'\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }).count(), 2);\n  test.equal(c.find({\n    tags: 'red'\n  }).count(), 3);\n  test.length(c.find({\n    tags: 'flower'\n  }).fetch(), 1);\n  test.length(c.find({\n    tags: 'fruit'\n  }).fetch(), 2);\n  test.length(c.find({\n    tags: 'red'\n  }).fetch(), 3);\n  test.equal(c.findOne(1).name, 'strawberry');\n  test.equal(c.findOne(2).name, 'apple');\n  test.equal(c.findOne(3).name, 'rose');\n  test.equal(c.findOne(4), undefined);\n  test.equal(c.findOne('abc'), undefined);\n  test.equal(c.findOne(undefined), undefined);\n  test.equal(c.find(1).count(), 1);\n  test.equal(c.find(4).count(), 0);\n  test.equal(c.find('abc').count(), 0);\n  test.equal(c.find(undefined).count(), 0);\n  test.equal(c.find().count(), 3);\n  test.equal(c.find(1, {\n    skip: 1\n  }).count(false), 1);\n  test.equal(c.find(1, {\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({\n    _id: 1\n  }, {\n    skip: 1\n  }).count(false), 1);\n  test.equal(c.find({\n    _id: 1\n  }, {\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({\n    _id: undefined\n  }).count(), 0);\n  test.equal(c.find({\n    _id: false\n  }).count(), 0);\n  test.equal(c.find({\n    _id: null\n  }).count(), 0);\n  test.equal(c.find({\n    _id: ''\n  }).count(), 0);\n  test.equal(c.find({\n    _id: 0\n  }).count(), 0);\n  test.equal(c.find({}, {\n    skip: 1\n  }).count(false), 3);\n  test.equal(c.find({}, {\n    skip: 1\n  }).count(), 2);\n  test.equal(c.find({}, {\n    skip: 2\n  }).count(), 1);\n  test.equal(c.find({}, {\n    limit: 2\n  }).count(false), 3);\n  test.equal(c.find({}, {\n    limit: 2\n  }).count(), 2);\n  test.equal(c.find({}, {\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({}, {\n    skip: 1,\n    limit: 1\n  }).count(false), 3);\n  test.equal(c.find({}, {\n    skip: 1,\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    skip: 1\n  }).count(false), 2);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    skip: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    limit: 1\n  }).count(false), 2);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    skip: 1,\n    limit: 1\n  }).count(false), 2);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    skip: 1,\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find(1, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(false), 1);\n  test.equal(c.find(1, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({\n    _id: 1\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(false), 1);\n  test.equal(c.find({\n    _id: 1\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(false), 3);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 2);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 2\n  }).count(), 1);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    limit: 2\n  }).count(false), 3);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    limit: 2\n  }).count(), 2);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 1,\n    limit: 1\n  }).count(false), 3);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 1,\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(false), 2);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    limit: 1\n  }).count(false), 2);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1,\n    limit: 1\n  }).count(false), 2);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1,\n    limit: 1\n  }).count(), 1); // Regression test for #455.\n\n  c.insert({\n    foo: {\n      bar: 'baz'\n    }\n  });\n  test.equal(c.find({\n    foo: {\n      bam: 'baz'\n    }\n  }).count(), 0);\n  test.equal(c.find({\n    foo: {\n      bar: 'baz'\n    }\n  }).count(), 1); // Regression test for #5301\n\n  c.remove({});\n  c.insert({\n    a: 'a',\n    b: 'b'\n  });\n\n  const noop = () => null;\n\n  test.equal(c.find({\n    a: noop\n  }).count(), 1);\n  test.equal(c.find({\n    a: 'a',\n    b: noop\n  }).count(), 1);\n  test.equal(c.find({\n    c: noop\n  }).count(), 1);\n  test.equal(c.find({\n    a: noop,\n    c: 'c'\n  }).count(), 0); // Regression test for #4260\n  // Only insert enumerable, own properties from the object\n\n  c.remove({});\n\n  function Thing() {\n    this.a = 1;\n    this.b = 2;\n    Object.defineProperty(this, 'b', {\n      enumerable: false\n    });\n  }\n\n  Thing.prototype.c = 3;\n\n  Thing.prototype.d = () => null;\n\n  const before = new Thing();\n  c.insert(before);\n  const after = c.findOne();\n  test.equal(after.a, 1);\n  test.equal(after.b, undefined);\n  test.equal(after.c, undefined);\n  test.equal(after.d, undefined);\n});\nTinytest.add('minimongo - error - no options', test => {\n  try {\n    throw MinimongoError('Not fun to have errors');\n  } catch (e) {\n    test.equal(e.message, 'Not fun to have errors');\n  }\n});\nTinytest.add('minimongo - error - with field', test => {\n  try {\n    throw MinimongoError('Cats are no fun', {\n      field: 'mice'\n    });\n  } catch (e) {\n    test.equal(e.message, \"Cats are no fun for field 'mice'\");\n  }\n});\nTinytest.add('minimongo - cursors', test => {\n  const c = new LocalCollection();\n  let res;\n\n  for (let i = 0; i < 20; i++) {\n    c.insert({\n      i\n    });\n  }\n\n  const q = c.find();\n  test.equal(q.count(), 20); // fetch\n\n  res = q.fetch();\n  test.length(res, 20);\n\n  for (let i = 0; i < 20; i++) {\n    test.equal(res[i].i, i);\n  } // call it again, it still works\n\n\n  test.length(q.fetch(), 20); // forEach\n\n  let count = 0;\n  const context = {};\n  q.forEach(function (obj, i, cursor) {\n    test.equal(obj.i, count++);\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n  }, context);\n  test.equal(count, 20); // call it again, it still works\n\n  test.length(q.fetch(), 20); // iterator\n\n  count = 0;\n\n  for (let obj of q) {\n    test.equal(obj.i, count++);\n  }\n\n  ;\n  test.equal(count, 20); // call it again, it still works\n\n  test.length(q.fetch(), 20); // test spread operator\n\n  test.equal([...q], q.fetch()); // map\n\n  res = q.map(function (obj, i, cursor) {\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n    return obj.i * 2;\n  }, context);\n  test.length(res, 20);\n\n  for (let i = 0; i < 20; i++) {\n    test.equal(res[i], i * 2);\n  } // call it again, it still works\n\n\n  test.length(q.fetch(), 20); // findOne (and no rewind first)\n\n  test.equal(c.findOne({\n    i: 0\n  }).i, 0);\n  test.equal(c.findOne({\n    i: 1\n  }).i, 1);\n\n  const id = c.findOne({\n    i: 2\n  })._id;\n\n  test.equal(c.findOne(id).i, 2);\n});\nTinytest.add('minimongo - transform', test => {\n  const c = new LocalCollection();\n  c.insert({}); // transform functions must return objects\n\n  const invalidTransform = doc => doc._id;\n\n  test.throws(() => {\n    c.findOne({}, {\n      transform: invalidTransform\n    });\n  }); // transformed documents get _id field transplanted if not present\n\n  const transformWithoutId = doc => {\n    const docWithoutId = Object.assign({}, doc);\n    delete docWithoutId._id;\n    return docWithoutId;\n  };\n\n  test.equal(c.findOne({}, {\n    transform: transformWithoutId\n  })._id, c.findOne()._id);\n});\nTinytest.add('minimongo - misc', test => {\n  // deepcopy\n  let a = {\n    a: [1, 2, 3],\n    b: 'x',\n    c: true,\n    d: {\n      x: 12,\n      y: [12]\n    },\n    f: null,\n    g: new Date()\n  };\n  let b = EJSON.clone(a);\n  test.equal(a, b);\n  test.isTrue(LocalCollection._f._equal(a, b));\n  a.a.push(4);\n  test.length(b.a, 3);\n  a.c = false;\n  test.isTrue(b.c);\n  b.d.z = 15;\n  a.d.z = 14;\n  test.equal(b.d.z, 15);\n  a.d.y.push(88);\n  test.length(b.d.y, 1);\n  test.equal(a.g, b.g);\n  b.g.setDate(b.g.getDate() + 1);\n  test.notEqual(a.g, b.g);\n  a = {\n    x() {}\n\n  };\n  b = EJSON.clone(a);\n  a.x.a = 14;\n  test.equal(b.x.a, 14); // just to document current behavior\n});\nTinytest.add('minimongo - lookup', test => {\n  const lookupA = MinimongoTest.makeLookupFunction('a');\n  test.equal(lookupA({}), [{\n    value: undefined\n  }]);\n  test.equal(lookupA({\n    a: 1\n  }), [{\n    value: 1\n  }]);\n  test.equal(lookupA({\n    a: [1]\n  }), [{\n    value: [1]\n  }]);\n  const lookupAX = MinimongoTest.makeLookupFunction('a.x');\n  test.equal(lookupAX({\n    a: {\n      x: 1\n    }\n  }), [{\n    value: 1\n  }]);\n  test.equal(lookupAX({\n    a: {\n      x: [1]\n    }\n  }), [{\n    value: [1]\n  }]);\n  test.equal(lookupAX({\n    a: 5\n  }), [{\n    value: undefined\n  }]);\n  test.equal(lookupAX({\n    a: [{\n      x: 1\n    }, {\n      x: [2]\n    }, {\n      y: 3\n    }]\n  }), [{\n    value: 1,\n    arrayIndices: [0]\n  }, {\n    value: [2],\n    arrayIndices: [1]\n  }, {\n    value: undefined,\n    arrayIndices: [2]\n  }]);\n  const lookupA0X = MinimongoTest.makeLookupFunction('a.0.x');\n  test.equal(lookupA0X({\n    a: [{\n      x: 1\n    }]\n  }), [// From interpreting '0' as \"0th array element\".\n  {\n    value: 1,\n    arrayIndices: [0, 'x']\n  }, // From interpreting '0' as \"after branching in the array, look in the\n  // object {x:1} for a field named 0\".\n  {\n    value: undefined,\n    arrayIndices: [0]\n  }]);\n  test.equal(lookupA0X({\n    a: [{\n      x: [1]\n    }]\n  }), [{\n    value: [1],\n    arrayIndices: [0, 'x']\n  }, {\n    value: undefined,\n    arrayIndices: [0]\n  }]);\n  test.equal(lookupA0X({\n    a: 5\n  }), [{\n    value: undefined\n  }]);\n  test.equal(lookupA0X({\n    a: [{\n      x: 1\n    }, {\n      x: [2]\n    }, {\n      y: 3\n    }]\n  }), [// From interpreting '0' as \"0th array element\".\n  {\n    value: 1,\n    arrayIndices: [0, 'x']\n  }, // From interpreting '0' as \"after branching in the array, look in the\n  // object {x:1} for a field named 0\".\n  {\n    value: undefined,\n    arrayIndices: [0]\n  }, {\n    value: undefined,\n    arrayIndices: [1]\n  }, {\n    value: undefined,\n    arrayIndices: [2]\n  }]);\n  test.equal(MinimongoTest.makeLookupFunction('w.x.0.z')({\n    w: [{\n      x: [{\n        z: 5\n      }]\n    }]\n  }), [// From interpreting '0' as \"0th array element\".\n  {\n    value: 5,\n    arrayIndices: [0, 0, 'x']\n  }, // From interpreting '0' as \"after branching in the array, look in the\n  // object {z:5} for a field named \"0\".\n  {\n    value: undefined,\n    arrayIndices: [0, 0]\n  }]);\n});\nTinytest.add('minimongo - selector_compiler', test => {\n  const matches = (shouldMatch, selector, doc) => {\n    const doesMatch = new Minimongo.Matcher(selector).documentMatches(doc).result;\n\n    if (doesMatch != shouldMatch) {\n      // XXX super janky\n      test.fail({\n        message: `minimongo match failure: document ${shouldMatch ? \"should match, but doesn't\" : \"shouldn't match, but does\"}`,\n        selector: JSON.stringify(selector),\n        document: JSON.stringify(doc)\n      });\n    }\n  };\n\n  const match = matches.bind(null, true);\n  const nomatch = matches.bind(null, false); // XXX blog post about what I learned while writing these tests (weird\n  // mongo edge cases)\n  // empty selectors\n\n  match({}, {});\n  match({}, {\n    a: 12\n  }); // scalars\n\n  match(1, {\n    _id: 1,\n    a: 'foo'\n  });\n  nomatch(1, {\n    _id: 2,\n    a: 'foo'\n  });\n  match('a', {\n    _id: 'a',\n    a: 'foo'\n  });\n  nomatch('a', {\n    _id: 'b',\n    a: 'foo'\n  }); // safety\n\n  nomatch(undefined, {});\n  nomatch(undefined, {\n    _id: 'foo'\n  });\n  nomatch(false, {\n    _id: 'foo'\n  });\n  nomatch(null, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: undefined\n  }, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: false\n  }, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: null\n  }, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: ''\n  }, {\n    _id: ''\n  });\n  nomatch({\n    _id: 0\n  }, {\n    _id: 0\n  }); // matching one or more keys\n\n  nomatch({\n    a: 12\n  }, {});\n  match({\n    a: 12\n  }, {\n    a: 12\n  });\n  match({\n    a: 12\n  }, {\n    a: 12,\n    b: 13\n  });\n  match({\n    a: 12,\n    b: 13\n  }, {\n    a: 12,\n    b: 13\n  });\n  match({\n    a: 12,\n    b: 13\n  }, {\n    a: 12,\n    b: 13,\n    c: 14\n  });\n  nomatch({\n    a: 12,\n    b: 13,\n    c: 14\n  }, {\n    a: 12,\n    b: 13\n  });\n  nomatch({\n    a: 12,\n    b: 13\n  }, {\n    b: 13,\n    c: 14\n  });\n  match({\n    a: 12\n  }, {\n    a: [12]\n  });\n  match({\n    a: 12\n  }, {\n    a: [11, 12, 13]\n  });\n  nomatch({\n    a: 12\n  }, {\n    a: [11, 13]\n  });\n  match({\n    a: 12,\n    b: 13\n  }, {\n    a: [11, 12, 13],\n    b: [13, 14, 15]\n  });\n  nomatch({\n    a: 12,\n    b: 13\n  }, {\n    a: [11, 12, 13],\n    b: [14, 15]\n  }); // dates\n\n  const date1 = new Date();\n  const date2 = new Date(date1.getTime() + 1000);\n  match({\n    a: date1\n  }, {\n    a: date1\n  });\n  nomatch({\n    a: date1\n  }, {\n    a: date2\n  }); // arrays\n\n  match({\n    a: [1, 2]\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: [1, 2]\n  }, {\n    a: [[1, 2]]\n  });\n  match({\n    a: [1, 2]\n  }, {\n    a: [[3, 4], [1, 2]]\n  });\n  nomatch({\n    a: [1, 2]\n  }, {\n    a: [3, 4]\n  });\n  nomatch({\n    a: [1, 2]\n  }, {\n    a: [[[1, 2]]]\n  }); // literal documents\n\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  nomatch({\n    a: {\n      b: 12,\n      c: 13\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {\n      b: 12,\n      c: 13\n    }\n  });\n  match({\n    a: {\n      b: 12,\n      c: 13\n    }\n  }, {\n    a: {\n      b: 12,\n      c: 13\n    }\n  });\n  nomatch({\n    a: {\n      b: 12,\n      c: 13\n    }\n  }, {\n    a: {\n      c: 13,\n      b: 12\n    }\n  }); // tested on mongodb\n\n  nomatch({\n    a: {}\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {}\n  });\n  match({\n    a: {\n      b: 12,\n      c: [13, true, false, 2.2, 'a', null, {\n        d: 14\n      }]\n    }\n  }, {\n    a: {\n      b: 12,\n      c: [13, true, false, 2.2, 'a', null, {\n        d: 14\n      }]\n    }\n  });\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {\n      b: 12\n    },\n    k: 99\n  });\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [{\n      b: 12\n    }]\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [[{\n      b: 12\n    }]]\n  });\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12\n    }, {\n      b: 13\n    }]\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12,\n      c: 20\n    }, {\n      b: 13\n    }]\n  });\n  nomatch({\n    a: {\n      b: 12,\n      c: 20\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12\n    }, {\n      c: 20\n    }]\n  });\n  match({\n    a: {\n      b: 12,\n      c: 20\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12,\n      c: 20\n    }, {\n      b: 13\n    }]\n  }); // null\n\n  match({\n    a: null\n  }, {\n    a: null\n  });\n  match({\n    a: null\n  }, {\n    b: 12\n  });\n  nomatch({\n    a: null\n  }, {\n    a: 12\n  });\n  match({\n    a: null\n  }, {\n    a: [1, 2, null, 3]\n  }); // tested on mongodb\n\n  nomatch({\n    a: null\n  }, {\n    a: [1, 2, {}, 3]\n  }); // tested on mongodb\n  // order comparisons: $lt, $gt, $lte, $gte\n\n  match({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: 9\n  });\n  nomatch({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: 11\n  });\n  match({\n    a: {\n      $gt: 10\n    }\n  }, {\n    a: 11\n  });\n  nomatch({\n    a: {\n      $gt: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $gt: 10\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lte: 10\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lte: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $lte: 10\n    }\n  }, {\n    a: 11\n  });\n  match({\n    a: {\n      $gte: 10\n    }\n  }, {\n    a: 11\n  });\n  match({\n    a: {\n      $gte: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $gte: 10\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: [11, 9, 12]\n  });\n  nomatch({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: [11, 12]\n  }); // (there's a full suite of ordering test elsewhere)\n\n  nomatch({\n    a: {\n      $lt: 'null'\n    }\n  }, {\n    a: null\n  });\n  match({\n    a: {\n      $lt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [1, 3, 4]\n    }\n  });\n  match({\n    a: {\n      $gt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [3, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $gt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [1, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $gt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $lt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  match({\n    a: {\n      $gte: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  match({\n    a: {\n      $lte: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $gt: [2, 3]\n    }\n  }, {\n    a: [1, 2]\n  }); // tested against mongodb\n  // composition of two qualifiers\n\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 8\n  });\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 11\n  });\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 12\n  });\n  match({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: [8, 9, 10, 11, 12]\n  });\n  match({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: [8, 9, 11, 12]\n  }); // tested against mongodb\n  // $all\n\n  match({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    a: {\n      $all: [1, 2, 3]\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: [3, 2, 1]\n  });\n  match({\n    a: {\n      $all: [1, 'x']\n    }\n  }, {\n    a: [3, 'x', 1]\n  });\n  nomatch({\n    a: {\n      $all: ['2']\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $all: [2]\n    }\n  }, {\n    a: '2'\n  });\n  match({\n    a: {\n      $all: [[1, 2], [1, 3]]\n    }\n  }, {\n    a: [[1, 3], [1, 2], [1, 4]]\n  });\n  nomatch({\n    a: {\n      $all: [[1, 2], [1, 3]]\n    }\n  }, {\n    a: [[1, 4], [1, 2], [1, 4]]\n  });\n  match({\n    a: {\n      $all: [2, 2]\n    }\n  }, {\n    a: [2]\n  }); // tested against mongodb\n\n  nomatch({\n    a: {\n      $all: [2, 3]\n    }\n  }, {\n    a: [2, 2]\n  });\n  nomatch({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: [[1, 2]]\n  }); // tested against mongodb\n\n  nomatch({\n    a: {\n      $all: [1, 2]\n    }\n  }, {}); // tested against mongodb, field doesn't exist\n\n  nomatch({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: {\n      foo: 'bar'\n    }\n  }); // tested against mongodb, field is not an object\n\n  nomatch({\n    a: {\n      $all: []\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $all: []\n    }\n  }, {\n    a: [5]\n  });\n  match({\n    a: {\n      $all: [/i/, /e/i]\n    }\n  }, {\n    a: ['foo', 'bEr', 'biz']\n  });\n  nomatch({\n    a: {\n      $all: [/i/, /e/i]\n    }\n  }, {\n    a: ['foo', 'bar', 'biz']\n  });\n  match({\n    a: {\n      $all: [{\n        b: 3\n      }]\n    }\n  }, {\n    a: [{\n      b: 3\n    }]\n  }); // Members of $all other than regexps are *equality matches*, not document\n  // matches.\n\n  nomatch({\n    a: {\n      $all: [{\n        b: 3\n      }]\n    }\n  }, {\n    a: [{\n      b: 3,\n      k: 4\n    }]\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $all: [{\n          $gt: 4\n        }]\n      }\n    }, {});\n  }); // $exists\n\n  match({\n    a: {\n      $exists: true\n    }\n  }, {\n    a: 12\n  });\n  nomatch({\n    a: {\n      $exists: true\n    }\n  }, {\n    b: 12\n  });\n  nomatch({\n    a: {\n      $exists: false\n    }\n  }, {\n    a: 12\n  });\n  match({\n    a: {\n      $exists: false\n    }\n  }, {\n    b: 12\n  });\n  match({\n    a: {\n      $exists: true\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $exists: true\n    }\n  }, {\n    b: []\n  });\n  nomatch({\n    a: {\n      $exists: false\n    }\n  }, {\n    a: []\n  });\n  match({\n    a: {\n      $exists: false\n    }\n  }, {\n    b: []\n  });\n  match({\n    a: {\n      $exists: true\n    }\n  }, {\n    a: [1]\n  });\n  nomatch({\n    a: {\n      $exists: true\n    }\n  }, {\n    b: [1]\n  });\n  nomatch({\n    a: {\n      $exists: false\n    }\n  }, {\n    a: [1]\n  });\n  match({\n    a: {\n      $exists: false\n    }\n  }, {\n    b: [1]\n  });\n  match({\n    a: {\n      $exists: 1\n    }\n  }, {\n    a: 5\n  });\n  match({\n    a: {\n      $exists: 0\n    }\n  }, {\n    b: 5\n  });\n  nomatch({\n    'a.x': {\n      $exists: false\n    }\n  }, {\n    a: [{}, {\n      x: 5\n    }]\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: [{}, {\n      x: 5\n    }]\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: [{}, {\n      x: 5\n    }]\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: {\n      x: []\n    }\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: {\n      x: null\n    }\n  }); // $mod\n\n  match({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: 11\n  });\n  nomatch({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: 12\n  });\n  match({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: [10, 11, 12]\n  });\n  nomatch({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: [10, 12]\n  });\n  [5, [10], [10, 1, 2], 'foo', {\n    bar: 1\n  }, []].forEach(badMod => {\n    test.throws(() => {\n      match({\n        a: {\n          $mod: badMod\n        }\n      }, {\n        a: 11\n      });\n    });\n  }); // $eq\n\n  nomatch({\n    a: {\n      $eq: 1\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $eq: 2\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $eq: [1]\n    }\n  }, {\n    a: [2]\n  });\n  match({\n    a: {\n      $eq: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $eq: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $eq: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    a: {\n      $eq: 3\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    'a.b': {\n      $eq: 1\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    'a.b': {\n      $eq: 2\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $eq: 3\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    a: {\n      $eq: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1\n    }\n  });\n  nomatch({\n    a: {\n      $eq: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 2\n    }\n  });\n  nomatch({\n    a: {\n      $eq: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1,\n      y: 2\n    }\n  }); // $ne\n\n  match({\n    a: {\n      $ne: 1\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $ne: 2\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $ne: [1]\n    }\n  }, {\n    a: [2]\n  });\n  nomatch({\n    a: {\n      $ne: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  }); // all tested against mongodb\n\n  nomatch({\n    a: {\n      $ne: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    a: {\n      $ne: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $ne: 3\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 1\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 2\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    'a.b': {\n      $ne: 3\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  nomatch({\n    a: {\n      $ne: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1\n    }\n  });\n  match({\n    a: {\n      $ne: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 2\n    }\n  });\n  match({\n    a: {\n      $ne: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1,\n      y: 2\n    }\n  }); // This query means: All 'a.b' must be non-5, and some 'a.b' must be >6.\n\n  match({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 2\n    }, {\n      b: 10\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 2\n    }, {\n      b: 4\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 2\n    }, {\n      b: 5\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 10\n    }, {\n      b: 5\n    }]\n  }); // Should work the same if the branch is at the bottom.\n\n  match({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [2, 10]\n  });\n  nomatch({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [2, 4]\n  });\n  nomatch({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [2, 5]\n  });\n  nomatch({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [10, 5]\n  }); // $in\n\n  match({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: 4\n  });\n  match({\n    a: {\n      $in: [[1], [2], [3]]\n    }\n  }, {\n    a: [2]\n  });\n  nomatch({\n    a: {\n      $in: [[1], [2], [3]]\n    }\n  }, {\n    a: [4]\n  });\n  match({\n    a: {\n      $in: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  nomatch({\n    a: {\n      $in: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 4\n    }\n  });\n  match({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: [2]\n  }); // tested against mongodb\n\n  match({\n    a: {\n      $in: [{\n        x: 1\n      }, {\n        x: 2\n      }, {\n        x: 3\n      }]\n    }\n  }, {\n    a: [{\n      x: 2\n    }]\n  });\n  match({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: [4, 2]\n  });\n  nomatch({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: [4]\n  });\n  match({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: 'x'\n  });\n  match({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: 'fOo'\n  });\n  match({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOo']\n  });\n  nomatch({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOx']\n  });\n  match({\n    a: {\n      $in: [1, null]\n    }\n  }, {});\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {});\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: {}\n  });\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: {\n      b: 5\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1]\n    }\n  }, {\n    a: {}\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }]\n  });\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, {}]\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, []]\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, 5]\n  }); // $nin\n\n  nomatch({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: 4\n  });\n  nomatch({\n    a: {\n      $nin: [[1], [2], [3]]\n    }\n  }, {\n    a: [2]\n  });\n  match({\n    a: {\n      $nin: [[1], [2], [3]]\n    }\n  }, {\n    a: [4]\n  });\n  nomatch({\n    a: {\n      $nin: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  match({\n    a: {\n      $nin: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 4\n    }\n  });\n  nomatch({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [2]\n  }); // tested against mongodb\n\n  nomatch({\n    a: {\n      $nin: [{\n        x: 1\n      }, {\n        x: 2\n      }, {\n        x: 3\n      }]\n    }\n  }, {\n    a: [{\n      x: 2\n    }]\n  });\n  nomatch({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [4, 2]\n  });\n  nomatch({\n    'a.b': {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [{\n      b: 4\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [4]\n  });\n  match({\n    'a.b': {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [{\n      b: 4\n    }]\n  });\n  nomatch({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: 'x'\n  });\n  nomatch({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: 'fOo'\n  });\n  nomatch({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOo']\n  });\n  match({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOx']\n  });\n  nomatch({\n    a: {\n      $nin: [1, null]\n    }\n  }, {});\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {});\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: {}\n  });\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: {\n      b: 5\n    }\n  });\n  match({\n    'a.b': {\n      $nin: [1]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  match({\n    'a.b': {\n      $nin: [1]\n    }\n  }, {\n    a: {}\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, {}]\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, []]\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, 5]\n  }); // $size\n\n  match({\n    a: {\n      $size: 0\n    }\n  }, {\n    a: []\n  });\n  match({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: [2]\n  });\n  match({\n    a: {\n      $size: 2\n    }\n  }, {\n    a: [2, 2]\n  });\n  nomatch({\n    a: {\n      $size: 0\n    }\n  }, {\n    a: [2]\n  });\n  nomatch({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: [2, 2]\n  });\n  nomatch({\n    a: {\n      $size: 0\n    }\n  }, {\n    a: '2'\n  });\n  nomatch({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: '2'\n  });\n  nomatch({\n    a: {\n      $size: 2\n    }\n  }, {\n    a: '2'\n  });\n  nomatch({\n    a: {\n      $size: 2\n    }\n  }, {\n    a: [[2, 2]]\n  }); // tested against mongodb\n  // $bitsAllClear - number\n\n  match({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0\n  });\n  match({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b10000\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b10\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b100\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1000\n  }); // $bitsAllClear - buffer\n\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([3])\n    }\n  }, {\n    a: new Uint8Array([4])\n  });\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([0, 1])\n    }\n  }, {\n    a: new Uint8Array([255])\n  }); // 256 should not be set for 255.\n\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([3])\n    }\n  }, {\n    a: 4\n  });\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([3])\n    }\n  }, {\n    a: 0\n  }); // $bitsAllSet - number\n\n  match({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1111\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b111\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 256\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 50000\n  });\n  match({\n    a: {\n      $bitsAllSet: [0, 1, 2]\n    }\n  }, {\n    a: 15\n  });\n  match({\n    a: {\n      $bitsAllSet: [0, 12]\n    }\n  }, {\n    a: 0b1000000000001\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 12]\n    }\n  }, {\n    a: 0b1000000000000\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 12]\n    }\n  }, {\n    a: 0b1\n  }); // $bitsAllSet - buffer\n\n  match({\n    a: {\n      $bitsAllSet: new Uint8Array([3])\n    }\n  }, {\n    a: new Uint8Array([3])\n  });\n  match({\n    a: {\n      $bitsAllSet: new Uint8Array([7])\n    }\n  }, {\n    a: new Uint8Array([15])\n  });\n  match({\n    a: {\n      $bitsAllSet: new Uint8Array([3])\n    }\n  }, {\n    a: 3\n  }); // $bitsAnySet - number\n\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1\n  });\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b10\n  });\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b100\n  });\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1000\n  });\n  match({\n    a: {\n      $bitsAnySet: [4]\n    }\n  }, {\n    a: 0b10000\n  });\n  nomatch({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b10000\n  });\n  nomatch({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0\n  }); // $bitsAnySet - buffer\n\n  match({\n    a: {\n      $bitsAnySet: new Uint8Array([3])\n    }\n  }, {\n    a: new Uint8Array([7])\n  });\n  match({\n    a: {\n      $bitsAnySet: new Uint8Array([15])\n    }\n  }, {\n    a: new Uint8Array([7])\n  });\n  match({\n    a: {\n      $bitsAnySet: new Uint8Array([3])\n    }\n  }, {\n    a: 1\n  }); // $bitsAnyClear - number\n\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b10\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b100\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1000\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b10000\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1111\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b111\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0, 1, 2]\n    }\n  }, {\n    a: 0b111\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b11\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0, 1]\n    }\n  }, {\n    a: 0b11\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0b1\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0]\n    }\n  }, {\n    a: 0b1\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [4]\n    }\n  }, {\n    a: 0b10000\n  }); // $bitsAnyClear - buffer\n\n  match({\n    a: {\n      $bitsAnyClear: new Uint8Array([8])\n    }\n  }, {\n    a: new Uint8Array([7])\n  });\n  match({\n    a: {\n      $bitsAnyClear: new Uint8Array([1])\n    }\n  }, {\n    a: new Uint8Array([0])\n  });\n  match({\n    a: {\n      $bitsAnyClear: new Uint8Array([1])\n    }\n  }, {\n    a: 4\n  }); // taken from: https://github.com/mongodb/mongo/blob/master/jstests/core/bittest.js\n\n  const c = new LocalCollection();\n\n  function matchCount(query, count) {\n    const matches = c.find(query).count();\n\n    if (matches !== count) {\n      test.fail({\n        message: `minimongo match count failure: matched ${matches} times, but should match ${count} times`,\n        query: JSON.stringify(query),\n        count: JSON.stringify(count)\n      });\n    }\n  } // Tests on numbers.\n\n\n  c.insert({\n    a: 0\n  });\n  c.insert({\n    a: 1\n  });\n  c.insert({\n    a: 54\n  });\n  c.insert({\n    a: 88\n  });\n  c.insert({\n    a: 255\n  }); // Tests with bitmask.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 0\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 16\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: 54\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 55\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: 88\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 255\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllClear: 0\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllClear: 1\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: 16\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: 129\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: 255\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: 9\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnySet: 255\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAnyClear: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: 18\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: 24\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: 255\n    }\n  }, 4); // Tests with array of bit positions.\n\n  matchCount({\n    a: {\n      $bitsAllSet: []\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllSet: [0]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: [4]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: [1, 2, 4, 5]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: [0, 1, 2, 4, 5]\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: [3, 4, 6]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllClear: []\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllClear: [0]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: [4]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: [1, 7]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: [1, 3]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAnyClear: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: [1, 4]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: [3, 4]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 4); // Tests with multiple predicates.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 54,\n      $bitsAllClear: 201\n    }\n  }, 1); // Tests on negative numbers\n\n  c.remove({});\n  c.insert({\n    a: -0\n  });\n  c.insert({\n    a: -1\n  });\n  c.insert({\n    a: -54\n  }); // Tests with bitmask.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 0\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: 2\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 127\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: 74\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: 0\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: 53\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: 127\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: 2\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnySet: 127\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: 53\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: 127\n    }\n  }, 2); // Tests with array of bit positions.\n\n  const allPositions = [];\n\n  for (let i = 0; i < 64; i++) {\n    allPositions.push(i);\n  }\n\n  matchCount({\n    a: {\n      $bitsAllSet: []\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: [1]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: allPositions\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: [1, 7, 6, 3, 100]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: []\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: [5, 4, 2, 0]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: allPositions\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: [1]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnySet: allPositions\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: [0, 2, 4, 5, 100]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: allPositions\n    }\n  }, 2); // Tests with multiple predicates.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 74,\n      $bitsAllClear: 53\n    }\n  }, 1); // Tests on BinData.\n\n  c.remove({});\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n  });\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n  });\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')\n  });\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n  }); // Tests with binary string bitmask.\n\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 3); // Tests with multiple predicates.\n\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}'),\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"//yf////////////////////////\"}')\n    }\n  }, 1);\n  c.remove({});\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: false\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: NaN\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: Infinity\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: null\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: 'asdf'\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: ['a', 'b']\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: {\n      foo: 'bar'\n    }\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: 1.2\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: '1'\n  });\n  [false, NaN, Infinity, null, 'asdf', ['a', 'b'], {\n    foo: 'bar'\n  }, 1.2, '1', [0, -1]].forEach(badValue => {\n    test.throws(() => {\n      match({\n        a: {\n          $bitsAllSet: badValue\n        }\n      }, {\n        a: 42\n      });\n    });\n  }); // $type\n\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: 1.1\n  });\n  match({\n    a: {\n      $type: 'double'\n    }\n  }, {\n    a: 1.1\n  });\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: 1\n  });\n  nomatch({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: '1'\n  });\n  match({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: '1'\n  });\n  match({\n    a: {\n      $type: 'string'\n    }\n  }, {\n    a: '1'\n  });\n  nomatch({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: 1\n  });\n  match({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: {}\n  });\n  match({\n    a: {\n      $type: 'object'\n    }\n  }, {\n    a: {}\n  });\n  match({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: [1]\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: null\n  });\n  match({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: EJSON.newBinary(0)\n  });\n  match({\n    a: {\n      $type: 'binData'\n    }\n  }, {\n    a: EJSON.newBinary(0)\n  });\n  match({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: EJSON.newBinary(4)\n  });\n  nomatch({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: [42]\n  });\n  match({\n    a: {\n      $type: 7\n    }\n  }, {\n    a: new MongoID.ObjectID()\n  });\n  match({\n    a: {\n      $type: 'objectId'\n    }\n  }, {\n    a: new MongoID.ObjectID()\n  });\n  nomatch({\n    a: {\n      $type: 7\n    }\n  }, {\n    a: '1234567890abcd1234567890'\n  });\n  match({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: true\n  });\n  match({\n    a: {\n      $type: 'bool'\n    }\n  }, {\n    a: true\n  });\n  match({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: false\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: 'true'\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: 0\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: null\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: ''\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {});\n  match({\n    a: {\n      $type: 9\n    }\n  }, {\n    a: new Date()\n  });\n  match({\n    a: {\n      $type: 'date'\n    }\n  }, {\n    a: new Date()\n  });\n  nomatch({\n    a: {\n      $type: 9\n    }\n  }, {\n    a: +new Date()\n  });\n  match({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: null\n  });\n  match({\n    a: {\n      $type: 'null'\n    }\n  }, {\n    a: null\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: false\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: ''\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: 0\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {});\n  match({\n    a: {\n      $type: 11\n    }\n  }, {\n    a: /x/\n  });\n  match({\n    a: {\n      $type: 'regex'\n    }\n  }, {\n    a: /x/\n  });\n  nomatch({\n    a: {\n      $type: 11\n    }\n  }, {\n    a: 'x'\n  });\n  nomatch({\n    a: {\n      $type: 11\n    }\n  }, {}); // The normal rule for {$type:4} (4 means array) is that it NOT good enough to\n  // just have an array that's the leaf that matches the path.  (An array inside\n  // that array is good, though.)\n\n  nomatch({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: [1]\n  }); // tested against mongodb\n\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: [1]\n  });\n  nomatch({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: [1]\n  });\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: ['1', 1]\n  });\n  match({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: ['1', 1]\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: ['1', 1]\n  });\n  nomatch({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: ['1', 1]\n  });\n  nomatch({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: ['1', []]\n  });\n  match({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: ['1', []]\n  });\n  match({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: ['1', []]\n  }); // tested against mongodb\n  // An exception to the normal rule is that an array found via numeric index is\n  // examined itself, and its elements are not.\n\n  match({\n    'a.0': {\n      $type: 4\n    }\n  }, {\n    a: [[0]]\n  });\n  match({\n    'a.0': {\n      $type: 'array'\n    }\n  }, {\n    a: [[0]]\n  });\n  nomatch({\n    'a.0': {\n      $type: 1\n    }\n  }, {\n    a: [[0]]\n  }); // invalid types should throw errors\n\n  test.throws(() => {\n    match({\n      a: {\n        $type: 'foo'\n      }\n    }, {\n      a: 1\n    });\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $type: -2\n      }\n    }, {\n      a: 1\n    });\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $type: 0\n      }\n    }, {\n      a: 1\n    });\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $type: 20\n      }\n    }, {\n      a: 1\n    });\n  }); // regular expressions\n\n  match({\n    a: /a/\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: 'cut'\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: /a/i\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: /a/\n  }, {\n    a: ['foo', 'bar']\n  }); // search within array...\n\n  nomatch({\n    a: /,/\n  }, {\n    a: ['foo', 'bar']\n  }); // but not by stringifying\n\n  match({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: ['foo', 'bar']\n  });\n  nomatch({\n    a: {\n      $regex: ','\n    }\n  }, {\n    a: ['foo', 'bar']\n  });\n  match({\n    a: {\n      $regex: /a/\n    }\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    a: {\n      $regex: /a/\n    }\n  }, {\n    a: 'cut'\n  });\n  nomatch({\n    a: {\n      $regex: /a/\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: /a/i\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: /a/,\n      $options: 'i'\n    }\n  }, {\n    a: 'CAT'\n  }); // tested\n\n  match({\n    a: {\n      $regex: /a/i,\n      $options: 'i'\n    }\n  }, {\n    a: 'CAT'\n  }); // tested\n\n  nomatch({\n    a: {\n      $regex: /a/i,\n      $options: ''\n    }\n  }, {\n    a: 'CAT'\n  }); // tested\n\n  match({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: 'cut'\n  });\n  nomatch({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: 'a',\n      $options: 'i'\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: '',\n      $options: 'i'\n    }\n  }, {\n    a: 'foo'\n  });\n  nomatch({\n    a: {\n      $regex: '',\n      $options: 'i'\n    }\n  }, {});\n  nomatch({\n    a: {\n      $regex: '',\n      $options: 'i'\n    }\n  }, {\n    a: 5\n  });\n  nomatch({\n    a: /undefined/\n  }, {});\n  nomatch({\n    a: {\n      $regex: 'undefined'\n    }\n  }, {});\n  nomatch({\n    a: /xxx/\n  }, {});\n  nomatch({\n    a: {\n      $regex: 'xxx'\n    }\n  }, {}); // GitHub issue #2817:\n  // Regexps with a global flag ('g') keep a state when tested against the same\n  // string. Selector shouldn't return different result for similar documents\n  // because of this state.\n\n  const reusedRegexp = /sh/ig;\n  match({\n    a: reusedRegexp\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: reusedRegexp\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: reusedRegexp\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: {\n      $regex: reusedRegexp\n    }\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: {\n      $regex: reusedRegexp\n    }\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: {\n      $regex: reusedRegexp\n    }\n  }, {\n    a: 'Shorts'\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $options: 'i'\n      }\n    }, {\n      a: 12\n    });\n  });\n  match({\n    a: /a/\n  }, {\n    a: ['dog', 'cat']\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: ['dog', 'puppy']\n  }); // we don't support regexps in minimongo very well (eg, there's no EJSON\n  // encoding so it won't go over the wire), but run these tests anyway\n\n  match({\n    a: /a/\n  }, {\n    a: /a/\n  });\n  match({\n    a: /a/\n  }, {\n    a: ['x', /a/]\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: /a/i\n  });\n  nomatch({\n    a: /a/m\n  }, {\n    a: /a/\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: /b/\n  });\n  nomatch({\n    a: /5/\n  }, {\n    a: 5\n  });\n  nomatch({\n    a: /t/\n  }, {\n    a: true\n  });\n  match({\n    a: /m/i\n  }, {\n    a: ['x', 'xM']\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $regex: /a/,\n        $options: 'x'\n      }\n    }, {\n      a: 'cat'\n    });\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $regex: /a/,\n        $options: 's'\n      }\n    }, {\n      a: 'cat'\n    });\n  }); // $not\n\n  match({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: 6\n  });\n  nomatch({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: 8\n  });\n  match({\n    x: {\n      $not: {\n        $lt: 10,\n        $gt: 7\n      }\n    }\n  }, {\n    x: 11\n  });\n  nomatch({\n    x: {\n      $not: {\n        $lt: 10,\n        $gt: 7\n      }\n    }\n  }, {\n    x: 9\n  });\n  match({\n    x: {\n      $not: {\n        $lt: 10,\n        $gt: 7\n      }\n    }\n  }, {\n    x: 6\n  });\n  match({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [2, 3, 4]\n  });\n  match({\n    'x.y': {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [{\n      y: 2\n    }, {\n      y: 3\n    }, {\n      y: 4\n    }]\n  });\n  nomatch({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [2, 3, 4, 10]\n  });\n  nomatch({\n    'x.y': {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [{\n      y: 2\n    }, {\n      y: 3\n    }, {\n      y: 4\n    }, {\n      y: 10\n    }]\n  });\n  match({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: 'dog'\n  });\n  nomatch({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: 'cat'\n  });\n  match({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: ['dog', 'puppy']\n  });\n  nomatch({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: ['kitten', 'cat']\n  }); // dotted keypaths: bare values\n\n  match({\n    'a.b': 1\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    'a.b': 1\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  match({\n    'a.b': [1, 2, 3]\n  }, {\n    a: {\n      b: [1, 2, 3]\n    }\n  });\n  nomatch({\n    'a.b': [1, 2, 3]\n  }, {\n    a: {\n      b: [4]\n    }\n  });\n  match({\n    'a.b': /a/\n  }, {\n    a: {\n      b: 'cat'\n    }\n  });\n  nomatch({\n    'a.b': /a/\n  }, {\n    a: {\n      b: 'dog'\n    }\n  });\n  match({\n    'a.b.c': null\n  }, {});\n  match({\n    'a.b.c': null\n  }, {\n    a: 1\n  });\n  match({\n    'a.b': null\n  }, {\n    a: 1\n  });\n  match({\n    'a.b.c': null\n  }, {\n    a: {\n      b: 4\n    }\n  }); // dotted keypaths, nulls, numeric indices, arrays\n\n  nomatch({\n    'a.b': null\n  }, {\n    a: [1]\n  });\n  match({\n    'a.b': []\n  }, {\n    a: {\n      b: []\n    }\n  });\n  const big = {\n    a: [{\n      b: 1\n    }, 2, {}, {\n      b: [3, 4]\n    }]\n  };\n  match({\n    'a.b': 1\n  }, big);\n  match({\n    'a.b': [3, 4]\n  }, big);\n  match({\n    'a.b': 3\n  }, big);\n  match({\n    'a.b': 4\n  }, big);\n  match({\n    'a.b': null\n  }, big); // matches on slot 2\n\n  match({\n    'a.1': 8\n  }, {\n    a: [7, 8, 9]\n  });\n  nomatch({\n    'a.1': 7\n  }, {\n    a: [7, 8, 9]\n  });\n  nomatch({\n    'a.1': null\n  }, {\n    a: [7, 8, 9]\n  });\n  match({\n    'a.1': [8, 9]\n  }, {\n    a: [7, [8, 9]]\n  });\n  nomatch({\n    'a.1': 6\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  nomatch({\n    'a.1': 7\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  nomatch({\n    'a.1': 8\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  nomatch({\n    'a.1': 9\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  match({\n    'a.1': 2\n  }, {\n    a: [0, {\n      1: 2\n    }, 3]\n  });\n  match({\n    'a.1': {\n      1: 2\n    }\n  }, {\n    a: [0, {\n      1: 2\n    }, 3]\n  });\n  match({\n    'x.1.y': 8\n  }, {\n    x: [7, {\n      y: 8\n    }, 9]\n  }); // comes from trying '1' as key in the plain object\n\n  match({\n    'x.1.y': null\n  }, {\n    x: [7, {\n      y: 8\n    }, 9]\n  });\n  match({\n    'a.1.b': 9\n  }, {\n    a: [7, {\n      b: 9\n    }, {\n      1: {\n        b: 'foo'\n      }\n    }]\n  });\n  match({\n    'a.1.b': 'foo'\n  }, {\n    a: [7, {\n      b: 9\n    }, {\n      1: {\n        b: 'foo'\n      }\n    }]\n  });\n  match({\n    'a.1.b': null\n  }, {\n    a: [7, {\n      b: 9\n    }, {\n      1: {\n        b: 'foo'\n      }\n    }]\n  });\n  match({\n    'a.1.b': 2\n  }, {\n    a: [1, [{\n      b: 2\n    }], 3]\n  });\n  nomatch({\n    'a.1.b': null\n  }, {\n    a: [1, [{\n      b: 2\n    }], 3]\n  }); // this is new behavior in mongo 2.5\n\n  nomatch({\n    'a.0.b': null\n  }, {\n    a: [5]\n  });\n  match({\n    'a.1': 4\n  }, {\n    a: [{\n      1: 4\n    }, 5]\n  });\n  match({\n    'a.1': 5\n  }, {\n    a: [{\n      1: 4\n    }, 5]\n  });\n  nomatch({\n    'a.1': null\n  }, {\n    a: [{\n      1: 4\n    }, 5]\n  });\n  match({\n    'a.1.foo': 4\n  }, {\n    a: [{\n      1: {\n        foo: 4\n      }\n    }, {\n      foo: 5\n    }]\n  });\n  match({\n    'a.1.foo': 5\n  }, {\n    a: [{\n      1: {\n        foo: 4\n      }\n    }, {\n      foo: 5\n    }]\n  });\n  match({\n    'a.1.foo': null\n  }, {\n    a: [{\n      1: {\n        foo: 4\n      }\n    }, {\n      foo: 5\n    }]\n  }); // trying to access a dotted field that is undefined at some point\n  // down the chain\n\n  nomatch({\n    'a.b': 1\n  }, {\n    x: 2\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      x: 2\n    }\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      b: {\n        x: 2\n      }\n    }\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      b: 0\n    }\n  }); // dotted keypaths: literal objects\n\n  match({\n    'a.b': {\n      c: 1\n    }\n  }, {\n    a: {\n      b: {\n        c: 1\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1\n    }\n  }, {\n    a: {\n      b: {\n        c: 2\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  match({\n    'a.b': {\n      c: 1,\n      d: 2\n    }\n  }, {\n    a: {\n      b: {\n        c: 1,\n        d: 2\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1,\n      d: 2\n    }\n  }, {\n    a: {\n      b: {\n        c: 1,\n        d: 1\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1,\n      d: 2\n    }\n  }, {\n    a: {\n      b: {\n        d: 2\n      }\n    }\n  }); // dotted keypaths: $ operators\n\n  match({\n    'a.b': {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: {\n      b: [2]\n    }\n  }); // tested against mongodb\n\n  match({\n    'a.b': {\n      $in: [{\n        x: 1\n      }, {\n        x: 2\n      }, {\n        x: 3\n      }]\n    }\n  }, {\n    a: {\n      b: [{\n        x: 2\n      }]\n    }\n  });\n  match({\n    'a.b': {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: {\n      b: [4, 2]\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: {\n      b: [4]\n    }\n  }); // $or\n\n  test.throws(() => {\n    match({\n      $or: []\n    }, {});\n  });\n  test.throws(() => {\n    match({\n      $or: [5]\n    }, {});\n  });\n  test.throws(() => {\n    match({\n      $or: []\n    }, {\n      a: 1\n    });\n  });\n  match({\n    $or: [{\n      a: 1\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      c: 3\n    }, {\n      d: 4\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [1, 2, 3]\n  });\n  nomatch({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    c: [1, 2, 3]\n  });\n  nomatch({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [2, 3, 4]\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      a: 2\n    }],\n    b: 2\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: 2\n    }, {\n      a: 3\n    }],\n    b: 2\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: 1\n    }, {\n      a: 2\n    }],\n    b: 3\n  }, {\n    a: 1,\n    b: 2\n  }); // Combining $or with equality\n\n  match({\n    x: 1,\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    x: 1,\n    b: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }],\n    x: 1\n  }, {\n    x: 1,\n    b: 1\n  });\n  nomatch({\n    x: 1,\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    b: 1\n  });\n  nomatch({\n    x: 1,\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    x: 1\n  }); // $or and $lt, $lte, $gt, $gte\n\n  match({\n    $or: [{\n      a: {\n        $lte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $lt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $gte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $gt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      b: {\n        $gt: 1\n      }\n    }, {\n      b: {\n        $lt: 3\n      }\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      b: {\n        $lt: 1\n      }\n    }, {\n      b: {\n        $gt: 3\n      }\n    }]\n  }, {\n    b: 2\n  }); // $or and $in\n\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $or and $nin\n\n  nomatch({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $or and dot-notation\n\n  match({\n    $or: [{\n      'a.b': 1\n    }, {\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $or: [{\n      'a.b': 1\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $or: [{\n      'a.b': 2\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  }); // $or and nested objects\n\n  match({\n    $or: [{\n      a: {\n        b: 1,\n        c: 2\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  });\n  nomatch({\n    $or: [{\n      a: {\n        b: 1,\n        c: 3\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  }); // $or and regexes\n\n  match({\n    $or: [{\n      a: /a/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $or: [{\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $or: [{\n      a: /a/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $or: [{\n      a: /i/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $or: [{\n      a: /i/\n    }, {\n      b: /o/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  }); // $or and $ne\n\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {});\n  nomatch({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    b: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  }); // $or and $not\n\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {});\n  nomatch({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $mod: [10, 2]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 3\n  }); // this is possibly an open-ended task, so we stop here ...\n  // $nor\n\n  test.throws(() => {\n    match({\n      $nor: []\n    }, {});\n  });\n  test.throws(() => {\n    match({\n      $nor: [5]\n    }, {});\n  });\n  test.throws(() => {\n    match({\n      $nor: []\n    }, {\n      a: 1\n    });\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      c: 3\n    }, {\n      d: 4\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [1, 2, 3]\n  });\n  match({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    c: [1, 2, 3]\n  });\n  match({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [2, 3, 4]\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  }); // $nor and $lt, $lte, $gt, $gte\n\n  nomatch({\n    $nor: [{\n      a: {\n        $lte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $lt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $gte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $gt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      b: {\n        $gt: 1\n      }\n    }, {\n      b: {\n        $lt: 3\n      }\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      b: {\n        $lt: 1\n      }\n    }, {\n      b: {\n        $gt: 3\n      }\n    }]\n  }, {\n    b: 2\n  }); // $nor and $in\n\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $nor and $nin\n\n  match({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $nor and dot-notation\n\n  nomatch({\n    $nor: [{\n      'a.b': 1\n    }, {\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $nor: [{\n      'a.b': 1\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $nor: [{\n      'a.b': 2\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  }); // $nor and nested objects\n\n  nomatch({\n    $nor: [{\n      a: {\n        b: 1,\n        c: 2\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  });\n  match({\n    $nor: [{\n      a: {\n        b: 1,\n        c: 3\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  }); // $nor and regexes\n\n  nomatch({\n    $nor: [{\n      a: /a/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $nor: [{\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $nor: [{\n      a: /a/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $nor: [{\n      a: /i/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $nor: [{\n      a: /i/\n    }, {\n      b: /o/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  }); // $nor and $ne\n\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {});\n  match({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    b: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  }); // $nor and $not\n\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {});\n  match({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $mod: [10, 2]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 3\n  }); // $and\n\n  test.throws(() => {\n    match({\n      $and: []\n    }, {});\n  });\n  test.throws(() => {\n    match({\n      $and: [5]\n    }, {});\n  });\n  test.throws(() => {\n    match({\n      $and: []\n    }, {\n      a: 1\n    });\n  });\n  match({\n    $and: [{\n      a: 1\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $and: [{\n      a: 1\n    }, {\n      b: 2\n    }],\n    c: 3\n  }, {\n    a: 1,\n    b: 2,\n    c: 3\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      b: 2\n    }],\n    c: 4\n  }, {\n    a: 1,\n    b: 2,\n    c: 3\n  }); // $and and regexes\n\n  match({\n    $and: [{\n      a: /a/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $and: [{\n      a: /a/i\n    }]\n  }, {\n    a: 'CAT'\n  });\n  nomatch({\n    $and: [{\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $and: [{\n      a: /a/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $and: [{\n      a: /a/\n    }, {\n      b: /o/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  });\n  nomatch({\n    $and: [{\n      a: /a/\n    }, {\n      b: /a/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  }); // $and, dot-notation, and nested objects\n\n  match({\n    $and: [{\n      'a.b': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $and: [{\n      a: {\n        b: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      a: {\n        b: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $and: [{\n      'a.b': 1\n    }, {\n      'c.d': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      'c.d': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  match({\n    $and: [{\n      'a.b': 1\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      c: {\n        d: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 2\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  match({\n    $and: [{\n      a: {\n        b: 1\n      }\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      a: {\n        b: 2\n      }\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  }); // $and and $in\n\n  nomatch({\n    $and: [{\n      a: {\n        $in: []\n      }\n    }]\n  }, {});\n  match({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  });\n  match({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  }); // $and and $nin\n\n  match({\n    $and: [{\n      a: {\n        $nin: []\n      }\n    }]\n  }, {});\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  }); // $and and $lt, $lte, $gt, $gte\n\n  match({\n    $and: [{\n      a: {\n        $lt: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $lt: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $lte: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gt: 0\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gt: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gte: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gt: 0\n      }\n    }, {\n      a: {\n        $lt: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gt: 1\n      }\n    }, {\n      a: {\n        $lt: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gt: 0\n      }\n    }, {\n      a: {\n        $lt: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gte: 1\n      }\n    }, {\n      a: {\n        $lte: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gte: 2\n      }\n    }, {\n      a: {\n        $lte: 0\n      }\n    }]\n  }, {\n    a: 1\n  }); // $and and $ne\n\n  match({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {});\n  nomatch({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 3\n      }\n    }]\n  }, {\n    a: 2\n  }); // $and and $not\n\n  match({\n    $and: [{\n      a: {\n        $not: {\n          $gt: 2\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $not: {\n          $lt: 2\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $not: {\n          $lt: 0\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $gt: 2\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $not: {\n          $lt: 2\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $gt: 0\n        }\n      }\n    }]\n  }, {\n    a: 1\n  }); // $where\n\n  match({\n    $where: 'this.a === 1'\n  }, {\n    a: 1\n  });\n  match({\n    $where: 'obj.a === 1'\n  }, {\n    a: 1\n  });\n  nomatch({\n    $where: 'this.a !== 1'\n  }, {\n    a: 1\n  });\n  nomatch({\n    $where: 'obj.a !== 1'\n  }, {\n    a: 1\n  });\n  nomatch({\n    $where: 'this.a === 1',\n    a: 2\n  }, {\n    a: 1\n  });\n  match({\n    $where: 'this.a === 1',\n    b: 2\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $where: 'this.a === 1 && this.b === 2'\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $where: 'this.a instanceof Array'\n  }, {\n    a: []\n  });\n  nomatch({\n    $where: 'this.a instanceof Array'\n  }, {\n    a: 1\n  }); // reaching into array\n\n  match({\n    'dogs.0.name': 'Fido'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'dogs.1.name': 'Rex'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  nomatch({\n    'dogs.1.name': 'Fido'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'room.1b': 'bla'\n  }, {\n    room: {\n      '1b': 'bla'\n    }\n  });\n  match({\n    'dogs.name': 'Fido'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'dogs.name': 'Rex'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'animals.dogs.name': 'Fido'\n  }, {\n    animals: [{\n      dogs: [{\n        name: 'Rover'\n      }]\n    }, {}, {\n      dogs: [{\n        name: 'Fido'\n      }, {\n        name: 'Rex'\n      }]\n    }]\n  });\n  match({\n    'animals.dogs.name': 'Fido'\n  }, {\n    animals: [{\n      dogs: {\n        name: 'Rex'\n      }\n    }, {\n      dogs: {\n        name: 'Fido'\n      }\n    }]\n  });\n  match({\n    'animals.dogs.name': 'Fido'\n  }, {\n    animals: [{\n      dogs: [{\n        name: 'Rover'\n      }]\n    }, {}, {\n      dogs: [{\n        name: ['Fido']\n      }, {\n        name: 'Rex'\n      }]\n    }]\n  });\n  nomatch({\n    'dogs.name': 'Fido'\n  }, {\n    dogs: []\n  }); // $elemMatch\n\n  match({\n    dogs: {\n      $elemMatch: {\n        name: /e/\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  nomatch({\n    dogs: {\n      $elemMatch: {\n        name: /a/\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    dogs: {\n      $elemMatch: {\n        age: {\n          $gt: 4\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    dogs: {\n      $elemMatch: {\n        name: 'Fido',\n        age: {\n          $gt: 4\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    dogs: {\n      $elemMatch: {\n        name: 'Fido',\n        age: {\n          $gt: 5\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    dogs: {\n      $elemMatch: {\n        name: /i/,\n        age: {\n          $gt: 4\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    dogs: {\n      $elemMatch: {\n        name: /e/,\n        age: 5\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  }); // Tests for https://github.com/meteor/meteor/issues/9111.\n\n  match({\n    dogs: {\n      $elemMatch: {\n        name: 'Rex'\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    dogs: {\n      $not: {\n        $elemMatch: {\n          name: 'Rex'\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    $or: [{\n      dogs: {\n        $elemMatch: {\n          name: 'Rex'\n        }\n      }\n    }, {\n      dogs: {\n        $elemMatch: {\n          name: 'Rex',\n          age: 5\n        }\n      }\n    }]\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    $or: [{\n      dogs: {\n        $not: {\n          $elemMatch: {\n            name: 'Rex'\n          }\n        }\n      }\n    }, {\n      dogs: {\n        $elemMatch: {\n          name: 'Rex',\n          age: 5\n        }\n      }\n    }]\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    x: {\n      $elemMatch: {\n        y: 9\n      }\n    }\n  }, {\n    x: [{\n      y: 9\n    }]\n  });\n  nomatch({\n    x: {\n      $elemMatch: {\n        y: 9\n      }\n    }\n  }, {\n    x: [[{\n      y: 9\n    }]]\n  });\n  match({\n    x: {\n      $elemMatch: {\n        $gt: 5,\n        $lt: 9\n      }\n    }\n  }, {\n    x: [8]\n  });\n  nomatch({\n    x: {\n      $elemMatch: {\n        $gt: 5,\n        $lt: 9\n      }\n    }\n  }, {\n    x: [[8]]\n  });\n  match({\n    'a.x': {\n      $elemMatch: {\n        y: 9\n      }\n    }\n  }, {\n    a: [{\n      x: []\n    }, {\n      x: [{\n        y: 9\n      }]\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 5\n      }\n    }\n  }, {\n    a: {\n      x: 5\n    }\n  });\n  match({\n    a: {\n      $elemMatch: {\n        0: {\n          $gt: 5,\n          $lt: 9\n        }\n      }\n    }\n  }, {\n    a: [[6]]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        '0.b': {\n          $gt: 5,\n          $lt: 9\n        }\n      }\n    }\n  }, {\n    a: [[{\n      b: 6\n    }]]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }],\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $and: [{\n          b: 1\n        }, {\n          x: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      b: 1\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      b: 1\n    }]\n  });\n  test.throws(() => {\n    match({\n      a: {\n        $elemMatch: {\n          $gte: 1,\n          $or: [{\n            a: 1\n          }, {\n            b: 1\n          }]\n        }\n      }\n    }, {\n      a: [{\n        x: 1,\n        b: 1\n      }]\n    });\n  });\n  test.throws(() => {\n    match({\n      x: {\n        $elemMatch: {\n          $and: [{\n            $gt: 5,\n            $lt: 9\n          }]\n        }\n      }\n    }, {\n      x: [8]\n    });\n  }); // $comment\n\n  match({\n    a: 5,\n    $comment: 'asdf'\n  }, {\n    a: 5\n  });\n  nomatch({\n    a: 6,\n    $comment: 'asdf'\n  }, {\n    a: 5\n  }); // XXX still needs tests:\n  // - non-scalar arguments to $gt, $lt, etc\n});\nTinytest.add('minimongo - projection_compiler', test => {\n  const testProjection = (projection, tests) => {\n    const projection_f = LocalCollection._compileProjection(projection);\n\n    const equalNonStrict = (a, b, desc) => {\n      test.isTrue(EJSON.equals(a, b), desc);\n    };\n\n    tests.forEach(testCase => {\n      equalNonStrict(projection_f(testCase[0]), testCase[1], testCase[2]);\n    });\n  };\n\n  const testCompileProjectionThrows = (projection, expectedError) => {\n    test.throws(() => {\n      LocalCollection._compileProjection(projection);\n    }, expectedError);\n  };\n\n  testProjection({\n    foo: 1,\n    bar: 1\n  }, [[{\n    foo: 42,\n    bar: 'something',\n    baz: 'else'\n  }, {\n    foo: 42,\n    bar: 'something'\n  }, 'simplest - whitelist'], [{\n    foo: {\n      nested: 17\n    },\n    baz: {}\n  }, {\n    foo: {\n      nested: 17\n    }\n  }, 'nested whitelisted field'], [{\n    _id: 'uid',\n    bazbaz: 42\n  }, {\n    _id: 'uid'\n  }, 'simplest whitelist - preserve _id']]);\n  testProjection({\n    foo: 0,\n    bar: 0\n  }, [[{\n    foo: 42,\n    bar: 'something',\n    baz: 'else'\n  }, {\n    baz: 'else'\n  }, 'simplest - blacklist'], [{\n    foo: {\n      nested: 17\n    },\n    baz: {\n      foo: 'something'\n    }\n  }, {\n    baz: {\n      foo: 'something'\n    }\n  }, 'nested blacklisted field'], [{\n    _id: 'uid',\n    bazbaz: 42\n  }, {\n    _id: 'uid',\n    bazbaz: 42\n  }, 'simplest blacklist - preserve _id']]);\n  testProjection({\n    _id: 0,\n    foo: 1\n  }, [[{\n    foo: 42,\n    bar: 33,\n    _id: 'uid'\n  }, {\n    foo: 42\n  }, 'whitelist - _id blacklisted']]);\n  testProjection({\n    _id: 0,\n    foo: 0\n  }, [[{\n    foo: 42,\n    bar: 33,\n    _id: 'uid'\n  }, {\n    bar: 33\n  }, 'blacklist - _id blacklisted']]);\n  testProjection({\n    'foo.bar.baz': 1\n  }, [[{\n    foo: {\n      meh: 'fur',\n      bar: {\n        baz: 42\n      },\n      tr: 1\n    },\n    bar: 33,\n    baz: 'trolololo'\n  }, {\n    foo: {\n      bar: {\n        baz: 42\n      }\n    }\n  }, 'whitelist nested'], // Behavior of this test is looked up in actual mongo\n  [{\n    foo: {\n      meh: 'fur',\n      bar: 'nope',\n      tr: 1\n    },\n    bar: 33,\n    baz: 'trolololo'\n  }, {\n    foo: {}\n  }, 'whitelist nested - path not found in doc, different type'], // Behavior of this test is looked up in actual mongo\n  [{\n    foo: {\n      meh: 'fur',\n      bar: [],\n      tr: 1\n    },\n    bar: 33,\n    baz: 'trolololo'\n  }, {\n    foo: {\n      bar: []\n    }\n  }, 'whitelist nested - path not found in doc']]);\n  testProjection({\n    'hope.humanity': 0,\n    'hope.people': 0\n  }, [[{\n    hope: {\n      humanity: 'lost',\n      people: 'broken',\n      candies: 'long live!'\n    }\n  }, {\n    hope: {\n      candies: 'long live!'\n    }\n  }, 'blacklist nested'], [{\n    hope: 'new'\n  }, {\n    hope: 'new'\n  }, 'blacklist nested - path not found in doc']]);\n  testProjection({\n    _id: 1\n  }, [[{\n    _id: 42,\n    x: 1,\n    y: {\n      z: '2'\n    }\n  }, {\n    _id: 42\n  }, '_id whitelisted'], [{\n    _id: 33\n  }, {\n    _id: 33\n  }, '_id whitelisted, _id only'], [{\n    x: 1\n  }, {}, '_id whitelisted, no _id']]);\n  testProjection({\n    _id: 0\n  }, [[{\n    _id: 42,\n    x: 1,\n    y: {\n      z: '2'\n    }\n  }, {\n    x: 1,\n    y: {\n      z: '2'\n    }\n  }, '_id blacklisted'], [{\n    _id: 33\n  }, {}, '_id blacklisted, _id only'], [{\n    x: 1\n  }, {\n    x: 1\n  }, '_id blacklisted, no _id']]);\n  testProjection({}, [[{\n    a: 1,\n    b: 2,\n    c: '3'\n  }, {\n    a: 1,\n    b: 2,\n    c: '3'\n  }, 'empty projection']]);\n  testCompileProjectionThrows({\n    inc: 1,\n    excl: 0\n  }, 'You cannot currently mix including and excluding fields');\n  testCompileProjectionThrows({\n    _id: 1,\n    a: 0\n  }, 'You cannot currently mix including and excluding fields');\n  testCompileProjectionThrows({\n    a: 1,\n    'a.b': 1\n  }, 'using both of them may trigger unexpected behavior');\n  testCompileProjectionThrows({\n    'a.b.c': 1,\n    'a.b': 1,\n    a: 1\n  }, 'using both of them may trigger unexpected behavior');\n  testCompileProjectionThrows('some string', 'fields option must be an object');\n});\nTinytest.add('minimongo - fetch with fields', test => {\n  const c = new LocalCollection();\n  Array.from({\n    length: 30\n  }, (x, i) => {\n    c.insert({\n      something: Random.id(),\n      anything: {\n        foo: 'bar',\n        cool: 'hot'\n      },\n      nothing: i,\n      i\n    });\n  }); // Test just a regular fetch with some projection\n\n  let fetchResults = c.find({}, {\n    fields: {\n      something: 1,\n      'anything.foo': 1\n    }\n  }).fetch();\n  test.isTrue(fetchResults.every(x => x && x.something && x.anything && x.anything.foo && x.anything.foo === 'bar' && !hasOwn.call(x, 'nothing') && !hasOwn.call(x.anything, 'cool'))); // Test with a selector, even field used in the selector is excluded in the\n  // projection\n\n  fetchResults = c.find({\n    nothing: {\n      $gte: 5\n    }\n  }, {\n    fields: {\n      nothing: 0\n    }\n  }).fetch();\n  test.isTrue(fetchResults.every(x => x && x.something && x.anything && x.anything.foo === 'bar' && x.anything.cool === 'hot' && !hasOwn.call(x, 'nothing') && x.i && x.i >= 5));\n  test.isTrue(fetchResults.length === 25); // Test that we can sort, based on field excluded from the projection, use\n  // skip and limit as well!\n  // following find will get indexes [10..20) sorted by nothing\n\n  fetchResults = c.find({}, {\n    sort: {\n      nothing: 1\n    },\n    limit: 10,\n    skip: 10,\n    fields: {\n      i: 1,\n      something: 1\n    }\n  }).fetch();\n  test.isTrue(fetchResults.every(x => x && x.something && x.i >= 10 && x.i < 20));\n  fetchResults.forEach((x, i, arr) => {\n    if (!i) return;\n    test.isTrue(x.i === arr[i - 1].i + 1);\n  }); // Temporary unsupported operators\n  // queries are taken from MongoDB docs examples\n\n  test.throws(() => {\n    c.find({}, {\n      fields: {\n        'grades.$': 1\n      }\n    });\n  });\n  test.throws(() => {\n    c.find({}, {\n      fields: {\n        grades: {\n          $elemMatch: {\n            mean: 70\n          }\n        }\n      }\n    });\n  });\n  test.throws(() => {\n    c.find({}, {\n      fields: {\n        grades: {\n          $slice: [20, 10]\n        }\n      }\n    });\n  });\n});\nTinytest.add('minimongo - fetch with projection, subarrays', test => {\n  // Apparently projection of type 'foo.bar.x' for\n  // { foo: [ { bar: { x: 42 } }, { bar: { x: 3 } } ] }\n  // should return exactly this object. More precisely, arrays are considered as\n  // sets and are queried separately and then merged back to result set\n  const c = new LocalCollection(); // Insert a test object with two set fields\n\n  c.insert({\n    setA: [{\n      fieldA: 42,\n      fieldB: 33\n    }, {\n      fieldA: 'the good',\n      fieldB: 'the bad',\n      fieldC: 'the ugly'\n    }],\n    setB: [{\n      anotherA: {},\n      anotherB: 'meh'\n    }, {\n      anotherA: 1234,\n      anotherB: 431\n    }]\n  });\n\n  const equalNonStrict = (a, b, desc) => {\n    test.isTrue(EJSON.equals(a, b), desc);\n  };\n\n  const testForProjection = (projection, expected) => {\n    const fetched = c.find({}, {\n      fields: projection\n    }).fetch()[0];\n    equalNonStrict(fetched, expected, `failed sub-set projection: ${JSON.stringify(projection)}`);\n  };\n\n  testForProjection({\n    'setA.fieldA': 1,\n    'setB.anotherB': 1,\n    _id: 0\n  }, {\n    setA: [{\n      fieldA: 42\n    }, {\n      fieldA: 'the good'\n    }],\n    setB: [{\n      anotherB: 'meh'\n    }, {\n      anotherB: 431\n    }]\n  });\n  testForProjection({\n    'setA.fieldA': 0,\n    'setB.anotherA': 0,\n    _id: 0\n  }, {\n    setA: [{\n      fieldB: 33\n    }, {\n      fieldB: 'the bad',\n      fieldC: 'the ugly'\n    }],\n    setB: [{\n      anotherB: 'meh'\n    }, {\n      anotherB: 431\n    }]\n  });\n  c.remove({});\n  c.insert({\n    a: [[{\n      b: 1,\n      c: 2\n    }, {\n      b: 2,\n      c: 4\n    }], {\n      b: 3,\n      c: 5\n    }, [{\n      b: 4,\n      c: 9\n    }]]\n  });\n  testForProjection({\n    'a.b': 1,\n    _id: 0\n  }, {\n    a: [[{\n      b: 1\n    }, {\n      b: 2\n    }], {\n      b: 3\n    }, [{\n      b: 4\n    }]]\n  });\n  testForProjection({\n    'a.b': 0,\n    _id: 0\n  }, {\n    a: [[{\n      c: 2\n    }, {\n      c: 4\n    }], {\n      c: 5\n    }, [{\n      c: 9\n    }]]\n  });\n});\nTinytest.add('minimongo - fetch with projection, deep copy', test => {\n  // Compiled fields projection defines the contract: returned document doesn't\n  // retain anything from the passed argument.\n  const doc = {\n    a: {\n      x: 42\n    },\n    b: {\n      y: {\n        z: 33\n      }\n    },\n    c: 'asdf'\n  };\n  let fields = {\n    a: 1,\n    'b.y': 1\n  };\n\n  let projectionFn = LocalCollection._compileProjection(fields);\n\n  let filteredDoc = projectionFn(doc);\n  doc.a.x++;\n  doc.b.y.z--;\n  test.equal(filteredDoc.a.x, 42, 'projection returning deep copy - including');\n  test.equal(filteredDoc.b.y.z, 33, 'projection returning deep copy - including');\n  fields = {\n    c: 0\n  };\n  projectionFn = LocalCollection._compileProjection(fields);\n  filteredDoc = projectionFn(doc);\n  doc.a.x = 5;\n  test.equal(filteredDoc.a.x, 43, 'projection returning deep copy - excluding');\n});\nTinytest.add('minimongo - observe ordered with projection', test => {\n  // These tests are copy-paste from \"minimongo -observe ordered\",\n  // slightly modified to test projection\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  let handle;\n  const c = new LocalCollection();\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(cbs);\n  test.isTrue(handle.collection === c);\n  c.insert({\n    _id: 'foo',\n    a: 1,\n    b: 2\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2,\n      b: 1\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, 0, {\n    a: 1\n  }]);\n  c.insert({\n    _id: 'bar',\n    a: 10,\n    c: 33\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, 1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1\n    }\n  }, {\n    multi: true\n  });\n  c.update({}, {\n    $inc: {\n      c: 1\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, 1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11\n  }, {\n    a: 1,\n    b: 44\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, 1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, 1, 0, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 1, {\n    a: 3\n  }]); // test stop\n\n  handle.stop();\n  const idA2 = Random.id();\n  c.insert({\n    _id: idA2,\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  const cursor = c.find({}, {\n    fields: {\n      a: 1,\n      _id: 0\n    }\n  });\n  test.throws(() => {\n    cursor.observeChanges({\n      added() {}\n\n    });\n  });\n  test.throws(() => {\n    cursor.observe({\n      added() {}\n\n    });\n  }); // test initial inserts (and backwards sort)\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(cbs);\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 1, null]);\n  handle.stop(); // test _suppress_initial\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(Object.assign(cbs, {\n    _suppress_initial: true\n  }));\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 100,\n    b: {\n      foo: 'bar'\n    }\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 100\n  }, 0, idA2]);\n  handle.stop(); // test skip and limit.\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    skip: 1,\n    limit: 2,\n    fields: {\n      blacklisted: 0\n    }\n  }).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 1,\n    blacklisted: 1324\n  });\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    _id: 'foo',\n    a: 2,\n    blacklisted: ['something']\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  c.insert({\n    a: 3,\n    blacklisted: {\n      2: 3\n    }\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 3\n  }, 1, null]);\n  c.insert({\n    a: 4,\n    blacklisted: 6\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 1\n  }, {\n    a: 0,\n    blacklisted: 4444\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 0\n  }, {\n    a: 5,\n    blacklisted: 11111\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['added', {\n    a: 4\n  }, 1, null]);\n  c.update({\n    a: 3\n  }, {\n    a: 3.5,\n    blacklisted: 333.4444\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3.5\n  }, 0, {\n    a: 3\n  }]);\n  handle.stop(); // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(Object.assign(cbs, {\n    _no_indices: true\n  }));\n  c.insert({\n    _id: 'foo',\n    a: 1,\n    zoo: 'crazy'\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, -1, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2,\n      foobar: 'player'\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, -1, {\n    a: 1\n  }]);\n  c.insert({\n    a: 10,\n    b: 123.45\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, -1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1,\n      b: 2\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, -1, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, -1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11,\n    b: 125.45\n  }, {\n    a: 1,\n    b: 444\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, -1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, -1, -1, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', -1, {\n    a: 3\n  }]);\n  handle.stop();\n});\nTinytest.add('minimongo - ordering', test => {\n  const shortBinary = EJSON.newBinary(1);\n  shortBinary[0] = 128;\n  const longBinary1 = EJSON.newBinary(2);\n  longBinary1[1] = 42;\n  const longBinary2 = EJSON.newBinary(2);\n  longBinary2[1] = 50;\n  const date1 = new Date();\n  const date2 = new Date(date1.getTime() + 1000); // value ordering\n\n  assert_ordering(test, LocalCollection._f._cmp, [null, 1, 2.2, 3, '03', '1', '11', '2', 'a', 'aaa', {}, {\n    a: 2\n  }, {\n    a: 3\n  }, {\n    a: 3,\n    b: 4\n  }, {\n    b: 4\n  }, {\n    b: 4,\n    a: 3\n  }, {\n    b: {}\n  }, {\n    b: [1, 2, 3]\n  }, {\n    b: [1, 2, 4]\n  }, [], [1, 2], [1, 2, 3], [1, 2, 4], [1, 2, '4'], [1, 2, [4]], shortBinary, longBinary1, longBinary2, new MongoID.ObjectID('1234567890abcd1234567890'), new MongoID.ObjectID('abcd1234567890abcd123456'), false, true, date1, date2]); // document ordering under a sort specification\n\n  const verify = (sorts, docs) => {\n    (Array.isArray(sorts) ? sorts : [sorts]).forEach(sort => {\n      const sorter = new Minimongo.Sorter(sort);\n      assert_ordering(test, sorter.getComparator(), docs);\n    });\n  }; // note: [] doesn't sort with \"arrays\", it sorts as \"undefined\". the position\n  // of arrays in _typeorder only matters for things like $lt. (This behavior\n  // verified with MongoDB 2.2.1.) We don't define the relative order of {a: []}\n  // and {c: 1} is undefined (MongoDB does seem to care but it's not clear how\n  // or why).\n\n\n  verify([{\n    a: 1\n  }, ['a'], [['a', 'asc']]], [{\n    a: []\n  }, {\n    a: 1\n  }, {\n    a: {}\n  }, {\n    a: true\n  }]);\n  verify([{\n    a: 1\n  }, ['a'], [['a', 'asc']]], [{\n    c: 1\n  }, {\n    a: 1\n  }, {\n    a: {}\n  }, {\n    a: true\n  }]);\n  verify([{\n    a: -1\n  }, [['a', 'desc']]], [{\n    a: true\n  }, {\n    a: {}\n  }, {\n    a: 1\n  }, {\n    c: 1\n  }]);\n  verify([{\n    a: -1\n  }, [['a', 'desc']]], [{\n    a: true\n  }, {\n    a: {}\n  }, {\n    a: 1\n  }, {\n    a: []\n  }]);\n  verify([{\n    a: 1,\n    b: -1\n  }, ['a', ['b', 'desc']], [['a', 'asc'], ['b', 'desc']]], [{\n    c: 1\n  }, {\n    a: 1,\n    b: 3\n  }, {\n    a: 1,\n    b: 2\n  }, {\n    a: 2,\n    b: 0\n  }]);\n  verify([{\n    a: 1,\n    b: 1\n  }, ['a', 'b'], [['a', 'asc'], ['b', 'asc']]], [{\n    c: 1\n  }, {\n    a: 1,\n    b: 2\n  }, {\n    a: 1,\n    b: 3\n  }, {\n    a: 2,\n    b: 0\n  }]);\n  test.throws(() => {\n    new Minimongo.Sorter('a');\n  });\n  test.throws(() => {\n    new Minimongo.Sorter(123);\n  }); // We don't support $natural:1 (since we don't actually have Mongo's on-disk\n  // ordering available!)\n\n  test.throws(() => {\n    new Minimongo.Sorter({\n      $natural: 1\n    });\n  }); // No sort spec implies everything equal.\n\n  test.equal(new Minimongo.Sorter({}).getComparator()({\n    a: 1\n  }, {\n    a: 2\n  }), 0); // All sorts of array edge cases!\n  // Increasing sort sorts by the smallest element it finds; 1 < 2.\n\n  verify({\n    a: 1\n  }, [{\n    a: [1, 10, 20]\n  }, {\n    a: [5, 2, 99]\n  }]); // Decreasing sorts by largest it finds; 99 > 20.\n\n  verify({\n    a: -1\n  }, [{\n    a: [5, 2, 99]\n  }, {\n    a: [1, 10, 20]\n  }]); // Can also sort by specific array indices.\n\n  verify({\n    'a.1': 1\n  }, [{\n    a: [5, 2, 99]\n  }, {\n    a: [1, 10, 20]\n  }]); // We do NOT expand sub-arrays, so the minimum in the second doc is 5, not\n  // -20. (Numbers always sort before arrays.)\n\n  verify({\n    a: 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]); // The maximum in each of these is the array, since arrays are \"greater\" than\n  // numbers. And [10, 15] is greater than [-5, -20].\n\n  verify({\n    a: -1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]); // 'a.0' here ONLY means \"first element of a\", not \"first element of something\n  // found in a\", so it CANNOT find the 10 or -5.\n\n  verify({\n    'a.0': 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]);\n  verify({\n    'a.0': -1\n  }, [{\n    a: [5, [-5, -20], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]); // Similarly, this is just comparing [-5,-20] to [10, 15].\n\n  verify({\n    'a.1': 1\n  }, [{\n    a: [5, [-5, -20], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]);\n  verify({\n    'a.1': -1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]); // Here we are just comparing [10,15] directly to [19,3] (and NOT also\n  // iterating over the numbers; this is implemented by setting dontIterate in\n  // makeLookupFunction).  So [10,15]<[19,3] even though 3 is the smallest\n  // number you can find there.\n\n  verify({\n    'a.1': 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [19, 3], 18]\n  }]);\n  verify({\n    'a.1': -1\n  }, [{\n    a: [5, [19, 3], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]); // Minimal elements are 1 and 5.\n\n  verify({\n    a: 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [19, 3], 18]\n  }]); // Maximal elements are [19,3] and [10,15] (because arrays sort higher than\n  // numbers), even though there's a 20 floating around.\n\n  verify({\n    a: -1\n  }, [{\n    a: [5, [19, 3], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]); // Maximal elements are [10,15] and [3,19].  [10,15] is bigger even though 19\n  // is the biggest number in them, because array comparison is lexicographic.\n\n  verify({\n    a: -1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [3, 19], 18]\n  }]); // (0,4) < (0,5), so they go in this order.  It's not correct to consider\n  // (0,3) as a sort key for the second document because they come from\n  // different a-branches.\n\n  verify({\n    'a.x': 1,\n    'a.y': 1\n  }, [{\n    a: [{\n      x: 0,\n      y: 4\n    }]\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }]\n  }]);\n  verify({\n    'a.0.s': 1\n  }, [{\n    a: [{\n      s: 1\n    }]\n  }, {\n    a: [{\n      s: 2\n    }]\n  }]);\n});\nTinytest.add('minimongo - sort', test => {\n  const c = new LocalCollection();\n\n  for (let i = 0; i < 50; i++) {\n    for (let j = 0; j < 2; j++) {\n      c.insert({\n        a: i,\n        b: j,\n        _id: `${i}_${j}`\n      });\n    }\n  }\n\n  test.equal(c.find(null, {\n    sort: {\n      b: -1,\n      a: 1\n    },\n    limit: 5\n  }).fetch(), []);\n  test.equal(c.find(undefined, {\n    sort: {\n      b: -1,\n      a: 1\n    },\n    limit: 5\n  }).fetch(), []);\n  test.equal(c.find(false, {\n    sort: {\n      b: -1,\n      a: 1\n    },\n    limit: 5\n  }).fetch(), []);\n  test.equal(c.find({\n    a: {\n      $gt: 10\n    }\n  }, {\n    sort: {\n      b: -1,\n      a: 1\n    },\n    limit: 5\n  }).fetch(), [{\n    a: 11,\n    b: 1,\n    _id: '11_1'\n  }, {\n    a: 12,\n    b: 1,\n    _id: '12_1'\n  }, {\n    a: 13,\n    b: 1,\n    _id: '13_1'\n  }, {\n    a: 14,\n    b: 1,\n    _id: '14_1'\n  }, {\n    a: 15,\n    b: 1,\n    _id: '15_1'\n  }]);\n  test.equal(c.find({\n    a: {\n      $gt: 10\n    }\n  }, {\n    sort: {\n      b: -1,\n      a: 1\n    },\n    skip: 3,\n    limit: 5\n  }).fetch(), [{\n    a: 14,\n    b: 1,\n    _id: '14_1'\n  }, {\n    a: 15,\n    b: 1,\n    _id: '15_1'\n  }, {\n    a: 16,\n    b: 1,\n    _id: '16_1'\n  }, {\n    a: 17,\n    b: 1,\n    _id: '17_1'\n  }, {\n    a: 18,\n    b: 1,\n    _id: '18_1'\n  }]);\n  test.equal(c.find({\n    a: {\n      $gte: 20\n    }\n  }, {\n    sort: {\n      a: 1,\n      b: -1\n    },\n    skip: 50,\n    limit: 5\n  }).fetch(), [{\n    a: 45,\n    b: 1,\n    _id: '45_1'\n  }, {\n    a: 45,\n    b: 0,\n    _id: '45_0'\n  }, {\n    a: 46,\n    b: 1,\n    _id: '46_1'\n  }, {\n    a: 46,\n    b: 0,\n    _id: '46_0'\n  }, {\n    a: 47,\n    b: 1,\n    _id: '47_1'\n  }]);\n});\nTinytest.add('minimongo - subkey sort', test => {\n  const c = new LocalCollection(); // normal case\n\n  c.insert({\n    a: {\n      b: 2\n    }\n  });\n  c.insert({\n    a: {\n      b: 1\n    }\n  });\n  c.insert({\n    a: {\n      b: 3\n    }\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': -1\n    }\n  }).fetch().map(doc => doc.a), [{\n    b: 3\n  }, {\n    b: 2\n  }, {\n    b: 1\n  }]); // isn't an object\n\n  c.insert({\n    a: 1\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': 1\n    }\n  }).fetch().map(doc => doc.a), [1, {\n    b: 1\n  }, {\n    b: 2\n  }, {\n    b: 3\n  }]); // complex object\n\n  c.insert({\n    a: {\n      b: {\n        c: 1\n      }\n    }\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': -1\n    }\n  }).fetch().map(doc => doc.a), [{\n    b: {\n      c: 1\n    }\n  }, {\n    b: 3\n  }, {\n    b: 2\n  }, {\n    b: 1\n  }, 1]); // no such top level prop\n\n  c.insert({\n    c: 1\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': -1\n    }\n  }).fetch().map(doc => doc.a), [{\n    b: {\n      c: 1\n    }\n  }, {\n    b: 3\n  }, {\n    b: 2\n  }, {\n    b: 1\n  }, 1, undefined]); // no such mid level prop. just test that it doesn't throw.\n\n  test.equal(c.find({}, {\n    sort: {\n      'a.nope.c': -1\n    }\n  }).count(), 6);\n});\nTinytest.add('minimongo - array sort', test => {\n  const c = new LocalCollection(); // \"up\" and \"down\" are the indices that the docs should have when sorted\n  // ascending and descending by \"a.x\" respectively. They are not reverses of\n  // each other: when sorting ascending, you use the minimum value you can find\n  // in the document, and when sorting descending, you use the maximum value you\n  // can find. So [1, 4] shows up in the 1 slot when sorting ascending and the 4\n  // slot when sorting descending.\n  //\n  // Similarly, \"selected\" is the index that the doc should have in the query\n  // that sorts ascending on \"a.x\" and selects {'a.x': {$gt: 1}}. In this case,\n  // the 1 in [1, 4] may not be used as a sort key.\n\n  c.insert({\n    up: 1,\n    down: 1,\n    selected: 2,\n    a: {\n      x: [1, 4]\n    }\n  });\n  c.insert({\n    up: 2,\n    down: 2,\n    selected: 0,\n    a: [{\n      x: [2]\n    }, {\n      x: 3\n    }]\n  });\n  c.insert({\n    up: 0,\n    down: 4,\n    a: {\n      x: 0\n    }\n  });\n  c.insert({\n    up: 3,\n    down: 3,\n    selected: 1,\n    a: {\n      x: 2.5\n    }\n  });\n  c.insert({\n    up: 4,\n    down: 0,\n    selected: 3,\n    a: {\n      x: 5\n    }\n  }); // Test that the the documents in \"cursor\" contain values with the name\n  // \"field\" running from 0 to the max value of that name in the collection.\n\n  const testCursorMatchesField = (cursor, field) => {\n    const fieldValues = [];\n    c.find().forEach(doc => {\n      if (hasOwn.call(doc, field)) {\n        fieldValues.push(doc[field]);\n      }\n    });\n    test.equal(cursor.fetch().map(doc => doc[field]), Array.from({\n      length: Math.max(...fieldValues) + 1\n    }, (x, i) => i));\n  };\n\n  testCursorMatchesField(c.find({}, {\n    sort: {\n      'a.x': 1\n    }\n  }), 'up');\n  testCursorMatchesField(c.find({}, {\n    sort: {\n      'a.x': -1\n    }\n  }), 'down');\n  testCursorMatchesField(c.find({\n    'a.x': {\n      $gt: 1\n    }\n  }, {\n    sort: {\n      'a.x': 1\n    }\n  }), 'selected');\n});\nTinytest.add('minimongo - sort keys', test => {\n  const keyListToObject = keyList => {\n    const obj = {};\n    keyList.forEach(key => {\n      obj[EJSON.stringify(key)] = true;\n    });\n    return obj;\n  };\n\n  const testKeys = (sortSpec, doc, expectedKeyList) => {\n    const expectedKeys = keyListToObject(expectedKeyList);\n    const sorter = new Minimongo.Sorter(sortSpec);\n    const actualKeyList = [];\n\n    sorter._generateKeysFromDoc(doc, key => {\n      actualKeyList.push(key);\n    });\n\n    const actualKeys = keyListToObject(actualKeyList);\n    test.equal(actualKeys, expectedKeys);\n  };\n\n  const testParallelError = (sortSpec, doc) => {\n    const sorter = new Minimongo.Sorter(sortSpec);\n    test.throws(() => {\n      sorter._generateKeysFromDoc(doc, () => {});\n    }, /parallel arrays/);\n  }; // Just non-array fields.\n\n\n  testKeys({\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: {\n      x: 0,\n      y: 5\n    }\n  }, [[0, 5]]); // Ensure that we don't get [0,3] and [1,5].\n\n  testKeys({\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }]\n  }, [[0, 5], [1, 3]]); // Ensure we can combine \"array fields\" with \"non-array fields\".\n\n  testKeys({\n    'a.x': 1,\n    'a.y': 1,\n    b: -1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }],\n    b: 42\n  }, [[0, 5, 42], [1, 3, 42]]);\n  testKeys({\n    b: -1,\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }],\n    b: 42\n  }, [[42, 0, 5], [42, 1, 3]]);\n  testKeys({\n    'a.x': 1,\n    b: -1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }],\n    b: 42\n  }, [[0, 42, 5], [1, 42, 3]]);\n  testKeys({\n    a: 1,\n    b: 1\n  }, {\n    a: [1, 2, 3],\n    b: 42\n  }, [[1, 42], [2, 42], [3, 42]]); // Don't support multiple arrays at the same level.\n\n  testParallelError({\n    a: 1,\n    b: 1\n  }, {\n    a: [1, 2, 3],\n    b: [42]\n  }); // We are MORE STRICT than Mongo here; Mongo supports this!\n  // XXX support this too  #NestedArraySort\n\n  testParallelError({\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 1,\n      y: [2, 3]\n    }, {\n      x: 2,\n      y: [4, 5]\n    }]\n  });\n});\nTinytest.add('minimongo - sort key filter', test => {\n  const testOrder = (sortSpec, selector, doc1, doc2) => {\n    const matcher = new Minimongo.Matcher(selector);\n    const sorter = new Minimongo.Sorter(sortSpec, {\n      matcher\n    });\n    const comparator = sorter.getComparator();\n    const comparison = comparator(doc1, doc2);\n    test.isTrue(comparison < 0);\n  };\n\n  testOrder({\n    'a.x': 1\n  }, {\n    'a.x': {\n      $gt: 1\n    }\n  }, {\n    a: {\n      x: 3\n    }\n  }, {\n    a: {\n      x: [1, 4]\n    }\n  });\n  testOrder({\n    'a.x': 1\n  }, {\n    'a.x': {\n      $gt: 0\n    }\n  }, {\n    a: {\n      x: [1, 4]\n    }\n  }, {\n    a: {\n      x: 3\n    }\n  });\n\n  const keyCompatible = (sortSpec, selector, key, compatible) => {\n    const matcher = new Minimongo.Matcher(selector);\n    const sorter = new Minimongo.Sorter(sortSpec, {\n      matcher\n    });\n\n    const actual = sorter._keyCompatibleWithSelector(key);\n\n    test.equal(actual, compatible);\n  };\n\n  keyCompatible({\n    a: 1\n  }, {\n    a: 5\n  }, [5], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: 5\n  }, [8], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [{\n    x: 5\n  }], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [{\n    x: 5,\n    y: 9\n  }], false);\n  keyCompatible({\n    'a.x': 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [5], true); // To confirm this:\n  //   > db.x.insert({_id: \"q\", a: [{x:1}, {x:5}], b: 2})\n  //   > db.x.insert({_id: \"w\", a: [{x:5}, {x:10}], b: 1})\n  //   > db.x.find({}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({a: {x:5}}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({'a.x': 5}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  // ie, only the last one manages to trigger the key compatibility code,\n  // not the previous one.  (The \"b\" sort is necessary because when the key\n  // compatibility code *does* kick in, both documents only end up with \"5\"\n  // for the first field as their only sort key, and we need to differentiate\n  // somehow...)\n\n  keyCompatible({\n    'a.x': 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [1], true);\n  keyCompatible({\n    'a.x': 1\n  }, {\n    'a.x': 5\n  }, [5], true);\n  keyCompatible({\n    'a.x': 1\n  }, {\n    'a.x': 5\n  }, [1], false); // Regex key check.\n\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['foo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['foooo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['foooobar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['afoooo'], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, [''], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['foo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['foooo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['foooobar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['afoooo'], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, [''], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/i\n  }, ['foo'], true); // Key compatibility check appears to be turned off for regexps with flags.\n\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/i\n  }, ['bar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/m\n  }, ['bar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+',\n      $options: 'i'\n    }\n  }, ['bar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+',\n      $options: 'm'\n    }\n  }, ['bar'], true); // Multiple keys!\n\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    a: {\n      $gt: 5\n    },\n    c: {\n      $lt: 3\n    }\n  }, [6, 'bla', 2], true);\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    a: {\n      $gt: 5\n    },\n    c: {\n      $lt: 3\n    }\n  }, [6, 'bla', 4], false);\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    a: {\n      $gt: 5\n    },\n    c: {\n      $lt: 3\n    }\n  }, [3, 'bla', 1], false); // No filtering is done (ie, all keys are compatible) if the first key isn't\n  // constrained.\n\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    c: {\n      $lt: 3\n    }\n  }, [3, 'bla', 4], true);\n});\nTinytest.add('minimongo - sort function', test => {\n  const c = new LocalCollection();\n  c.insert({\n    a: 1\n  });\n  c.insert({\n    a: 10\n  });\n  c.insert({\n    a: 5\n  });\n  c.insert({\n    a: 7\n  });\n  c.insert({\n    a: 2\n  });\n  c.insert({\n    a: 4\n  });\n  c.insert({\n    a: 3\n  });\n\n  const sortFunction = (doc1, doc2) => doc2.a - doc1.a;\n\n  test.equal(c.find({}, {\n    sort: sortFunction\n  }).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.notEqual(c.find({}).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.equal(c.find({}, {\n    sort: {\n      a: -1\n    }\n  }).fetch(), c.find({}).fetch().sort(sortFunction));\n});\nTinytest.add('minimongo - binary search', test => {\n  const forwardCmp = (a, b) => a - b;\n\n  const backwardCmp = (a, b) => -1 * forwardCmp(a, b);\n\n  const checkSearch = (cmp, array, value, expected, message) => {\n    const actual = LocalCollection._binarySearch(cmp, array, value);\n\n    if (expected != actual) {\n      test.fail({\n        type: 'minimongo-binary-search',\n        message: `${message} : Expected index ${expected} but had ${actual}`\n      });\n    }\n  };\n\n  const checkSearchForward = (array, value, expected, message) => {\n    checkSearch(forwardCmp, array, value, expected, message);\n  };\n\n  const checkSearchBackward = (array, value, expected, message) => {\n    checkSearch(backwardCmp, array, value, expected, message);\n  };\n\n  checkSearchForward([1, 2, 5, 7], 4, 2, 'Inner insert');\n  checkSearchForward([1, 2, 3, 4], 3, 3, 'Inner insert, equal value');\n  checkSearchForward([1, 2, 5], 4, 2, 'Inner insert, odd length');\n  checkSearchForward([1, 3, 5, 6], 9, 4, 'End insert');\n  checkSearchForward([1, 3, 5, 6], 0, 0, 'Beginning insert');\n  checkSearchForward([1], 0, 0, 'Single array, less than.');\n  checkSearchForward([1], 1, 1, 'Single array, equal.');\n  checkSearchForward([1], 2, 1, 'Single array, greater than.');\n  checkSearchForward([], 1, 0, 'Empty array');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 1, 3, 'Highly degenerate array, lower');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, upper');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 1, 0, 'Highly degenerate array, lower');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, equal');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 3, 7, 'Highly degenerate array, upper');\n  checkSearchBackward([7, 5, 2, 1], 4, 2, 'Backward: Inner insert');\n  checkSearchBackward([4, 3, 2, 1], 3, 2, 'Backward: Inner insert, equal value');\n  checkSearchBackward([5, 2, 1], 4, 1, 'Backward: Inner insert, odd length');\n  checkSearchBackward([6, 5, 3, 1], 9, 0, 'Backward: Beginning insert');\n  checkSearchBackward([6, 5, 3, 1], 0, 4, 'Backward: End insert');\n  checkSearchBackward([1], 0, 1, 'Backward: Single array, less than.');\n  checkSearchBackward([1], 1, 1, 'Backward: Single array, equal.');\n  checkSearchBackward([1], 2, 0, 'Backward: Single array, greater than.');\n  checkSearchBackward([], 1, 0, 'Backward: Empty array');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 1, 7, 'Backward: Degenerate array, lower');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 2, 4, 'Backward: Degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 1, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 3, 0, 'Backward: Highly degenerate array, upper');\n});\nTinytest.add('minimongo - modify', test => {\n  const modifyWithQuery = (doc, query, mod, expected) => {\n    const coll = new LocalCollection();\n    coll.insert(doc); // The query is relevant for 'a.$.b'.\n\n    coll.update(query, mod);\n    const actual = coll.findOne();\n\n    if (!expected._id) {\n      delete actual._id; // added by insert\n    }\n\n    if (typeof expected === 'function') {\n      expected(actual, EJSON.stringify({\n        input: doc,\n        mod\n      }));\n    } else {\n      test.equal(actual, expected, EJSON.stringify({\n        input: doc,\n        mod\n      }));\n    }\n  };\n\n  const modify = (doc, mod, expected) => {\n    modifyWithQuery(doc, {}, mod, expected);\n  };\n\n  const exceptionWithQuery = (doc, query, mod) => {\n    const coll = new LocalCollection();\n    coll.insert(doc);\n    test.throws(() => {\n      coll.update(query, mod);\n    });\n  };\n\n  const exception = (doc, mod) => {\n    exceptionWithQuery(doc, {}, mod);\n  };\n\n  const upsert = (query, mod, expected) => {\n    const coll = new LocalCollection();\n    const result = coll.upsert(query, mod);\n    const actual = coll.findOne();\n\n    if (expected._id) {\n      test.equal(result.insertedId, expected._id);\n    } else {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  const upsertUpdate = (initialDoc, query, mod, expected) => {\n    const collection = new LocalCollection();\n    collection.insert(initialDoc);\n    const result = collection.upsert(query, mod);\n    const actual = collection.findOne();\n\n    if (!expected._id) {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  const upsertException = (query, mod) => {\n    const coll = new LocalCollection();\n    test.throws(() => {\n      coll.upsert(query, mod);\n    });\n  }; // document replacement\n\n\n  modify({}, {}, {});\n  modify({\n    a: 12\n  }, {}, {}); // tested against mongodb\n\n  modify({\n    a: 12\n  }, {\n    a: 13\n  }, {\n    a: 13\n  });\n  modify({\n    a: 12,\n    b: 99\n  }, {\n    a: 13\n  }, {\n    a: 13\n  });\n  exception({\n    a: 12\n  }, {\n    a: 13,\n    $set: {\n      b: 13\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    $set: {\n      b: 13\n    },\n    a: 13\n  });\n  exception({\n    a: 12\n  }, {\n    $a: 13\n  }); // invalid operator\n\n  exception({\n    a: 12\n  }, {\n    b: {\n      $a: 13\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    b: {\n      'a.b': 13\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    b: {\n      '\\0a': 13\n    }\n  }); // keys\n\n  modify({}, {\n    $set: {\n      a: 12\n    }\n  }, {\n    a: 12\n  });\n  modify({}, {\n    $set: {\n      'a.b': 12\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  modify({}, {\n    $set: {\n      'a.b.c': 12\n    }\n  }, {\n    a: {\n      b: {\n        c: 12\n      }\n    }\n  });\n  modify({\n    a: {\n      d: 99\n    }\n  }, {\n    $set: {\n      'a.b.c': 12\n    }\n  }, {\n    a: {\n      d: 99,\n      b: {\n        c: 12\n      }\n    }\n  });\n  modify({}, {\n    $set: {\n      'a.b.3.c': 12\n    }\n  }, {\n    a: {\n      b: {\n        3: {\n          c: 12\n        }\n      }\n    }\n  });\n  modify({\n    a: {\n      b: []\n    }\n  }, {\n    $set: {\n      'a.b.3.c': 12\n    }\n  }, {\n    a: {\n      b: [null, null, null, {\n        c: 12\n      }]\n    }\n  });\n  exception({\n    a: [null, null, null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  exception({\n    a: [null, 1, null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  exception({\n    a: [null, 'x', null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  exception({\n    a: [null, [], null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  modify({\n    a: [null, null, null]\n  }, {\n    $set: {\n      'a.3.b': 12\n    }\n  }, {\n    a: [null, null, null, {\n      b: 12\n    }]\n  });\n  exception({\n    a: []\n  }, {\n    $set: {\n      'a.b': 12\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  }); // tested on mongo\n\n  exception({\n    a: 'x'\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  });\n  exception({\n    a: true\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  });\n  modify({\n    a: {}\n  }, {\n    $set: {\n      'a.3': 12\n    }\n  }, {\n    a: {\n      3: 12\n    }\n  });\n  modify({\n    a: []\n  }, {\n    $set: {\n      'a.3': 12\n    }\n  }, {\n    a: [null, null, null, 12]\n  });\n  exception({}, {\n    $set: {\n      '': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      '.': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      'a.': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      '. ': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $inc: {\n      '... ': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      'a..b': 12\n    }\n  }); // tested on mongo\n\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $set: {\n      'a.01': 99\n    }\n  }, {\n    a: [1, 99, 3]\n  });\n  modify({\n    a: [1, {\n      a: 98\n    }, 3]\n  }, {\n    $set: {\n      'a.01.b': 99\n    }\n  }, {\n    a: [1, {\n      a: 98,\n      b: 99\n    }, 3]\n  });\n  modify({}, {\n    $set: {\n      '2.a.b': 12\n    }\n  }, {\n    2: {\n      a: {\n        b: 12\n      }\n    }\n  }); // tested\n\n  exception({\n    x: []\n  }, {\n    $set: {\n      'x.2..a': 99\n    }\n  });\n  modify({\n    x: [null, null]\n  }, {\n    $set: {\n      'x.2.a': 1\n    }\n  }, {\n    x: [null, null, {\n      a: 1\n    }]\n  });\n  exception({\n    x: [null, null]\n  }, {\n    $set: {\n      'x.1.a': 1\n    }\n  }); // a.$.b\n\n  modifyWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    'a.x': 4\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }, {\n    a: [{\n      x: 2\n    }, {\n      x: 4,\n      z: 9\n    }]\n  });\n  exception({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  });\n  exceptionWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }],\n    b: 5\n  }, {\n    b: 5\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }); // can't have two $\n\n  exceptionWithQuery({\n    a: [{\n      x: [2]\n    }]\n  }, {\n    'a.x': 2\n  }, {\n    $set: {\n      'a.$.x.$': 9\n    }\n  });\n  modifyWithQuery({\n    a: [5, 6, 7]\n  }, {\n    a: 6\n  }, {\n    $set: {\n      'a.$': 9\n    }\n  }, {\n    a: [5, 9, 7]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [{\n        c: 9\n      }, {\n        c: 10\n      }]\n    }, {\n      b: {\n        c: 11\n      }\n    }]\n  }, {\n    'a.b.c': 10\n  }, {\n    $unset: {\n      'a.$.b': 1\n    }\n  }, {\n    a: [{}, {\n      b: {\n        c: 11\n      }\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [{\n        c: 9\n      }, {\n        c: 10\n      }]\n    }, {\n      b: {\n        c: 11\n      }\n    }]\n  }, {\n    'a.b.c': 11\n  }, {\n    $unset: {\n      'a.$.b': 1\n    }\n  }, {\n    a: [{\n      b: [{\n        c: 9\n      }, {\n        c: 10\n      }]\n    }, {}]\n  });\n  modifyWithQuery({\n    a: [1]\n  }, {\n    'a.0': 1\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  }, {\n    a: [5]\n  });\n  modifyWithQuery({\n    a: [9]\n  }, {\n    a: {\n      $mod: [2, 1]\n    }\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  }, {\n    a: [5]\n  }); // Negatives don't set '$'.\n\n  exceptionWithQuery({\n    a: [1]\n  }, {\n    $not: {\n      a: 2\n    }\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  });\n  exceptionWithQuery({\n    a: [1]\n  }, {\n    'a.0': {\n      $ne: 2\n    }\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  }); // One $or clause works.\n\n  modifyWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    $or: [{\n      'a.x': 4\n    }]\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }, {\n    a: [{\n      x: 2\n    }, {\n      x: 4,\n      z: 9\n    }]\n  }); // More $or clauses throw.\n\n  exceptionWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    $or: [{\n      'a.x': 4\n    }, {\n      'a.x': 4\n    }]\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }); // $and uses the last one.\n\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      x: 3\n    }]\n  }, {\n    $and: [{\n      'a.x': 1\n    }, {\n      'a.x': 3\n    }]\n  }, {\n    $set: {\n      'a.$.x': 5\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      x: 5\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      x: 3\n    }]\n  }, {\n    $and: [{\n      'a.x': 3\n    }, {\n      'a.x': 1\n    }]\n  }, {\n    $set: {\n      'a.$.x': 5\n    }\n  }, {\n    a: [{\n      x: 5\n    }, {\n      x: 3\n    }]\n  }); // Same goes for the implicit AND of a document selector.\n\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      y: 3\n    }]\n  }, {\n    'a.x': 1,\n    'a.y': 3\n  }, {\n    $set: {\n      'a.$.z': 5\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      y: 3,\n      z: 5\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }, {\n    a: {\n      $elemMatch: {\n        x: 1,\n        y: 1\n      }\n    }\n  }, {\n    $set: {\n      'a.$.x': 2\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      y: 1\n    }, {\n      x: 2,\n      y: 1\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [{\n        x: 1\n      }, {\n        y: 1\n      }, {\n        x: 1,\n        y: 1\n      }]\n    }]\n  }, {\n    'a.b': {\n      $elemMatch: {\n        x: 1,\n        y: 1\n      }\n    }\n  }, {\n    $set: {\n      'a.$.b': 3\n    }\n  }, {\n    a: [{\n      b: 3\n    }]\n  }); // with $near, make sure it does not find the closest one (#3599)\n\n  modifyWithQuery({\n    a: []\n  }, {\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: []\n  });\n  modifyWithQuery({\n    a: [{\n      b: [[3, 3], [4, 4]]\n    }]\n  }, {\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [1, 1]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [1, 1]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [9, 9],\n      $maxDistance: 1\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [1, 1]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [9, 9]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [9, 9]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [9, 9]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [4, 3]\n    }, {\n      c: [1, 1]\n    }]\n  }, {\n    'a.c': {\n      $near: [1, 1]\n    }\n  }, {\n    $set: {\n      'a.$.c': 'k'\n    }\n  }, {\n    a: [{\n      c: 'k',\n      b: [4, 3]\n    }, {\n      c: [1, 1]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      c: [9, 9]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  }, {\n    'a.b': {\n      $near: [1, 1]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      c: [9, 9],\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      c: [9, 9],\n      b: [4, 3]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  }, {\n    'a.b': {\n      $near: [1, 1]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      c: [9, 9],\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  }); // $inc\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $inc: {\n      a: 10\n    }\n  }, {\n    a: 11,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $inc: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  exception({\n    a: 1\n  }, {\n    $inc: {\n      a: '10'\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $inc: {\n      a: true\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $inc: {\n      a: [10]\n    }\n  });\n  exception({\n    a: '1'\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: false\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $inc: {\n      'a.1': 10\n    }\n  }, {\n    a: [1, 12]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $inc: {\n      'a.2': 10\n    }\n  }, {\n    a: [1, 2, 10]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $inc: {\n      'a.3': 10\n    }\n  }, {\n    a: [1, 2, null, 10]\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $inc: {\n      'a.b': 10\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $inc: {\n      'a.c': 10\n    }\n  }, {\n    a: {\n      b: 2,\n      c: 10\n    }\n  });\n  exception({}, {\n    $inc: {\n      _id: 1\n    }\n  }); // $currentDate\n\n  modify({}, {\n    $currentDate: {\n      a: true\n    }\n  }, (result, msg) => {\n    test.instanceOf(result.a, Date, msg);\n  });\n  modify({}, {\n    $currentDate: {\n      a: {\n        $type: 'date'\n      }\n    }\n  }, (result, msg) => {\n    test.instanceOf(result.a, Date, msg);\n  });\n  exception({}, {\n    $currentDate: {\n      a: false\n    }\n  });\n  exception({}, {\n    $currentDate: {\n      a: {}\n    }\n  });\n  exception({}, {\n    $currentDate: {\n      a: {\n        $type: 'timestamp'\n      }\n    }\n  }); // $min\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $min: {\n      b: 1\n    }\n  }, {\n    a: 1,\n    b: 1\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $min: {\n      b: 3\n    }\n  }, {\n    a: 1,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $min: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  exception({\n    a: 1\n  }, {\n    $min: {\n      a: '10'\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $min: {\n      a: true\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $min: {\n      a: [10]\n    }\n  });\n  exception({\n    a: '1'\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: false\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, 1]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.1': 3\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.2': 10\n    }\n  }, {\n    a: [1, 2, 10]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.3': 10\n    }\n  }, {\n    a: [1, 2, null, 10]\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $min: {\n      'a.b': 1\n    }\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $min: {\n      'a.c': 10\n    }\n  }, {\n    a: {\n      b: 2,\n      c: 10\n    }\n  });\n  exception({}, {\n    $min: {\n      _id: 1\n    }\n  }); // $max\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $max: {\n      b: 1\n    }\n  }, {\n    a: 1,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $max: {\n      b: 3\n    }\n  }, {\n    a: 1,\n    b: 3\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $max: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  exception({\n    a: 1\n  }, {\n    $max: {\n      a: '10'\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $max: {\n      a: true\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $max: {\n      a: [10]\n    }\n  });\n  exception({\n    a: '1'\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: false\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.1': 3\n    }\n  }, {\n    a: [1, 3]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.2': 10\n    }\n  }, {\n    a: [1, 2, 10]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.3': 10\n    }\n  }, {\n    a: [1, 2, null, 10]\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $max: {\n      'a.b': 3\n    }\n  }, {\n    a: {\n      b: 3\n    }\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $max: {\n      'a.c': 10\n    }\n  }, {\n    a: {\n      b: 2,\n      c: 10\n    }\n  });\n  exception({}, {\n    $max: {\n      _id: 1\n    }\n  }); // $set\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $set: {\n      a: 10\n    }\n  }, {\n    a: 10,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $set: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $set: {\n      a: {\n        c: 10\n      }\n    }\n  }, {\n    a: {\n      c: 10\n    },\n    b: 2\n  });\n  modify({\n    a: [1, 2],\n    b: 2\n  }, {\n    $set: {\n      a: [3, 4]\n    }\n  }, {\n    a: [3, 4],\n    b: 2\n  });\n  modify({\n    a: [1, 2, 3],\n    b: 2\n  }, {\n    $set: {\n      'a.1': [3, 4]\n    }\n  }, {\n    a: [1, [3, 4], 3],\n    b: 2\n  });\n  modify({\n    a: [1],\n    b: 2\n  }, {\n    $set: {\n      'a.1': 9\n    }\n  }, {\n    a: [1, 9],\n    b: 2\n  });\n  modify({\n    a: [1],\n    b: 2\n  }, {\n    $set: {\n      'a.2': 9\n    }\n  }, {\n    a: [1, null, 9],\n    b: 2\n  });\n  modify({\n    a: {\n      b: 1\n    }\n  }, {\n    $set: {\n      'a.c': 9\n    }\n  }, {\n    a: {\n      b: 1,\n      c: 9\n    }\n  });\n  modify({}, {\n    $set: {\n      'x._id': 4\n    }\n  }, {\n    x: {\n      _id: 4\n    }\n  }); // Changing _id is disallowed\n\n  exception({}, {\n    $set: {\n      _id: 4\n    }\n  });\n  exception({\n    _id: 1\n  }, {\n    $set: {\n      _id: 4\n    }\n  });\n  modify({\n    _id: 4\n  }, {\n    $set: {\n      _id: 4\n    }\n  }, {\n    _id: 4\n  }); // not-changing _id is not bad\n  // restricted field names\n\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        $a: 1\n      }\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        c: [{\n          b: {\n            $a: 1\n          }\n        }]\n      }\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        '\\0a': 1\n      }\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        'a.b': 1\n      }\n    }\n  }); // $unset\n\n  modify({}, {\n    $unset: {\n      a: 1\n    }\n  }, {});\n  modify({\n    a: 1\n  }, {\n    $unset: {\n      a: 1\n    }\n  }, {});\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: 1\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: 0\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: false\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: null\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: [1]\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: {}\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: {\n      b: 2,\n      c: 3\n    }\n  }, {\n    $unset: {\n      'a.b': 1\n    }\n  }, {\n    a: {\n      c: 3\n    }\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $unset: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, null, 3]\n  }); // tested\n\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $unset: {\n      'a.2': 1\n    }\n  }, {\n    a: [1, 2, null]\n  }); // tested\n\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $unset: {\n      'a.x': 1\n    }\n  }, {\n    a: [1, 2, 3]\n  }); // tested\n\n  modify({\n    a: {\n      b: 1\n    }\n  }, {\n    $unset: {\n      'a.b.c.d': 1\n    }\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  modify({\n    a: {\n      b: 1\n    }\n  }, {\n    $unset: {\n      'a.x.c.d': 1\n    }\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  modify({\n    a: {\n      b: {\n        c: 1\n      }\n    }\n  }, {\n    $unset: {\n      'a.b.c': 1\n    }\n  }, {\n    a: {\n      b: {}\n    }\n  });\n  exception({}, {\n    $unset: {\n      _id: 1\n    }\n  }); // $push\n\n  modify({}, {\n    $push: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $push: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1]\n  }, {\n    $push: {\n      a: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  exception({\n    a: true\n  }, {\n    $push: {\n      a: 1\n    }\n  });\n  modify({\n    a: [1]\n  }, {\n    $push: {\n      a: [2]\n    }\n  }, {\n    a: [1, [2]]\n  });\n  modify({\n    a: []\n  }, {\n    $push: {\n      'a.1': 99\n    }\n  }, {\n    a: [null, [99]]\n  }); // tested\n\n  modify({\n    a: {}\n  }, {\n    $push: {\n      'a.x': 99\n    }\n  }, {\n    a: {\n      x: [99]\n    }\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [1, 2, 3]\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: []\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3]\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [true]\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3]\n      }\n    }\n  }, {\n    a: [true, 1, 2, 3]\n  });\n  modify({\n    a: [true]\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3],\n        $slice: -2\n      }\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [false, true]\n  }, {\n    $push: {\n      a: {\n        $each: [1],\n        $slice: -2\n      }\n    }\n  }, {\n    a: [true, 1]\n  });\n  modify({\n    a: [{\n      x: 3\n    }, {\n      x: 1\n    }]\n  }, {\n    $push: {\n      a: {\n        $each: [{\n          x: 4\n        }, {\n          x: 2\n        }],\n        $slice: -2,\n        $sort: {\n          x: 1\n        }\n      }\n    }\n  }, {\n    a: [{\n      x: 3\n    }, {\n      x: 4\n    }]\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [1, 2, 3],\n        $slice: 0\n      }\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3],\n        $slice: 0\n      }\n    }\n  }, {\n    a: []\n  }); // $push with $position modifier\n  // No negative number for $position\n\n  exception({\n    a: []\n  }, {\n    $push: {\n      a: {\n        $each: [0],\n        $position: -1\n      }\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [0],\n        $position: 0\n      }\n    }\n  }, {\n    a: [0, 1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [-1, 0],\n        $position: 0\n      }\n    }\n  }, {\n    a: [-1, 0, 1, 2]\n  });\n  modify({\n    a: [1, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [2],\n        $position: 1\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 4]\n  }, {\n    $push: {\n      a: {\n        $each: [2, 3],\n        $position: 1\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [3],\n        $position: 3\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [3],\n        $position: 99\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [3],\n        $position: 99,\n        $slice: -2\n      }\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }]\n  }, {\n    $push: {\n      a: {\n        $each: [{\n          x: 3\n        }],\n        $position: 0,\n        $sort: {\n          x: 1\n        },\n        $slice: -3\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }, {\n      x: 3\n    }]\n  });\n  modify({\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }]\n  }, {\n    $push: {\n      a: {\n        $each: [{\n          x: 3\n        }],\n        $position: 0,\n        $sort: {\n          x: 1\n        },\n        $slice: 0\n      }\n    }\n  }, {\n    a: []\n  }); // restricted field names\n\n  exception({}, {\n    $push: {\n      $a: 1\n    }\n  });\n  exception({}, {\n    $push: {\n      '\\0a': 1\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $a: 1\n      }\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          $a: 1\n        }]\n      }\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          'a.b': 1\n        }]\n      }\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          '\\0a': 1\n        }]\n      }\n    }\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [{\n          '': 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      '': 1\n    }]\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [{\n          ' ': 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      ' ': 1\n    }]\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          '.': 1\n        }]\n      }\n    }\n  }); // #issue 5167\n  // $push $slice with positive numbers\n\n  modify({}, {\n    $push: {\n      a: {\n        $each: [],\n        $slice: 5\n      }\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [],\n        $slice: 1\n      }\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 1\n      }\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 2\n      }\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 4\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 5\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4, 5]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 10\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4, 5]\n  }); // $pushAll\n\n  modify({}, {\n    $pushAll: {\n      a: [1]\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      a: [1]\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({}, {\n    $pushAll: {\n      a: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      a: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [2, 3]\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({}, {\n    $pushAll: {\n      a: []\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      a: []\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: []\n    }\n  }, {\n    a: [1]\n  });\n  exception({\n    a: true\n  }, {\n    $pushAll: {\n      a: [1]\n    }\n  });\n  exception({\n    a: []\n  }, {\n    $pushAll: {\n      a: 1\n    }\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      'a.1': [99]\n    }\n  }, {\n    a: [null, [99]]\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      'a.1': []\n    }\n  }, {\n    a: [null, []]\n  });\n  modify({\n    a: {}\n  }, {\n    $pushAll: {\n      'a.x': [99]\n    }\n  }, {\n    a: {\n      x: [99]\n    }\n  });\n  modify({\n    a: {}\n  }, {\n    $pushAll: {\n      'a.x': []\n    }\n  }, {\n    a: {\n      x: []\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [{\n        $a: 1\n      }]\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [{\n        '\\0a': 1\n      }]\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [{\n        'a.b': 1\n      }]\n    }\n  }); // $addToSet\n\n  modify({}, {\n    $addToSet: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $addToSet: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1]\n  }, {\n    $addToSet: {\n      a: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: 3\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  exception({\n    a: true\n  }, {\n    $addToSet: {\n      a: 1\n    }\n  });\n  modify({\n    a: [1]\n  }, {\n    $addToSet: {\n      a: [2]\n    }\n  }, {\n    a: [1, [2]]\n  });\n  modify({}, {\n    $addToSet: {\n      a: {\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }]\n  });\n  modify({\n    a: [{\n      x: 1\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }]\n  });\n  modify({\n    a: [{\n      x: 1\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        x: 2\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }]\n  });\n  modify({\n    a: [{\n      x: 1,\n      y: 2\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        x: 1,\n        y: 2\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      y: 2\n    }]\n  });\n  modify({\n    a: [{\n      x: 1,\n      y: 2\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        y: 2,\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      y: 2\n    }, {\n      y: 2,\n      x: 1\n    }]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, 4]\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  });\n  modify({}, {\n    $addToSet: {\n      a: {\n        $each: []\n      }\n    }\n  }, {\n    a: []\n  });\n  modify({}, {\n    $addToSet: {\n      a: {\n        $each: [1]\n      }\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $addToSet: {\n      'a.1': 99\n    }\n  }, {\n    a: [null, [99]]\n  });\n  modify({\n    a: {}\n  }, {\n    $addToSet: {\n      'a.x': 99\n    }\n  }, {\n    a: {\n      x: [99]\n    }\n  }); // invalid field names\n\n  exception({}, {\n    $addToSet: {\n      a: {\n        $b: 1\n      }\n    }\n  });\n  exception({}, {\n    $addToSet: {\n      a: {\n        'a.b': 1\n      }\n    }\n  });\n  exception({}, {\n    $addToSet: {\n      a: {\n        'a.': 1\n      }\n    }\n  });\n  exception({}, {\n    $addToSet: {\n      a: {\n        '\\u0000a': 1\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, {\n          $a: 1\n        }]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, {\n          '\\0a': 1\n        }]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, [{\n          $a: 1\n        }]]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, [{\n          b: {\n            c: [{\n              a: 1\n            }, {\n              'd.s': 2\n            }]\n          }\n        }]]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        b: [3, 1, [{\n          b: {\n            c: [{\n              a: 1\n            }, {\n              'd.s': 2\n            }]\n          }\n        }]]\n      }\n    }\n  }); // $each is first element and thus an operator\n\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, 4],\n        b: 12\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  }); // this should fail because $each is now a field name (not first in object) and thus invalid field name with $\n\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        b: 12,\n        $each: [3, 1, 4]\n      }\n    }\n  }); // $pop\n\n  modify({}, {\n    $pop: {\n      a: 1\n    }\n  }, {}); // tested\n\n  modify({}, {\n    $pop: {\n      a: -1\n    }\n  }, {}); // tested\n\n  modify({\n    a: []\n  }, {\n    $pop: {\n      a: 1\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: []\n  }, {\n    $pop: {\n      a: -1\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 10\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 0.001\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 0\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 'stuff'\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: -1\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: -10\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: -0.001\n    }\n  }, {\n    a: [2, 3]\n  });\n  exception({\n    a: true\n  }, {\n    $pop: {\n      a: 1\n    }\n  });\n  exception({\n    a: true\n  }, {\n    $pop: {\n      a: -1\n    }\n  });\n  modify({\n    a: []\n  }, {\n    $pop: {\n      'a.1': 1\n    }\n  }, {\n    a: []\n  }); // tested\n\n  modify({\n    a: [1, [2, 3], 4]\n  }, {\n    $pop: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, [2], 4]\n  });\n  modify({\n    a: {}\n  }, {\n    $pop: {\n      'a.x': 1\n    }\n  }, {\n    a: {}\n  }); // tested\n\n  modify({\n    a: {\n      x: [2, 3]\n    }\n  }, {\n    $pop: {\n      'a.x': 1\n    }\n  }, {\n    a: {\n      x: [2]\n    }\n  }); // $pull\n\n  modify({}, {\n    $pull: {\n      a: 1\n    }\n  }, {});\n  modify({}, {\n    $pull: {\n      'a.x': 1\n    }\n  }, {});\n  modify({\n    a: {}\n  }, {\n    $pull: {\n      'a.x': 1\n    }\n  }, {\n    a: {}\n  });\n  exception({\n    a: true\n  }, {\n    $pull: {\n      a: 1\n    }\n  });\n  modify({\n    a: [2, 1, 2]\n  }, {\n    $pull: {\n      a: 1\n    }\n  }, {\n    a: [2, 2]\n  });\n  modify({\n    a: [2, 1, 2]\n  }, {\n    $pull: {\n      a: 2\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [2, 1, 2]\n  }, {\n    $pull: {\n      a: 3\n    }\n  }, {\n    a: [2, 1, 2]\n  });\n  modify({\n    a: [1, null, 2, null]\n  }, {\n    $pull: {\n      a: null\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: []\n  }, {\n    $pull: {\n      a: 3\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [[2], [2, 1], [3]]\n  }, {\n    $pull: {\n      a: [2, 1]\n    }\n  }, {\n    a: [[2], [3]]\n  }); // tested\n\n  modify({\n    a: [{\n      b: 1,\n      c: 2\n    }, {\n      b: 2,\n      c: 2\n    }]\n  }, {\n    $pull: {\n      a: {\n        b: 1\n      }\n    }\n  }, {\n    a: [{\n      b: 2,\n      c: 2\n    }]\n  });\n  modify({\n    a: [{\n      b: 1,\n      c: 2\n    }, {\n      b: 2,\n      c: 2\n    }]\n  }, {\n    $pull: {\n      a: {\n        c: 2\n      }\n    }\n  }, {\n    a: []\n  }); // XXX implement this functionality!\n  // probably same refactoring as $elemMatch?\n  // modify({a: [1, 2, 3, 4]}, {$pull: {$gt: 2}}, {a: [1,2]}); fails!\n  // $pullAll\n\n  modify({}, {\n    $pullAll: {\n      a: [1]\n    }\n  }, {});\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: []\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: [2]\n    }\n  }, {\n    a: [1, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: [2, 1]\n    }\n  }, {\n    a: [3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: [1, 2]\n    }\n  }, {\n    a: [3]\n  });\n  modify({}, {\n    $pullAll: {\n      'a.b.c': [2]\n    }\n  }, {});\n  exception({\n    a: true\n  }, {\n    $pullAll: {\n      a: [1]\n    }\n  });\n  exception({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: 1\n    }\n  });\n  modify({\n    x: [{\n      a: 1\n    }, {\n      a: 1,\n      b: 2\n    }]\n  }, {\n    $pullAll: {\n      x: [{\n        a: 1\n      }]\n    }\n  }, {\n    x: [{\n      a: 1,\n      b: 2\n    }]\n  }); // $rename\n\n  modify({}, {\n    $rename: {\n      a: 'b'\n    }\n  }, {});\n  modify({\n    a: [12]\n  }, {\n    $rename: {\n      a: 'b'\n    }\n  }, {\n    b: [12]\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      a: 'c'\n    }\n  }, {\n    c: {\n      b: 12\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'a.c'\n    }\n  }, {\n    a: {\n      c: 12\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'x'\n    }\n  }, {\n    a: {},\n    x: 12\n  }); // tested\n\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'q.r'\n    }\n  }, {\n    a: {},\n    q: {\n      r: 12\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'q.2.r'\n    }\n  }, {\n    a: {},\n    q: {\n      2: {\n        r: 12\n      }\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    },\n    q: {}\n  }, {\n    $rename: {\n      'a.b': 'q.2.r'\n    }\n  }, {\n    a: {},\n    q: {\n      2: {\n        r: 12\n      }\n    }\n  });\n  exception({\n    a: {\n      b: 12\n    },\n    q: []\n  }, {\n    $rename: {\n      'a.b': 'q.2'\n    }\n  }); // tested\n\n  exception({\n    a: {\n      b: 12\n    },\n    q: []\n  }, {\n    $rename: {\n      'a.b': 'q.2.r'\n    }\n  }); // tested\n  // These strange MongoDB behaviors throw.\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1.j': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n\n  exception({}, {\n    $rename: {\n      a: 'a'\n    }\n  });\n  exception({}, {\n    $rename: {\n      'a.b': 'a.b'\n    }\n  });\n  modify({\n    a: 12,\n    b: 13\n  }, {\n    $rename: {\n      a: 'b'\n    }\n  }, {\n    b: 12\n  });\n  exception({\n    a: [12]\n  }, {\n    $rename: {\n      a: '$b'\n    }\n  });\n  exception({\n    a: [12]\n  }, {\n    $rename: {\n      a: '\\0a'\n    }\n  }); // $setOnInsert\n\n  modify({\n    a: 0\n  }, {\n    $setOnInsert: {\n      a: 12\n    }\n  }, {\n    a: 0\n  });\n  upsert({\n    a: 12\n  }, {\n    $setOnInsert: {\n      b: 12\n    }\n  }, {\n    a: 12,\n    b: 12\n  });\n  upsert({\n    a: 12\n  }, {\n    $setOnInsert: {\n      _id: 'test'\n    }\n  }, {\n    _id: 'test',\n    a: 12\n  });\n  upsert({\n    'a.b': 10\n  }, {\n    $setOnInsert: {\n      a: {\n        b: 10,\n        c: 12\n      }\n    }\n  }, {\n    a: {\n      b: 10,\n      c: 12\n    }\n  });\n  upsert({\n    'a.b': 10\n  }, {\n    $setOnInsert: {\n      c: 12\n    }\n  }, {\n    a: {\n      b: 10\n    },\n    c: 12\n  });\n  upsert({\n    _id: 'test'\n  }, {\n    $setOnInsert: {\n      c: 12\n    }\n  }, {\n    _id: 'test',\n    c: 12\n  });\n  upsert('test', {\n    $setOnInsert: {\n      c: 12\n    }\n  }, {\n    _id: 'test',\n    c: 12\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      $a: 12\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      '\\0a': 12\n    }\n  });\n  upsert({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        a: 1\n      }\n    }\n  }, {\n    a: 0,\n    b: {\n      a: 1\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        $a: 1\n      }\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        'a.b': 1\n      }\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        '\\0a': 1\n      }\n    }\n  }); // Test for https://github.com/meteor/meteor/issues/8775.\n\n  upsert({\n    a: {\n      $exists: true\n    }\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  }); // Tests for https://github.com/meteor/meteor/issues/8794.\n\n  const testObjectId = new MongoID.ObjectID();\n  upsert({\n    _id: testObjectId\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    _id: testObjectId,\n    a: 123\n  });\n  upsert({\n    someOtherId: testObjectId\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    someOtherId: testObjectId,\n    a: 123\n  });\n  upsert({\n    a: {\n      $eq: testObjectId\n    }\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  });\n  const testDate = new Date('2017-01-01');\n  upsert({\n    someDate: testDate\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    someDate: testDate,\n    a: 123\n  });\n  upsert({\n    a: Object.create(null, {\n      $exists: {\n        writable: true,\n        configurable: true,\n        value: true\n      }\n    })\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  });\n  upsert({\n    foo: {\n      $exists: true,\n      $type: 2\n    }\n  }, {\n    $setOnInsert: {\n      bar: 'baz'\n    }\n  }, {\n    bar: 'baz'\n  });\n  upsert({\n    foo: {}\n  }, {\n    $setOnInsert: {\n      bar: 'baz'\n    }\n  }, {\n    foo: {},\n    bar: 'baz'\n  }); // Tests for https://github.com/meteor/meteor/issues/8806\n\n  upsert({\n    \"a\": {\n      \"b\": undefined,\n      \"c\": null\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": {\n      \"b\": undefined,\n      \"c\": null\n    },\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$eq\": \"bar\"\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  }); // $all with 1 statement is similar to $eq\n\n  upsert({\n    \"a\": {\n      \"$all\": [\"bar\"]\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$eq\": \"bar\"\n    },\n    \"b\": \"baz\"\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"b\": \"baz\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$exists\": true\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$exists\": true,\n      \"$eq\": \"foo\"\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"foo\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$gt\": 3,\n      \"$eq\": 2\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": 2,\n    \"c\": \"foo\"\n  }); // $and\n\n  upsert({\n    \"$and\": [{\n      \"a\": {\n        \"$eq\": \"bar\"\n      }\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"$and\": [{\n      \"a\": {\n        \"$all\": [\"bar\"]\n      }\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"$and\": [{\n      \"a\": {\n        \"$all\": [\"bar\"]\n      }\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  }); // $or with one statement is handled similar to $and\n\n  upsert({\n    \"$or\": [{\n      \"a\": \"bar\"\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  }); // $or with multiple statements is ignored\n\n  upsert({\n    \"$or\": [{\n      \"a\": \"bar\"\n    }, {\n      \"b\": \"baz\"\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // Negative logical operators are ignored\n\n  upsert({\n    \"$nor\": [{\n      \"a\": \"bar\"\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // Filter out empty objects after filtering out operators\n\n  upsert({\n    \"a\": {\n      \"$exists\": true\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // But leave actual empty objects\n\n  upsert({\n    \"a\": {}\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": {},\n    \"c\": \"foo\"\n  }); // Also filter out shorthand regexp notation\n\n  upsert({\n    \"a\": /a/\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // Test nested fields\n\n  upsert({\n    \"$and\": [{\n      \"a.a\": \"foo\"\n    }, {\n      \"$or\": [{\n        \"a.b\": \"baz\"\n      }]\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": {\n      \"a\": \"foo\",\n      \"b\": \"baz\"\n    },\n    \"c\": \"foo\"\n  }); // Test for https://github.com/meteor/meteor/issues/5294\n\n  upsert({\n    \"a\": {\n      \"$ne\": 444\n    }\n  }, {\n    \"$push\": {\n      \"a\": 123\n    }\n  }, {\n    \"a\": [123]\n  }); // Mod takes precedence over query\n\n  upsert({\n    \"a\": \"foo\"\n  }, {\n    \"a\": \"bar\"\n  }, {\n    \"a\": \"bar\"\n  });\n  upsert({\n    \"a\": \"foo\"\n  }, {\n    \"$set\": {\n      \"a\": \"bar\"\n    }\n  }, {\n    \"a\": \"bar\"\n  }); // Replacement can take _id from query\n\n  upsert({\n    \"_id\": \"foo\",\n    \"foo\": \"bar\"\n  }, {\n    \"bar\": \"foo\"\n  }, {\n    \"_id\": \"foo\",\n    \"bar\": \"foo\"\n  }); // Replacement update keeps _id\n\n  upsertUpdate({\n    \"_id\": \"foo\",\n    \"bar\": \"baz\"\n  }, {\n    \"_id\": \"foo\"\n  }, {\n    \"bar\": \"crow\"\n  }, {\n    \"_id\": \"foo\",\n    \"bar\": \"crow\"\n  }); // Test for https://github.com/meteor/meteor/issues/9167\n\n  upsert({\n    key: 123,\n    keyName: '321'\n  }, {\n    $set: {\n      name: 'Todo'\n    }\n  }, {\n    key: 123,\n    keyName: '321',\n    name: 'Todo'\n  });\n  upsertException({\n    key: 123,\n    \"key.name\": '321'\n  }, {\n    $set: {}\n  }); // Nested fields don't work with literal objects\n\n  upsertException({\n    \"a\": {},\n    \"a.b\": \"foo\"\n  }, {}); // You can't have an ambiguous ID\n\n  upsertException({\n    \"_id\": \"foo\"\n  }, {\n    \"_id\": \"bar\"\n  });\n  upsertException({\n    \"_id\": \"foo\"\n  }, {\n    \"$set\": {\n      \"_id\": \"bar\"\n    }\n  }); // You can't set the same field twice\n\n  upsertException({\n    \"$and\": [{\n      \"a\": \"foo\"\n    }, {\n      \"a\": \"foo\"\n    }]\n  }, {}); //not even with same value\n\n  upsertException({\n    \"a\": {\n      \"$all\": [\"foo\", \"bar\"]\n    }\n  }, {});\n  upsertException({\n    \"$and\": [{\n      \"a\": {\n        \"$eq\": \"foo\"\n      }\n    }, {\n      \"$or\": [{\n        \"a\": {\n          \"$all\": [\"bar\"]\n        }\n      }]\n    }]\n  }, {}); // You can't have nested dotted fields\n\n  upsertException({\n    \"a\": {\n      \"foo.bar\": \"baz\"\n    }\n  }, {}); // You can't have dollar-prefixed fields above the first level (logical operators not counted)\n\n  upsertException({\n    \"a\": {\n      \"a\": {\n        \"$eq\": \"foo\"\n      }\n    }\n  }, {});\n  upsertException({\n    \"a\": {\n      \"a\": {\n        \"$exists\": true\n      }\n    }\n  }, {}); // You can't mix operators with other fields\n\n  upsertException({\n    \"a\": {\n      \"$eq\": \"bar\",\n      \"b\": \"foo\"\n    }\n  }, {});\n  upsertException({\n    \"a\": {\n      \"b\": \"foo\",\n      \"$eq\": \"bar\"\n    }\n  }, {});\n  const mongoIdForUpsert = new MongoID.ObjectID('44915733af80844fa1cef07a');\n  upsert({\n    _id: mongoIdForUpsert\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  }); // Test for https://github.com/meteor/meteor/issues/7758\n\n  upsert({\n    n_id: mongoIdForUpsert,\n    c_n: \"bar\"\n  }, {\n    $set: {\n      t_t_o: \"foo\"\n    }\n  }, {\n    n_id: mongoIdForUpsert,\n    t_t_o: \"foo\",\n    c_n: \"bar\"\n  });\n  exception({}, {\n    $set: {\n      _id: 'bad'\n    }\n  }); // $bit\n  // unimplemented\n  // XXX test case sensitivity of modops\n  // XXX for each (most) modop, test that it performs a deep copy\n}); // XXX test update() (selecting docs, multi, upsert..)\n\nTinytest.add('minimongo - observe ordered', test => {\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  let handle;\n  const c = new LocalCollection();\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    }\n  }).observe(cbs);\n  test.isTrue(handle.collection === c);\n  c.insert({\n    _id: 'foo',\n    a: 1\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, 0, {\n    a: 1\n  }]);\n  c.insert({\n    a: 10\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, 1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, 1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11\n  }, {\n    a: 1\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, 1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, 1, 0, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 1, {\n    a: 3\n  }]); // test stop\n\n  handle.stop();\n  const idA2 = Random.id();\n  c.insert({\n    _id: idA2,\n    a: 2\n  });\n  test.equal(operations.shift(), undefined); // test initial inserts (and backwards sort)\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    }\n  }).observe(cbs);\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 1, null]);\n  handle.stop(); // test _suppress_initial\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    }\n  }).observe(Object.assign({\n    _suppress_initial: true\n  }, cbs));\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 100\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 100\n  }, 0, idA2]);\n  handle.stop(); // test skip and limit.\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    skip: 1,\n    limit: 2\n  }).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 1\n  });\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    _id: 'foo',\n    a: 2\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  c.insert({\n    a: 3\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 3\n  }, 1, null]);\n  c.insert({\n    a: 4\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 1\n  }, {\n    a: 0\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 0\n  }, {\n    a: 5\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['added', {\n    a: 4\n  }, 1, null]);\n  c.update({\n    a: 3\n  }, {\n    a: 3.5\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3.5\n  }, 0, {\n    a: 3\n  }]);\n  handle.stop(); // test observe limit with pre-existing docs\n\n  c.remove({});\n  c.insert({\n    a: 1\n  });\n  c.insert({\n    _id: 'two',\n    a: 2\n  });\n  c.insert({\n    a: 3\n  });\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    limit: 2\n  }).observe(cbs);\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 1, null]);\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), ['removed', 'two', 1, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['added', {\n    a: 3\n  }, 1, null]);\n  test.equal(operations.shift(), undefined);\n  handle.stop(); // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    }\n  }).observe(Object.assign(cbs, {\n    _no_indices: true\n  }));\n  c.insert({\n    _id: 'foo',\n    a: 1\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, -1, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, -1, {\n    a: 1\n  }]);\n  c.insert({\n    a: 10\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, -1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, -1, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, -1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11\n  }, {\n    a: 1\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, -1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, -1, -1, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', -1, {\n    a: 3\n  }]);\n  handle.stop();\n});\n[true, false].forEach(ordered => {\n  Tinytest.add(`minimongo - observe ordered: ${ordered}`, test => {\n    const c = new LocalCollection();\n    let ev = '';\n\n    const makecb = tag => {\n      const ret = {};\n      ['added', 'changed', 'removed'].forEach(fn => {\n        const fnName = ordered ? `${fn}At` : fn;\n\n        ret[fnName] = doc => {\n          ev = `${ev + fn.substr(0, 1) + tag + doc._id}_`;\n        };\n      });\n      return ret;\n    };\n\n    const expect = x => {\n      test.equal(ev, x);\n      ev = '';\n    };\n\n    c.insert({\n      _id: 1,\n      name: 'strawberry',\n      tags: ['fruit', 'red', 'squishy']\n    });\n    c.insert({\n      _id: 2,\n      name: 'apple',\n      tags: ['fruit', 'red', 'hard']\n    });\n    c.insert({\n      _id: 3,\n      name: 'rose',\n      tags: ['flower', 'red', 'squishy']\n    }); // This should work equally well for ordered and unordered observations\n    // (because the callbacks don't look at indices and there's no 'moved'\n    // callback).\n\n    let handle = c.find({\n      tags: 'flower'\n    }).observe(makecb('a'));\n    expect('aa3_');\n    c.update({\n      name: 'rose'\n    }, {\n      $set: {\n        tags: ['bloom', 'red', 'squishy']\n      }\n    });\n    expect('ra3_');\n    c.update({\n      name: 'rose'\n    }, {\n      $set: {\n        tags: ['flower', 'red', 'squishy']\n      }\n    });\n    expect('aa3_');\n    c.update({\n      name: 'rose'\n    }, {\n      $set: {\n        food: false\n      }\n    });\n    expect('ca3_');\n    c.remove({});\n    expect('ra3_');\n    c.insert({\n      _id: 4,\n      name: 'daisy',\n      tags: ['flower']\n    });\n    expect('aa4_');\n    handle.stop(); // After calling stop, no more callbacks are called.\n\n    c.insert({\n      _id: 5,\n      name: 'iris',\n      tags: ['flower']\n    });\n    expect(''); // Test that observing a lookup by ID works.\n\n    handle = c.find(4).observe(makecb('b'));\n    expect('ab4_');\n    c.update(4, {\n      $set: {\n        eek: 5\n      }\n    });\n    expect('cb4_');\n    handle.stop(); // Test observe with reactive: false.\n\n    handle = c.find({\n      tags: 'flower'\n    }, {\n      reactive: false\n    }).observe(makecb('c'));\n    expect('ac4_ac5_'); // This insert shouldn't trigger a callback because it's not reactive.\n\n    c.insert({\n      _id: 6,\n      name: 'river',\n      tags: ['flower']\n    });\n    expect('');\n    handle.stop();\n  });\n});\nTinytest.add('minimongo - saveOriginals', test => {\n  // set up some data\n  const c = new LocalCollection();\n  let count;\n  c.insert({\n    _id: 'foo',\n    x: 'untouched'\n  });\n  c.insert({\n    _id: 'bar',\n    x: 'updateme'\n  });\n  c.insert({\n    _id: 'baz',\n    x: 'updateme'\n  });\n  c.insert({\n    _id: 'quux',\n    y: 'removeme'\n  });\n  c.insert({\n    _id: 'whoa',\n    y: 'removeme'\n  }); // Save originals and make some changes.\n\n  c.saveOriginals();\n  c.insert({\n    _id: 'hooray',\n    z: 'insertme'\n  });\n  c.remove({\n    y: 'removeme'\n  });\n  count = c.update({\n    x: 'updateme'\n  }, {\n    $set: {\n      z: 5\n    }\n  }, {\n    multi: true\n  });\n  c.update('bar', {\n    $set: {\n      k: 7\n    }\n  }); // update same doc twice\n  // Verify returned count is correct\n\n  test.equal(count, 2); // Verify the originals.\n\n  let originals = c.retrieveOriginals();\n  const affected = ['bar', 'baz', 'quux', 'whoa', 'hooray'];\n  test.equal(originals.size(), affected.length);\n  affected.forEach(id => {\n    test.isTrue(originals.has(id));\n  });\n  test.equal(originals.get('bar'), {\n    _id: 'bar',\n    x: 'updateme'\n  });\n  test.equal(originals.get('baz'), {\n    _id: 'baz',\n    x: 'updateme'\n  });\n  test.equal(originals.get('quux'), {\n    _id: 'quux',\n    y: 'removeme'\n  });\n  test.equal(originals.get('whoa'), {\n    _id: 'whoa',\n    y: 'removeme'\n  });\n  test.equal(originals.get('hooray'), undefined); // Verify that changes actually occured.\n\n  test.equal(c.find().count(), 4);\n  test.equal(c.findOne('foo'), {\n    _id: 'foo',\n    x: 'untouched'\n  });\n  test.equal(c.findOne('bar'), {\n    _id: 'bar',\n    x: 'updateme',\n    z: 5,\n    k: 7\n  });\n  test.equal(c.findOne('baz'), {\n    _id: 'baz',\n    x: 'updateme',\n    z: 5\n  });\n  test.equal(c.findOne('hooray'), {\n    _id: 'hooray',\n    z: 'insertme'\n  }); // The next call doesn't get the same originals again.\n\n  c.saveOriginals();\n  originals = c.retrieveOriginals();\n  test.isTrue(originals);\n  test.isTrue(originals.empty()); // Insert and remove a document during the period.\n\n  c.saveOriginals();\n  c.insert({\n    _id: 'temp',\n    q: 8\n  });\n  c.remove('temp');\n  originals = c.retrieveOriginals();\n  test.equal(originals.size(), 1);\n  test.isTrue(originals.has('temp'));\n  test.equal(originals.get('temp'), undefined);\n});\nTinytest.add('minimongo - saveOriginals errors', test => {\n  const c = new LocalCollection(); // Can't call retrieve before save.\n\n  test.throws(() => {\n    c.retrieveOriginals();\n  });\n  c.saveOriginals(); // Can't call save twice.\n\n  test.throws(() => {\n    c.saveOriginals();\n  });\n});\nTinytest.add('minimongo - objectid transformation', test => {\n  const testId = item => {\n    test.equal(item, MongoID.idParse(MongoID.idStringify(item)));\n  };\n\n  const randomOid = new MongoID.ObjectID();\n  testId(randomOid);\n  testId('FOO');\n  testId('ffffffffffff');\n  testId('0987654321abcdef09876543');\n  testId(new MongoID.ObjectID());\n  testId('--a string');\n  test.equal('ffffffffffff', MongoID.idParse(MongoID.idStringify('ffffffffffff')));\n});\nTinytest.add('minimongo - objectid', test => {\n  const randomOid = new MongoID.ObjectID();\n  const anotherRandomOid = new MongoID.ObjectID();\n  test.notEqual(randomOid, anotherRandomOid);\n  test.throws(() => {\n    new MongoID.ObjectID('qqqqqqqqqqqqqqqqqqqqqqqq');\n  });\n  test.throws(() => {\n    new MongoID.ObjectID('ABCDEF');\n  });\n  test.equal(randomOid, new MongoID.ObjectID(randomOid.valueOf()));\n});\nTinytest.add('minimongo - pause', test => {\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  const c = new LocalCollection();\n  const h = c.find({}).observe(cbs); // remove and add cancel out.\n\n  c.insert({\n    _id: 1,\n    a: 1\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  c.pauseObservers();\n  c.remove({\n    _id: 1\n  });\n  test.length(operations, 0);\n  c.insert({\n    _id: 1,\n    a: 1\n  });\n  test.length(operations, 0);\n  c.resumeObservers();\n  test.length(operations, 0); // two modifications become one\n\n  c.pauseObservers();\n  c.update({\n    _id: 1\n  }, {\n    a: 2\n  });\n  c.update({\n    _id: 1\n  }, {\n    a: 3\n  });\n  c.resumeObservers();\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, 0, {\n    a: 1\n  }]);\n  test.length(operations, 0); // test special case for remove({})\n\n  c.pauseObservers();\n  test.equal(c.remove({}), 1);\n  test.length(operations, 0);\n  c.resumeObservers();\n  test.equal(operations.shift(), ['removed', 1, 0, {\n    a: 3\n  }]);\n  test.length(operations, 0);\n  h.stop();\n});\nTinytest.add('minimongo - ids matched by selector', test => {\n  const check = (selector, ids) => {\n    const idsFromSelector = LocalCollection._idsMatchedBySelector(selector); // XXX normalize order, in a way that also works for ObjectIDs?\n\n\n    test.equal(idsFromSelector, ids);\n  };\n\n  check('foo', ['foo']);\n  check({\n    _id: 'foo'\n  }, ['foo']);\n  const oid1 = new MongoID.ObjectID();\n  check(oid1, [oid1]);\n  check({\n    _id: oid1\n  }, [oid1]);\n  check({\n    _id: 'foo',\n    x: 42\n  }, ['foo']);\n  check({}, null);\n  check({\n    _id: {\n      $in: ['foo', oid1]\n    }\n  }, ['foo', oid1]);\n  check({\n    _id: {\n      $ne: 'foo'\n    }\n  }, null); // not actually valid, but works for now...\n\n  check({\n    $and: ['foo']\n  }, ['foo']);\n  check({\n    $and: [{\n      x: 42\n    }, {\n      _id: oid1\n    }]\n  }, [oid1]);\n  check({\n    $and: [{\n      x: 42\n    }, {\n      _id: {\n        $in: [oid1]\n      }\n    }]\n  }, [oid1]);\n});\nTinytest.add('minimongo - reactive stop', test => {\n  const coll = new LocalCollection();\n  coll.insert({\n    _id: 'A'\n  });\n  coll.insert({\n    _id: 'B'\n  });\n  coll.insert({\n    _id: 'C'\n  });\n\n  const addBefore = (str, newChar, before) => {\n    const idx = str.indexOf(before);\n\n    if (idx === -1) {\n      return str + newChar;\n    }\n\n    return str.slice(0, idx) + newChar + str.slice(idx);\n  };\n\n  let x, y;\n  const sortOrder = ReactiveVar(1);\n  const c = Tracker.autorun(() => {\n    const q = coll.find({}, {\n      sort: {\n        _id: sortOrder.get()\n      }\n    });\n    x = '';\n    q.observe({\n      addedAt(doc, atIndex, before) {\n        x = addBefore(x, doc._id, before);\n      }\n\n    });\n    y = '';\n    q.observeChanges({\n      addedBefore(id, fields, before) {\n        y = addBefore(y, id, before);\n      }\n\n    });\n  });\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n  sortOrder.set(-1);\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n  Tracker.flush();\n  test.equal(x, 'CBA');\n  test.equal(y, 'CBA');\n  coll.insert({\n    _id: 'D'\n  });\n  coll.insert({\n    _id: 'E'\n  });\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n  c.stop(); // stopping kills the observes immediately\n\n  coll.insert({\n    _id: 'F'\n  });\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n});\nTinytest.add('minimongo - immediate invalidate', test => {\n  const coll = new LocalCollection();\n  coll.insert({\n    _id: 'A'\n  }); // This has two separate findOnes.  findOne() uses skip/limit, which means\n  // that its response to an update() call involves a recompute. We used to have\n  // a bug where we would first calculate all the calls that need to be\n  // recomputed, then recompute them one by one, without checking to see if the\n  // callbacks from recomputing one query stopped the second query, which\n  // crashed.\n\n  const c = Tracker.autorun(() => {\n    coll.findOne('A');\n    coll.findOne('A');\n  });\n  coll.update('A', {\n    $set: {\n      x: 42\n    }\n  });\n  c.stop();\n});\nTinytest.add('minimongo - count on cursor with limit', test => {\n  const coll = new LocalCollection();\n  let count, unlimitedCount;\n  coll.insert({\n    _id: 'A'\n  });\n  coll.insert({\n    _id: 'B'\n  });\n  coll.insert({\n    _id: 'C'\n  });\n  coll.insert({\n    _id: 'D'\n  });\n  const c = Tracker.autorun(c => {\n    const cursor = coll.find({\n      _id: {\n        $exists: true\n      }\n    }, {\n      sort: {\n        _id: 1\n      },\n      limit: 3\n    });\n    count = cursor.count();\n    unlimitedCount = cursor.count(false);\n  });\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 4);\n  coll.remove('A'); // still 3 in the collection\n\n  Tracker.flush();\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 3);\n  coll.remove('B'); // expect count now 2\n\n  Tracker.flush();\n  test.equal(count, 2);\n  test.equal(unlimitedCount, 2);\n  coll.insert({\n    _id: 'A'\n  }); // now 3 again\n\n  Tracker.flush();\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 3);\n  coll.insert({\n    _id: 'B'\n  }); // now 4 entries, but count should be 3 still\n\n  Tracker.flush();\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 4); // unlimitedCount should be 4 now\n\n  c.stop();\n});\nTinytest.add('minimongo - reactive count with cached cursor', test => {\n  const coll = new LocalCollection();\n  const cursor = coll.find({});\n  let firstAutorunCount, secondAutorunCount;\n  Tracker.autorun(() => {\n    firstAutorunCount = cursor.count();\n  });\n  Tracker.autorun(() => {\n    secondAutorunCount = coll.find({}).count();\n  });\n  test.equal(firstAutorunCount, 0);\n  test.equal(secondAutorunCount, 0);\n  coll.insert({\n    i: 1\n  });\n  coll.insert({\n    i: 2\n  });\n  coll.insert({\n    i: 3\n  });\n  Tracker.flush();\n  test.equal(firstAutorunCount, 3);\n  test.equal(secondAutorunCount, 3);\n});\nTinytest.add('minimongo - $near operator tests', test => {\n  let coll = new LocalCollection();\n  coll.insert({\n    rest: {\n      loc: [2, 3]\n    }\n  });\n  coll.insert({\n    rest: {\n      loc: [-3, 3]\n    }\n  });\n  coll.insert({\n    rest: {\n      loc: [5, 5]\n    }\n  });\n  test.equal(coll.find({\n    'rest.loc': {\n      $near: [0, 0],\n      $maxDistance: 30\n    }\n  }).count(), 3);\n  test.equal(coll.find({\n    'rest.loc': {\n      $near: [0, 0],\n      $maxDistance: 4\n    }\n  }).count(), 1);\n  const points = coll.find({\n    'rest.loc': {\n      $near: [0, 0],\n      $maxDistance: 6\n    }\n  }).fetch();\n  points.forEach((point, i, points) => {\n    test.isTrue(!i || distance([0, 0], point.rest.loc) >= distance([0, 0], points[i - 1].rest.loc));\n  });\n\n  function distance(a, b) {\n    const x = a[0] - b[0];\n    const y = a[1] - b[1];\n    return Math.sqrt(x * x + y * y);\n  } // GeoJSON tests\n\n\n  coll = new LocalCollection();\n  const data = [{\n    category: 'BURGLARY',\n    descript: 'BURGLARY OF STORE, FORCIBLE ENTRY',\n    address: '100 Block of 10TH ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415449723856, 37.7749518087273]\n    }\n  }, {\n    category: 'WEAPON LAWS',\n    descript: 'POSS OF PROHIBITED WEAPON',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415386041221, 37.7747879744156]\n    }\n  }, {\n    category: 'LARCENY/THEFT',\n    descript: 'GRAND THEFT OF PROPERTY',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.41538270191, 37.774683628213]\n    }\n  }, {\n    category: 'LARCENY/THEFT',\n    descript: 'PETTY THEFT FROM LOCKED AUTO',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415396041221, 37.7747879744156]\n    }\n  }, {\n    category: 'OTHER OFFENSES',\n    descript: 'POSSESSION OF BURGLARY TOOLS',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415386041221, 37.7747879734156]\n    }\n  }];\n  data.forEach((x, i) => {\n    coll.insert(Object.assign(x, {\n      x: i\n    }));\n  });\n  const close15 = coll.find({\n    location: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [-122.4154282, 37.7746115]\n        },\n        $maxDistance: 15\n      }\n    }\n  }).fetch();\n  test.length(close15, 1);\n  test.equal(close15[0].descript, 'GRAND THEFT OF PROPERTY');\n  const close20 = coll.find({\n    location: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [-122.4154282, 37.7746115]\n        },\n        $maxDistance: 20\n      }\n    }\n  }).fetch();\n  test.length(close20, 4);\n  test.equal(close20[0].descript, 'GRAND THEFT OF PROPERTY');\n  test.equal(close20[1].descript, 'PETTY THEFT FROM LOCKED AUTO');\n  test.equal(close20[2].descript, 'POSSESSION OF BURGLARY TOOLS');\n  test.equal(close20[3].descript, 'POSS OF PROHIBITED WEAPON'); // Any combinations of $near with $or/$and/$nor/$not should throw an error\n\n  test.throws(() => {\n    coll.find({\n      location: {\n        $not: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 20\n          }\n        }\n      }\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $and: [{\n        location: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 20\n          }\n        }\n      }, {\n        x: 0\n      }]\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $or: [{\n        location: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 20\n          }\n        }\n      }, {\n        x: 0\n      }]\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $nor: [{\n        location: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 1\n          }\n        }\n      }, {\n        x: 0\n      }]\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $and: [{\n        $and: [{\n          location: {\n            $near: {\n              $geometry: {\n                type: 'Point',\n                coordinates: [-122.4154282, 37.7746115]\n              },\n              $maxDistance: 1\n            }\n          }\n        }]\n      }]\n    });\n  }); // array tests\n\n  coll = new LocalCollection();\n  coll.insert({\n    _id: 'x',\n    k: 9,\n    a: [{\n      b: [[100, 100], [1, 1]]\n    }, {\n      b: [150, 150]\n    }]\n  });\n  coll.insert({\n    _id: 'y',\n    k: 9,\n    a: {\n      b: [5, 5]\n    }\n  });\n\n  const testNear = (near, md, expected) => {\n    test.equal(coll.find({\n      'a.b': {\n        $near: near,\n        $maxDistance: md\n      }\n    }).fetch().map(doc => doc._id), expected);\n  };\n\n  testNear([149, 149], 4, ['x']);\n  testNear([149, 149], 1000, ['x', 'y']); // It's important that we figure out that 'x' is closer than 'y' to [2,2] even\n  // though the first within-1000 point in 'x' (ie, [100,100]) is farther than\n  // 'y'.\n\n  testNear([2, 2], 1000, ['x', 'y']); // issue #3599\n  // Ensure that distance is not used as a tie-breaker for sort.\n\n  test.equal(coll.find({\n    'a.b': {\n      $near: [1, 1]\n    }\n  }, {\n    sort: {\n      k: 1\n    }\n  }).fetch().map(doc => doc._id), ['x', 'y']);\n  test.equal(coll.find({\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    sort: {\n      k: 1\n    }\n  }).fetch().map(doc => doc._id), ['x', 'y']);\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  const handle = coll.find({\n    'a.b': {\n      $near: [7, 7]\n    }\n  }).observe(cbs);\n  test.length(operations, 2);\n  test.equal(operations.shift(), ['added', {\n    k: 9,\n    a: {\n      b: [5, 5]\n    }\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    k: 9,\n    a: [{\n      b: [[100, 100], [1, 1]]\n    }, {\n      b: [150, 150]\n    }]\n  }, 1, null]); // This needs to be inserted in the MIDDLE of the two existing ones.\n\n  coll.insert({\n    a: {\n      b: [3, 3]\n    }\n  });\n  test.length(operations, 1);\n  test.equal(operations.shift(), ['added', {\n    a: {\n      b: [3, 3]\n    }\n  }, 1, 'x']);\n  handle.stop();\n}); // issue #2077\n\nTinytest.add('minimongo - $near and $geometry for legacy coordinates', test => {\n  const coll = new LocalCollection();\n  coll.insert({\n    loc: {\n      x: 1,\n      y: 1\n    }\n  });\n  coll.insert({\n    loc: [-1, -1]\n  });\n  coll.insert({\n    loc: [40, -10]\n  });\n  coll.insert({\n    loc: {\n      x: -10,\n      y: 40\n    }\n  });\n  test.equal(coll.find({\n    loc: {\n      $near: [0, 0],\n      $maxDistance: 4\n    }\n  }).count(), 2);\n  test.equal(coll.find({\n    loc: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [0, 0]\n        }\n      }\n    }\n  }).count(), 4);\n  test.equal(coll.find({\n    loc: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [0, 0]\n        },\n        $maxDistance: 200000\n      }\n    }\n  }).count(), 2);\n}); // Regression test for #4377. Previously, \"replace\" updates didn't clone the\n// argument.\n\nTinytest.add('minimongo - update should clone', test => {\n  const x = [];\n  const coll = new LocalCollection();\n  const id = coll.insert({});\n  coll.update(id, {\n    x\n  });\n  x.push(1);\n  test.equal(coll.findOne(id), {\n    _id: id,\n    x: []\n  });\n}); // See #2275.\n\nTinytest.add('minimongo - fetch in observe', test => {\n  const coll = new LocalCollection();\n  let callbackInvoked = false;\n  const observe = coll.find().observeChanges({\n    added(id, fields) {\n      callbackInvoked = true;\n      test.equal(fields, {\n        foo: 1\n      });\n      const doc = coll.findOne({\n        foo: 1\n      });\n      test.isTrue(doc);\n      test.equal(doc.foo, 1);\n    }\n\n  });\n  test.isFalse(callbackInvoked);\n  const computation = Tracker.autorun(computation => {\n    if (computation.firstRun) {\n      coll.insert({\n        foo: 1\n      });\n    }\n  });\n  test.isTrue(callbackInvoked);\n  observe.stop();\n  computation.stop();\n}); // See #2254\n\nTinytest.add('minimongo - fine-grained reactivity of observe with fields projection', test => {\n  const X = new LocalCollection();\n  const id = 'asdf';\n  X.insert({\n    _id: id,\n    foo: {\n      bar: 123\n    }\n  });\n  let callbackInvoked = false;\n  const obs = X.find(id, {\n    fields: {\n      'foo.bar': 1\n    }\n  }).observeChanges({\n    changed(id, fields) {\n      callbackInvoked = true;\n    }\n\n  });\n  test.isFalse(callbackInvoked);\n  X.update(id, {\n    $set: {\n      'foo.baz': 456\n    }\n  });\n  test.isFalse(callbackInvoked);\n  obs.stop();\n});\nTinytest.add('minimongo - fine-grained reactivity of query with fields projection', test => {\n  const X = new LocalCollection();\n  const id = 'asdf';\n  X.insert({\n    _id: id,\n    foo: {\n      bar: 123\n    }\n  });\n  let callbackInvoked = false;\n  const computation = Tracker.autorun(() => {\n    callbackInvoked = true;\n    return X.findOne(id, {\n      fields: {\n        'foo.bar': 1\n      }\n    });\n  });\n  test.isTrue(callbackInvoked);\n  callbackInvoked = false;\n  X.update(id, {\n    $set: {\n      'foo.baz': 456\n    }\n  });\n  test.isFalse(callbackInvoked);\n  X.update(id, {\n    $set: {\n      'foo.bar': 124\n    }\n  });\n  Tracker.flush();\n  test.isTrue(callbackInvoked);\n  computation.stop();\n}); // Tests that the logic in `LocalCollection.prototype.update`\n// correctly deals with count() on a cursor with skip or limit (since\n// then the result set is an IdMap, not an array)\n\nTinytest.add('minimongo - reactive skip/limit count while updating', test => {\n  const X = new LocalCollection();\n  let count = -1;\n  let unlimitedCount = -1;\n  const c = Tracker.autorun(() => {\n    count = X.find({}, {\n      skip: 1,\n      limit: 1\n    }).count();\n    unlimitedCount = X.find({}, {\n      skip: 1,\n      limit: 1\n    }).count(false);\n  });\n  test.equal(count, 0);\n  test.equal(unlimitedCount, 0);\n  X.insert({});\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 0);\n  test.equal(unlimitedCount, 1);\n  X.insert({});\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 1);\n  test.equal(unlimitedCount, 2);\n  X.update({}, {\n    $set: {\n      foo: 1\n    }\n  });\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 1);\n  test.equal(unlimitedCount, 2); // Make sure a second update also works\n\n  X.update({}, {\n    $set: {\n      foo: 2\n    }\n  });\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 1);\n  test.equal(unlimitedCount, 2);\n  c.stop();\n}); // Makes sure inserts cannot be performed using field names that have\n// Mongo restricted characters in them ('.', '$', '\\0'):\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nTinytest.add('minimongo - cannot insert using invalid field names', test => {\n  const collection = new LocalCollection(); // Quick test to make sure non-dot field inserts are working\n\n  collection.insert({\n    a: 'b'\n  }); // Quick test to make sure field values with dots are allowed\n\n  collection.insert({\n    a: 'b.c'\n  }); // Verify top level dot-field inserts are prohibited\n\n  ['a.b', '.b', 'a.', 'a.b.c'].forEach(field => {\n    test.throws(() => {\n      collection.insert({\n        [field]: 'c'\n      });\n    }, `Key ${field} must not contain '.'`);\n  }); // Verify nested dot-field inserts are prohibited\n\n  test.throws(() => {\n    collection.insert({\n      a: {\n        b: {\n          'c.d': 'e'\n        }\n      }\n    });\n  }, \"Key c.d must not contain '.'\"); // Verify field names starting with $ are prohibited\n\n  test.throws(() => {\n    collection.insert({\n      $a: 'b'\n    });\n  }, \"Key $a must not start with '$'\"); // Verify nested field names starting with $ are prohibited\n\n  test.throws(() => {\n    collection.insert({\n      a: {\n        b: {\n          $c: 'd'\n        }\n      }\n    });\n  }, \"Key $c must not start with '$'\"); // Verify top level fields with null characters are prohibited\n\n  ['\\0a', 'a\\0', 'a\\0b', '\\u0000a', 'a\\u0000', 'a\\u0000b'].forEach(field => {\n    test.throws(() => {\n      collection.insert({\n        [field]: 'c'\n      });\n    }, `Key ${field} must not contain null bytes`);\n  }); // Verify nested field names with null characters are prohibited\n\n  test.throws(() => {\n    collection.insert({\n      a: {\n        b: {\n          '\\0c': 'd'\n        }\n      }\n    });\n  }, 'Key \\0c must not contain null bytes');\n}); // Makes sure $set's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nTinytest.add('minimongo - cannot $set with null bytes', test => {\n  const collection = new LocalCollection(); // Quick test to make sure non-null byte $set's are working\n\n  const id = collection.insert({\n    a: 'b',\n    c: 'd'\n  });\n  collection.update({\n    _id: id\n  }, {\n    $set: {\n      e: 'f'\n    }\n  }); // Verify $set's with null bytes throw an exception\n\n  test.throws(() => {\n    collection.update({\n      _id: id\n    }, {\n      $set: {\n        '\\0a': 'b'\n      }\n    });\n  }, 'Key \\0a must not contain null bytes');\n}); // Makes sure $rename's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nTinytest.add('minimongo - cannot $rename with null bytes', test => {\n  const collection = new LocalCollection(); // Quick test to make sure non-null byte $rename's are working\n\n  let id = collection.insert({\n    a: 'b',\n    c: 'd'\n  });\n  collection.update({\n    _id: id\n  }, {\n    $rename: {\n      a: 'a1',\n      c: 'c1'\n    }\n  }); // Verify $rename's with null bytes throw an exception\n\n  collection.remove({});\n  id = collection.insert({\n    a: 'b',\n    c: 'd'\n  });\n  test.throws(() => {\n    collection.update({\n      _id: id\n    }, {\n      $rename: {\n        a: '\\0a',\n        c: 'c\\0'\n      }\n    });\n  }, \"The 'to' field for $rename cannot contain an embedded null byte\");\n});","map":{"version":3,"sources":["packages/minimongo/minimongo_tests_client.js"],"names":["hasOwn","module","watch","require","v","LocalCollection","_useOID","assert_ordering","test","f","values","i","length","x","fail","type","message","value","JSON","stringify","should_be_zero_but_got","less","more","first","second","should_be_negative_but_got","should_be_positive_but_got","log_callbacks","operations","addedAt","obj","idx","before","_id","push","EJSON","clone","changedAt","old_obj","at","movedTo","old_at","new_at","removedAt","id","Tinytest","add","c","fluffyKitten_id","count","insert","name","equal","find","fetch","findOne","remove","update","$set","undefined","tags","skip","limit","sort","foo","bar","bam","a","b","noop","Thing","Object","defineProperty","enumerable","prototype","d","after","MinimongoError","e","field","res","q","context","forEach","cursor","isTrue","map","invalidTransform","doc","throws","transform","transformWithoutId","docWithoutId","assign","y","g","Date","_f","_equal","z","setDate","getDate","notEqual","lookupA","MinimongoTest","makeLookupFunction","lookupAX","arrayIndices","lookupA0X","w","matches","shouldMatch","selector","doesMatch","Minimongo","Matcher","documentMatches","result","document","match","bind","nomatch","date1","date2","getTime","k","$lt","$gt","$lte","$gte","$all","$exists","$mod","badMod","$eq","$ne","$in","$nin","$size","$bitsAllClear","Uint8Array","$bitsAllSet","$bitsAnySet","$bitsAnyClear","matchCount","query","allPositions","parse","NaN","Infinity","badValue","$type","newBinary","MongoID","ObjectID","$regex","$options","reusedRegexp","$not","big","$or","$nor","$and","$where","dogs","room","animals","$elemMatch","age","$comment","testProjection","projection","tests","projection_f","_compileProjection","equalNonStrict","desc","equals","testCase","testCompileProjectionThrows","expectedError","baz","nested","bazbaz","meh","tr","hope","humanity","people","candies","inc","excl","Array","from","something","Random","anything","cool","nothing","fetchResults","fields","every","call","arr","grades","mean","$slice","setA","fieldA","fieldB","fieldC","setB","anotherA","anotherB","testForProjection","expected","fetched","projectionFn","filteredDoc","cbs","handle","observe","collection","shift","$inc","multi","stop","idA2","observeChanges","added","_suppress_initial","blacklisted","_no_indices","zoo","foobar","shortBinary","longBinary1","longBinary2","_cmp","verify","sorts","docs","isArray","sorter","Sorter","getComparator","$natural","s","j","up","down","selected","testCursorMatchesField","fieldValues","Math","max","keyListToObject","keyList","key","testKeys","sortSpec","expectedKeyList","expectedKeys","actualKeyList","_generateKeysFromDoc","actualKeys","testParallelError","testOrder","doc1","doc2","matcher","comparator","comparison","keyCompatible","compatible","actual","_keyCompatibleWithSelector","sortFunction","forwardCmp","backwardCmp","checkSearch","cmp","array","_binarySearch","checkSearchForward","checkSearchBackward","modifyWithQuery","mod","coll","input","modify","exceptionWithQuery","exception","upsert","insertedId","upsertUpdate","initialDoc","upsertException","$a","$unset","$near","$maxDistance","$currentDate","msg","instanceOf","$min","$max","$push","$each","$sort","$position","$pushAll","$addToSet","$b","$pop","$pull","$pullAll","$rename","r","$setOnInsert","testObjectId","someOtherId","testDate","someDate","create","writable","configurable","keyName","mongoIdForUpsert","n_id","c_n","t_t_o","ordered","ev","makecb","tag","ret","fn","fnName","substr","expect","food","eek","reactive","saveOriginals","originals","retrieveOriginals","affected","size","has","get","empty","testId","item","idParse","idStringify","randomOid","anotherRandomOid","valueOf","h","pauseObservers","resumeObservers","check","ids","idsFromSelector","_idsMatchedBySelector","oid1","addBefore","str","newChar","indexOf","slice","sortOrder","ReactiveVar","Tracker","autorun","atIndex","addedBefore","set","flush","unlimitedCount","firstAutorunCount","secondAutorunCount","rest","loc","points","point","distance","sqrt","data","category","descript","address","location","coordinates","close15","$geometry","close20","testNear","near","md","callbackInvoked","isFalse","computation","firstRun","X","obs","changed","_throwFirstError","$c"],"mappings":"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","sourcesContent":["import {hasOwn} from './common';\n\n// Hack to make LocalCollection generate ObjectIDs by default.\nLocalCollection._useOID = true;\n\n// assert that f is a strcmp-style comparison function that puts\n// 'values' in the provided order\n\nconst assert_ordering = (test, f, values) => {\n  for (let i = 0; i < values.length; i++) {\n    let x = f(values[i], values[i]);\n    if (x !== 0) {\n      // XXX super janky\n      test.fail({type: 'minimongo-ordering',\n        message: \"value doesn't order as equal to itself\",\n        value: JSON.stringify(values[i]),\n        should_be_zero_but_got: JSON.stringify(x)});\n    }\n    if (i + 1 < values.length) {\n      const less = values[i];\n      const more = values[i + 1];\n      x = f(less, more);\n      if (!(x < 0)) {\n        // XXX super janky\n        test.fail({type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_negative_but_got: JSON.stringify(x)});\n      }\n      x = f(more, less);\n      if (!(x > 0)) {\n        // XXX super janky\n        test.fail({type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_positive_but_got: JSON.stringify(x)});\n      }\n    }\n  }\n};\n\nconst log_callbacks = operations => ({\n  addedAt(obj, idx, before) {\n    delete obj._id;\n    operations.push(EJSON.clone(['added', obj, idx, before]));\n  },\n\n  changedAt(obj, old_obj, at) {\n    delete obj._id;\n    delete old_obj._id;\n    operations.push(EJSON.clone(['changed', obj, at, old_obj]));\n  },\n\n  movedTo(obj, old_at, new_at, before) {\n    delete obj._id;\n    operations.push(EJSON.clone(['moved', obj, old_at, new_at, before]));\n  },\n\n  removedAt(old_obj, at) {\n    const id = old_obj._id;\n    delete old_obj._id;\n    operations.push(EJSON.clone(['removed', id, at, old_obj]));\n  },\n});\n\n// XXX test shared structure in all MM entrypoints\nTinytest.add('minimongo - basics', test => {\n  const c = new LocalCollection();\n  let fluffyKitten_id;\n  let count;\n\n  fluffyKitten_id = c.insert({type: 'kitten', name: 'fluffy'});\n  c.insert({type: 'kitten', name: 'snookums'});\n  c.insert({type: 'cryptographer', name: 'alice'});\n  c.insert({type: 'cryptographer', name: 'bob'});\n  c.insert({type: 'cryptographer', name: 'cara'});\n  test.equal(c.find().count(), 5);\n  test.equal(c.find({type: 'kitten'}).count(), 2);\n  test.equal(c.find({type: 'cryptographer'}).count(), 3);\n  test.length(c.find({type: 'kitten'}).fetch(), 2);\n  test.length(c.find({type: 'cryptographer'}).fetch(), 3);\n  test.equal(fluffyKitten_id, c.findOne({type: 'kitten', name: 'fluffy'})._id);\n\n  c.remove({name: 'cara'});\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({type: 'kitten'}).count(), 2);\n  test.equal(c.find({type: 'cryptographer'}).count(), 2);\n  test.length(c.find({type: 'kitten'}).fetch(), 2);\n  test.length(c.find({type: 'cryptographer'}).fetch(), 2);\n\n  count = c.update({name: 'snookums'}, {$set: {type: 'cryptographer'}});\n  test.equal(count, 1);\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({type: 'kitten'}).count(), 1);\n  test.equal(c.find({type: 'cryptographer'}).count(), 3);\n  test.length(c.find({type: 'kitten'}).fetch(), 1);\n  test.length(c.find({type: 'cryptographer'}).fetch(), 3);\n\n  c.remove(null);\n  c.remove(false);\n  c.remove(undefined);\n  test.equal(c.find().count(), 4);\n\n  c.remove({_id: null});\n  c.remove({_id: false});\n  c.remove({_id: undefined});\n  count = c.remove();\n  test.equal(count, 0);\n  test.equal(c.find().count(), 4);\n\n  count = c.remove({});\n  test.equal(count, 4);\n  test.equal(c.find().count(), 0);\n\n  c.insert({_id: 1, name: 'strawberry', tags: ['fruit', 'red', 'squishy']});\n  c.insert({_id: 2, name: 'apple', tags: ['fruit', 'red', 'hard']});\n  c.insert({_id: 3, name: 'rose', tags: ['flower', 'red', 'squishy']});\n\n  test.equal(c.find({tags: 'flower'}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}).count(), 2);\n  test.equal(c.find({tags: 'red'}).count(), 3);\n  test.length(c.find({tags: 'flower'}).fetch(), 1);\n  test.length(c.find({tags: 'fruit'}).fetch(), 2);\n  test.length(c.find({tags: 'red'}).fetch(), 3);\n\n  test.equal(c.findOne(1).name, 'strawberry');\n  test.equal(c.findOne(2).name, 'apple');\n  test.equal(c.findOne(3).name, 'rose');\n  test.equal(c.findOne(4), undefined);\n  test.equal(c.findOne('abc'), undefined);\n  test.equal(c.findOne(undefined), undefined);\n\n  test.equal(c.find(1).count(), 1);\n  test.equal(c.find(4).count(), 0);\n  test.equal(c.find('abc').count(), 0);\n  test.equal(c.find(undefined).count(), 0);\n  test.equal(c.find().count(), 3);\n  test.equal(c.find(1, {skip: 1}).count(false), 1);\n  test.equal(c.find(1, {skip: 1}).count(), 0);\n  test.equal(c.find({_id: 1}, {skip: 1}).count(false), 1);\n  test.equal(c.find({_id: 1}, {skip: 1}).count(), 0);\n  test.equal(c.find({_id: undefined}).count(), 0);\n  test.equal(c.find({_id: false}).count(), 0);\n  test.equal(c.find({_id: null}).count(), 0);\n  test.equal(c.find({_id: ''}).count(), 0);\n  test.equal(c.find({_id: 0}).count(), 0);\n  test.equal(c.find({}, {skip: 1}).count(false), 3);\n  test.equal(c.find({}, {skip: 1}).count(), 2);\n  test.equal(c.find({}, {skip: 2}).count(), 1);\n  test.equal(c.find({}, {limit: 2}).count(false), 3);\n  test.equal(c.find({}, {limit: 2}).count(), 2);\n  test.equal(c.find({}, {limit: 1}).count(), 1);\n  test.equal(c.find({}, {skip: 1, limit: 1}).count(false), 3);\n  test.equal(c.find({}, {skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {skip: 1}).count(false), 2);\n  test.equal(c.find({tags: 'fruit'}, {skip: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {limit: 1}).count(false), 2);\n  test.equal(c.find({tags: 'fruit'}, {limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {skip: 1, limit: 1}).count(false), 2);\n  test.equal(c.find({tags: 'fruit'}, {skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find(1, {sort: ['_id', 'desc'], skip: 1}).count(false), 1);\n  test.equal(c.find(1, {sort: ['_id', 'desc'], skip: 1}).count(), 0);\n  test.equal(c.find({_id: 1}, {sort: ['_id', 'desc'], skip: 1}).count(false), 1);\n  test.equal(c.find({_id: 1}, {sort: ['_id', 'desc'], skip: 1}).count(), 0);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 1}).count(false), 3);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 1}).count(), 2);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 2}).count(), 1);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], limit: 2}).count(false), 3);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], limit: 2}).count(), 2);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], limit: 1}).count(), 1);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 1, limit: 1}).count(false), 3);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], skip: 1}).count(false), 2);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], skip: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], limit: 1}).count(false), 2);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], skip: 1, limit: 1}).count(false), 2);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], skip: 1, limit: 1}).count(), 1);\n\n  // Regression test for #455.\n  c.insert({foo: {bar: 'baz'}});\n  test.equal(c.find({foo: {bam: 'baz'}}).count(), 0);\n  test.equal(c.find({foo: {bar: 'baz'}}).count(), 1);\n\n  // Regression test for #5301\n  c.remove({});\n  c.insert({a: 'a', b: 'b'});\n  const noop = () => null;\n  test.equal(c.find({a: noop}).count(), 1);\n  test.equal(c.find({a: 'a', b: noop}).count(), 1);\n  test.equal(c.find({c: noop}).count(), 1);\n  test.equal(c.find({a: noop, c: 'c'}).count(), 0);\n\n  // Regression test for #4260\n  // Only insert enumerable, own properties from the object\n  c.remove({});\n  function Thing() {\n    this.a = 1;\n    this.b = 2;\n    Object.defineProperty(this, 'b', { enumerable: false });\n  }\n  Thing.prototype.c = 3;\n  Thing.prototype.d = () => null;\n  const before = new Thing();\n  c.insert(before);\n  const after = c.findOne();\n  test.equal(after.a, 1);\n  test.equal(after.b, undefined);\n  test.equal(after.c, undefined);\n  test.equal(after.d, undefined);\n});\n\nTinytest.add('minimongo - error - no options', test => {\n  try {\n    throw MinimongoError('Not fun to have errors');\n  } catch (e) {\n    test.equal(e.message, 'Not fun to have errors');\n  }\n});\n\nTinytest.add('minimongo - error - with field', test => {\n  try {\n    throw MinimongoError('Cats are no fun', { field: 'mice' });\n  } catch (e) {\n    test.equal(e.message, \"Cats are no fun for field 'mice'\");\n  }\n});\n\nTinytest.add('minimongo - cursors', test => {\n  const c = new LocalCollection();\n  let res;\n\n  for (let i = 0; i < 20; i++) {c.insert({i});}\n\n  const q = c.find();\n  test.equal(q.count(), 20);\n\n  // fetch\n  res = q.fetch();\n  test.length(res, 20);\n  for (let i = 0; i < 20; i++) {\n    test.equal(res[i].i, i);\n  }\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n\n  // forEach\n  let count = 0;\n  const context = {};\n  q.forEach(function(obj, i, cursor) {\n    test.equal(obj.i, count++);\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n  }, context);\n  test.equal(count, 20);\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n\n  // iterator\n  count = 0;\n  for (let obj of q) {\n    test.equal(obj.i, count++);\n  };\n  test.equal(count, 20);\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n  // test spread operator\n  test.equal([...q], q.fetch());\n\n  // map\n  res = q.map(function(obj, i, cursor) {\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n    return obj.i * 2;\n  }, context);\n  test.length(res, 20);\n  for (let i = 0; i < 20; i++) {test.equal(res[i], i * 2);}\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n\n  // findOne (and no rewind first)\n  test.equal(c.findOne({i: 0}).i, 0);\n  test.equal(c.findOne({i: 1}).i, 1);\n  const id = c.findOne({i: 2})._id;\n  test.equal(c.findOne(id).i, 2);\n});\n\nTinytest.add('minimongo - transform', test => {\n  const c = new LocalCollection;\n  c.insert({});\n  // transform functions must return objects\n  const invalidTransform = doc => doc._id;\n  test.throws(() => {\n    c.findOne({}, {transform: invalidTransform});\n  });\n\n  // transformed documents get _id field transplanted if not present\n  const transformWithoutId = doc => {\n    const docWithoutId = Object.assign({}, doc);\n    delete docWithoutId._id;\n    return docWithoutId;\n  };\n  test.equal(c.findOne({}, {transform: transformWithoutId})._id,\n    c.findOne()._id);\n});\n\nTinytest.add('minimongo - misc', test => {\n  // deepcopy\n  let a = {a: [1, 2, 3], b: 'x', c: true, d: {x: 12, y: [12]},\n    f: null, g: new Date()};\n  let b = EJSON.clone(a);\n  test.equal(a, b);\n  test.isTrue(LocalCollection._f._equal(a, b));\n  a.a.push(4);\n  test.length(b.a, 3);\n  a.c = false;\n  test.isTrue(b.c);\n  b.d.z = 15;\n  a.d.z = 14;\n  test.equal(b.d.z, 15);\n  a.d.y.push(88);\n  test.length(b.d.y, 1);\n  test.equal(a.g, b.g);\n  b.g.setDate(b.g.getDate() + 1);\n  test.notEqual(a.g, b.g);\n\n  a = {x() {}};\n  b = EJSON.clone(a);\n  a.x.a = 14;\n  test.equal(b.x.a, 14); // just to document current behavior\n});\n\nTinytest.add('minimongo - lookup', test => {\n  const lookupA = MinimongoTest.makeLookupFunction('a');\n  test.equal(lookupA({}), [{value: undefined}]);\n  test.equal(lookupA({a: 1}), [{value: 1}]);\n  test.equal(lookupA({a: [1]}), [{value: [1]}]);\n\n  const lookupAX = MinimongoTest.makeLookupFunction('a.x');\n  test.equal(lookupAX({a: {x: 1}}), [{value: 1}]);\n  test.equal(lookupAX({a: {x: [1]}}), [{value: [1]}]);\n  test.equal(lookupAX({a: 5}), [{value: undefined}]);\n  test.equal(lookupAX({a: [{x: 1}, {x: [2]}, {y: 3}]}),\n    [{value: 1, arrayIndices: [0]},\n      {value: [2], arrayIndices: [1]},\n      {value: undefined, arrayIndices: [2]}]);\n\n  const lookupA0X = MinimongoTest.makeLookupFunction('a.0.x');\n  test.equal(lookupA0X({a: [{x: 1}]}), [\n    // From interpreting '0' as \"0th array element\".\n    {value: 1, arrayIndices: [0, 'x']},\n    // From interpreting '0' as \"after branching in the array, look in the\n    // object {x:1} for a field named 0\".\n    {value: undefined, arrayIndices: [0]}]);\n  test.equal(lookupA0X({a: [{x: [1]}]}), [\n    {value: [1], arrayIndices: [0, 'x']},\n    {value: undefined, arrayIndices: [0]}]);\n  test.equal(lookupA0X({a: 5}), [{value: undefined}]);\n  test.equal(lookupA0X({a: [{x: 1}, {x: [2]}, {y: 3}]}), [\n    // From interpreting '0' as \"0th array element\".\n    {value: 1, arrayIndices: [0, 'x']},\n    // From interpreting '0' as \"after branching in the array, look in the\n    // object {x:1} for a field named 0\".\n    {value: undefined, arrayIndices: [0]},\n    {value: undefined, arrayIndices: [1]},\n    {value: undefined, arrayIndices: [2]},\n  ]);\n\n  test.equal(\n    MinimongoTest.makeLookupFunction('w.x.0.z')({\n      w: [{x: [{z: 5}]}]}), [\n      // From interpreting '0' as \"0th array element\".\n      {value: 5, arrayIndices: [0, 0, 'x']},\n      // From interpreting '0' as \"after branching in the array, look in the\n      // object {z:5} for a field named \"0\".\n      {value: undefined, arrayIndices: [0, 0]},\n    ]);\n});\n\nTinytest.add('minimongo - selector_compiler', test => {\n  const matches = (shouldMatch, selector, doc) => {\n    const doesMatch = new Minimongo.Matcher(selector).documentMatches(doc).result;\n    if (doesMatch != shouldMatch) {\n      // XXX super janky\n      test.fail({message: `minimongo match failure: document ${shouldMatch ? \"should match, but doesn't\" :\n        \"shouldn't match, but does\"}`,\n      selector: JSON.stringify(selector),\n      document: JSON.stringify(doc),\n      });\n    }\n  };\n\n  const match = matches.bind(null, true);\n  const nomatch = matches.bind(null, false);\n\n  // XXX blog post about what I learned while writing these tests (weird\n  // mongo edge cases)\n\n  // empty selectors\n  match({}, {});\n  match({}, {a: 12});\n\n  // scalars\n  match(1, {_id: 1, a: 'foo'});\n  nomatch(1, {_id: 2, a: 'foo'});\n  match('a', {_id: 'a', a: 'foo'});\n  nomatch('a', {_id: 'b', a: 'foo'});\n\n  // safety\n  nomatch(undefined, {});\n  nomatch(undefined, {_id: 'foo'});\n  nomatch(false, {_id: 'foo'});\n  nomatch(null, {_id: 'foo'});\n  nomatch({_id: undefined}, {_id: 'foo'});\n  nomatch({_id: false}, {_id: 'foo'});\n  nomatch({_id: null}, {_id: 'foo'});\n  nomatch({_id: ''}, {_id: ''});\n  nomatch({_id: 0}, {_id: 0});\n\n  // matching one or more keys\n  nomatch({a: 12}, {});\n  match({a: 12}, {a: 12});\n  match({a: 12}, {a: 12, b: 13});\n  match({a: 12, b: 13}, {a: 12, b: 13});\n  match({a: 12, b: 13}, {a: 12, b: 13, c: 14});\n  nomatch({a: 12, b: 13, c: 14}, {a: 12, b: 13});\n  nomatch({a: 12, b: 13}, {b: 13, c: 14});\n\n  match({a: 12}, {a: [12]});\n  match({a: 12}, {a: [11, 12, 13]});\n  nomatch({a: 12}, {a: [11, 13]});\n  match({a: 12, b: 13}, {a: [11, 12, 13], b: [13, 14, 15]});\n  nomatch({a: 12, b: 13}, {a: [11, 12, 13], b: [14, 15]});\n\n  // dates\n  const date1 = new Date;\n  const date2 = new Date(date1.getTime() + 1000);\n  match({a: date1}, {a: date1});\n  nomatch({a: date1}, {a: date2});\n\n\n  // arrays\n  match({a: [1, 2]}, {a: [1, 2]});\n  match({a: [1, 2]}, {a: [[1, 2]]});\n  match({a: [1, 2]}, {a: [[3, 4], [1, 2]]});\n  nomatch({a: [1, 2]}, {a: [3, 4]});\n  nomatch({a: [1, 2]}, {a: [[[1, 2]]]});\n\n  // literal documents\n  match({a: {b: 12}}, {a: {b: 12}});\n  nomatch({a: {b: 12, c: 13}}, {a: {b: 12}});\n  nomatch({a: {b: 12}}, {a: {b: 12, c: 13}});\n  match({a: {b: 12, c: 13}}, {a: {b: 12, c: 13}});\n  nomatch({a: {b: 12, c: 13}}, {a: {c: 13, b: 12}}); // tested on mongodb\n  nomatch({a: {}}, {a: {b: 12}});\n  nomatch({a: {b: 12}}, {a: {}});\n  match(\n    {a: {b: 12, c: [13, true, false, 2.2, 'a', null, {d: 14}]}},\n    {a: {b: 12, c: [13, true, false, 2.2, 'a', null, {d: 14}]}});\n  match({a: {b: 12}}, {a: {b: 12}, k: 99});\n\n  match({a: {b: 12}}, {a: [{b: 12}]});\n  nomatch({a: {b: 12}}, {a: [[{b: 12}]]});\n  match({a: {b: 12}}, {a: [{b: 11}, {b: 12}, {b: 13}]});\n  nomatch({a: {b: 12}}, {a: [{b: 11}, {b: 12, c: 20}, {b: 13}]});\n  nomatch({a: {b: 12, c: 20}}, {a: [{b: 11}, {b: 12}, {c: 20}]});\n  match({a: {b: 12, c: 20}}, {a: [{b: 11}, {b: 12, c: 20}, {b: 13}]});\n\n  // null\n  match({a: null}, {a: null});\n  match({a: null}, {b: 12});\n  nomatch({a: null}, {a: 12});\n  match({a: null}, {a: [1, 2, null, 3]}); // tested on mongodb\n  nomatch({a: null}, {a: [1, 2, {}, 3]}); // tested on mongodb\n\n  // order comparisons: $lt, $gt, $lte, $gte\n  match({a: {$lt: 10}}, {a: 9});\n  nomatch({a: {$lt: 10}}, {a: 10});\n  nomatch({a: {$lt: 10}}, {a: 11});\n\n  match({a: {$gt: 10}}, {a: 11});\n  nomatch({a: {$gt: 10}}, {a: 10});\n  nomatch({a: {$gt: 10}}, {a: 9});\n\n  match({a: {$lte: 10}}, {a: 9});\n  match({a: {$lte: 10}}, {a: 10});\n  nomatch({a: {$lte: 10}}, {a: 11});\n\n  match({a: {$gte: 10}}, {a: 11});\n  match({a: {$gte: 10}}, {a: 10});\n  nomatch({a: {$gte: 10}}, {a: 9});\n\n  match({a: {$lt: 10}}, {a: [11, 9, 12]});\n  nomatch({a: {$lt: 10}}, {a: [11, 12]});\n\n  // (there's a full suite of ordering test elsewhere)\n  nomatch({a: {$lt: 'null'}}, {a: null});\n  match({a: {$lt: {x: [2, 3, 4]}}}, {a: {x: [1, 3, 4]}});\n  match({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [3, 3, 4]}});\n  nomatch({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [1, 3, 4]}});\n  nomatch({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  nomatch({a: {$lt: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  match({a: {$gte: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  match({a: {$lte: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n\n  nomatch({a: {$gt: [2, 3]}}, {a: [1, 2]}); // tested against mongodb\n\n  // composition of two qualifiers\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 8});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 9});\n  match({a: {$lt: 11, $gt: 9}}, {a: 10});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 11});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 12});\n\n  match({a: {$lt: 11, $gt: 9}}, {a: [8, 9, 10, 11, 12]});\n  match({a: {$lt: 11, $gt: 9}}, {a: [8, 9, 11, 12]}); // tested against mongodb\n\n  // $all\n  match({a: {$all: [1, 2]}}, {a: [1, 2]});\n  nomatch({a: {$all: [1, 2, 3]}}, {a: [1, 2]});\n  match({a: {$all: [1, 2]}}, {a: [3, 2, 1]});\n  match({a: {$all: [1, 'x']}}, {a: [3, 'x', 1]});\n  nomatch({a: {$all: ['2']}}, {a: 2});\n  nomatch({a: {$all: [2]}}, {a: '2'});\n  match({a: {$all: [[1, 2], [1, 3]]}}, {a: [[1, 3], [1, 2], [1, 4]]});\n  nomatch({a: {$all: [[1, 2], [1, 3]]}}, {a: [[1, 4], [1, 2], [1, 4]]});\n  match({a: {$all: [2, 2]}}, {a: [2]}); // tested against mongodb\n  nomatch({a: {$all: [2, 3]}}, {a: [2, 2]});\n\n  nomatch({a: {$all: [1, 2]}}, {a: [[1, 2]]}); // tested against mongodb\n  nomatch({a: {$all: [1, 2]}}, {}); // tested against mongodb, field doesn't exist\n  nomatch({a: {$all: [1, 2]}}, {a: {foo: 'bar'}}); // tested against mongodb, field is not an object\n  nomatch({a: {$all: []}}, {a: []});\n  nomatch({a: {$all: []}}, {a: [5]});\n  match({a: {$all: [/i/, /e/i]}}, {a: ['foo', 'bEr', 'biz']});\n  nomatch({a: {$all: [/i/, /e/i]}}, {a: ['foo', 'bar', 'biz']});\n  match({a: {$all: [{b: 3}]}}, {a: [{b: 3}]});\n  // Members of $all other than regexps are *equality matches*, not document\n  // matches.\n  nomatch({a: {$all: [{b: 3}]}}, {a: [{b: 3, k: 4}]});\n  test.throws(() => {\n    match({a: {$all: [{$gt: 4}]}}, {});\n  });\n\n  // $exists\n  match({a: {$exists: true}}, {a: 12});\n  nomatch({a: {$exists: true}}, {b: 12});\n  nomatch({a: {$exists: false}}, {a: 12});\n  match({a: {$exists: false}}, {b: 12});\n\n  match({a: {$exists: true}}, {a: []});\n  nomatch({a: {$exists: true}}, {b: []});\n  nomatch({a: {$exists: false}}, {a: []});\n  match({a: {$exists: false}}, {b: []});\n\n  match({a: {$exists: true}}, {a: [1]});\n  nomatch({a: {$exists: true}}, {b: [1]});\n  nomatch({a: {$exists: false}}, {a: [1]});\n  match({a: {$exists: false}}, {b: [1]});\n\n  match({a: {$exists: 1}}, {a: 5});\n  match({a: {$exists: 0}}, {b: 5});\n\n  nomatch({'a.x': {$exists: false}}, {a: [{}, {x: 5}]});\n  match({'a.x': {$exists: true}}, {a: [{}, {x: 5}]});\n  match({'a.x': {$exists: true}}, {a: [{}, {x: 5}]});\n  match({'a.x': {$exists: true}}, {a: {x: []}});\n  match({'a.x': {$exists: true}}, {a: {x: null}});\n\n  // $mod\n  match({a: {$mod: [10, 1]}}, {a: 11});\n  nomatch({a: {$mod: [10, 1]}}, {a: 12});\n  match({a: {$mod: [10, 1]}}, {a: [10, 11, 12]});\n  nomatch({a: {$mod: [10, 1]}}, {a: [10, 12]});\n  [\n    5,\n    [10],\n    [10, 1, 2],\n    'foo',\n    {bar: 1},\n    [],\n  ].forEach(badMod => {\n    test.throws(() => {\n      match({a: {$mod: badMod}}, {a: 11});\n    });\n  });\n\n  // $eq\n  nomatch({a: {$eq: 1}}, {a: 2});\n  match({a: {$eq: 2}}, {a: 2});\n  nomatch({a: {$eq: [1]}}, {a: [2]});\n\n  match({a: {$eq: [1, 2]}}, {a: [1, 2]});\n  match({a: {$eq: 1}}, {a: [1, 2]});\n  match({a: {$eq: 2}}, {a: [1, 2]});\n  nomatch({a: {$eq: 3}}, {a: [1, 2]});\n  match({'a.b': {$eq: 1}}, {a: [{b: 1}, {b: 2}]});\n  match({'a.b': {$eq: 2}}, {a: [{b: 1}, {b: 2}]});\n  nomatch({'a.b': {$eq: 3}}, {a: [{b: 1}, {b: 2}]});\n\n  match({a: {$eq: {x: 1}}}, {a: {x: 1}});\n  nomatch({a: {$eq: {x: 1}}}, {a: {x: 2}});\n  nomatch({a: {$eq: {x: 1}}}, {a: {x: 1, y: 2}});\n\n  // $ne\n  match({a: {$ne: 1}}, {a: 2});\n  nomatch({a: {$ne: 2}}, {a: 2});\n  match({a: {$ne: [1]}}, {a: [2]});\n\n  nomatch({a: {$ne: [1, 2]}}, {a: [1, 2]}); // all tested against mongodb\n  nomatch({a: {$ne: 1}}, {a: [1, 2]});\n  nomatch({a: {$ne: 2}}, {a: [1, 2]});\n  match({a: {$ne: 3}}, {a: [1, 2]});\n  nomatch({'a.b': {$ne: 1}}, {a: [{b: 1}, {b: 2}]});\n  nomatch({'a.b': {$ne: 2}}, {a: [{b: 1}, {b: 2}]});\n  match({'a.b': {$ne: 3}}, {a: [{b: 1}, {b: 2}]});\n\n  nomatch({a: {$ne: {x: 1}}}, {a: {x: 1}});\n  match({a: {$ne: {x: 1}}}, {a: {x: 2}});\n  match({a: {$ne: {x: 1}}}, {a: {x: 1, y: 2}});\n\n  // This query means: All 'a.b' must be non-5, and some 'a.b' must be >6.\n  match({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 2}, {b: 10}]});\n  nomatch({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 2}, {b: 4}]});\n  nomatch({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 2}, {b: 5}]});\n  nomatch({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 10}, {b: 5}]});\n  // Should work the same if the branch is at the bottom.\n  match({a: {$ne: 5, $gt: 6}}, {a: [2, 10]});\n  nomatch({a: {$ne: 5, $gt: 6}}, {a: [2, 4]});\n  nomatch({a: {$ne: 5, $gt: 6}}, {a: [2, 5]});\n  nomatch({a: {$ne: 5, $gt: 6}}, {a: [10, 5]});\n\n  // $in\n  match({a: {$in: [1, 2, 3]}}, {a: 2});\n  nomatch({a: {$in: [1, 2, 3]}}, {a: 4});\n  match({a: {$in: [[1], [2], [3]]}}, {a: [2]});\n  nomatch({a: {$in: [[1], [2], [3]]}}, {a: [4]});\n  match({a: {$in: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 2}});\n  nomatch({a: {$in: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 4}});\n\n  match({a: {$in: [1, 2, 3]}}, {a: [2]}); // tested against mongodb\n  match({a: {$in: [{x: 1}, {x: 2}, {x: 3}]}}, {a: [{x: 2}]});\n  match({a: {$in: [1, 2, 3]}}, {a: [4, 2]});\n  nomatch({a: {$in: [1, 2, 3]}}, {a: [4]});\n\n  match({a: {$in: ['x', /foo/i]}}, {a: 'x'});\n  match({a: {$in: ['x', /foo/i]}}, {a: 'fOo'});\n  match({a: {$in: ['x', /foo/i]}}, {a: ['f', 'fOo']});\n  nomatch({a: {$in: ['x', /foo/i]}}, {a: ['f', 'fOx']});\n\n  match({a: {$in: [1, null]}}, {});\n  match({'a.b': {$in: [1, null]}}, {});\n  match({'a.b': {$in: [1, null]}}, {a: {}});\n  match({'a.b': {$in: [1, null]}}, {a: {b: null}});\n  nomatch({'a.b': {$in: [1, null]}}, {a: {b: 5}});\n  nomatch({'a.b': {$in: [1]}}, {a: {b: null}});\n  nomatch({'a.b': {$in: [1]}}, {a: {}});\n  nomatch({'a.b': {$in: [1, null]}}, {a: [{b: 5}]});\n  match({'a.b': {$in: [1, null]}}, {a: [{b: 5}, {}]});\n  nomatch({'a.b': {$in: [1, null]}}, {a: [{b: 5}, []]});\n  nomatch({'a.b': {$in: [1, null]}}, {a: [{b: 5}, 5]});\n\n  // $nin\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: 2});\n  match({a: {$nin: [1, 2, 3]}}, {a: 4});\n  nomatch({a: {$nin: [[1], [2], [3]]}}, {a: [2]});\n  match({a: {$nin: [[1], [2], [3]]}}, {a: [4]});\n  nomatch({a: {$nin: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 2}});\n  match({a: {$nin: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 4}});\n\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: [2]}); // tested against mongodb\n  nomatch({a: {$nin: [{x: 1}, {x: 2}, {x: 3}]}}, {a: [{x: 2}]});\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: [4, 2]});\n  nomatch({'a.b': {$nin: [1, 2, 3]}}, {a: [{b: 4}, {b: 2}]});\n  match({a: {$nin: [1, 2, 3]}}, {a: [4]});\n  match({'a.b': {$nin: [1, 2, 3]}}, {a: [{b: 4}]});\n\n  nomatch({a: {$nin: ['x', /foo/i]}}, {a: 'x'});\n  nomatch({a: {$nin: ['x', /foo/i]}}, {a: 'fOo'});\n  nomatch({a: {$nin: ['x', /foo/i]}}, {a: ['f', 'fOo']});\n  match({a: {$nin: ['x', /foo/i]}}, {a: ['f', 'fOx']});\n\n  nomatch({a: {$nin: [1, null]}}, {});\n  nomatch({'a.b': {$nin: [1, null]}}, {});\n  nomatch({'a.b': {$nin: [1, null]}}, {a: {}});\n  nomatch({'a.b': {$nin: [1, null]}}, {a: {b: null}});\n  match({'a.b': {$nin: [1, null]}}, {a: {b: 5}});\n  match({'a.b': {$nin: [1]}}, {a: {b: null}});\n  match({'a.b': {$nin: [1]}}, {a: {}});\n  match({'a.b': {$nin: [1, null]}}, {a: [{b: 5}]});\n  nomatch({'a.b': {$nin: [1, null]}}, {a: [{b: 5}, {}]});\n  match({'a.b': {$nin: [1, null]}}, {a: [{b: 5}, []]});\n  match({'a.b': {$nin: [1, null]}}, {a: [{b: 5}, 5]});\n\n  // $size\n  match({a: {$size: 0}}, {a: []});\n  match({a: {$size: 1}}, {a: [2]});\n  match({a: {$size: 2}}, {a: [2, 2]});\n  nomatch({a: {$size: 0}}, {a: [2]});\n  nomatch({a: {$size: 1}}, {a: []});\n  nomatch({a: {$size: 1}}, {a: [2, 2]});\n  nomatch({a: {$size: 0}}, {a: '2'});\n  nomatch({a: {$size: 1}}, {a: '2'});\n  nomatch({a: {$size: 2}}, {a: '2'});\n\n  nomatch({a: {$size: 2}}, {a: [[2, 2]]}); // tested against mongodb\n\n\n  // $bitsAllClear - number\n  match({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0});\n  match({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b10000});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b1});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b10});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b100});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b1000});\n\n  // $bitsAllClear - buffer\n  match({a: {$bitsAllClear: new Uint8Array([3])}}, {a: new Uint8Array([4])});\n  match({a: {$bitsAllClear: new Uint8Array([0, 1])}}, {a: new Uint8Array([255])});  // 256 should not be set for 255.\n  match({a: {$bitsAllClear: new Uint8Array([3])}}, {a: 4 });\n\n  match({a: {$bitsAllClear: new Uint8Array([3])}}, {a: 0 });\n\n  // $bitsAllSet - number\n  match({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 0b1111});\n  nomatch({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 0b111});\n  nomatch({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 256});\n  nomatch({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 50000});\n  match({a: {$bitsAllSet: [0, 1, 2]}}, {a: 15});\n  match({a: {$bitsAllSet: [0, 12]}}, {a: 0b1000000000001});\n  nomatch({a: {$bitsAllSet: [0, 12]}}, {a: 0b1000000000000});\n  nomatch({a: {$bitsAllSet: [0, 12]}}, {a: 0b1});\n\n  // $bitsAllSet - buffer\n  match({a: {$bitsAllSet: new Uint8Array([3])}}, {a: new Uint8Array([3])});\n  match({a: {$bitsAllSet: new Uint8Array([7])}}, {a: new Uint8Array([15])});\n  match({a: {$bitsAllSet: new Uint8Array([3])}}, {a: 3 });\n\n  // $bitsAnySet - number\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b1});\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b10});\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b100});\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b1000});\n  match({a: {$bitsAnySet: [4]}}, {a: 0b10000});\n  nomatch({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b10000});\n  nomatch({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0});\n\n  // $bitsAnySet - buffer\n  match({a: {$bitsAnySet: new Uint8Array([3])}}, {a: new Uint8Array([7])});\n  match({a: {$bitsAnySet: new Uint8Array([15])}}, {a: new Uint8Array([7])});\n  match({a: {$bitsAnySet: new Uint8Array([3])}}, {a: 1 });\n\n  // $bitsAnyClear - number\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b10});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b100});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1000});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b10000});\n  nomatch({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1111});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b111});\n  nomatch({a: {$bitsAnyClear: [0, 1, 2]}}, {a: 0b111});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b11});\n  nomatch({a: {$bitsAnyClear: [0, 1]}}, {a: 0b11});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1});\n  nomatch({a: {$bitsAnyClear: [0]}}, {a: 0b1});\n  nomatch({a: {$bitsAnyClear: [4]}}, {a: 0b10000});\n\n  // $bitsAnyClear - buffer\n  match({a: {$bitsAnyClear: new Uint8Array([8])}}, {a: new Uint8Array([7])});\n  match({a: {$bitsAnyClear: new Uint8Array([1])}}, {a: new Uint8Array([0])});\n  match({a: {$bitsAnyClear: new Uint8Array([1])}}, {a: 4 });\n\n  // taken from: https://github.com/mongodb/mongo/blob/master/jstests/core/bittest.js\n  const c = new LocalCollection;\n  function matchCount(query, count) {\n    const matches = c.find(query).count();\n    if (matches !== count) {\n      test.fail({message: `minimongo match count failure: matched ${matches} times, but should match ${count} times`,\n        query: JSON.stringify(query),\n        count: JSON.stringify(count),\n      });\n    }\n  }\n\n  // Tests on numbers.\n\n  c.insert({a: 0});\n  c.insert({a: 1});\n  c.insert({a: 54});\n  c.insert({a: 88});\n  c.insert({a: 255});\n\n  // Tests with bitmask.\n  matchCount({a: {$bitsAllSet: 0}}, 5);\n  matchCount({a: {$bitsAllSet: 1}}, 2);\n  matchCount({a: {$bitsAllSet: 16}}, 3);\n  matchCount({a: {$bitsAllSet: 54}}, 2);\n  matchCount({a: {$bitsAllSet: 55}}, 1);\n  matchCount({a: {$bitsAllSet: 88}}, 2);\n  matchCount({a: {$bitsAllSet: 255}}, 1);\n  matchCount({a: {$bitsAllClear: 0}}, 5);\n  matchCount({a: {$bitsAllClear: 1}}, 3);\n  matchCount({a: {$bitsAllClear: 16}}, 2);\n  matchCount({a: {$bitsAllClear: 129}}, 3);\n  matchCount({a: {$bitsAllClear: 255}}, 1);\n  matchCount({a: {$bitsAnySet: 0}}, 0);\n  matchCount({a: {$bitsAnySet: 9}}, 3);\n  matchCount({a: {$bitsAnySet: 255}}, 4);\n  matchCount({a: {$bitsAnyClear: 0}}, 0);\n  matchCount({a: {$bitsAnyClear: 18}}, 3);\n  matchCount({a: {$bitsAnyClear: 24}}, 3);\n  matchCount({a: {$bitsAnyClear: 255}}, 4);\n\n  // Tests with array of bit positions.\n  matchCount({a: {$bitsAllSet: []}}, 5);\n  matchCount({a: {$bitsAllSet: [0]}}, 2);\n  matchCount({a: {$bitsAllSet: [4]}}, 3);\n  matchCount({a: {$bitsAllSet: [1, 2, 4, 5]}}, 2);\n  matchCount({a: {$bitsAllSet: [0, 1, 2, 4, 5]}}, 1);\n  matchCount({a: {$bitsAllSet: [3, 4, 6]}}, 2);\n  matchCount({a: {$bitsAllSet: [0, 1, 2, 3, 4, 5, 6, 7]}}, 1);\n  matchCount({a: {$bitsAllClear: []}}, 5);\n  matchCount({a: {$bitsAllClear: [0]}}, 3);\n  matchCount({a: {$bitsAllClear: [4]}}, 2);\n  matchCount({a: {$bitsAllClear: [1, 7]}}, 3);\n  matchCount({a: {$bitsAllClear: [0, 1, 2, 3, 4, 5, 6, 7]}}, 1);\n  matchCount({a: {$bitsAnySet: []}}, 0);\n  matchCount({a: {$bitsAnySet: [1, 3]}}, 3);\n  matchCount({a: {$bitsAnySet: [0, 1, 2, 3, 4, 5, 6, 7]}}, 4);\n  matchCount({a: {$bitsAnyClear: []}}, 0);\n  matchCount({a: {$bitsAnyClear: [1, 4]}}, 3);\n  matchCount({a: {$bitsAnyClear: [3, 4]}}, 3);\n  matchCount({a: {$bitsAnyClear: [0, 1, 2, 3, 4, 5, 6, 7]}}, 4);\n\n  // Tests with multiple predicates.\n  matchCount({a: {$bitsAllSet: 54, $bitsAllClear: 201}}, 1);\n\n  // Tests on negative numbers\n\n  c.remove({});\n  c.insert({a: -0});\n  c.insert({a: -1});\n  c.insert({a: -54});\n\n  // Tests with bitmask.\n  matchCount({a: {$bitsAllSet: 0}}, 3);\n  matchCount({a: {$bitsAllSet: 2}}, 2);\n  matchCount({a: {$bitsAllSet: 127}}, 1);\n  matchCount({a: {$bitsAllSet: 74}}, 2);\n  matchCount({a: {$bitsAllClear: 0}}, 3);\n  matchCount({a: {$bitsAllClear: 53}}, 2);\n  matchCount({a: {$bitsAllClear: 127}}, 1);\n  matchCount({a: {$bitsAnySet: 0}}, 0);\n  matchCount({a: {$bitsAnySet: 2}}, 2);\n  matchCount({a: {$bitsAnySet: 127}}, 2);\n  matchCount({a: {$bitsAnyClear: 0}}, 0);\n  matchCount({a: {$bitsAnyClear: 53}}, 2);\n  matchCount({a: {$bitsAnyClear: 127}}, 2);\n\n  // Tests with array of bit positions.\n  const allPositions = [];\n  for (let i = 0; i < 64; i++) {\n    allPositions.push(i);\n  }\n\n  matchCount({a: {$bitsAllSet: []}}, 3);\n  matchCount({a: {$bitsAllSet: [1]}}, 2);\n  matchCount({a: {$bitsAllSet: allPositions}}, 1);\n  matchCount({a: {$bitsAllSet: [1, 7, 6, 3, 100]}}, 2);\n  matchCount({a: {$bitsAllClear: []}}, 3);\n  matchCount({a: {$bitsAllClear: [5, 4, 2, 0]}}, 2);\n  matchCount({a: {$bitsAllClear: allPositions}}, 1);\n  matchCount({a: {$bitsAnySet: []}}, 0);\n  matchCount({a: {$bitsAnySet: [1]}}, 2);\n  matchCount({a: {$bitsAnySet: allPositions}}, 2);\n  matchCount({a: {$bitsAnyClear: []}}, 0);\n  matchCount({a: {$bitsAnyClear: [0, 2, 4, 5, 100]}}, 2);\n  matchCount({a: {$bitsAnyClear: allPositions}}, 2);\n\n  // Tests with multiple predicates.\n  matchCount({a: {$bitsAllSet: 74, $bitsAllClear: 53}}, 1);\n\n  // Tests on BinData.\n\n  c.remove({});\n  c.insert({a: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')});\n  c.insert({a: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')});\n  c.insert({a: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')});\n  c.insert({a: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')});\n\n  // Tests with binary string bitmask.\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 4);\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 3);\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 1);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 4);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 3);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 1);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 0);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 1);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 3);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 0);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 1);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 3);\n\n  // Tests with multiple predicates.\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}'),\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"//yf////////////////////////\"}'),\n    },\n  }, 1);\n\n  c.remove({});\n\n  nomatch({a: {$bitsAllSet: 1}}, {a: false});\n  nomatch({a: {$bitsAllSet: 1}}, {a: NaN});\n  nomatch({a: {$bitsAllSet: 1}}, {a: Infinity});\n  nomatch({a: {$bitsAllSet: 1}}, {a: null});\n  nomatch({a: {$bitsAllSet: 1}}, {a: 'asdf'});\n  nomatch({a: {$bitsAllSet: 1}}, {a: ['a', 'b']});\n  nomatch({a: {$bitsAllSet: 1}}, {a: {foo: 'bar'}});\n  nomatch({a: {$bitsAllSet: 1}}, {a: 1.2});\n  nomatch({a: {$bitsAllSet: 1}}, {a: '1'});\n\n  [\n    false,\n    NaN,\n    Infinity,\n    null,\n    'asdf',\n    ['a', 'b'],\n    {foo: 'bar'},\n    1.2,\n    '1',\n    [0, -1],\n  ].forEach(badValue => {\n    test.throws(() => {\n      match({a: {$bitsAllSet: badValue}}, {a: 42});\n    });\n  });\n\n  // $type\n  match({a: {$type: 1}}, {a: 1.1});\n  match({a: {$type: 'double'}}, {a: 1.1});\n  match({a: {$type: 1}}, {a: 1});\n  nomatch({a: {$type: 1}}, {a: '1'});\n  match({a: {$type: 2}}, {a: '1'});\n  match({a: {$type: 'string'}}, {a: '1'});\n  nomatch({a: {$type: 2}}, {a: 1});\n  match({a: {$type: 3}}, {a: {}});\n  match({a: {$type: 'object'}}, {a: {}});\n  match({a: {$type: 3}}, {a: {b: 2}});\n  nomatch({a: {$type: 3}}, {a: []});\n  nomatch({a: {$type: 3}}, {a: [1]});\n  nomatch({a: {$type: 3}}, {a: null});\n  match({a: {$type: 5}}, {a: EJSON.newBinary(0)});\n  match({a: {$type: 'binData'}}, {a: EJSON.newBinary(0)});\n  match({a: {$type: 5}}, {a: EJSON.newBinary(4)});\n  nomatch({a: {$type: 5}}, {a: []});\n  nomatch({a: {$type: 5}}, {a: [42]});\n  match({a: {$type: 7}}, {a: new MongoID.ObjectID()});\n  match({a: {$type: 'objectId'}}, {a: new MongoID.ObjectID()});\n  nomatch({a: {$type: 7}}, {a: '1234567890abcd1234567890'});\n  match({a: {$type: 8}}, {a: true});\n  match({a: {$type: 'bool'}}, {a: true});\n  match({a: {$type: 8}}, {a: false});\n  nomatch({a: {$type: 8}}, {a: 'true'});\n  nomatch({a: {$type: 8}}, {a: 0});\n  nomatch({a: {$type: 8}}, {a: null});\n  nomatch({a: {$type: 8}}, {a: ''});\n  nomatch({a: {$type: 8}}, {});\n  match({a: {$type: 9}}, {a: new Date});\n  match({a: {$type: 'date'}}, {a: new Date});\n  nomatch({a: {$type: 9}}, {a: +new Date});\n  match({a: {$type: 10}}, {a: null});\n  match({a: {$type: 'null'}}, {a: null});\n  nomatch({a: {$type: 10}}, {a: false});\n  nomatch({a: {$type: 10}}, {a: ''});\n  nomatch({a: {$type: 10}}, {a: 0});\n  nomatch({a: {$type: 10}}, {});\n  match({a: {$type: 11}}, {a: /x/});\n  match({a: {$type: 'regex'}}, {a: /x/});\n  nomatch({a: {$type: 11}}, {a: 'x'});\n  nomatch({a: {$type: 11}}, {});\n\n  // The normal rule for {$type:4} (4 means array) is that it NOT good enough to\n  // just have an array that's the leaf that matches the path.  (An array inside\n  // that array is good, though.)\n  nomatch({a: {$type: 4}}, {a: []});\n  nomatch({a: {$type: 4}}, {a: [1]}); // tested against mongodb\n  match({a: {$type: 1}}, {a: [1]});\n  nomatch({a: {$type: 2}}, {a: [1]});\n  match({a: {$type: 1}}, {a: ['1', 1]});\n  match({a: {$type: 2}}, {a: ['1', 1]});\n  nomatch({a: {$type: 3}}, {a: ['1', 1]});\n  nomatch({a: {$type: 4}}, {a: ['1', 1]});\n  nomatch({a: {$type: 1}}, {a: ['1', []]});\n  match({a: {$type: 2}}, {a: ['1', []]});\n  match({a: {$type: 4}}, {a: ['1', []]}); // tested against mongodb\n  // An exception to the normal rule is that an array found via numeric index is\n  // examined itself, and its elements are not.\n  match({'a.0': {$type: 4}}, {a: [[0]]});\n  match({'a.0': {$type: 'array'}}, {a: [[0]]});\n  nomatch({'a.0': {$type: 1}}, {a: [[0]]});\n\n  // invalid types should throw errors\n  test.throws(() => {\n    match({a: {$type: 'foo'}}, {a: 1});\n  });\n  test.throws(() => {\n    match({a: {$type: -2}}, {a: 1});\n  });\n  test.throws(() => {\n    match({a: {$type: 0}}, {a: 1});\n  });\n  test.throws(() => {\n    match({a: {$type: 20}}, {a: 1});\n  });\n\n  // regular expressions\n  match({a: /a/}, {a: 'cat'});\n  nomatch({a: /a/}, {a: 'cut'});\n  nomatch({a: /a/}, {a: 'CAT'});\n  match({a: /a/i}, {a: 'CAT'});\n  match({a: /a/}, {a: ['foo', 'bar']});  // search within array...\n  nomatch({a: /,/}, {a: ['foo', 'bar']});  // but not by stringifying\n  match({a: {$regex: 'a'}}, {a: ['foo', 'bar']});\n  nomatch({a: {$regex: ','}}, {a: ['foo', 'bar']});\n  match({a: {$regex: /a/}}, {a: 'cat'});\n  nomatch({a: {$regex: /a/}}, {a: 'cut'});\n  nomatch({a: {$regex: /a/}}, {a: 'CAT'});\n  match({a: {$regex: /a/i}}, {a: 'CAT'});\n  match({a: {$regex: /a/, $options: 'i'}}, {a: 'CAT'}); // tested\n  match({a: {$regex: /a/i, $options: 'i'}}, {a: 'CAT'}); // tested\n  nomatch({a: {$regex: /a/i, $options: ''}}, {a: 'CAT'}); // tested\n  match({a: {$regex: 'a'}}, {a: 'cat'});\n  nomatch({a: {$regex: 'a'}}, {a: 'cut'});\n  nomatch({a: {$regex: 'a'}}, {a: 'CAT'});\n  match({a: {$regex: 'a', $options: 'i'}}, {a: 'CAT'});\n  match({a: {$regex: '', $options: 'i'}}, {a: 'foo'});\n  nomatch({a: {$regex: '', $options: 'i'}}, {});\n  nomatch({a: {$regex: '', $options: 'i'}}, {a: 5});\n  nomatch({a: /undefined/}, {});\n  nomatch({a: {$regex: 'undefined'}}, {});\n  nomatch({a: /xxx/}, {});\n  nomatch({a: {$regex: 'xxx'}}, {});\n\n  // GitHub issue #2817:\n  // Regexps with a global flag ('g') keep a state when tested against the same\n  // string. Selector shouldn't return different result for similar documents\n  // because of this state.\n  const reusedRegexp = /sh/ig;\n  match({a: reusedRegexp}, {a: 'Shorts'});\n  match({a: reusedRegexp}, {a: 'Shorts'});\n  match({a: reusedRegexp}, {a: 'Shorts'});\n\n  match({a: {$regex: reusedRegexp}}, {a: 'Shorts'});\n  match({a: {$regex: reusedRegexp}}, {a: 'Shorts'});\n  match({a: {$regex: reusedRegexp}}, {a: 'Shorts'});\n\n  test.throws(() => {\n    match({a: {$options: 'i'}}, {a: 12});\n  });\n\n  match({a: /a/}, {a: ['dog', 'cat']});\n  nomatch({a: /a/}, {a: ['dog', 'puppy']});\n\n  // we don't support regexps in minimongo very well (eg, there's no EJSON\n  // encoding so it won't go over the wire), but run these tests anyway\n  match({a: /a/}, {a: /a/});\n  match({a: /a/}, {a: ['x', /a/]});\n  nomatch({a: /a/}, {a: /a/i});\n  nomatch({a: /a/m}, {a: /a/});\n  nomatch({a: /a/}, {a: /b/});\n  nomatch({a: /5/}, {a: 5});\n  nomatch({a: /t/}, {a: true});\n  match({a: /m/i}, {a: ['x', 'xM']});\n\n  test.throws(() => {\n    match({a: {$regex: /a/, $options: 'x'}}, {a: 'cat'});\n  });\n  test.throws(() => {\n    match({a: {$regex: /a/, $options: 's'}}, {a: 'cat'});\n  });\n\n  // $not\n  match({x: {$not: {$gt: 7}}}, {x: 6});\n  nomatch({x: {$not: {$gt: 7}}}, {x: 8});\n  match({x: {$not: {$lt: 10, $gt: 7}}}, {x: 11});\n  nomatch({x: {$not: {$lt: 10, $gt: 7}}}, {x: 9});\n  match({x: {$not: {$lt: 10, $gt: 7}}}, {x: 6});\n\n  match({x: {$not: {$gt: 7}}}, {x: [2, 3, 4]});\n  match({'x.y': {$not: {$gt: 7}}}, {x: [{y: 2}, {y: 3}, {y: 4}]});\n  nomatch({x: {$not: {$gt: 7}}}, {x: [2, 3, 4, 10]});\n  nomatch({'x.y': {$not: {$gt: 7}}}, {x: [{y: 2}, {y: 3}, {y: 4}, {y: 10}]});\n\n  match({x: {$not: /a/}}, {x: 'dog'});\n  nomatch({x: {$not: /a/}}, {x: 'cat'});\n  match({x: {$not: /a/}}, {x: ['dog', 'puppy']});\n  nomatch({x: {$not: /a/}}, {x: ['kitten', 'cat']});\n\n  // dotted keypaths: bare values\n  match({'a.b': 1}, {a: {b: 1}});\n  nomatch({'a.b': 1}, {a: {b: 2}});\n  match({'a.b': [1, 2, 3]}, {a: {b: [1, 2, 3]}});\n  nomatch({'a.b': [1, 2, 3]}, {a: {b: [4]}});\n  match({'a.b': /a/}, {a: {b: 'cat'}});\n  nomatch({'a.b': /a/}, {a: {b: 'dog'}});\n  match({'a.b.c': null}, {});\n  match({'a.b.c': null}, {a: 1});\n  match({'a.b': null}, {a: 1});\n  match({'a.b.c': null}, {a: {b: 4}});\n\n  // dotted keypaths, nulls, numeric indices, arrays\n  nomatch({'a.b': null}, {a: [1]});\n  match({'a.b': []}, {a: {b: []}});\n  const big = {a: [{b: 1}, 2, {}, {b: [3, 4]}]};\n  match({'a.b': 1}, big);\n  match({'a.b': [3, 4]}, big);\n  match({'a.b': 3}, big);\n  match({'a.b': 4}, big);\n  match({'a.b': null}, big);  // matches on slot 2\n  match({'a.1': 8}, {a: [7, 8, 9]});\n  nomatch({'a.1': 7}, {a: [7, 8, 9]});\n  nomatch({'a.1': null}, {a: [7, 8, 9]});\n  match({'a.1': [8, 9]}, {a: [7, [8, 9]]});\n  nomatch({'a.1': 6}, {a: [[6, 7], [8, 9]]});\n  nomatch({'a.1': 7}, {a: [[6, 7], [8, 9]]});\n  nomatch({'a.1': 8}, {a: [[6, 7], [8, 9]]});\n  nomatch({'a.1': 9}, {a: [[6, 7], [8, 9]]});\n  match({'a.1': 2}, {a: [0, {1: 2}, 3]});\n  match({'a.1': {1: 2}}, {a: [0, {1: 2}, 3]});\n  match({'x.1.y': 8}, {x: [7, {y: 8}, 9]});\n  // comes from trying '1' as key in the plain object\n  match({'x.1.y': null}, {x: [7, {y: 8}, 9]});\n  match({'a.1.b': 9}, {a: [7, {b: 9}, {1: {b: 'foo'}}]});\n  match({'a.1.b': 'foo'}, {a: [7, {b: 9}, {1: {b: 'foo'}}]});\n  match({'a.1.b': null}, {a: [7, {b: 9}, {1: {b: 'foo'}}]});\n  match({'a.1.b': 2}, {a: [1, [{b: 2}], 3]});\n  nomatch({'a.1.b': null}, {a: [1, [{b: 2}], 3]});\n  // this is new behavior in mongo 2.5\n  nomatch({'a.0.b': null}, {a: [5]});\n  match({'a.1': 4}, {a: [{1: 4}, 5]});\n  match({'a.1': 5}, {a: [{1: 4}, 5]});\n  nomatch({'a.1': null}, {a: [{1: 4}, 5]});\n  match({'a.1.foo': 4}, {a: [{1: {foo: 4}}, {foo: 5}]});\n  match({'a.1.foo': 5}, {a: [{1: {foo: 4}}, {foo: 5}]});\n  match({'a.1.foo': null}, {a: [{1: {foo: 4}}, {foo: 5}]});\n\n  // trying to access a dotted field that is undefined at some point\n  // down the chain\n  nomatch({'a.b': 1}, {x: 2});\n  nomatch({'a.b.c': 1}, {a: {x: 2}});\n  nomatch({'a.b.c': 1}, {a: {b: {x: 2}}});\n  nomatch({'a.b.c': 1}, {a: {b: 1}});\n  nomatch({'a.b.c': 1}, {a: {b: 0}});\n\n  // dotted keypaths: literal objects\n  match({'a.b': {c: 1}}, {a: {b: {c: 1}}});\n  nomatch({'a.b': {c: 1}}, {a: {b: {c: 2}}});\n  nomatch({'a.b': {c: 1}}, {a: {b: 2}});\n  match({'a.b': {c: 1, d: 2}}, {a: {b: {c: 1, d: 2}}});\n  nomatch({'a.b': {c: 1, d: 2}}, {a: {b: {c: 1, d: 1}}});\n  nomatch({'a.b': {c: 1, d: 2}}, {a: {b: {d: 2}}});\n\n  // dotted keypaths: $ operators\n  match({'a.b': {$in: [1, 2, 3]}}, {a: {b: [2]}}); // tested against mongodb\n  match({'a.b': {$in: [{x: 1}, {x: 2}, {x: 3}]}}, {a: {b: [{x: 2}]}});\n  match({'a.b': {$in: [1, 2, 3]}}, {a: {b: [4, 2]}});\n  nomatch({'a.b': {$in: [1, 2, 3]}}, {a: {b: [4]}});\n\n  // $or\n  test.throws(() => {\n    match({$or: []}, {});\n  });\n  test.throws(() => {\n    match({$or: [5]}, {});\n  });\n  test.throws(() => {\n    match({$or: []}, {a: 1});\n  });\n  match({$or: [{a: 1}]}, {a: 1});\n  nomatch({$or: [{b: 2}]}, {a: 1});\n  match({$or: [{a: 1}, {b: 2}]}, {a: 1});\n  nomatch({$or: [{c: 3}, {d: 4}]}, {a: 1});\n  match({$or: [{a: 1}, {b: 2}]}, {a: [1, 2, 3]});\n  nomatch({$or: [{a: 1}, {b: 2}]}, {c: [1, 2, 3]});\n  nomatch({$or: [{a: 1}, {b: 2}]}, {a: [2, 3, 4]});\n  match({$or: [{a: 1}, {a: 2}]}, {a: 1});\n  match({$or: [{a: 1}, {a: 2}], b: 2}, {a: 1, b: 2});\n  nomatch({$or: [{a: 2}, {a: 3}], b: 2}, {a: 1, b: 2});\n  nomatch({$or: [{a: 1}, {a: 2}], b: 3}, {a: 1, b: 2});\n\n  // Combining $or with equality\n  match({x: 1, $or: [{a: 1}, {b: 1}]}, {x: 1, b: 1});\n  match({$or: [{a: 1}, {b: 1}], x: 1}, {x: 1, b: 1});\n  nomatch({x: 1, $or: [{a: 1}, {b: 1}]}, {b: 1});\n  nomatch({x: 1, $or: [{a: 1}, {b: 1}]}, {x: 1});\n\n  // $or and $lt, $lte, $gt, $gte\n  match({$or: [{a: {$lte: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$or: [{a: {$lt: 1}}, {a: 2}]}, {a: 1});\n  match({$or: [{a: {$gte: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$or: [{a: {$gt: 1}}, {a: 2}]}, {a: 1});\n  match({$or: [{b: {$gt: 1}}, {b: {$lt: 3}}]}, {b: 2});\n  nomatch({$or: [{b: {$lt: 1}}, {b: {$gt: 3}}]}, {b: 2});\n\n  // $or and $in\n  match({$or: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$or: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  nomatch({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {b: 2});\n  nomatch({$or: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {b: 2});\n\n  // $or and $nin\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  match({$or: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {b: 2});\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 2});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {b: 2});\n\n  // $or and dot-notation\n  match({$or: [{'a.b': 1}, {'a.b': 2}]}, {a: {b: 1}});\n  match({$or: [{'a.b': 1}, {'a.c': 1}]}, {a: {b: 1}});\n  nomatch({$or: [{'a.b': 2}, {'a.c': 1}]}, {a: {b: 1}});\n\n  // $or and nested objects\n  match({$or: [{a: {b: 1, c: 2}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n  nomatch({$or: [{a: {b: 1, c: 3}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n\n  // $or and regexes\n  match({$or: [{a: /a/}]}, {a: 'cat'});\n  nomatch({$or: [{a: /o/}]}, {a: 'cat'});\n  match({$or: [{a: /a/}, {a: /o/}]}, {a: 'cat'});\n  nomatch({$or: [{a: /i/}, {a: /o/}]}, {a: 'cat'});\n  match({$or: [{a: /i/}, {b: /o/}]}, {a: 'cat', b: 'dog'});\n\n  // $or and $ne\n  match({$or: [{a: {$ne: 1}}]}, {});\n  nomatch({$or: [{a: {$ne: 1}}]}, {a: 1});\n  match({$or: [{a: {$ne: 1}}]}, {a: 2});\n  match({$or: [{a: {$ne: 1}}]}, {b: 1});\n  match({$or: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 1});\n  match({$or: [{a: {$ne: 1}}, {b: {$ne: 1}}]}, {a: 1});\n  nomatch({$or: [{a: {$ne: 1}}, {b: {$ne: 2}}]}, {a: 1, b: 2});\n\n  // $or and $not\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {});\n  nomatch({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 1});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 2});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$not: {$mod: [10, 2]}}}]}, {a: 1});\n  nomatch({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 1});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 2});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 3});\n  // this is possibly an open-ended task, so we stop here ...\n\n  // $nor\n  test.throws(() => {\n    match({$nor: []}, {});\n  });\n  test.throws(() => {\n    match({$nor: [5]}, {});\n  });\n  test.throws(() => {\n    match({$nor: []}, {a: 1});\n  });\n  nomatch({$nor: [{a: 1}]}, {a: 1});\n  match({$nor: [{b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: 1}, {b: 2}]}, {a: 1});\n  match({$nor: [{c: 3}, {d: 4}]}, {a: 1});\n  nomatch({$nor: [{a: 1}, {b: 2}]}, {a: [1, 2, 3]});\n  match({$nor: [{a: 1}, {b: 2}]}, {c: [1, 2, 3]});\n  match({$nor: [{a: 1}, {b: 2}]}, {a: [2, 3, 4]});\n  nomatch({$nor: [{a: 1}, {a: 2}]}, {a: 1});\n\n  // $nor and $lt, $lte, $gt, $gte\n  nomatch({$nor: [{a: {$lte: 1}}, {a: 2}]}, {a: 1});\n  match({$nor: [{a: {$lt: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$gte: 1}}, {a: 2}]}, {a: 1});\n  match({$nor: [{a: {$gt: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$nor: [{b: {$gt: 1}}, {b: {$lt: 3}}]}, {b: 2});\n  match({$nor: [{b: {$lt: 1}}, {b: {$gt: 3}}]}, {b: 2});\n\n  // $nor and $in\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  match({$nor: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  match({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {b: 2});\n  match({$nor: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {b: 2});\n\n  // $nor and $nin\n  match({$nor: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  match({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {b: 2});\n  match({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 2});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {b: 2});\n\n  // $nor and dot-notation\n  nomatch({$nor: [{'a.b': 1}, {'a.b': 2}]}, {a: {b: 1}});\n  nomatch({$nor: [{'a.b': 1}, {'a.c': 1}]}, {a: {b: 1}});\n  match({$nor: [{'a.b': 2}, {'a.c': 1}]}, {a: {b: 1}});\n\n  // $nor and nested objects\n  nomatch({$nor: [{a: {b: 1, c: 2}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n  match({$nor: [{a: {b: 1, c: 3}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n\n  // $nor and regexes\n  nomatch({$nor: [{a: /a/}]}, {a: 'cat'});\n  match({$nor: [{a: /o/}]}, {a: 'cat'});\n  nomatch({$nor: [{a: /a/}, {a: /o/}]}, {a: 'cat'});\n  match({$nor: [{a: /i/}, {a: /o/}]}, {a: 'cat'});\n  nomatch({$nor: [{a: /i/}, {b: /o/}]}, {a: 'cat', b: 'dog'});\n\n  // $nor and $ne\n  nomatch({$nor: [{a: {$ne: 1}}]}, {});\n  match({$nor: [{a: {$ne: 1}}]}, {a: 1});\n  nomatch({$nor: [{a: {$ne: 1}}]}, {a: 2});\n  nomatch({$nor: [{a: {$ne: 1}}]}, {b: 1});\n  nomatch({$nor: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 1});\n  nomatch({$nor: [{a: {$ne: 1}}, {b: {$ne: 1}}]}, {a: 1});\n  match({$nor: [{a: {$ne: 1}}, {b: {$ne: 2}}]}, {a: 1, b: 2});\n\n  // $nor and $not\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {});\n  match({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 1});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 2});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$not: {$mod: [10, 2]}}}]}, {a: 1});\n  match({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 2});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 3});\n\n  // $and\n\n  test.throws(() => {\n    match({$and: []}, {});\n  });\n  test.throws(() => {\n    match({$and: [5]}, {});\n  });\n  test.throws(() => {\n    match({$and: []}, {a: 1});\n  });\n  match({$and: [{a: 1}]}, {a: 1});\n  nomatch({$and: [{a: 1}, {a: 2}]}, {a: 1});\n  nomatch({$and: [{a: 1}, {b: 1}]}, {a: 1});\n  match({$and: [{a: 1}, {b: 2}]}, {a: 1, b: 2});\n  nomatch({$and: [{a: 1}, {b: 1}]}, {a: 1, b: 2});\n  match({$and: [{a: 1}, {b: 2}], c: 3}, {a: 1, b: 2, c: 3});\n  nomatch({$and: [{a: 1}, {b: 2}], c: 4}, {a: 1, b: 2, c: 3});\n\n  // $and and regexes\n  match({$and: [{a: /a/}]}, {a: 'cat'});\n  match({$and: [{a: /a/i}]}, {a: 'CAT'});\n  nomatch({$and: [{a: /o/}]}, {a: 'cat'});\n  nomatch({$and: [{a: /a/}, {a: /o/}]}, {a: 'cat'});\n  match({$and: [{a: /a/}, {b: /o/}]}, {a: 'cat', b: 'dog'});\n  nomatch({$and: [{a: /a/}, {b: /a/}]}, {a: 'cat', b: 'dog'});\n\n  // $and, dot-notation, and nested objects\n  match({$and: [{'a.b': 1}]}, {a: {b: 1}});\n  match({$and: [{a: {b: 1}}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.b': 2}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.c': 1}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.b': 1}, {'a.b': 2}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.b': 1}, {a: {b: 2}}]}, {a: {b: 1}});\n  match({$and: [{'a.b': 1}, {'c.d': 2}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{'a.b': 1}, {'c.d': 1}]}, {a: {b: 1}, c: {d: 2}});\n  match({$and: [{'a.b': 1}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{'a.b': 1}, {c: {d: 1}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{'a.b': 2}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  match({$and: [{a: {b: 1}}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{a: {b: 2}}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n\n  // $and and $in\n  nomatch({$and: [{a: {$in: []}}]}, {});\n  match({$and: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [1, 2, 3]}}, {a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {a: 1, b: 4});\n  match({$and: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {a: 1, b: 4});\n\n\n  // $and and $nin\n  match({$and: [{a: {$nin: []}}]}, {});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  match({$and: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 4});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {a: 1, b: 4});\n\n  // $and and $lt, $lte, $gt, $gte\n  match({$and: [{a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$lt: 1}}]}, {a: 1});\n  match({$and: [{a: {$lte: 1}}]}, {a: 1});\n  match({$and: [{a: {$gt: 0}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 1}}]}, {a: 1});\n  match({$and: [{a: {$gte: 1}}]}, {a: 1});\n  match({$and: [{a: {$gt: 0}}, {a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 1}}, {a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 0}}, {a: {$lt: 1}}]}, {a: 1});\n  match({$and: [{a: {$gte: 1}}, {a: {$lte: 1}}]}, {a: 1});\n  nomatch({$and: [{a: {$gte: 2}}, {a: {$lte: 0}}]}, {a: 1});\n\n  // $and and $ne\n  match({$and: [{a: {$ne: 1}}]}, {});\n  nomatch({$and: [{a: {$ne: 1}}]}, {a: 1});\n  match({$and: [{a: {$ne: 1}}]}, {a: 2});\n  nomatch({$and: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 2});\n  match({$and: [{a: {$ne: 1}}, {a: {$ne: 3}}]}, {a: 2});\n\n  // $and and $not\n  match({$and: [{a: {$not: {$gt: 2}}}]}, {a: 1});\n  nomatch({$and: [{a: {$not: {$lt: 2}}}]}, {a: 1});\n  match({$and: [{a: {$not: {$lt: 0}}}, {a: {$not: {$gt: 2}}}]}, {a: 1});\n  nomatch({$and: [{a: {$not: {$lt: 2}}}, {a: {$not: {$gt: 0}}}]}, {a: 1});\n\n  // $where\n  match({$where: 'this.a === 1'}, {a: 1});\n  match({$where: 'obj.a === 1'}, {a: 1});\n  nomatch({$where: 'this.a !== 1'}, {a: 1});\n  nomatch({$where: 'obj.a !== 1'}, {a: 1});\n  nomatch({$where: 'this.a === 1', a: 2}, {a: 1});\n  match({$where: 'this.a === 1', b: 2}, {a: 1, b: 2});\n  match({$where: 'this.a === 1 && this.b === 2'}, {a: 1, b: 2});\n  match({$where: 'this.a instanceof Array'}, {a: []});\n  nomatch({$where: 'this.a instanceof Array'}, {a: 1});\n\n  // reaching into array\n  match({'dogs.0.name': 'Fido'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'dogs.1.name': 'Rex'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  nomatch({'dogs.1.name': 'Fido'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'room.1b': 'bla'}, {room: {'1b': 'bla'}});\n\n  match({'dogs.name': 'Fido'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'dogs.name': 'Rex'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'animals.dogs.name': 'Fido'},\n    {animals: [{dogs: [{name: 'Rover'}]},\n      {},\n      {dogs: [{name: 'Fido'}, {name: 'Rex'}]}]});\n  match({'animals.dogs.name': 'Fido'},\n    {animals: [{dogs: {name: 'Rex'}},\n      {dogs: {name: 'Fido'}}]});\n  match({'animals.dogs.name': 'Fido'},\n    {animals: [{dogs: [{name: 'Rover'}]},\n      {},\n      {dogs: [{name: ['Fido']}, {name: 'Rex'}]}]});\n  nomatch({'dogs.name': 'Fido'}, {dogs: []});\n\n  // $elemMatch\n  match({dogs: {$elemMatch: {name: /e/}}},\n    {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  nomatch({dogs: {$elemMatch: {name: /a/}}},\n    {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({dogs: {$elemMatch: {age: {$gt: 4}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  match({dogs: {$elemMatch: {name: 'Fido', age: {$gt: 4}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  nomatch({dogs: {$elemMatch: {name: 'Fido', age: {$gt: 5}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  match({dogs: {$elemMatch: {name: /i/, age: {$gt: 4}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  nomatch({dogs: {$elemMatch: {name: /e/, age: 5}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n\n  // Tests for https://github.com/meteor/meteor/issues/9111.\n  match(\n    { dogs: { $elemMatch: { name: 'Rex' } } },\n    { dogs: [{ name: 'Rex', age: 3 }] });\n  nomatch(\n    { dogs: { $not: { $elemMatch: { name: 'Rex' } } } },\n    { dogs: [{ name: 'Rex', age: 3 }] });\n  match({\n    $or: [\n      { dogs: { $elemMatch: { name: 'Rex' } } },\n      { dogs: { $elemMatch: { name: 'Rex', age: 5 } } }\n    ]\n  }, {\n    dogs: [{ name: 'Rex', age: 3 }]\n  });\n  nomatch({\n    $or: [\n      { dogs: { $not: { $elemMatch: { name: 'Rex' } } } },\n      { dogs: { $elemMatch: { name: 'Rex', age: 5 } } }\n    ]\n  }, {\n    dogs: [{ name: 'Rex', age: 3 }]\n  });\n\n  match({x: {$elemMatch: {y: 9}}}, {x: [{y: 9}]});\n  nomatch({x: {$elemMatch: {y: 9}}}, {x: [[{y: 9}]]});\n  match({x: {$elemMatch: {$gt: 5, $lt: 9}}}, {x: [8]});\n  nomatch({x: {$elemMatch: {$gt: 5, $lt: 9}}}, {x: [[8]]});\n  match({'a.x': {$elemMatch: {y: 9}}},\n    {a: [{x: []}, {x: [{y: 9}]}]});\n  nomatch({a: {$elemMatch: {x: 5}}}, {a: {x: 5}});\n  match({a: {$elemMatch: {0: {$gt: 5, $lt: 9}}}}, {a: [[6]]});\n  match({a: {$elemMatch: {'0.b': {$gt: 5, $lt: 9}}}}, {a: [[{b: 6}]]});\n  match({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$or: [{a: 1}, {b: 1}], x: 1}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$and: [{b: 1}, {x: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  nomatch({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{b: 1}]});\n  nomatch({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1}]});\n  nomatch({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1}, {b: 1}]});\n\n  test.throws(() => {\n    match({a: {$elemMatch: {$gte: 1, $or: [{a: 1}, {b: 1}]}}},\n      {a: [{x: 1, b: 1}]});\n  });\n\n  test.throws(() => {\n    match({x: {$elemMatch: {$and: [{$gt: 5, $lt: 9}]}}}, {x: [8]});\n  });\n\n  // $comment\n  match({a: 5, $comment: 'asdf'}, {a: 5});\n  nomatch({a: 6, $comment: 'asdf'}, {a: 5});\n\n  // XXX still needs tests:\n  // - non-scalar arguments to $gt, $lt, etc\n});\n\nTinytest.add('minimongo - projection_compiler', test => {\n  const testProjection = (projection, tests) => {\n    const projection_f = LocalCollection._compileProjection(projection);\n    const equalNonStrict = (a, b, desc) => {\n      test.isTrue(EJSON.equals(a, b), desc);\n    };\n\n    tests.forEach(testCase => {\n      equalNonStrict(projection_f(testCase[0]), testCase[1], testCase[2]);\n    });\n  };\n\n  const testCompileProjectionThrows = (projection, expectedError) => {\n    test.throws(() => {\n      LocalCollection._compileProjection(projection);\n    }, expectedError);\n  };\n\n  testProjection({ foo: 1, bar: 1 }, [\n    [{ foo: 42, bar: 'something', baz: 'else' },\n      { foo: 42, bar: 'something' },\n      'simplest - whitelist'],\n\n    [{ foo: { nested: 17 }, baz: {} },\n      { foo: { nested: 17 } },\n      'nested whitelisted field'],\n\n    [{ _id: 'uid', bazbaz: 42 },\n      { _id: 'uid' },\n      'simplest whitelist - preserve _id'],\n  ]);\n\n  testProjection({ foo: 0, bar: 0 }, [\n    [{ foo: 42, bar: 'something', baz: 'else' },\n      { baz: 'else' },\n      'simplest - blacklist'],\n\n    [{ foo: { nested: 17 }, baz: { foo: 'something' } },\n      { baz: { foo: 'something' } },\n      'nested blacklisted field'],\n\n    [{ _id: 'uid', bazbaz: 42 },\n      { _id: 'uid', bazbaz: 42 },\n      'simplest blacklist - preserve _id'],\n  ]);\n\n  testProjection({ _id: 0, foo: 1 }, [\n    [{ foo: 42, bar: 33, _id: 'uid' },\n      { foo: 42 },\n      'whitelist - _id blacklisted'],\n  ]);\n\n  testProjection({ _id: 0, foo: 0 }, [\n    [{ foo: 42, bar: 33, _id: 'uid' },\n      { bar: 33 },\n      'blacklist - _id blacklisted'],\n  ]);\n\n  testProjection({ 'foo.bar.baz': 1 }, [\n    [{ foo: { meh: 'fur', bar: { baz: 42 }, tr: 1 }, bar: 33, baz: 'trolololo' },\n      { foo: { bar: { baz: 42 } } },\n      'whitelist nested'],\n\n    // Behavior of this test is looked up in actual mongo\n    [{ foo: { meh: 'fur', bar: 'nope', tr: 1 }, bar: 33, baz: 'trolololo' },\n      { foo: {} },\n      'whitelist nested - path not found in doc, different type'],\n\n    // Behavior of this test is looked up in actual mongo\n    [{ foo: { meh: 'fur', bar: [], tr: 1 }, bar: 33, baz: 'trolololo' },\n      { foo: { bar: [] } },\n      'whitelist nested - path not found in doc'],\n  ]);\n\n  testProjection({ 'hope.humanity': 0, 'hope.people': 0 }, [\n    [{ hope: { humanity: 'lost', people: 'broken', candies: 'long live!' } },\n      { hope: { candies: 'long live!' } },\n      'blacklist nested'],\n\n    [{ hope: 'new' },\n      { hope: 'new' },\n      'blacklist nested - path not found in doc'],\n  ]);\n\n  testProjection({ _id: 1 }, [\n    [{ _id: 42, x: 1, y: { z: '2' } },\n      { _id: 42 },\n      '_id whitelisted'],\n    [{ _id: 33 },\n      { _id: 33 },\n      '_id whitelisted, _id only'],\n    [{ x: 1 },\n      {},\n      '_id whitelisted, no _id'],\n  ]);\n\n  testProjection({ _id: 0 }, [\n    [{ _id: 42, x: 1, y: { z: '2' } },\n      { x: 1, y: { z: '2' } },\n      '_id blacklisted'],\n    [{ _id: 33 },\n      {},\n      '_id blacklisted, _id only'],\n    [{ x: 1 },\n      { x: 1 },\n      '_id blacklisted, no _id'],\n  ]);\n\n  testProjection({}, [\n    [{ a: 1, b: 2, c: '3' },\n      { a: 1, b: 2, c: '3' },\n      'empty projection'],\n  ]);\n\n  testCompileProjectionThrows(\n    { inc: 1, excl: 0 },\n    'You cannot currently mix including and excluding fields');\n  testCompileProjectionThrows(\n    { _id: 1, a: 0 },\n    'You cannot currently mix including and excluding fields');\n\n  testCompileProjectionThrows(\n    { a: 1, 'a.b': 1 },\n    'using both of them may trigger unexpected behavior');\n  testCompileProjectionThrows(\n    { 'a.b.c': 1, 'a.b': 1, a: 1 },\n    'using both of them may trigger unexpected behavior');\n\n  testCompileProjectionThrows('some string', 'fields option must be an object');\n});\n\nTinytest.add('minimongo - fetch with fields', test => {\n  const c = new LocalCollection();\n  Array.from({length: 30}, (x, i) => {\n    c.insert({\n      something: Random.id(),\n      anything: {\n        foo: 'bar',\n        cool: 'hot',\n      },\n      nothing: i,\n      i,\n    });\n  });\n\n  // Test just a regular fetch with some projection\n  let fetchResults = c.find({}, { fields: {\n    something: 1,\n    'anything.foo': 1,\n  } }).fetch();\n\n  test.isTrue(fetchResults.every(x => x &&\n         x.something &&\n         x.anything &&\n         x.anything.foo &&\n         x.anything.foo === 'bar' &&\n         !hasOwn.call(x, 'nothing') &&\n         !hasOwn.call(x.anything, 'cool')));\n\n  // Test with a selector, even field used in the selector is excluded in the\n  // projection\n  fetchResults = c.find({\n    nothing: { $gte: 5 },\n  }, {\n    fields: { nothing: 0 },\n  }).fetch();\n\n  test.isTrue(fetchResults.every(x => x &&\n         x.something &&\n         x.anything &&\n         x.anything.foo === 'bar' &&\n         x.anything.cool === 'hot' &&\n         !hasOwn.call(x, 'nothing') &&\n         x.i &&\n         x.i >= 5));\n\n  test.isTrue(fetchResults.length === 25);\n\n  // Test that we can sort, based on field excluded from the projection, use\n  // skip and limit as well!\n  // following find will get indexes [10..20) sorted by nothing\n  fetchResults = c.find({}, {\n    sort: {\n      nothing: 1,\n    },\n    limit: 10,\n    skip: 10,\n    fields: {\n      i: 1,\n      something: 1,\n    },\n  }).fetch();\n\n  test.isTrue(fetchResults.every(x => x &&\n         x.something &&\n         x.i >= 10 && x.i < 20));\n\n  fetchResults.forEach((x, i, arr) => {\n    if (!i) return;\n    test.isTrue(x.i === arr[i - 1].i + 1);\n  });\n\n  // Temporary unsupported operators\n  // queries are taken from MongoDB docs examples\n  test.throws(() => {\n    c.find({}, { fields: { 'grades.$': 1 } });\n  });\n  test.throws(() => {\n    c.find({}, { fields: { grades: { $elemMatch: { mean: 70 } } } });\n  });\n  test.throws(() => {\n    c.find({}, { fields: { grades: { $slice: [20, 10] } } });\n  });\n});\n\nTinytest.add('minimongo - fetch with projection, subarrays', test => {\n  // Apparently projection of type 'foo.bar.x' for\n  // { foo: [ { bar: { x: 42 } }, { bar: { x: 3 } } ] }\n  // should return exactly this object. More precisely, arrays are considered as\n  // sets and are queried separately and then merged back to result set\n  const c = new LocalCollection();\n\n  // Insert a test object with two set fields\n  c.insert({\n    setA: [{\n      fieldA: 42,\n      fieldB: 33,\n    }, {\n      fieldA: 'the good',\n      fieldB: 'the bad',\n      fieldC: 'the ugly',\n    }],\n    setB: [{\n      anotherA: { },\n      anotherB: 'meh',\n    }, {\n      anotherA: 1234,\n      anotherB: 431,\n    }],\n  });\n\n  const equalNonStrict = (a, b, desc) => {\n    test.isTrue(EJSON.equals(a, b), desc);\n  };\n\n  const testForProjection = (projection, expected) => {\n    const fetched = c.find({}, { fields: projection }).fetch()[0];\n    equalNonStrict(fetched, expected, `failed sub-set projection: ${JSON.stringify(projection)}`);\n  };\n\n  testForProjection({ 'setA.fieldA': 1, 'setB.anotherB': 1, _id: 0 },\n    {\n      setA: [{ fieldA: 42 }, { fieldA: 'the good' }],\n      setB: [{ anotherB: 'meh' }, { anotherB: 431 }],\n    });\n\n  testForProjection({ 'setA.fieldA': 0, 'setB.anotherA': 0, _id: 0 },\n    {\n      setA: [{fieldB: 33}, {fieldB: 'the bad', fieldC: 'the ugly'}],\n      setB: [{ anotherB: 'meh' }, { anotherB: 431 }],\n    });\n\n  c.remove({});\n  c.insert({a: [[{b: 1, c: 2}, {b: 2, c: 4}], {b: 3, c: 5}, [{b: 4, c: 9}]]});\n\n  testForProjection({ 'a.b': 1, _id: 0 },\n    {a: [ [ { b: 1 }, { b: 2 } ], { b: 3 }, [ { b: 4 } ] ] });\n  testForProjection({ 'a.b': 0, _id: 0 },\n    {a: [ [ { c: 2 }, { c: 4 } ], { c: 5 }, [ { c: 9 } ] ] });\n});\n\nTinytest.add('minimongo - fetch with projection, deep copy', test => {\n  // Compiled fields projection defines the contract: returned document doesn't\n  // retain anything from the passed argument.\n  const doc = {\n    a: { x: 42 },\n    b: {\n      y: { z: 33 },\n    },\n    c: 'asdf',\n  };\n\n  let fields = {\n    a: 1,\n    'b.y': 1,\n  };\n\n  let projectionFn = LocalCollection._compileProjection(fields);\n  let filteredDoc = projectionFn(doc);\n  doc.a.x++;\n  doc.b.y.z--;\n  test.equal(filteredDoc.a.x, 42, 'projection returning deep copy - including');\n  test.equal(filteredDoc.b.y.z, 33, 'projection returning deep copy - including');\n\n  fields = { c: 0 };\n  projectionFn = LocalCollection._compileProjection(fields);\n  filteredDoc = projectionFn(doc);\n\n  doc.a.x = 5;\n  test.equal(filteredDoc.a.x, 43, 'projection returning deep copy - excluding');\n});\n\nTinytest.add('minimongo - observe ordered with projection', test => {\n  // These tests are copy-paste from \"minimongo -observe ordered\",\n  // slightly modified to test projection\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  let handle;\n\n  const c = new LocalCollection();\n  handle = c.find({}, {sort: {a: 1}, fields: { a: 1 }}).observe(cbs);\n  test.isTrue(handle.collection === c);\n\n  c.insert({_id: 'foo', a: 1, b: 2});\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n  c.update({a: 1}, {$set: {a: 2, b: 1}});\n  test.equal(operations.shift(), ['changed', {a: 2}, 0, {a: 1}]);\n  c.insert({_id: 'bar', a: 10, c: 33});\n  test.equal(operations.shift(), ['added', {a: 10}, 1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  c.update({}, {$inc: {c: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, 0, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, 1, {a: 10}]);\n  c.update({a: 11}, {a: 1, b: 44});\n  test.equal(operations.shift(), ['changed', {a: 1}, 1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, 1, 0, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', 1, {a: 3}]);\n\n  // test stop\n  handle.stop();\n  const idA2 = Random.id();\n  c.insert({_id: idA2, a: 2});\n  test.equal(operations.shift(), undefined);\n\n  const cursor = c.find({}, {fields: {a: 1, _id: 0}});\n  test.throws(() => {\n    cursor.observeChanges({added() {}});\n  });\n  test.throws(() => {\n    cursor.observe({added() {}});\n  });\n\n  // test initial inserts (and backwards sort)\n  handle = c.find({}, {sort: {a: -1}, fields: { a: 1 } }).observe(cbs);\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  test.equal(operations.shift(), ['added', {a: 1}, 1, null]);\n  handle.stop();\n\n  // test _suppress_initial\n  handle = c.find({}, {sort: {a: -1}, fields: { a: 1 }}).observe(Object.assign(cbs, {_suppress_initial: true}));\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 100, b: { foo: 'bar' }});\n  test.equal(operations.shift(), ['added', {a: 100}, 0, idA2]);\n  handle.stop();\n\n  // test skip and limit.\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, skip: 1, limit: 2, fields: { blacklisted: 0 }}).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 1, blacklisted: 1324});\n  test.equal(operations.shift(), undefined);\n  c.insert({_id: 'foo', a: 2, blacklisted: ['something']});\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  c.insert({a: 3, blacklisted: { 2: 3 }});\n  test.equal(operations.shift(), ['added', {a: 3}, 1, null]);\n  c.insert({a: 4, blacklisted: 6});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 1}, {a: 0, blacklisted: 4444});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 0}, {a: 5, blacklisted: 11111});\n  test.equal(operations.shift(), ['removed', 'foo', 0, {a: 2}]);\n  test.equal(operations.shift(), ['added', {a: 4}, 1, null]);\n  c.update({a: 3}, {a: 3.5, blacklisted: 333.4444});\n  test.equal(operations.shift(), ['changed', {a: 3.5}, 0, {a: 3}]);\n  handle.stop();\n\n  // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, fields: { a: 1 }}).observe(Object.assign(cbs, {_no_indices: true}));\n  c.insert({_id: 'foo', a: 1, zoo: 'crazy'});\n  test.equal(operations.shift(), ['added', {a: 1}, -1, null]);\n  c.update({a: 1}, {$set: {a: 2, foobar: 'player'}});\n  test.equal(operations.shift(), ['changed', {a: 2}, -1, {a: 1}]);\n  c.insert({a: 10, b: 123.45});\n  test.equal(operations.shift(), ['added', {a: 10}, -1, null]);\n  c.update({}, {$inc: {a: 1, b: 2}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, -1, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, -1, {a: 10}]);\n  c.update({a: 11, b: 125.45}, {a: 1, b: 444});\n  test.equal(operations.shift(), ['changed', {a: 1}, -1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, -1, -1, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', -1, {a: 3}]);\n  handle.stop();\n});\n\n\nTinytest.add('minimongo - ordering', test => {\n  const shortBinary = EJSON.newBinary(1);\n  shortBinary[0] = 128;\n  const longBinary1 = EJSON.newBinary(2);\n  longBinary1[1] = 42;\n  const longBinary2 = EJSON.newBinary(2);\n  longBinary2[1] = 50;\n\n  const date1 = new Date;\n  const date2 = new Date(date1.getTime() + 1000);\n\n  // value ordering\n  assert_ordering(test, LocalCollection._f._cmp, [\n    null,\n    1, 2.2, 3,\n    '03', '1', '11', '2', 'a', 'aaa',\n    {}, {a: 2}, {a: 3}, {a: 3, b: 4}, {b: 4}, {b: 4, a: 3},\n    {b: {}}, {b: [1, 2, 3]}, {b: [1, 2, 4]},\n    [], [1, 2], [1, 2, 3], [1, 2, 4], [1, 2, '4'], [1, 2, [4]],\n    shortBinary, longBinary1, longBinary2,\n    new MongoID.ObjectID('1234567890abcd1234567890'),\n    new MongoID.ObjectID('abcd1234567890abcd123456'),\n    false, true,\n    date1, date2,\n  ]);\n\n  // document ordering under a sort specification\n  const verify = (sorts, docs) => {\n    (Array.isArray(sorts) ? sorts : [sorts]).forEach(sort => {\n      const sorter = new Minimongo.Sorter(sort);\n      assert_ordering(test, sorter.getComparator(), docs);\n    });\n  };\n\n  // note: [] doesn't sort with \"arrays\", it sorts as \"undefined\". the position\n  // of arrays in _typeorder only matters for things like $lt. (This behavior\n  // verified with MongoDB 2.2.1.) We don't define the relative order of {a: []}\n  // and {c: 1} is undefined (MongoDB does seem to care but it's not clear how\n  // or why).\n  verify([{a: 1}, ['a'], [['a', 'asc']]],\n    [{a: []}, {a: 1}, {a: {}}, {a: true}]);\n  verify([{a: 1}, ['a'], [['a', 'asc']]],\n    [{c: 1}, {a: 1}, {a: {}}, {a: true}]);\n  verify([{a: -1}, [['a', 'desc']]],\n    [{a: true}, {a: {}}, {a: 1}, {c: 1}]);\n  verify([{a: -1}, [['a', 'desc']]],\n    [{a: true}, {a: {}}, {a: 1}, {a: []}]);\n\n  verify([{a: 1, b: -1}, ['a', ['b', 'desc']],\n    [['a', 'asc'], ['b', 'desc']]],\n  [{c: 1}, {a: 1, b: 3}, {a: 1, b: 2}, {a: 2, b: 0}]);\n\n  verify([{a: 1, b: 1}, ['a', 'b'],\n    [['a', 'asc'], ['b', 'asc']]],\n  [{c: 1}, {a: 1, b: 2}, {a: 1, b: 3}, {a: 2, b: 0}]);\n\n  test.throws(() => {\n    new Minimongo.Sorter('a');\n  });\n\n  test.throws(() => {\n    new Minimongo.Sorter(123);\n  });\n\n  // We don't support $natural:1 (since we don't actually have Mongo's on-disk\n  // ordering available!)\n  test.throws(() => {\n    new Minimongo.Sorter({$natural: 1});\n  });\n\n  // No sort spec implies everything equal.\n  test.equal(new Minimongo.Sorter({}).getComparator()({a: 1}, {a: 2}), 0);\n\n  // All sorts of array edge cases!\n  // Increasing sort sorts by the smallest element it finds; 1 < 2.\n  verify({a: 1}, [\n    {a: [1, 10, 20]},\n    {a: [5, 2, 99]},\n  ]);\n  // Decreasing sorts by largest it finds; 99 > 20.\n  verify({a: -1}, [\n    {a: [5, 2, 99]},\n    {a: [1, 10, 20]},\n  ]);\n  // Can also sort by specific array indices.\n  verify({'a.1': 1}, [\n    {a: [5, 2, 99]},\n    {a: [1, 10, 20]},\n  ]);\n  // We do NOT expand sub-arrays, so the minimum in the second doc is 5, not\n  // -20. (Numbers always sort before arrays.)\n  verify({a: 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  // The maximum in each of these is the array, since arrays are \"greater\" than\n  // numbers. And [10, 15] is greater than [-5, -20].\n  verify({a: -1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  // 'a.0' here ONLY means \"first element of a\", not \"first element of something\n  // found in a\", so it CANNOT find the 10 or -5.\n  verify({'a.0': 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  verify({'a.0': -1}, [\n    {a: [5, [-5, -20], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  // Similarly, this is just comparing [-5,-20] to [10, 15].\n  verify({'a.1': 1}, [\n    {a: [5, [-5, -20], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  verify({'a.1': -1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  // Here we are just comparing [10,15] directly to [19,3] (and NOT also\n  // iterating over the numbers; this is implemented by setting dontIterate in\n  // makeLookupFunction).  So [10,15]<[19,3] even though 3 is the smallest\n  // number you can find there.\n  verify({'a.1': 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [19, 3], 18]},\n  ]);\n  verify({'a.1': -1}, [\n    {a: [5, [19, 3], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  // Minimal elements are 1 and 5.\n  verify({a: 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [19, 3], 18]},\n  ]);\n  // Maximal elements are [19,3] and [10,15] (because arrays sort higher than\n  // numbers), even though there's a 20 floating around.\n  verify({a: -1}, [\n    {a: [5, [19, 3], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  // Maximal elements are [10,15] and [3,19].  [10,15] is bigger even though 19\n  // is the biggest number in them, because array comparison is lexicographic.\n  verify({a: -1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [3, 19], 18]},\n  ]);\n\n  // (0,4) < (0,5), so they go in this order.  It's not correct to consider\n  // (0,3) as a sort key for the second document because they come from\n  // different a-branches.\n  verify({'a.x': 1, 'a.y': 1}, [\n    {a: [{x: 0, y: 4}]},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}]},\n  ]);\n\n  verify({'a.0.s': 1}, [\n    {a: [ {s: 1} ]},\n    {a: [ {s: 2} ]},\n  ]);\n});\n\nTinytest.add('minimongo - sort', test => {\n  const c = new LocalCollection();\n  for (let i = 0; i < 50; i++) {\n    for (let j = 0; j < 2; j++) {c.insert({a: i, b: j, _id: `${i}_${j}`});}\n  }\n\n  test.equal(c.find(null, {sort: {b: -1, a: 1}, limit: 5}).fetch(), []);\n  test.equal(c.find(undefined, {sort: {b: -1, a: 1}, limit: 5}).fetch(), []);\n  test.equal(c.find(false, {sort: {b: -1, a: 1}, limit: 5}).fetch(), []);\n\n  test.equal(\n    c.find({a: {$gt: 10}}, {sort: {b: -1, a: 1}, limit: 5}).fetch(), [\n      {a: 11, b: 1, _id: '11_1'},\n      {a: 12, b: 1, _id: '12_1'},\n      {a: 13, b: 1, _id: '13_1'},\n      {a: 14, b: 1, _id: '14_1'},\n      {a: 15, b: 1, _id: '15_1'}]);\n\n  test.equal(\n    c.find({a: {$gt: 10}}, {sort: {b: -1, a: 1}, skip: 3, limit: 5}).fetch(), [\n      {a: 14, b: 1, _id: '14_1'},\n      {a: 15, b: 1, _id: '15_1'},\n      {a: 16, b: 1, _id: '16_1'},\n      {a: 17, b: 1, _id: '17_1'},\n      {a: 18, b: 1, _id: '18_1'}]);\n\n  test.equal(\n    c.find({a: {$gte: 20}}, {sort: {a: 1, b: -1}, skip: 50, limit: 5}).fetch(), [\n      {a: 45, b: 1, _id: '45_1'},\n      {a: 45, b: 0, _id: '45_0'},\n      {a: 46, b: 1, _id: '46_1'},\n      {a: 46, b: 0, _id: '46_0'},\n      {a: 47, b: 1, _id: '47_1'}]);\n});\n\nTinytest.add('minimongo - subkey sort', test => {\n  const c = new LocalCollection();\n\n  // normal case\n  c.insert({a: {b: 2}});\n  c.insert({a: {b: 1}});\n  c.insert({a: {b: 3}});\n  test.equal(\n    c.find({}, {sort: {'a.b': -1}}).fetch().map(doc => doc.a),\n    [{b: 3}, {b: 2}, {b: 1}]);\n\n  // isn't an object\n  c.insert({a: 1});\n  test.equal(\n    c.find({}, {sort: {'a.b': 1}}).fetch().map(doc => doc.a),\n    [1, {b: 1}, {b: 2}, {b: 3}]);\n\n  // complex object\n  c.insert({a: {b: {c: 1}}});\n  test.equal(\n    c.find({}, {sort: {'a.b': -1}}).fetch().map(doc => doc.a),\n    [{b: {c: 1}}, {b: 3}, {b: 2}, {b: 1}, 1]);\n\n  // no such top level prop\n  c.insert({c: 1});\n  test.equal(\n    c.find({}, {sort: {'a.b': -1}}).fetch().map(doc => doc.a),\n    [{b: {c: 1}}, {b: 3}, {b: 2}, {b: 1}, 1, undefined]);\n\n  // no such mid level prop. just test that it doesn't throw.\n  test.equal(c.find({}, {sort: {'a.nope.c': -1}}).count(), 6);\n});\n\nTinytest.add('minimongo - array sort', test => {\n  const c = new LocalCollection();\n\n  // \"up\" and \"down\" are the indices that the docs should have when sorted\n  // ascending and descending by \"a.x\" respectively. They are not reverses of\n  // each other: when sorting ascending, you use the minimum value you can find\n  // in the document, and when sorting descending, you use the maximum value you\n  // can find. So [1, 4] shows up in the 1 slot when sorting ascending and the 4\n  // slot when sorting descending.\n  //\n  // Similarly, \"selected\" is the index that the doc should have in the query\n  // that sorts ascending on \"a.x\" and selects {'a.x': {$gt: 1}}. In this case,\n  // the 1 in [1, 4] may not be used as a sort key.\n  c.insert({up: 1, down: 1, selected: 2, a: {x: [1, 4]}});\n  c.insert({up: 2, down: 2, selected: 0, a: [{x: [2]}, {x: 3}]});\n  c.insert({up: 0, down: 4,              a: {x: 0}});\n  c.insert({up: 3, down: 3, selected: 1, a: {x: 2.5}});\n  c.insert({up: 4, down: 0, selected: 3, a: {x: 5}});\n\n  // Test that the the documents in \"cursor\" contain values with the name\n  // \"field\" running from 0 to the max value of that name in the collection.\n  const testCursorMatchesField = (cursor, field) => {\n    const fieldValues = [];\n    c.find().forEach(doc => {\n      if (hasOwn.call(doc, field)) {fieldValues.push(doc[field]);}\n    });\n    test.equal(cursor.fetch().map(doc => doc[field]),\n      Array.from({length: Math.max(...fieldValues) + 1}, (x, i) => i));\n  };\n\n  testCursorMatchesField(c.find({}, {sort: {'a.x': 1}}), 'up');\n  testCursorMatchesField(c.find({}, {sort: {'a.x': -1}}), 'down');\n  testCursorMatchesField(c.find({'a.x': {$gt: 1}}, {sort: {'a.x': 1}}),\n    'selected');\n});\n\nTinytest.add('minimongo - sort keys', test => {\n  const keyListToObject = keyList => {\n    const obj = {};\n    keyList.forEach(key => {\n      obj[EJSON.stringify(key)] = true;\n    });\n    return obj;\n  };\n\n  const testKeys = (sortSpec, doc, expectedKeyList) => {\n    const expectedKeys = keyListToObject(expectedKeyList);\n    const sorter = new Minimongo.Sorter(sortSpec);\n\n    const actualKeyList = [];\n    sorter._generateKeysFromDoc(doc, key => {\n      actualKeyList.push(key);\n    });\n    const actualKeys = keyListToObject(actualKeyList);\n    test.equal(actualKeys, expectedKeys);\n  };\n\n  const testParallelError = (sortSpec, doc) => {\n    const sorter = new Minimongo.Sorter(sortSpec);\n    test.throws(() => {\n      sorter._generateKeysFromDoc(doc, () => {});\n    }, /parallel arrays/);\n  };\n\n  // Just non-array fields.\n  testKeys({'a.x': 1, 'a.y': 1},\n    {a: {x: 0, y: 5}},\n    [[0, 5]]);\n\n  // Ensure that we don't get [0,3] and [1,5].\n  testKeys({'a.x': 1, 'a.y': 1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}]},\n    [[0, 5], [1, 3]]);\n\n  // Ensure we can combine \"array fields\" with \"non-array fields\".\n  testKeys({'a.x': 1, 'a.y': 1, b: -1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}], b: 42},\n    [[0, 5, 42], [1, 3, 42]]);\n  testKeys({b: -1, 'a.x': 1, 'a.y': 1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}], b: 42},\n    [[42, 0, 5], [42, 1, 3]]);\n  testKeys({'a.x': 1, b: -1, 'a.y': 1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}], b: 42},\n    [[0, 42, 5], [1, 42, 3]]);\n  testKeys({a: 1, b: 1},\n    {a: [1, 2, 3], b: 42},\n    [[1, 42], [2, 42], [3, 42]]);\n\n  // Don't support multiple arrays at the same level.\n  testParallelError({a: 1, b: 1},\n    {a: [1, 2, 3], b: [42]});\n\n  // We are MORE STRICT than Mongo here; Mongo supports this!\n  // XXX support this too  #NestedArraySort\n  testParallelError({'a.x': 1, 'a.y': 1},\n    {a: [{x: 1, y: [2, 3]},\n      {x: 2, y: [4, 5]}]});\n});\n\nTinytest.add('minimongo - sort key filter', test => {\n  const testOrder = (sortSpec, selector, doc1, doc2) => {\n    const matcher = new Minimongo.Matcher(selector);\n    const sorter = new Minimongo.Sorter(sortSpec, {matcher});\n    const comparator = sorter.getComparator();\n    const comparison = comparator(doc1, doc2);\n    test.isTrue(comparison < 0);\n  };\n\n  testOrder({'a.x': 1}, {'a.x': {$gt: 1}},\n    {a: {x: 3}},\n    {a: {x: [1, 4]}});\n  testOrder({'a.x': 1}, {'a.x': {$gt: 0}},\n    {a: {x: [1, 4]}},\n    {a: {x: 3}});\n\n  const keyCompatible = (sortSpec, selector, key, compatible) => {\n    const matcher = new Minimongo.Matcher(selector);\n    const sorter = new Minimongo.Sorter(sortSpec, {matcher});\n    const actual = sorter._keyCompatibleWithSelector(key);\n    test.equal(actual, compatible);\n  };\n\n  keyCompatible({a: 1}, {a: 5}, [5], true);\n  keyCompatible({a: 1}, {a: 5}, [8], false);\n  keyCompatible({a: 1}, {a: {x: 5}}, [{x: 5}], true);\n  keyCompatible({a: 1}, {a: {x: 5}}, [{x: 5, y: 9}], false);\n  keyCompatible({'a.x': 1}, {a: {x: 5}}, [5], true);\n  // To confirm this:\n  //   > db.x.insert({_id: \"q\", a: [{x:1}, {x:5}], b: 2})\n  //   > db.x.insert({_id: \"w\", a: [{x:5}, {x:10}], b: 1})\n  //   > db.x.find({}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({a: {x:5}}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({'a.x': 5}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  // ie, only the last one manages to trigger the key compatibility code,\n  // not the previous one.  (The \"b\" sort is necessary because when the key\n  // compatibility code *does* kick in, both documents only end up with \"5\"\n  // for the first field as their only sort key, and we need to differentiate\n  // somehow...)\n  keyCompatible({'a.x': 1}, {a: {x: 5}}, [1], true);\n  keyCompatible({'a.x': 1}, {'a.x': 5}, [5], true);\n  keyCompatible({'a.x': 1}, {'a.x': 5}, [1], false);\n\n  // Regex key check.\n  keyCompatible({a: 1}, {a: /^foo+/}, ['foo'], true);\n  keyCompatible({a: 1}, {a: /^foo+/}, ['foooo'], true);\n  keyCompatible({a: 1}, {a: /^foo+/}, ['foooobar'], true);\n  keyCompatible({a: 1}, {a: /^foo+/}, ['afoooo'], false);\n  keyCompatible({a: 1}, {a: /^foo+/}, [''], false);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['foo'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['foooo'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['foooobar'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['afoooo'], false);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, [''], false);\n\n  keyCompatible({a: 1}, {a: /^foo+/i}, ['foo'], true);\n  // Key compatibility check appears to be turned off for regexps with flags.\n  keyCompatible({a: 1}, {a: /^foo+/i}, ['bar'], true);\n  keyCompatible({a: 1}, {a: /^foo+/m}, ['bar'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+', $options: 'i'}}, ['bar'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+', $options: 'm'}}, ['bar'], true);\n\n  // Multiple keys!\n  keyCompatible({a: 1, b: 1, c: 1},\n    {a: {$gt: 5}, c: {$lt: 3}}, [6, 'bla', 2], true);\n  keyCompatible({a: 1, b: 1, c: 1},\n    {a: {$gt: 5}, c: {$lt: 3}}, [6, 'bla', 4], false);\n  keyCompatible({a: 1, b: 1, c: 1},\n    {a: {$gt: 5}, c: {$lt: 3}}, [3, 'bla', 1], false);\n  // No filtering is done (ie, all keys are compatible) if the first key isn't\n  // constrained.\n  keyCompatible({a: 1, b: 1, c: 1},\n    {c: {$lt: 3}}, [3, 'bla', 4], true);\n});\n\nTinytest.add('minimongo - sort function', test => {\n  const c = new LocalCollection();\n\n  c.insert({a: 1});\n  c.insert({a: 10});\n  c.insert({a: 5});\n  c.insert({a: 7});\n  c.insert({a: 2});\n  c.insert({a: 4});\n  c.insert({a: 3});\n\n  const sortFunction = (doc1, doc2) => doc2.a - doc1.a;\n\n  test.equal(c.find({}, {sort: sortFunction}).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.notEqual(c.find({}).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.equal(c.find({}, {sort: {a: -1}}).fetch(), c.find({}).fetch().sort(sortFunction));\n});\n\nTinytest.add('minimongo - binary search', test => {\n  const forwardCmp = (a, b) => a - b;\n\n  const backwardCmp = (a, b) => -1 * forwardCmp(a, b);\n\n  const checkSearch = (cmp, array, value, expected, message) => {\n    const actual = LocalCollection._binarySearch(cmp, array, value);\n    if (expected != actual) {\n      test.fail({type: 'minimongo-binary-search',\n        message: `${message} : Expected index ${expected} but had ${actual}`,\n      });\n    }\n  };\n\n  const checkSearchForward = (array, value, expected, message) => {\n    checkSearch(forwardCmp, array, value, expected, message);\n  };\n  const checkSearchBackward = (array, value, expected, message) => {\n    checkSearch(backwardCmp, array, value, expected, message);\n  };\n\n  checkSearchForward([1, 2, 5, 7], 4, 2, 'Inner insert');\n  checkSearchForward([1, 2, 3, 4], 3, 3, 'Inner insert, equal value');\n  checkSearchForward([1, 2, 5], 4, 2, 'Inner insert, odd length');\n  checkSearchForward([1, 3, 5, 6], 9, 4, 'End insert');\n  checkSearchForward([1, 3, 5, 6], 0, 0, 'Beginning insert');\n  checkSearchForward([1], 0, 0, 'Single array, less than.');\n  checkSearchForward([1], 1, 1, 'Single array, equal.');\n  checkSearchForward([1], 2, 1, 'Single array, greater than.');\n  checkSearchForward([], 1, 0, 'Empty array');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 1, 3, 'Highly degenerate array, lower');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, upper');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 1, 0, 'Highly degenerate array, lower');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, equal');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 3, 7, 'Highly degenerate array, upper');\n\n  checkSearchBackward([7, 5, 2, 1], 4, 2, 'Backward: Inner insert');\n  checkSearchBackward([4, 3, 2, 1], 3, 2, 'Backward: Inner insert, equal value');\n  checkSearchBackward([5, 2, 1], 4, 1, 'Backward: Inner insert, odd length');\n  checkSearchBackward([6, 5, 3, 1], 9, 0, 'Backward: Beginning insert');\n  checkSearchBackward([6, 5, 3, 1], 0, 4, 'Backward: End insert');\n  checkSearchBackward([1], 0, 1, 'Backward: Single array, less than.');\n  checkSearchBackward([1], 1, 1, 'Backward: Single array, equal.');\n  checkSearchBackward([1], 2, 0, 'Backward: Single array, greater than.');\n  checkSearchBackward([], 1, 0, 'Backward: Empty array');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 1, 7, 'Backward: Degenerate array, lower');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 2, 4, 'Backward: Degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 1, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 3, 0, 'Backward: Highly degenerate array, upper');\n});\n\nTinytest.add('minimongo - modify', test => {\n  const modifyWithQuery = (doc, query, mod, expected) => {\n    const coll = new LocalCollection;\n    coll.insert(doc);\n    // The query is relevant for 'a.$.b'.\n    coll.update(query, mod);\n    const actual = coll.findOne();\n\n    if (!expected._id) {\n      delete actual._id;  // added by insert\n    }\n\n    if (typeof expected === 'function') {\n      expected(actual, EJSON.stringify({input: doc, mod}));\n    } else {\n      test.equal(actual, expected, EJSON.stringify({input: doc, mod}));\n    }\n  };\n  const modify = (doc, mod, expected) => {\n    modifyWithQuery(doc, {}, mod, expected);\n  };\n  const exceptionWithQuery = (doc, query, mod) => {\n    const coll = new LocalCollection;\n    coll.insert(doc);\n    test.throws(() => {\n      coll.update(query, mod);\n    });\n  };\n  const exception = (doc, mod) => {\n    exceptionWithQuery(doc, {}, mod);\n  };\n\n  const upsert = (query, mod, expected) => {\n    const coll = new LocalCollection;\n\n    const result = coll.upsert(query, mod);\n\n    const actual = coll.findOne();\n\n    if (expected._id) {\n      test.equal(result.insertedId, expected._id);\n    } else {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  const upsertUpdate = (initialDoc, query, mod, expected) => {\n    const collection = new LocalCollection;\n\n    collection.insert(initialDoc);\n\n    const result = collection.upsert(query, mod);\n    const actual = collection.findOne();\n\n    if (!expected._id) {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  const upsertException = (query, mod) => {\n    const coll = new LocalCollection;\n    test.throws(() => {\n      coll.upsert(query, mod);\n    });\n  };\n\n  // document replacement\n  modify({}, {}, {});\n  modify({a: 12}, {}, {}); // tested against mongodb\n  modify({a: 12}, {a: 13}, {a: 13});\n  modify({a: 12, b: 99}, {a: 13}, {a: 13});\n  exception({a: 12}, {a: 13, $set: {b: 13}});\n  exception({a: 12}, {$set: {b: 13}, a: 13});\n\n  exception({a: 12}, {$a: 13}); // invalid operator\n  exception({a: 12}, {b: {$a: 13}});\n  exception({a: 12}, {b: {'a.b': 13}});\n  exception({a: 12}, {b: {'\\0a': 13}});\n\n  // keys\n  modify({}, {$set: {a: 12}}, {a: 12});\n  modify({}, {$set: {'a.b': 12}}, {a: {b: 12}});\n  modify({}, {$set: {'a.b.c': 12}}, {a: {b: {c: 12}}});\n  modify({a: {d: 99}}, {$set: {'a.b.c': 12}}, {a: {d: 99, b: {c: 12}}});\n  modify({}, {$set: {'a.b.3.c': 12}}, {a: {b: {3: {c: 12}}}});\n  modify({a: {b: []}}, {$set: {'a.b.3.c': 12}}, {\n    a: {b: [null, null, null, {c: 12}]}});\n  exception({a: [null, null, null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, 1, null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, 'x', null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, [], null]}, {$set: {'a.1.b': 12}});\n  modify({a: [null, null, null]}, {$set: {'a.3.b': 12}}, {\n    a: [null, null, null, {b: 12}]});\n  exception({a: []}, {$set: {'a.b': 12}});\n  exception({a: 12}, {$set: {'a.b': 99}}); // tested on mongo\n  exception({a: 'x'}, {$set: {'a.b': 99}});\n  exception({a: true}, {$set: {'a.b': 99}});\n  exception({a: null}, {$set: {'a.b': 99}});\n  modify({a: {}}, {$set: {'a.3': 12}}, {a: {3: 12}});\n  modify({a: []}, {$set: {'a.3': 12}}, {a: [null, null, null, 12]});\n  exception({}, {$set: {'': 12}}); // tested on mongo\n  exception({}, {$set: {'.': 12}}); // tested on mongo\n  exception({}, {$set: {'a.': 12}}); // tested on mongo\n  exception({}, {$set: {'. ': 12}}); // tested on mongo\n  exception({}, {$inc: {'... ': 12}}); // tested on mongo\n  exception({}, {$set: {'a..b': 12}}); // tested on mongo\n  modify({a: [1, 2, 3]}, {$set: {'a.01': 99}}, {a: [1, 99, 3]});\n  modify({a: [1, {a: 98}, 3]}, {$set: {'a.01.b': 99}}, {a: [1, {a: 98, b: 99}, 3]});\n  modify({}, {$set: {'2.a.b': 12}}, {2: {a: {b: 12}}}); // tested\n  exception({x: []}, {$set: {'x.2..a': 99}});\n  modify({x: [null, null]}, {$set: {'x.2.a': 1}}, {x: [null, null, {a: 1}]});\n  exception({x: [null, null]}, {$set: {'x.1.a': 1}});\n\n  // a.$.b\n  modifyWithQuery({a: [{x: 2}, {x: 4}]}, {'a.x': 4}, {$set: {'a.$.z': 9}},\n    {a: [{x: 2}, {x: 4, z: 9}]});\n  exception({a: [{x: 2}, {x: 4}]}, {$set: {'a.$.z': 9}});\n  exceptionWithQuery({a: [{x: 2}, {x: 4}], b: 5}, {b: 5}, {$set: {'a.$.z': 9}});\n  // can't have two $\n  exceptionWithQuery({a: [{x: [2]}]}, {'a.x': 2}, {$set: {'a.$.x.$': 9}});\n  modifyWithQuery({a: [5, 6, 7]}, {a: 6}, {$set: {'a.$': 9}}, {a: [5, 9, 7]});\n  modifyWithQuery({a: [{b: [{c: 9}, {c: 10}]}, {b: {c: 11}}]}, {'a.b.c': 10},\n    {$unset: {'a.$.b': 1}}, {a: [{}, {b: {c: 11}}]});\n  modifyWithQuery({a: [{b: [{c: 9}, {c: 10}]}, {b: {c: 11}}]}, {'a.b.c': 11},\n    {$unset: {'a.$.b': 1}},\n    {a: [{b: [{c: 9}, {c: 10}]}, {}]});\n  modifyWithQuery({a: [1]}, {'a.0': 1}, {$set: {'a.$': 5}}, {a: [5]});\n  modifyWithQuery({a: [9]}, {a: {$mod: [2, 1]}}, {$set: {'a.$': 5}}, {a: [5]});\n  // Negatives don't set '$'.\n  exceptionWithQuery({a: [1]}, {$not: {a: 2}}, {$set: {'a.$': 5}});\n  exceptionWithQuery({a: [1]}, {'a.0': {$ne: 2}}, {$set: {'a.$': 5}});\n  // One $or clause works.\n  modifyWithQuery({a: [{x: 2}, {x: 4}]},\n    {$or: [{'a.x': 4}]}, {$set: {'a.$.z': 9}},\n    {a: [{x: 2}, {x: 4, z: 9}]});\n  // More $or clauses throw.\n  exceptionWithQuery({a: [{x: 2}, {x: 4}]},\n    {$or: [{'a.x': 4}, {'a.x': 4}]},\n    {$set: {'a.$.z': 9}});\n  // $and uses the last one.\n  modifyWithQuery({a: [{x: 1}, {x: 3}]},\n    {$and: [{'a.x': 1}, {'a.x': 3}]},\n    {$set: {'a.$.x': 5}},\n    {a: [{x: 1}, {x: 5}]});\n  modifyWithQuery({a: [{x: 1}, {x: 3}]},\n    {$and: [{'a.x': 3}, {'a.x': 1}]},\n    {$set: {'a.$.x': 5}},\n    {a: [{x: 5}, {x: 3}]});\n  // Same goes for the implicit AND of a document selector.\n  modifyWithQuery({a: [{x: 1}, {y: 3}]},\n    {'a.x': 1, 'a.y': 3},\n    {$set: {'a.$.z': 5}},\n    {a: [{x: 1}, {y: 3, z: 5}]});\n  modifyWithQuery({a: [{x: 1}, {y: 1}, {x: 1, y: 1}]},\n    {a: {$elemMatch: {x: 1, y: 1}}},\n    {$set: {'a.$.x': 2}},\n    {a: [{x: 1}, {y: 1}, {x: 2, y: 1}]});\n  modifyWithQuery({a: [{b: [{x: 1}, {y: 1}, {x: 1, y: 1}]}]},\n    {'a.b': {$elemMatch: {x: 1, y: 1}}},\n    {$set: {'a.$.b': 3}},\n    {a: [{b: 3}]});\n  // with $near, make sure it does not find the closest one (#3599)\n  modifyWithQuery({a: []},\n    {'a.b': {$near: [5, 5]}},\n    {$set: {'a.$.b': 'k'}},\n    {a: []});\n  modifyWithQuery({a: [{b: [ [3, 3], [4, 4] ]}]},\n    {'a.b': {$near: [5, 5]}},\n    {$set: {'a.$.b': 'k'}},\n    {a: [{b: 'k'}]});\n  modifyWithQuery({a: [{b: [1, 1]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [5, 5]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [1, 1]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [9, 9], $maxDistance: 1}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [1, 1]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [9, 9]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [9, 9]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [9, 9]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [4, 3]},\n    {c: [1, 1]}]},\n  {'a.c': {$near: [1, 1]}},\n  {$set: {'a.$.c': 'k'}},\n  {a: [{c: 'k', b: [4, 3]}, {c: [1, 1]}]});\n  modifyWithQuery({a: [{c: [9, 9]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [1, 1]}]},\n  {'a.b': {$near: [1, 1]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{c: [9, 9], b: 'k'}, {b: [ [3, 3], [4, 4]]}, {b: [1, 1]}]});\n  modifyWithQuery({a: [{c: [9, 9], b: [4, 3]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [1, 1]}]},\n  {'a.b': {$near: [1, 1]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{c: [9, 9], b: 'k'}, {b: [ [3, 3], [4, 4]]}, {b: [1, 1]}]});\n\n  // $inc\n  modify({a: 1, b: 2}, {$inc: {a: 10}}, {a: 11, b: 2});\n  modify({a: 1, b: 2}, {$inc: {c: 10}}, {a: 1, b: 2, c: 10});\n  exception({a: 1}, {$inc: {a: '10'}});\n  exception({a: 1}, {$inc: {a: true}});\n  exception({a: 1}, {$inc: {a: [10]}});\n  exception({a: '1'}, {$inc: {a: 10}});\n  exception({a: [1]}, {$inc: {a: 10}});\n  exception({a: {}}, {$inc: {a: 10}});\n  exception({a: false}, {$inc: {a: 10}});\n  exception({a: null}, {$inc: {a: 10}});\n  modify({a: [1, 2]}, {$inc: {'a.1': 10}}, {a: [1, 12]});\n  modify({a: [1, 2]}, {$inc: {'a.2': 10}}, {a: [1, 2, 10]});\n  modify({a: [1, 2]}, {$inc: {'a.3': 10}}, {a: [1, 2, null, 10]});\n  modify({a: {b: 2}}, {$inc: {'a.b': 10}}, {a: {b: 12}});\n  modify({a: {b: 2}}, {$inc: {'a.c': 10}}, {a: {b: 2, c: 10}});\n  exception({}, {$inc: {_id: 1}});\n\n  // $currentDate\n  modify({}, {$currentDate: {a: true}}, (result, msg) => { test.instanceOf(result.a, Date, msg); });\n  modify({}, {$currentDate: {a: {$type: 'date'}}}, (result, msg) => { test.instanceOf(result.a, Date, msg); });\n  exception({}, {$currentDate: {a: false}});\n  exception({}, {$currentDate: {a: {}}});\n  exception({}, {$currentDate: {a: {$type: 'timestamp'}}});\n\n  // $min\n  modify({a: 1, b: 2}, {$min: {b: 1}}, {a: 1, b: 1});\n  modify({a: 1, b: 2}, {$min: {b: 3}}, {a: 1, b: 2});\n  modify({a: 1, b: 2}, {$min: {c: 10}}, {a: 1, b: 2, c: 10});\n  exception({a: 1}, {$min: {a: '10'}});\n  exception({a: 1}, {$min: {a: true}});\n  exception({a: 1}, {$min: {a: [10]}});\n  exception({a: '1'}, {$min: {a: 10}});\n  exception({a: [1]}, {$min: {a: 10}});\n  exception({a: {}}, {$min: {a: 10}});\n  exception({a: false}, {$min: {a: 10}});\n  exception({a: null}, {$min: {a: 10}});\n  modify({a: [1, 2]}, {$min: {'a.1': 1}}, {a: [1, 1]});\n  modify({a: [1, 2]}, {$min: {'a.1': 3}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$min: {'a.2': 10}}, {a: [1, 2, 10]});\n  modify({a: [1, 2]}, {$min: {'a.3': 10}}, {a: [1, 2, null, 10]});\n  modify({a: {b: 2}}, {$min: {'a.b': 1}}, {a: {b: 1}});\n  modify({a: {b: 2}}, {$min: {'a.c': 10}}, {a: {b: 2, c: 10}});\n  exception({}, {$min: {_id: 1}});\n\n  // $max\n  modify({a: 1, b: 2}, {$max: {b: 1}}, {a: 1, b: 2});\n  modify({a: 1, b: 2}, {$max: {b: 3}}, {a: 1, b: 3});\n  modify({a: 1, b: 2}, {$max: {c: 10}}, {a: 1, b: 2, c: 10});\n  exception({a: 1}, {$max: {a: '10'}});\n  exception({a: 1}, {$max: {a: true}});\n  exception({a: 1}, {$max: {a: [10]}});\n  exception({a: '1'}, {$max: {a: 10}});\n  exception({a: [1]}, {$max: {a: 10}});\n  exception({a: {}}, {$max: {a: 10}});\n  exception({a: false}, {$max: {a: 10}});\n  exception({a: null}, {$max: {a: 10}});\n  modify({a: [1, 2]}, {$max: {'a.1': 3}}, {a: [1, 3]});\n  modify({a: [1, 2]}, {$max: {'a.1': 1}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$max: {'a.2': 10}}, {a: [1, 2, 10]});\n  modify({a: [1, 2]}, {$max: {'a.3': 10}}, {a: [1, 2, null, 10]});\n  modify({a: {b: 2}}, {$max: {'a.b': 3}}, {a: {b: 3}});\n  modify({a: {b: 2}}, {$max: {'a.c': 10}}, {a: {b: 2, c: 10}});\n  exception({}, {$max: {_id: 1}});\n\n  // $set\n  modify({a: 1, b: 2}, {$set: {a: 10}}, {a: 10, b: 2});\n  modify({a: 1, b: 2}, {$set: {c: 10}}, {a: 1, b: 2, c: 10});\n  modify({a: 1, b: 2}, {$set: {a: {c: 10}}}, {a: {c: 10}, b: 2});\n  modify({a: [1, 2], b: 2}, {$set: {a: [3, 4]}}, {a: [3, 4], b: 2});\n  modify({a: [1, 2, 3], b: 2}, {$set: {'a.1': [3, 4]}},\n    {a: [1, [3, 4], 3], b: 2});\n  modify({a: [1], b: 2}, {$set: {'a.1': 9}}, {a: [1, 9], b: 2});\n  modify({a: [1], b: 2}, {$set: {'a.2': 9}}, {a: [1, null, 9], b: 2});\n  modify({a: {b: 1}}, {$set: {'a.c': 9}}, {a: {b: 1, c: 9}});\n  modify({}, {$set: {'x._id': 4}}, {x: {_id: 4}});\n\n  // Changing _id is disallowed\n  exception({}, {$set: {_id: 4}});\n  exception({_id: 1}, {$set: {_id: 4}});\n  modify({_id: 4}, {$set: {_id: 4}}, {_id: 4});  // not-changing _id is not bad\n  // restricted field names\n  exception({a: {}}, {$set: {a: {$a: 1}}});\n  exception({ a: {} }, { $set: { a: { c:\n              [{ b: { $a: 1 } }] } } });\n  exception({a: {}}, {$set: {a: {'\\0a': 1}}});\n  exception({a: {}}, {$set: {a: {'a.b': 1}}});\n\n  // $unset\n  modify({}, {$unset: {a: 1}}, {});\n  modify({a: 1}, {$unset: {a: 1}}, {});\n  modify({a: 1, b: 2}, {$unset: {a: 1}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: 0}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: false}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: null}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: [1]}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: {}}}, {b: 2});\n  modify({a: {b: 2, c: 3}}, {$unset: {'a.b': 1}}, {a: {c: 3}});\n  modify({a: [1, 2, 3]}, {$unset: {'a.1': 1}}, {a: [1, null, 3]}); // tested\n  modify({a: [1, 2, 3]}, {$unset: {'a.2': 1}}, {a: [1, 2, null]}); // tested\n  modify({a: [1, 2, 3]}, {$unset: {'a.x': 1}}, {a: [1, 2, 3]}); // tested\n  modify({a: {b: 1}}, {$unset: {'a.b.c.d': 1}}, {a: {b: 1}});\n  modify({a: {b: 1}}, {$unset: {'a.x.c.d': 1}}, {a: {b: 1}});\n  modify({a: {b: {c: 1}}}, {$unset: {'a.b.c': 1}}, {a: {b: {}}});\n  exception({}, {$unset: {_id: 1}});\n\n  // $push\n  modify({}, {$push: {a: 1}}, {a: [1]});\n  modify({a: []}, {$push: {a: 1}}, {a: [1]});\n  modify({a: [1]}, {$push: {a: 2}}, {a: [1, 2]});\n  exception({a: true}, {$push: {a: 1}});\n  modify({a: [1]}, {$push: {a: [2]}}, {a: [1, [2]]});\n  modify({a: []}, {$push: {'a.1': 99}}, {a: [null, [99]]}); // tested\n  modify({a: {}}, {$push: {'a.x': 99}}, {a: {x: [99]}});\n  modify({}, {$push: {a: {$each: [1, 2, 3]}}},\n    {a: [1, 2, 3]});\n  modify({a: []}, {$push: {a: {$each: [1, 2, 3]}}},\n    {a: [1, 2, 3]});\n  modify({a: [true]}, {$push: {a: {$each: [1, 2, 3]}}},\n    {a: [true, 1, 2, 3]});\n  modify({a: [true]}, {$push: {a: {$each: [1, 2, 3], $slice: -2}}},\n    {a: [2, 3]});\n  modify({a: [false, true]}, {$push: {a: {$each: [1], $slice: -2}}},\n    {a: [true, 1]});\n  modify(\n    {a: [{x: 3}, {x: 1}]},\n    {$push: {a: {\n      $each: [{x: 4}, {x: 2}],\n      $slice: -2,\n      $sort: {x: 1},\n    }}},\n    {a: [{x: 3}, {x: 4}]});\n  modify({}, {$push: {a: {$each: [1, 2, 3], $slice: 0}}}, {a: []});\n  modify({a: [1, 2]}, {$push: {a: {$each: [1, 2, 3], $slice: 0}}}, {a: []});\n  // $push with $position modifier\n  // No negative number for $position\n  exception({a: []}, {$push: {a: {$each: [0], $position: -1}}});\n  modify({a: [1, 2]}, {$push: {a: {$each: [0], $position: 0}}},\n    {a: [0, 1, 2]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [-1, 0], $position: 0}}},\n    {a: [-1, 0, 1, 2]});\n  modify({a: [1, 3]}, {$push: {a: {$each: [2], $position: 1}}}, {a: [1, 2, 3]});\n  modify({a: [1, 4]}, {$push: {a: {$each: [2, 3], $position: 1}}},\n    {a: [1, 2, 3, 4]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [3], $position: 3}}}, {a: [1, 2, 3]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [3], $position: 99}}},\n    {a: [1, 2, 3]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [3], $position: 99, $slice: -2}}},\n    {a: [2, 3]});\n  modify(\n    {a: [{x: 1}, {x: 2}]},\n    {$push: {a: {$each: [{x: 3}], $position: 0, $sort: {x: 1}, $slice: -3}}},\n    {a: [{x: 1}, {x: 2}, {x: 3}]}\n  );\n  modify(\n    {a: [{x: 1}, {x: 2}]},\n    {$push: {a: {$each: [{x: 3}], $position: 0, $sort: {x: 1}, $slice: 0}}},\n    {a: []}\n  );\n  // restricted field names\n  exception({}, {$push: {$a: 1}});\n  exception({}, {$push: {'\\0a': 1}});\n  exception({}, {$push: {a: {$a: 1}}});\n  exception({}, {$push: {a: {$each: [{$a: 1}]}}});\n  exception({}, {$push: {a: {$each: [{'a.b': 1}]}}});\n  exception({}, {$push: {a: {$each: [{'\\0a': 1}]}}});\n  modify({}, {$push: {a: {$each: [{'': 1}]}}}, {a: [ { '': 1 } ]});\n  modify({}, {$push: {a: {$each: [{' ': 1}]}}}, {a: [ { ' ': 1 } ]});\n  exception({}, {$push: {a: {$each: [{'.': 1}]}}});\n\n  // #issue 5167\n  // $push $slice with positive numbers\n  modify({}, {$push: {a: {$each: [], $slice: 5}}}, {a: []});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [], $slice: 1}}}, {a: [1]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 1}}}, {a: [1]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 2}}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 4}}}, {a: [1, 2, 3, 4]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 5}}}, {a: [1, 2, 3, 4, 5]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 10}}}, {a: [1, 2, 3, 4, 5]});\n\n\n  // $pushAll\n  modify({}, {$pushAll: {a: [1]}}, {a: [1]});\n  modify({a: []}, {$pushAll: {a: [1]}}, {a: [1]});\n  modify({a: [1]}, {$pushAll: {a: [2]}}, {a: [1, 2]});\n  modify({}, {$pushAll: {a: [1, 2]}}, {a: [1, 2]});\n  modify({a: []}, {$pushAll: {a: [1, 2]}}, {a: [1, 2]});\n  modify({a: [1]}, {$pushAll: {a: [2, 3]}}, {a: [1, 2, 3]});\n  modify({}, {$pushAll: {a: []}}, {a: []});\n  modify({a: []}, {$pushAll: {a: []}}, {a: []});\n  modify({a: [1]}, {$pushAll: {a: []}}, {a: [1]});\n  exception({a: true}, {$pushAll: {a: [1]}});\n  exception({a: []}, {$pushAll: {a: 1}});\n  modify({a: []}, {$pushAll: {'a.1': [99]}}, {a: [null, [99]]});\n  modify({a: []}, {$pushAll: {'a.1': []}}, {a: [null, []]});\n  modify({a: {}}, {$pushAll: {'a.x': [99]}}, {a: {x: [99]}});\n  modify({a: {}}, {$pushAll: {'a.x': []}}, {a: {x: []}});\n  exception({a: [1]}, {$pushAll: {a: [{$a: 1}]}});\n  exception({a: [1]}, {$pushAll: {a: [{'\\0a': 1}]}});\n  exception({a: [1]}, {$pushAll: {a: [{'a.b': 1}]}});\n\n  // $addToSet\n  modify({}, {$addToSet: {a: 1}}, {a: [1]});\n  modify({a: []}, {$addToSet: {a: 1}}, {a: [1]});\n  modify({a: [1]}, {$addToSet: {a: 2}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 1}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 2}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 3}}, {a: [1, 2, 3]});\n  exception({a: true}, {$addToSet: {a: 1}});\n  modify({a: [1]}, {$addToSet: {a: [2]}}, {a: [1, [2]]});\n  modify({}, {$addToSet: {a: {x: 1}}}, {a: [{x: 1}]});\n  modify({a: [{x: 1}]}, {$addToSet: {a: {x: 1}}}, {a: [{x: 1}]});\n  modify({a: [{x: 1}]}, {$addToSet: {a: {x: 2}}}, {a: [{x: 1}, {x: 2}]});\n  modify({a: [{x: 1, y: 2}]}, {$addToSet: {a: {x: 1, y: 2}}},\n    {a: [{x: 1, y: 2}]});\n  modify({a: [{x: 1, y: 2}]}, {$addToSet: {a: {y: 2, x: 1}}},\n    {a: [{x: 1, y: 2}, {y: 2, x: 1}]});\n  modify({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, 4]}}}, {a: [1, 2, 3, 4]});\n  modify({}, {$addToSet: {a: {$each: []}}}, {a: []});\n  modify({}, {$addToSet: {a: {$each: [1]}}}, {a: [1]});\n  modify({a: []}, {$addToSet: {'a.1': 99}}, {a: [null, [99]]});\n  modify({a: {}}, {$addToSet: {'a.x': 99}}, {a: {x: [99]}});\n\n  // invalid field names\n  exception({}, {$addToSet: {a: {$b: 1}}});\n  exception({}, {$addToSet: {a: {'a.b': 1}}});\n  exception({}, {$addToSet: {a: {'a.': 1}}});\n  exception({}, {$addToSet: {a: {'\\u0000a': 1}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, {$a: 1}]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, {'\\0a': 1}]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, [{$a: 1}]]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, [{b: {c: [{a: 1}, {'d.s': 2}]}}]]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {b: [3, 1, [{b: {c: [{a: 1}, {'d.s': 2}]}}]]}}});\n  // $each is first element and thus an operator\n  modify({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, 4], b: 12}}}, {a: [ 1, 2, 3, 4 ]});\n  // this should fail because $each is now a field name (not first in object) and thus invalid field name with $\n  exception({a: [1, 2]}, {$addToSet: {a: {b: 12, $each: [3, 1, 4]}}});\n\n  // $pop\n  modify({}, {$pop: {a: 1}}, {}); // tested\n  modify({}, {$pop: {a: -1}}, {}); // tested\n  modify({a: []}, {$pop: {a: 1}}, {a: []});\n  modify({a: []}, {$pop: {a: -1}}, {a: []});\n  modify({a: [1, 2, 3]}, {$pop: {a: 1}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 10}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 0.001}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 0}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 'stuff'}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -1}}, {a: [2, 3]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -10}}, {a: [2, 3]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -0.001}}, {a: [2, 3]});\n  exception({a: true}, {$pop: {a: 1}});\n  exception({a: true}, {$pop: {a: -1}});\n  modify({a: []}, {$pop: {'a.1': 1}}, {a: []}); // tested\n  modify({a: [1, [2, 3], 4]}, {$pop: {'a.1': 1}}, {a: [1, [2], 4]});\n  modify({a: {}}, {$pop: {'a.x': 1}}, {a: {}}); // tested\n  modify({a: {x: [2, 3]}}, {$pop: {'a.x': 1}}, {a: {x: [2]}});\n\n  // $pull\n  modify({}, {$pull: {a: 1}}, {});\n  modify({}, {$pull: {'a.x': 1}}, {});\n  modify({a: {}}, {$pull: {'a.x': 1}}, {a: {}});\n  exception({a: true}, {$pull: {a: 1}});\n  modify({a: [2, 1, 2]}, {$pull: {a: 1}}, {a: [2, 2]});\n  modify({a: [2, 1, 2]}, {$pull: {a: 2}}, {a: [1]});\n  modify({a: [2, 1, 2]}, {$pull: {a: 3}}, {a: [2, 1, 2]});\n  modify({a: [1, null, 2, null]}, {$pull: {a: null}}, {a: [1, 2]});\n  modify({a: []}, {$pull: {a: 3}}, {a: []});\n  modify({a: [[2], [2, 1], [3]]}, {$pull: {a: [2, 1]}},\n    {a: [[2], [3]]}); // tested\n  modify({a: [{b: 1, c: 2}, {b: 2, c: 2}]}, {$pull: {a: {b: 1}}},\n    {a: [{b: 2, c: 2}]});\n  modify({a: [{b: 1, c: 2}, {b: 2, c: 2}]}, {$pull: {a: {c: 2}}},\n    {a: []});\n  // XXX implement this functionality!\n  // probably same refactoring as $elemMatch?\n  // modify({a: [1, 2, 3, 4]}, {$pull: {$gt: 2}}, {a: [1,2]}); fails!\n\n  // $pullAll\n  modify({}, {$pullAll: {a: [1]}}, {});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: []}}, {a: [1, 2, 3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [2]}}, {a: [1, 3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [2, 1]}}, {a: [3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [1, 2]}}, {a: [3]});\n  modify({}, {$pullAll: {'a.b.c': [2]}}, {});\n  exception({a: true}, {$pullAll: {a: [1]}});\n  exception({a: [1, 2, 3]}, {$pullAll: {a: 1}});\n  modify({x: [{a: 1}, {a: 1, b: 2}]}, {$pullAll: {x: [{a: 1}]}},\n    {x: [{a: 1, b: 2}]});\n\n  // $rename\n  modify({}, {$rename: {a: 'b'}}, {});\n  modify({a: [12]}, {$rename: {a: 'b'}}, {b: [12]});\n  modify({a: {b: 12}}, {$rename: {a: 'c'}}, {c: {b: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'a.c'}}, {a: {c: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'x'}}, {a: {}, x: 12}); // tested\n  modify({a: {b: 12}}, {$rename: {'a.b': 'q.r'}}, {a: {}, q: {r: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'q.2.r'}}, {a: {}, q: {2: {r: 12}}});\n  modify({a: {b: 12}, q: {}}, {$rename: {'a.b': 'q.2.r'}},\n    {a: {}, q: {2: {r: 12}}});\n  exception({a: {b: 12}, q: []}, {$rename: {'a.b': 'q.2'}}); // tested\n  exception({a: {b: 12}, q: []}, {$rename: {'a.b': 'q.2.r'}}); // tested\n  // These strange MongoDB behaviors throw.\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1.j': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n  exception({}, {$rename: {a: 'a'}});\n  exception({}, {$rename: {'a.b': 'a.b'}});\n  modify({a: 12, b: 13}, {$rename: {a: 'b'}}, {b: 12});\n  exception({a: [12]}, {$rename: {a: '$b'}});\n  exception({a: [12]}, {$rename: {a: '\\0a'}});\n\n  // $setOnInsert\n  modify({a: 0}, {$setOnInsert: {a: 12}}, {a: 0});\n  upsert({a: 12}, {$setOnInsert: {b: 12}}, {a: 12, b: 12});\n  upsert({a: 12}, {$setOnInsert: {_id: 'test'}}, {_id: 'test', a: 12});\n  upsert({'a.b': 10}, {$setOnInsert: {a: {b: 10, c: 12}}}, {a: {b: 10, c: 12}});\n  upsert({'a.b': 10}, {$setOnInsert: {c: 12}}, {a: {b: 10}, c: 12});\n  upsert({_id: 'test'}, {$setOnInsert: {c: 12}}, {_id: 'test', c: 12});\n  upsert('test', {$setOnInsert: {c: 12}}, {_id: 'test', c: 12});\n  upsertException({a: 0}, {$setOnInsert: {$a: 12}});\n  upsertException({a: 0}, {$setOnInsert: {'\\0a': 12}});\n  upsert({a: 0}, {$setOnInsert: {b: {a: 1}}}, {a: 0, b: {a: 1}});\n  upsertException({a: 0}, {$setOnInsert: {b: {$a: 1}}});\n  upsertException({a: 0}, {$setOnInsert: {b: {'a.b': 1}}});\n  upsertException({a: 0}, {$setOnInsert: {b: {'\\0a': 1}}});\n\n  // Test for https://github.com/meteor/meteor/issues/8775.\n  upsert(\n    { a: { $exists: true }},\n    { $setOnInsert: { a: 123 }},\n    { a: 123 }\n  );\n\n  // Tests for https://github.com/meteor/meteor/issues/8794.\n  const testObjectId = new MongoID.ObjectID();\n  upsert(\n    { _id: testObjectId },\n    { $setOnInsert: { a: 123 } },\n    { _id: testObjectId, a: 123 },\n  );\n  upsert(\n    { someOtherId: testObjectId },\n    { $setOnInsert: { a: 123 } },\n    { someOtherId: testObjectId, a: 123 },\n  );\n  upsert(\n    { a: { $eq: testObjectId } },\n    { $setOnInsert: { a: 123 } },\n    { a: 123 },\n  );\n  const testDate = new Date('2017-01-01');\n  upsert(\n    { someDate: testDate },\n    { $setOnInsert: { a: 123 } },\n    { someDate: testDate, a: 123 },\n  );\n  upsert(\n    {\n      a: Object.create(null, {\n        $exists: {\n          writable: true,\n          configurable: true,\n          value: true,\n        },\n      }),\n    },\n    { $setOnInsert: { a: 123 } },\n    { a: 123 },\n  );\n  upsert(\n    { foo: { $exists: true, $type: 2 }},\n    { $setOnInsert: { bar: 'baz' } },\n    { bar: 'baz' }\n  );\n  upsert(\n    { foo: {} },\n    { $setOnInsert: { bar: 'baz' } },\n    { foo: {}, bar: 'baz' }\n  );\n\n  // Tests for https://github.com/meteor/meteor/issues/8806\n  upsert({\"a\": {\"b\": undefined, \"c\": null}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": {\"b\": undefined, \"c\": null}, \"c\": \"foo\"})\n  upsert({\"a\": {\"$eq\": \"bar\" }}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  // $all with 1 statement is similar to $eq\n  upsert({\"a\": {\"$all\": [\"bar\"] }}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  upsert({\"a\": {\"$eq\": \"bar\" }, \"b\": \"baz\"}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"b\": \"baz\", \"c\": \"foo\"})\n   upsert({\"a\": {\"$exists\": true}}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n  upsert({\"a\": {\"$exists\": true, \"$eq\": \"foo\"}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"foo\", \"c\": \"foo\"})\n  upsert({\"a\": {\"$gt\": 3, \"$eq\": 2}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": 2, \"c\": \"foo\"})\n   // $and\n  upsert({\"$and\": [{\"a\": {\"$eq\": \"bar\"}}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  upsert({\"$and\": [{\"a\": {\"$all\": [\"bar\"]}}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  upsert({\"$and\": [{\"a\": {\"$all\": [\"bar\"]}}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n   // $or with one statement is handled similar to $and\n  upsert({\"$or\": [{\"a\": \"bar\"}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n   // $or with multiple statements is ignored\n  upsert({\"$or\": [{\"a\": \"bar\"}, {\"b\": \"baz\"}]}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // Negative logical operators are ignored\n  upsert({\"$nor\": [{\"a\": \"bar\"}]}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // Filter out empty objects after filtering out operators\n  upsert({\"a\": {\"$exists\": true}}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // But leave actual empty objects\n  upsert({\"a\": {}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": {}, \"c\": \"foo\"})\n    // Also filter out shorthand regexp notation\n  upsert({\"a\": /a/}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // Test nested fields\n  upsert({\"$and\": [{\"a.a\": \"foo\"}, {\"$or\": [{\"a.b\": \"baz\"}]}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": {\"a\": \"foo\", \"b\": \"baz\"}, \"c\": \"foo\"})\n   // Test for https://github.com/meteor/meteor/issues/5294\n  upsert({\"a\": {\"$ne\": 444}}, {\"$push\": {\"a\": 123}}, {\"a\": [123]})\n   // Mod takes precedence over query\n  upsert({\"a\": \"foo\"}, {\"a\": \"bar\"}, {\"a\": \"bar\"})\n  upsert({\"a\": \"foo\"}, {\"$set\":{\"a\": \"bar\"}}, {\"a\": \"bar\"})\n   // Replacement can take _id from query\n  upsert({\"_id\": \"foo\", \"foo\": \"bar\"}, {\"bar\": \"foo\"}, {\"_id\": \"foo\", \"bar\": \"foo\"})\n   // Replacement update keeps _id\n  upsertUpdate({\"_id\": \"foo\", \"bar\": \"baz\"}, {\"_id\":\"foo\"}, {\"bar\": \"crow\"}, {\"_id\": \"foo\", \"bar\": \"crow\"});\n  // Test for https://github.com/meteor/meteor/issues/9167\n  upsert({key: 123, keyName: '321'}, {$set: {name: 'Todo'}}, {key: 123, keyName: '321', name: 'Todo'});\n  upsertException({key: 123, \"key.name\": '321'}, {$set:{}});\n\n  // Nested fields don't work with literal objects\n  upsertException({\"a\": {}, \"a.b\": \"foo\"}, {});\n   // You can't have an ambiguous ID\n  upsertException({\"_id\":\"foo\"}, {\"_id\":\"bar\"});\n  upsertException({\"_id\":\"foo\"}, {\"$set\":{\"_id\":\"bar\"}});\n   // You can't set the same field twice\n  upsertException({\"$and\": [{\"a\": \"foo\"}, {\"a\": \"foo\"}]}, {}); //not even with same value\n  upsertException({\"a\": {\"$all\": [\"foo\", \"bar\"]}}, {});\n  upsertException({\"$and\": [{\"a\": {\"$eq\": \"foo\"}}, {\"$or\": [{\"a\": {\"$all\": [\"bar\"]}}]}]}, {});\n   // You can't have nested dotted fields\n  upsertException({\"a\": {\"foo.bar\": \"baz\"}}, {});\n   // You can't have dollar-prefixed fields above the first level (logical operators not counted)\n  upsertException({\"a\": {\"a\": {\"$eq\": \"foo\"}}}, {});\n  upsertException({\"a\": {\"a\": {\"$exists\": true}}}, {});\n   // You can't mix operators with other fields\n  upsertException({\"a\": {\"$eq\": \"bar\", \"b\": \"foo\"}}, {})\n  upsertException({\"a\": {\"b\": \"foo\", \"$eq\": \"bar\"}}, {})\n\n  const mongoIdForUpsert = new MongoID.ObjectID('44915733af80844fa1cef07a');\n  upsert({_id: mongoIdForUpsert}, {$setOnInsert: {a: 123}}, {a: 123})\n\n  // Test for https://github.com/meteor/meteor/issues/7758\n  upsert({n_id: mongoIdForUpsert, c_n: \"bar\"},\n    {$set: { t_t_o: \"foo\"}},\n    {n_id: mongoIdForUpsert, t_t_o: \"foo\", c_n: \"bar\"});\n\n  exception({}, {$set: {_id: 'bad'}});\n\n  // $bit\n  // unimplemented\n\n  // XXX test case sensitivity of modops\n  // XXX for each (most) modop, test that it performs a deep copy\n});\n\n// XXX test update() (selecting docs, multi, upsert..)\n\nTinytest.add('minimongo - observe ordered', test => {\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  let handle;\n\n  const c = new LocalCollection();\n  handle = c.find({}, {sort: {a: 1}}).observe(cbs);\n  test.isTrue(handle.collection === c);\n\n  c.insert({_id: 'foo', a: 1});\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n  c.update({a: 1}, {$set: {a: 2}});\n  test.equal(operations.shift(), ['changed', {a: 2}, 0, {a: 1}]);\n  c.insert({a: 10});\n  test.equal(operations.shift(), ['added', {a: 10}, 1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, 0, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, 1, {a: 10}]);\n  c.update({a: 11}, {a: 1});\n  test.equal(operations.shift(), ['changed', {a: 1}, 1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, 1, 0, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', 1, {a: 3}]);\n\n  // test stop\n  handle.stop();\n  const idA2 = Random.id();\n  c.insert({_id: idA2, a: 2});\n  test.equal(operations.shift(), undefined);\n\n  // test initial inserts (and backwards sort)\n  handle = c.find({}, {sort: {a: -1}}).observe(cbs);\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  test.equal(operations.shift(), ['added', {a: 1}, 1, null]);\n  handle.stop();\n\n  // test _suppress_initial\n  handle = c.find({}, {sort: {a: -1}}).observe(Object.assign({\n    _suppress_initial: true}, cbs));\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 100});\n  test.equal(operations.shift(), ['added', {a: 100}, 0, idA2]);\n  handle.stop();\n\n  // test skip and limit.\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, skip: 1, limit: 2}).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 1});\n  test.equal(operations.shift(), undefined);\n  c.insert({_id: 'foo', a: 2});\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  c.insert({a: 3});\n  test.equal(operations.shift(), ['added', {a: 3}, 1, null]);\n  c.insert({a: 4});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 1}, {a: 0});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 0}, {a: 5});\n  test.equal(operations.shift(), ['removed', 'foo', 0, {a: 2}]);\n  test.equal(operations.shift(), ['added', {a: 4}, 1, null]);\n  c.update({a: 3}, {a: 3.5});\n  test.equal(operations.shift(), ['changed', {a: 3.5}, 0, {a: 3}]);\n  handle.stop();\n\n  // test observe limit with pre-existing docs\n  c.remove({});\n  c.insert({a: 1});\n  c.insert({_id: 'two', a: 2});\n  c.insert({a: 3});\n  handle = c.find({}, {sort: {a: 1}, limit: 2}).observe(cbs);\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n  test.equal(operations.shift(), ['added', {a: 2}, 1, null]);\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 2});\n  test.equal(operations.shift(), ['removed', 'two', 1, {a: 2}]);\n  test.equal(operations.shift(), ['added', {a: 3}, 1, null]);\n  test.equal(operations.shift(), undefined);\n  handle.stop();\n\n  // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}}).observe(Object.assign(cbs, {_no_indices: true}));\n  c.insert({_id: 'foo', a: 1});\n  test.equal(operations.shift(), ['added', {a: 1}, -1, null]);\n  c.update({a: 1}, {$set: {a: 2}});\n  test.equal(operations.shift(), ['changed', {a: 2}, -1, {a: 1}]);\n  c.insert({a: 10});\n  test.equal(operations.shift(), ['added', {a: 10}, -1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, -1, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, -1, {a: 10}]);\n  c.update({a: 11}, {a: 1});\n  test.equal(operations.shift(), ['changed', {a: 1}, -1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, -1, -1, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', -1, {a: 3}]);\n  handle.stop();\n});\n\n[true, false].forEach(ordered => {\n  Tinytest.add(`minimongo - observe ordered: ${ordered}`, test => {\n    const c = new LocalCollection();\n\n    let ev = '';\n    const makecb = tag => {\n      const ret = {};\n      ['added', 'changed', 'removed'].forEach(fn => {\n        const fnName = ordered ? `${fn}At` : fn;\n        ret[fnName] = doc => {\n          ev = `${ev + fn.substr(0, 1) + tag + doc._id}_`;\n        };\n      });\n      return ret;\n    };\n    const expect = x => {\n      test.equal(ev, x);\n      ev = '';\n    };\n\n    c.insert({_id: 1, name: 'strawberry', tags: ['fruit', 'red', 'squishy']});\n    c.insert({_id: 2, name: 'apple', tags: ['fruit', 'red', 'hard']});\n    c.insert({_id: 3, name: 'rose', tags: ['flower', 'red', 'squishy']});\n\n    // This should work equally well for ordered and unordered observations\n    // (because the callbacks don't look at indices and there's no 'moved'\n    // callback).\n    let handle = c.find({tags: 'flower'}).observe(makecb('a'));\n    expect('aa3_');\n    c.update({name: 'rose'}, {$set: {tags: ['bloom', 'red', 'squishy']}});\n    expect('ra3_');\n    c.update({name: 'rose'}, {$set: {tags: ['flower', 'red', 'squishy']}});\n    expect('aa3_');\n    c.update({name: 'rose'}, {$set: {food: false}});\n    expect('ca3_');\n    c.remove({});\n    expect('ra3_');\n    c.insert({_id: 4, name: 'daisy', tags: ['flower']});\n    expect('aa4_');\n    handle.stop();\n    // After calling stop, no more callbacks are called.\n    c.insert({_id: 5, name: 'iris', tags: ['flower']});\n    expect('');\n\n    // Test that observing a lookup by ID works.\n    handle = c.find(4).observe(makecb('b'));\n    expect('ab4_');\n    c.update(4, {$set: {eek: 5}});\n    expect('cb4_');\n    handle.stop();\n\n    // Test observe with reactive: false.\n    handle = c.find({tags: 'flower'}, {reactive: false}).observe(makecb('c'));\n    expect('ac4_ac5_');\n    // This insert shouldn't trigger a callback because it's not reactive.\n    c.insert({_id: 6, name: 'river', tags: ['flower']});\n    expect('');\n    handle.stop();\n  });\n});\n\n\nTinytest.add('minimongo - saveOriginals', test => {\n  // set up some data\n  const c = new LocalCollection();\n\n  let count;\n  c.insert({_id: 'foo', x: 'untouched'});\n  c.insert({_id: 'bar', x: 'updateme'});\n  c.insert({_id: 'baz', x: 'updateme'});\n  c.insert({_id: 'quux', y: 'removeme'});\n  c.insert({_id: 'whoa', y: 'removeme'});\n\n  // Save originals and make some changes.\n  c.saveOriginals();\n  c.insert({_id: 'hooray', z: 'insertme'});\n  c.remove({y: 'removeme'});\n  count = c.update({x: 'updateme'}, {$set: {z: 5}}, {multi: true});\n  c.update('bar', {$set: {k: 7}});  // update same doc twice\n\n  // Verify returned count is correct\n  test.equal(count, 2);\n\n  // Verify the originals.\n  let originals = c.retrieveOriginals();\n  const affected = ['bar', 'baz', 'quux', 'whoa', 'hooray'];\n  test.equal(originals.size(), affected.length);\n  affected.forEach(id => {\n    test.isTrue(originals.has(id));\n  });\n  test.equal(originals.get('bar'), {_id: 'bar', x: 'updateme'});\n  test.equal(originals.get('baz'), {_id: 'baz', x: 'updateme'});\n  test.equal(originals.get('quux'), {_id: 'quux', y: 'removeme'});\n  test.equal(originals.get('whoa'), {_id: 'whoa', y: 'removeme'});\n  test.equal(originals.get('hooray'), undefined);\n\n  // Verify that changes actually occured.\n  test.equal(c.find().count(), 4);\n  test.equal(c.findOne('foo'), {_id: 'foo', x: 'untouched'});\n  test.equal(c.findOne('bar'), {_id: 'bar', x: 'updateme', z: 5, k: 7});\n  test.equal(c.findOne('baz'), {_id: 'baz', x: 'updateme', z: 5});\n  test.equal(c.findOne('hooray'), {_id: 'hooray', z: 'insertme'});\n\n  // The next call doesn't get the same originals again.\n  c.saveOriginals();\n  originals = c.retrieveOriginals();\n  test.isTrue(originals);\n  test.isTrue(originals.empty());\n\n  // Insert and remove a document during the period.\n  c.saveOriginals();\n  c.insert({_id: 'temp', q: 8});\n  c.remove('temp');\n  originals = c.retrieveOriginals();\n  test.equal(originals.size(), 1);\n  test.isTrue(originals.has('temp'));\n  test.equal(originals.get('temp'), undefined);\n});\n\nTinytest.add('minimongo - saveOriginals errors', test => {\n  const c = new LocalCollection();\n  // Can't call retrieve before save.\n  test.throws(() => { c.retrieveOriginals(); });\n  c.saveOriginals();\n  // Can't call save twice.\n  test.throws(() => { c.saveOriginals(); });\n});\n\nTinytest.add('minimongo - objectid transformation', test => {\n  const testId = item => {\n    test.equal(item, MongoID.idParse(MongoID.idStringify(item)));\n  };\n  const randomOid = new MongoID.ObjectID();\n  testId(randomOid);\n  testId('FOO');\n  testId('ffffffffffff');\n  testId('0987654321abcdef09876543');\n  testId(new MongoID.ObjectID());\n  testId('--a string');\n\n  test.equal('ffffffffffff', MongoID.idParse(MongoID.idStringify('ffffffffffff')));\n});\n\n\nTinytest.add('minimongo - objectid', test => {\n  const randomOid = new MongoID.ObjectID();\n  const anotherRandomOid = new MongoID.ObjectID();\n  test.notEqual(randomOid, anotherRandomOid);\n  test.throws(() => { new MongoID.ObjectID('qqqqqqqqqqqqqqqqqqqqqqqq');});\n  test.throws(() => { new MongoID.ObjectID('ABCDEF'); });\n  test.equal(randomOid, new MongoID.ObjectID(randomOid.valueOf()));\n});\n\nTinytest.add('minimongo - pause', test => {\n  const operations = [];\n  const cbs = log_callbacks(operations);\n\n  const c = new LocalCollection();\n  const h = c.find({}).observe(cbs);\n\n  // remove and add cancel out.\n  c.insert({_id: 1, a: 1});\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n\n  c.pauseObservers();\n\n  c.remove({_id: 1});\n  test.length(operations, 0);\n  c.insert({_id: 1, a: 1});\n  test.length(operations, 0);\n\n  c.resumeObservers();\n  test.length(operations, 0);\n\n\n  // two modifications become one\n  c.pauseObservers();\n\n  c.update({_id: 1}, {a: 2});\n  c.update({_id: 1}, {a: 3});\n\n  c.resumeObservers();\n  test.equal(operations.shift(), ['changed', {a: 3}, 0, {a: 1}]);\n  test.length(operations, 0);\n\n  // test special case for remove({})\n  c.pauseObservers();\n  test.equal(c.remove({}), 1);\n  test.length(operations, 0);\n  c.resumeObservers();\n  test.equal(operations.shift(), ['removed', 1, 0, {a: 3}]);\n  test.length(operations, 0);\n\n  h.stop();\n});\n\nTinytest.add('minimongo - ids matched by selector', test => {\n  const check = (selector, ids) => {\n    const idsFromSelector = LocalCollection._idsMatchedBySelector(selector);\n    // XXX normalize order, in a way that also works for ObjectIDs?\n    test.equal(idsFromSelector, ids);\n  };\n  check('foo', ['foo']);\n  check({_id: 'foo'}, ['foo']);\n  const oid1 = new MongoID.ObjectID();\n  check(oid1, [oid1]);\n  check({_id: oid1}, [oid1]);\n  check({_id: 'foo', x: 42}, ['foo']);\n  check({}, null);\n  check({_id: {$in: ['foo', oid1]}}, ['foo', oid1]);\n  check({_id: {$ne: 'foo'}}, null);\n  // not actually valid, but works for now...\n  check({$and: ['foo']}, ['foo']);\n  check({$and: [{x: 42}, {_id: oid1}]}, [oid1]);\n  check({$and: [{x: 42}, {_id: {$in: [oid1]}}]}, [oid1]);\n});\n\nTinytest.add('minimongo - reactive stop', test => {\n  const coll = new LocalCollection();\n  coll.insert({_id: 'A'});\n  coll.insert({_id: 'B'});\n  coll.insert({_id: 'C'});\n\n  const addBefore = (str, newChar, before) => {\n    const idx = str.indexOf(before);\n    if (idx === -1) {return str + newChar;}\n    return str.slice(0, idx) + newChar + str.slice(idx);\n  };\n\n  let x, y;\n  const sortOrder = ReactiveVar(1);\n\n  const c = Tracker.autorun(() => {\n    const q = coll.find({}, {sort: {_id: sortOrder.get()}});\n    x = '';\n    q.observe({ addedAt(doc, atIndex, before) {\n      x = addBefore(x, doc._id, before);\n    }});\n    y = '';\n    q.observeChanges({ addedBefore(id, fields, before) {\n      y = addBefore(y, id, before);\n    }});\n  });\n\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n\n  sortOrder.set(-1);\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n  Tracker.flush();\n  test.equal(x, 'CBA');\n  test.equal(y, 'CBA');\n\n  coll.insert({_id: 'D'});\n  coll.insert({_id: 'E'});\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n\n  c.stop();\n  // stopping kills the observes immediately\n  coll.insert({_id: 'F'});\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n});\n\nTinytest.add('minimongo - immediate invalidate', test => {\n  const coll = new LocalCollection();\n  coll.insert({_id: 'A'});\n\n  // This has two separate findOnes.  findOne() uses skip/limit, which means\n  // that its response to an update() call involves a recompute. We used to have\n  // a bug where we would first calculate all the calls that need to be\n  // recomputed, then recompute them one by one, without checking to see if the\n  // callbacks from recomputing one query stopped the second query, which\n  // crashed.\n  const c = Tracker.autorun(() => {\n    coll.findOne('A');\n    coll.findOne('A');\n  });\n\n  coll.update('A', {$set: {x: 42}});\n\n  c.stop();\n});\n\n\nTinytest.add('minimongo - count on cursor with limit', test => {\n  const coll = new LocalCollection();\n  let count, unlimitedCount;\n\n  coll.insert({_id: 'A'});\n  coll.insert({_id: 'B'});\n  coll.insert({_id: 'C'});\n  coll.insert({_id: 'D'});\n\n  const c = Tracker.autorun(c => {\n    const cursor = coll.find({_id: {$exists: true}}, {sort: {_id: 1}, limit: 3});\n    count = cursor.count();\n    unlimitedCount = cursor.count(false);\n  });\n\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 4);\n\n  coll.remove('A'); // still 3 in the collection\n  Tracker.flush();\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 3);\n\n  coll.remove('B'); // expect count now 2\n  Tracker.flush();\n  test.equal(count, 2);\n  test.equal(unlimitedCount, 2);\n\n\n  coll.insert({_id: 'A'}); // now 3 again\n  Tracker.flush();\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 3);\n\n  coll.insert({_id: 'B'}); // now 4 entries, but count should be 3 still\n  Tracker.flush();\n  test.equal(count, 3);\n  test.equal(unlimitedCount, 4); // unlimitedCount should be 4 now\n\n  c.stop();\n});\n\nTinytest.add('minimongo - reactive count with cached cursor', test => {\n  const coll = new LocalCollection;\n  const cursor = coll.find({});\n  let firstAutorunCount, secondAutorunCount;\n  Tracker.autorun(() => {\n    firstAutorunCount = cursor.count();\n  });\n  Tracker.autorun(() => {\n    secondAutorunCount = coll.find({}).count();\n  });\n  test.equal(firstAutorunCount, 0);\n  test.equal(secondAutorunCount, 0);\n  coll.insert({i: 1});\n  coll.insert({i: 2});\n  coll.insert({i: 3});\n  Tracker.flush();\n  test.equal(firstAutorunCount, 3);\n  test.equal(secondAutorunCount, 3);\n});\n\nTinytest.add('minimongo - $near operator tests', test => {\n  let coll = new LocalCollection();\n  coll.insert({ rest: { loc: [2, 3] } });\n  coll.insert({ rest: { loc: [-3, 3] } });\n  coll.insert({ rest: { loc: [5, 5] } });\n\n  test.equal(coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 30 } }).count(), 3);\n  test.equal(coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 4 } }).count(), 1);\n  const points = coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 6 } }).fetch();\n  points.forEach((point, i, points) => {\n    test.isTrue(!i || distance([0, 0], point.rest.loc) >= distance([0, 0], points[i - 1].rest.loc));\n  });\n\n  function distance(a, b) {\n    const x = a[0] - b[0];\n    const y = a[1] - b[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  // GeoJSON tests\n  coll = new LocalCollection();\n  const data = [{ category: 'BURGLARY', descript: 'BURGLARY OF STORE, FORCIBLE ENTRY', address: '100 Block of 10TH ST', location: { type: 'Point', coordinates: [  -122.415449723856,  37.7749518087273 ] } },\n    { category: 'WEAPON LAWS', descript: 'POSS OF PROHIBITED WEAPON', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.415386041221,  37.7747879744156 ] } },\n    { category: 'LARCENY/THEFT', descript: 'GRAND THEFT OF PROPERTY', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.41538270191,  37.774683628213 ] } },\n    { category: 'LARCENY/THEFT', descript: 'PETTY THEFT FROM LOCKED AUTO', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.415396041221,  37.7747879744156 ] } },\n    { category: 'OTHER OFFENSES', descript: 'POSSESSION OF BURGLARY TOOLS', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.415386041221,  37.7747879734156 ] } },\n  ];\n\n  data.forEach((x, i) => { coll.insert(Object.assign(x, { x: i })); });\n\n  const close15 = coll.find({ location: { $near: {\n    $geometry: { type: 'Point',\n      coordinates: [-122.4154282, 37.7746115] },\n    $maxDistance: 15 } } }).fetch();\n  test.length(close15, 1);\n  test.equal(close15[0].descript, 'GRAND THEFT OF PROPERTY');\n\n  const close20 = coll.find({ location: { $near: {\n    $geometry: { type: 'Point',\n      coordinates: [-122.4154282, 37.7746115] },\n    $maxDistance: 20 } } }).fetch();\n  test.length(close20, 4);\n  test.equal(close20[0].descript, 'GRAND THEFT OF PROPERTY');\n  test.equal(close20[1].descript, 'PETTY THEFT FROM LOCKED AUTO');\n  test.equal(close20[2].descript, 'POSSESSION OF BURGLARY TOOLS');\n  test.equal(close20[3].descript, 'POSS OF PROHIBITED WEAPON');\n\n  // Any combinations of $near with $or/$and/$nor/$not should throw an error\n  test.throws(() => {\n    coll.find({ location: {\n      $not: {\n        $near: {\n          $geometry: {\n            type: 'Point',\n            coordinates: [-122.4154282, 37.7746115],\n          }, $maxDistance: 20 } } } });\n  });\n  test.throws(() => {\n    coll.find({\n      $and: [ { location: { $near: { $geometry: { type: 'Point', coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 20 }}},\n        { x: 0 }],\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $or: [ { location: { $near: { $geometry: { type: 'Point', coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 20 }}},\n        { x: 0 }],\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $nor: [ { location: { $near: { $geometry: { type: 'Point', coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 1 }}},\n        { x: 0 }],\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $and: [{\n        $and: [{\n          location: {\n            $near: {\n              $geometry: {\n                type: 'Point',\n                coordinates: [-122.4154282, 37.7746115],\n              },\n              $maxDistance: 1,\n            },\n          },\n        }],\n      }],\n    });\n  });\n\n  // array tests\n  coll = new LocalCollection();\n  coll.insert({\n    _id: 'x',\n    k: 9,\n    a: [\n      {b: [\n        [100, 100],\n        [1,  1]]},\n      {b: [150,  150]}]});\n  coll.insert({\n    _id: 'y',\n    k: 9,\n    a: {b: [5, 5]}});\n  const testNear = (near, md, expected) => {\n    test.equal(\n      coll.find({'a.b': {$near: near, $maxDistance: md}}).fetch().map(doc => doc._id),\n      expected);\n  };\n  testNear([149, 149], 4, ['x']);\n  testNear([149, 149], 1000, ['x', 'y']);\n  // It's important that we figure out that 'x' is closer than 'y' to [2,2] even\n  // though the first within-1000 point in 'x' (ie, [100,100]) is farther than\n  // 'y'.\n  testNear([2, 2], 1000, ['x', 'y']);\n\n  // issue #3599\n  // Ensure that distance is not used as a tie-breaker for sort.\n  test.equal(\n    coll.find({'a.b': {$near: [1, 1]}}, {sort: {k: 1}}).fetch().map(doc => doc._id),\n    ['x', 'y']);\n  test.equal(\n    coll.find({'a.b': {$near: [5, 5]}}, {sort: {k: 1}}).fetch().map(doc => doc._id),\n    ['x', 'y']);\n\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  const handle = coll.find({'a.b': {$near: [7, 7]}}).observe(cbs);\n\n  test.length(operations, 2);\n  test.equal(operations.shift(), ['added', {k: 9, a: {b: [5, 5]}}, 0, null]);\n  test.equal(operations.shift(),\n    ['added', {k: 9, a: [{b: [[100, 100], [1, 1]]}, {b: [150, 150]}]},\n      1, null]);\n  // This needs to be inserted in the MIDDLE of the two existing ones.\n  coll.insert({a: {b: [3, 3]}});\n  test.length(operations, 1);\n  test.equal(operations.shift(), ['added', {a: {b: [3, 3]}}, 1, 'x']);\n\n  handle.stop();\n});\n\n// issue #2077\nTinytest.add('minimongo - $near and $geometry for legacy coordinates', test => {\n  const coll = new LocalCollection();\n\n  coll.insert({\n    loc: {\n      x: 1,\n      y: 1,\n    },\n  });\n  coll.insert({\n    loc: [-1, -1],\n  });\n  coll.insert({\n    loc: [40, -10],\n  });\n  coll.insert({\n    loc: {\n      x: -10,\n      y: 40,\n    },\n  });\n\n  test.equal(coll.find({ loc: { $near: [0, 0], $maxDistance: 4 } }).count(), 2);\n  test.equal(coll.find({ loc: { $near: {$geometry: {type: 'Point', coordinates: [0, 0]}}} }).count(), 4);\n  test.equal(coll.find({ loc: { $near: {$geometry: {type: 'Point', coordinates: [0, 0]}, $maxDistance: 200000}}}).count(), 2);\n});\n\n// Regression test for #4377. Previously, \"replace\" updates didn't clone the\n// argument.\nTinytest.add('minimongo - update should clone', test => {\n  const x = [];\n  const coll = new LocalCollection;\n  const id = coll.insert({});\n  coll.update(id, {x});\n  x.push(1);\n  test.equal(coll.findOne(id), {_id: id, x: []});\n});\n\n// See #2275.\nTinytest.add('minimongo - fetch in observe', test => {\n  const coll = new LocalCollection;\n  let callbackInvoked = false;\n  const observe = coll.find().observeChanges({\n    added(id, fields) {\n      callbackInvoked = true;\n      test.equal(fields, {foo: 1});\n      const doc = coll.findOne({foo: 1});\n      test.isTrue(doc);\n      test.equal(doc.foo, 1);\n    },\n  });\n  test.isFalse(callbackInvoked);\n  const computation = Tracker.autorun(computation => {\n    if (computation.firstRun) {\n      coll.insert({foo: 1});\n    }\n  });\n  test.isTrue(callbackInvoked);\n  observe.stop();\n  computation.stop();\n});\n\n// See #2254\nTinytest.add('minimongo - fine-grained reactivity of observe with fields projection', test => {\n  const X = new LocalCollection;\n  const id = 'asdf';\n  X.insert({_id: id, foo: {bar: 123}});\n\n  let callbackInvoked = false;\n  const obs = X.find(id, {fields: {'foo.bar': 1}}).observeChanges({\n    changed(id, fields) {\n      callbackInvoked = true;\n    },\n  });\n\n  test.isFalse(callbackInvoked);\n  X.update(id, {$set: {'foo.baz': 456}});\n  test.isFalse(callbackInvoked);\n\n  obs.stop();\n});\nTinytest.add('minimongo - fine-grained reactivity of query with fields projection', test => {\n  const X = new LocalCollection;\n  const id = 'asdf';\n  X.insert({_id: id, foo: {bar: 123}});\n\n  let callbackInvoked = false;\n  const computation = Tracker.autorun(() => {\n    callbackInvoked = true;\n    return X.findOne(id, { fields: { 'foo.bar': 1 } });\n  });\n  test.isTrue(callbackInvoked);\n  callbackInvoked = false;\n  X.update(id, {$set: {'foo.baz': 456}});\n  test.isFalse(callbackInvoked);\n  X.update(id, {$set: {'foo.bar': 124}});\n  Tracker.flush();\n  test.isTrue(callbackInvoked);\n\n  computation.stop();\n});\n\n// Tests that the logic in `LocalCollection.prototype.update`\n// correctly deals with count() on a cursor with skip or limit (since\n// then the result set is an IdMap, not an array)\nTinytest.add('minimongo - reactive skip/limit count while updating', test => {\n  const X = new LocalCollection;\n  let count = -1;\n  let unlimitedCount = -1;\n\n  const c = Tracker.autorun(() => {\n    count = X.find({}, {skip: 1, limit: 1}).count();\n    unlimitedCount = X.find({}, {skip: 1, limit: 1}).count(false);\n  });\n\n  test.equal(count, 0);\n  test.equal(unlimitedCount, 0);\n\n  X.insert({});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 0);\n  test.equal(unlimitedCount, 1);\n\n  X.insert({});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 1);\n  test.equal(unlimitedCount, 2);\n\n  X.update({}, {$set: {foo: 1}});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 1);\n  test.equal(unlimitedCount, 2);\n\n  // Make sure a second update also works\n  X.update({}, {$set: {foo: 2}});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 1);\n  test.equal(unlimitedCount, 2);\n\n  c.stop();\n});\n\n// Makes sure inserts cannot be performed using field names that have\n// Mongo restricted characters in them ('.', '$', '\\0'):\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nTinytest.add('minimongo - cannot insert using invalid field names', test => {\n  const collection = new LocalCollection();\n\n  // Quick test to make sure non-dot field inserts are working\n  collection.insert({ a: 'b' });\n\n  // Quick test to make sure field values with dots are allowed\n  collection.insert({ a: 'b.c' });\n\n  // Verify top level dot-field inserts are prohibited\n  ['a.b', '.b', 'a.', 'a.b.c'].forEach((field) => {\n    test.throws(() => {\n      collection.insert({ [field]: 'c' });\n    }, `Key ${field} must not contain '.'`);\n  });\n\n  // Verify nested dot-field inserts are prohibited\n  test.throws(() => {\n    collection.insert({ a: { b: { 'c.d': 'e' } } });\n  }, \"Key c.d must not contain '.'\");\n\n  // Verify field names starting with $ are prohibited\n  test.throws(() => {\n    collection.insert({ $a: 'b' });\n  }, \"Key $a must not start with '$'\");\n\n  // Verify nested field names starting with $ are prohibited\n  test.throws(() => {\n    collection.insert({ a: { b: { $c: 'd' } } });\n  }, \"Key $c must not start with '$'\");\n\n  // Verify top level fields with null characters are prohibited\n  ['\\0a', 'a\\0', 'a\\0b', '\\u0000a', 'a\\u0000', 'a\\u0000b'].forEach((field) => {\n    test.throws(() => {\n      collection.insert({ [field]: 'c' });\n    }, `Key ${field} must not contain null bytes`);\n  });\n\n  // Verify nested field names with null characters are prohibited\n  test.throws(() => {\n    collection.insert({ a: { b: { '\\0c': 'd' } } });\n  }, 'Key \\0c must not contain null bytes');\n});\n\n// Makes sure $set's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nTinytest.add('minimongo - cannot $set with null bytes', test => {\n  const collection = new LocalCollection();\n\n  // Quick test to make sure non-null byte $set's are working\n  const id = collection.insert({ a: 'b', c: 'd' });\n  collection.update({ _id: id }, { $set: { e: 'f' } });\n\n  // Verify $set's with null bytes throw an exception\n  test.throws(() => {\n    collection.update({ _id: id }, { $set: { '\\0a': 'b' } });\n  }, 'Key \\0a must not contain null bytes');\n});\n\n// Makes sure $rename's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nTinytest.add('minimongo - cannot $rename with null bytes', test => {\n  const collection = new LocalCollection();\n\n  // Quick test to make sure non-null byte $rename's are working\n  let id = collection.insert({ a: 'b', c: 'd' });\n  collection.update({ _id: id }, { $rename: { a: 'a1', c: 'c1' } });\n\n  // Verify $rename's with null bytes throw an exception\n  collection.remove({});\n  id = collection.insert({ a: 'b', c: 'd' });\n  test.throws(() => {\n    collection.update({ _id: id }, { $rename: { a: '\\0a', c: 'c\\0' } });\n  }, \"The 'to' field for $rename cannot contain an embedded null byte\");\n});\n"]},"sourceType":"script","hash":"6a070d8b86202c2a6d4092688f87229f4903ab6f"}
