{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/accounts-base/accounts_client_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/accounts-base/accounts_client_tests.js","filename":"packages/accounts-base/accounts_client_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/accounts-base/accounts_client_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_client_tests.js"}},"code":"const username = 'jsmith';\nconst password = 'password';\n\nconst logoutAndCreateUser = (test, done, nextTests) => {\n  Meteor.logout(() => {\n    // Make sure we're logged out to start with\n    test.isFalse(Meteor.user()); // Setup a new test user\n\n    Accounts.createUser({\n      username,\n      password\n    }, () => {\n      // Handle next tests\n      nextTests(test, done);\n    });\n  });\n};\n\nconst removeTestUser = done => {\n  Meteor.call('removeAccountsTestUser', username, () => {\n    done();\n  });\n};\n\nTinytest.addAsync('accounts - Meteor.loggingIn() is true right after a login call', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Login then immediately verify loggingIn is true\n    Meteor.loginWithPassword(username, password);\n    test.isTrue(Meteor.loggingIn());\n    removeTestUser(done);\n  });\n});\nTinytest.addAsync('accounts - Meteor.loggingIn() is false after login has completed', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Login then verify loggingIn is false after login has completed\n    Meteor.loginWithPassword(username, password, () => {\n      test.isTrue(Meteor.user());\n      test.isFalse(Meteor.loggingIn());\n      removeTestUser(done);\n    });\n  });\n});\nTinytest.addAsync('accounts - Meteor.loggingOut() is true right after a logout call', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Logout then immediately verify loggingOut is true\n    Meteor.logout();\n    test.isTrue(Meteor.loggingOut());\n    removeTestUser(done);\n  });\n});\nTinytest.addAsync('accounts - Meteor.loggingOut() is false after logout has completed', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Logout then verify loggingOut is false after logout has completed\n    Meteor.logout(error => {\n      test.isFalse(Meteor.user());\n      test.isFalse(Meteor.loggingOut());\n      removeTestUser(done);\n    });\n  });\n});\nTinytest.addAsync('accounts - onLogin callback receives { type: \"password\" } param on login', (test, done) => {\n  const onLogin = Accounts.onLogin(loginDetails => {\n    test.equal('password', loginDetails.type);\n    onLogin.stop();\n    removeTestUser(done);\n  });\n  logoutAndCreateUser(test, done, () => {});\n});\nTinytest.addAsync('accounts - onLogin callback receives { type: \"resume\" } param on ' + 'reconnect, if already logged in', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    const onLogin = Accounts.onLogin(loginDetails => {\n      test.equal('resume', loginDetails.type);\n      onLogin.stop();\n      removeTestUser(done);\n    });\n    Meteor.disconnect();\n    Meteor.reconnect();\n  });\n});","map":{"version":3,"sources":["packages/accounts-base/accounts_client_tests.js"],"names":["username","password","logoutAndCreateUser","test","done","nextTests","Meteor","logout","isFalse","user","Accounts","createUser","removeTestUser","call","Tinytest","addAsync","loginWithPassword","isTrue","loggingIn","loggingOut","error","onLogin","loginDetails","equal","type","stop","disconnect","reconnect"],"mappings":"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","sourcesContent":["const username = 'jsmith';\nconst password = 'password';\n\nconst logoutAndCreateUser = (test, done, nextTests) => {\n  Meteor.logout(() => {\n    // Make sure we're logged out to start with\n    test.isFalse(Meteor.user());\n\n    // Setup a new test user\n    Accounts.createUser({ username, password }, () => {\n      // Handle next tests\n      nextTests(test, done);\n    });\n  });\n};\n\nconst removeTestUser = (done) => {\n  Meteor.call('removeAccountsTestUser', username, () => {\n    done();\n  });\n};\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingIn() is true right after a login call',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Login then immediately verify loggingIn is true\n      Meteor.loginWithPassword(username, password);\n      test.isTrue(Meteor.loggingIn());\n      removeTestUser(done);\n    });\n  }\n);\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingIn() is false after login has completed',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Login then verify loggingIn is false after login has completed\n      Meteor.loginWithPassword(username, password, () => {\n        test.isTrue(Meteor.user());\n        test.isFalse(Meteor.loggingIn());\n        removeTestUser(done);\n      });\n    });\n  }\n);\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingOut() is true right after a logout call',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Logout then immediately verify loggingOut is true\n      Meteor.logout();\n      test.isTrue(Meteor.loggingOut());\n      removeTestUser(done);\n    });\n  }\n);\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingOut() is false after logout has completed',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Logout then verify loggingOut is false after logout has completed\n      Meteor.logout((error) => {\n        test.isFalse(Meteor.user());\n        test.isFalse(Meteor.loggingOut());\n        removeTestUser(done);\n      });\n    });\n  }\n);\n\nTinytest.addAsync(\n  'accounts - onLogin callback receives { type: \"password\" } param on login',\n  (test, done) => {\n    const onLogin = Accounts.onLogin((loginDetails) => {\n      test.equal('password', loginDetails.type);\n      onLogin.stop();\n      removeTestUser(done);\n    });\n    logoutAndCreateUser(test, done, () => {});\n  }\n);\n\nTinytest.addAsync(\n  'accounts - onLogin callback receives { type: \"resume\" } param on ' +\n  'reconnect, if already logged in',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      const onLogin = Accounts.onLogin((loginDetails) => {\n        test.equal('resume', loginDetails.type);\n        onLogin.stop();\n        removeTestUser(done);\n      });\n\n      Meteor.disconnect();\n      Meteor.reconnect();\n    });\n  }\n);\n"]},"sourceType":"script","hash":"01f859da321f19c3fab75e01f40639983a5c0f0c"}
