{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/ddp-client/test/livedata_test_service.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/ddp-client/test/livedata_test_service.js","filename":"packages/ddp-client/test/livedata_test_service.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/ddp-client/test/livedata_test_service.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/test/livedata_test_service.js"}},"code":"Meteor.methods({\n  nothing: function () {// No need to check if there are no arguments.\n  },\n  echo: function ()\n  /* arguments */\n  {\n    check(arguments, [Match.Any]);\n    return _.toArray(arguments);\n  },\n  echoOne: function ()\n  /*arguments*/\n  {\n    check(arguments, [Match.Any]);\n    return arguments[0];\n  },\n  exception: function (where, options) {\n    check(where, String);\n    check(options, Match.Optional({\n      intended: Match.Optional(Boolean),\n      throwThroughFuture: Match.Optional(Boolean)\n    }));\n    options = options || Object.create(null);\n    var shouldThrow = Meteor.isServer && where === 'server' || Meteor.isClient && where === 'client' || where === 'both';\n\n    if (shouldThrow) {\n      var e;\n      if (options.intended) e = new Meteor.Error(999, 'Client-visible test exception');else e = new Error('Test method throwing an exception');\n      e._expectedByTest = true; // We used to improperly serialize errors that were thrown through a\n      // future first.\n\n      if (Meteor.isServer && options.throwThroughFuture) {\n        var Future = Npm.require('fibers/future');\n\n        var f = new Future();\n        f['throw'](e);\n        e = f.wait();\n      }\n\n      throw e;\n    }\n  },\n  setUserId: function (userId) {\n    check(userId, Match.OneOf(String, null));\n    this.setUserId(userId);\n  }\n}); // Methods to help test applying methods with `wait: true`: delayedTrue returns\n// true 1s after being run unless makeDelayedTrueImmediatelyReturnFalse was run\n// in the meanwhile. Increasing the timeout makes the \"wait: true\" test slower;\n// decreasing the timeout makes the \"wait: false\" test flakier (ie, the timeout\n// could fire before processing the second method).\n\nif (Meteor.isServer) {\n  // Keys are random tokens, used to isolate multiple test invocations from each\n  // other.\n  var waiters = Object.create(null);\n\n  var Future = Npm.require('fibers/future');\n\n  var returnThroughFuture = function (token, returnValue) {\n    // Make sure that when we call return, the fields are already cleared.\n    var record = waiters[token];\n    if (!record) return;\n    delete waiters[token];\n    record.future['return'](returnValue);\n  };\n\n  Meteor.methods({\n    delayedTrue: function (token) {\n      check(token, String);\n      var record = waiters[token] = {\n        future: new Future(),\n        timer: Meteor.setTimeout(function () {\n          returnThroughFuture(token, true);\n        }, 1000)\n      };\n      this.unblock();\n      return record.future.wait();\n    },\n    makeDelayedTrueImmediatelyReturnFalse: function (token) {\n      check(token, String);\n      var record = waiters[token];\n      if (!record) return; // since delayedTrue's timeout had already run\n\n      clearTimeout(record.timer);\n      returnThroughFuture(token, false);\n    }\n  });\n}\n/*****/\n\n\nLedger = new Mongo.Collection('ledger');\nLedger.allow({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  },\n  fetch: []\n});\nMeteor.startup(function () {\n  if (Meteor.isServer) Ledger.remove({}); // XXX can this please be Ledger.remove()?\n});\nif (Meteor.isServer) Meteor.publish('ledger', function (world) {\n  check(world, String);\n  return Ledger.find({\n    world: world\n  });\n});\nMeteor.methods({\n  'ledger/transfer': function (world, from_name, to_name, amount, cheat) {\n    check(world, String);\n    check(from_name, String);\n    check(to_name, String);\n    check(amount, Number);\n    check(cheat, Match.Optional(Boolean));\n    var from = Ledger.findOne({\n      name: from_name,\n      world: world\n    });\n    var to = Ledger.findOne({\n      name: to_name,\n      world: world\n    });\n    if (Meteor.isServer) cheat = false;\n    if (!from) throw new Meteor.Error(404, 'No such account ' + from_name + ' in ' + world);\n    if (!to) throw new Meteor.Error(404, 'No such account ' + to_name + ' in ' + world);\n    if (from.balance < amount && !cheat) throw new Meteor.Error(409, 'Insufficient funds');\n    Ledger.update(from._id, {\n      $inc: {\n        balance: -amount\n      }\n    });\n    Ledger.update(to._id, {\n      $inc: {\n        balance: amount\n      }\n    });\n  }\n});\n/*****/\n/// Helpers for \"livedata - changing userid reruns subscriptions...\"\n\nobjectsWithUsers = new Mongo.Collection('objectsWithUsers');\n\nif (Meteor.isServer) {\n  objectsWithUsers.remove({});\n  objectsWithUsers.insert({\n    name: 'owned by none',\n    ownerUserIds: [null]\n  });\n  objectsWithUsers.insert({\n    name: 'owned by one - a',\n    ownerUserIds: ['1']\n  });\n  objectsWithUsers.insert({\n    name: 'owned by one/two - a',\n    ownerUserIds: ['1', '2']\n  });\n  objectsWithUsers.insert({\n    name: 'owned by one/two - b',\n    ownerUserIds: ['1', '2']\n  });\n  objectsWithUsers.insert({\n    name: 'owned by two - a',\n    ownerUserIds: ['2']\n  });\n  objectsWithUsers.insert({\n    name: 'owned by two - b',\n    ownerUserIds: ['2']\n  });\n  Meteor.publish('objectsWithUsers', function () {\n    return objectsWithUsers.find({\n      ownerUserIds: this.userId\n    }, {\n      fields: {\n        ownerUserIds: 0\n      }\n    });\n  });\n\n  (function () {\n    var userIdWhenStopped = Object.create(null);\n    Meteor.publish('recordUserIdOnStop', function (key) {\n      check(key, String);\n      var self = this;\n      self.onStop(function () {\n        userIdWhenStopped[key] = self.userId;\n      });\n    });\n    Meteor.methods({\n      userIdWhenStopped: function (key) {\n        check(key, String);\n        return userIdWhenStopped[key];\n      }\n    });\n  })();\n}\n/*****/\n/// Helper for \"livedata - setUserId fails when called on server\"\n\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    errorThrownWhenCallingSetUserIdDirectlyOnServer = null;\n\n    try {\n      Meteor.call('setUserId', '1000');\n    } catch (e) {\n      errorThrownWhenCallingSetUserIdDirectlyOnServer = e;\n    }\n  });\n} /// Helper for \"livedata - no setUserId after unblock\"\n\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    setUserIdAfterUnblock: function () {\n      this.unblock();\n      var threw = false;\n      var originalUserId = this.userId;\n\n      try {\n        // Calling setUserId after unblock should throw an error (and not mutate\n        // userId).\n        this.setUserId(originalUserId + 'bla');\n      } catch (e) {\n        threw = true;\n      }\n\n      return threw && this.userId === originalUserId;\n    }\n  });\n}\n/*****/\n/// Helper for \"livedata - overlapping universal subs\"\n\n\nif (Meteor.isServer) {\n  (function () {\n    var collName = 'overlappingUniversalSubs';\n    var universalSubscribers = [[], []];\n\n    _.each([0, 1], function (index) {\n      Meteor.publish(null, function () {\n        var sub = this;\n        universalSubscribers[index].push(sub);\n        sub.onStop(function () {\n          universalSubscribers[index] = _.without(universalSubscribers[index], sub);\n        });\n      });\n    });\n\n    Meteor.methods({\n      testOverlappingSubs: function (token) {\n        check(token, String);\n\n        _.each(universalSubscribers[0], function (sub) {\n          sub.added(collName, token, {});\n        });\n\n        _.each(universalSubscribers[1], function (sub) {\n          sub.added(collName, token, {});\n        });\n\n        _.each(universalSubscribers[0], function (sub) {\n          sub.removed(collName, token);\n        });\n      }\n    });\n  })();\n} /// Helper for \"livedata - runtime universal sub creation\"\n\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    runtimeUniversalSubCreation: function (token) {\n      check(token, String);\n      Meteor.publish(null, function () {\n        this.added('runtimeSubCreation', token, {});\n      });\n    }\n  });\n} /// Helper for \"livedata - publisher errors\"\n\n\nif (Meteor.isServer) {\n  Meteor.publish('publisherErrors', function (collName, options) {\n    check(collName, String); // See below to see what options are accepted.\n\n    check(options, Object);\n    var sub = this; // First add a random item, which should be cleaned up. We use ready/onReady\n    // to make sure that the second test block is only called after the added is\n    // processed, so that there's any chance of the coll.find().count() failing.\n\n    sub.added(collName, Random.id(), {\n      foo: 42\n    });\n    sub.ready();\n\n    if (options.stopInHandler) {\n      sub.stop();\n      return;\n    }\n\n    var error;\n\n    if (options.internalError) {\n      error = new Error('Egads!');\n      error._expectedByTest = true; // don't log\n    } else {\n      error = new Meteor.Error(412, 'Explicit error');\n    }\n\n    if (options.throwInHandler) {\n      throw error;\n    } else if (options.errorInHandler) {\n      sub.error(error);\n    } else if (options.throwWhenUserIdSet) {\n      if (sub.userId) throw error;\n    } else if (options.errorLater) {\n      Meteor.defer(function () {\n        sub.error(error);\n      });\n    }\n  });\n}\n/*****/\n/// Helpers for \"livedata - publish multiple cursors\"\n\n\nOne = new Mongo.Collection('collectionOne');\nTwo = new Mongo.Collection('collectionTwo');\n\nif (Meteor.isServer) {\n  One.remove({});\n  One.insert({\n    name: 'value1'\n  });\n  One.insert({\n    name: 'value2'\n  });\n  Two.remove({});\n  Two.insert({\n    name: 'value3'\n  });\n  Two.insert({\n    name: 'value4'\n  });\n  Two.insert({\n    name: 'value5'\n  });\n  Meteor.publish('multiPublish', function (options) {\n    // See below to see what options are accepted.\n    check(options, Object);\n\n    if (options.normal) {\n      return [One.find(), Two.find()];\n    } else if (options.dup) {\n      // Suppress the log of the expected internal error.\n      Meteor._suppress_log(1);\n\n      return [One.find(), One.find({\n        name: 'value2'\n      }), // multiple cursors for one collection - error\n      Two.find()];\n    } else if (options.notCursor) {\n      // Suppress the log of the expected internal error.\n      Meteor._suppress_log(1);\n\n      return [One.find(), 'not a cursor', Two.find()];\n    } else throw 'unexpected options';\n  });\n} /// Helper for \"livedata - result by value\"\n\n\nvar resultByValueArrays = Object.create(null);\nMeteor.methods({\n  getArray: function (testId) {\n    if (!_.has(resultByValueArrays, testId)) resultByValueArrays[testId] = [];\n    return resultByValueArrays[testId];\n  },\n  pushToArray: function (testId, value) {\n    if (!_.has(resultByValueArrays, testId)) resultByValueArrays[testId] = [];\n    resultByValueArrays[testId].push(value);\n  }\n});","map":{"version":3,"sources":["packages/ddp-client/test/livedata_test_service.js"],"names":["Meteor","methods","nothing","echo","check","arguments","Match","Any","_","toArray","echoOne","exception","where","options","String","Optional","intended","Boolean","throwThroughFuture","Object","create","shouldThrow","isServer","isClient","e","Error","_expectedByTest","Future","Npm","require","f","wait","setUserId","userId","OneOf","waiters","returnThroughFuture","token","returnValue","record","future","delayedTrue","timer","setTimeout","unblock","makeDelayedTrueImmediatelyReturnFalse","clearTimeout","Ledger","Mongo","Collection","allow","insert","update","remove","fetch","startup","publish","world","find","from_name","to_name","amount","cheat","Number","from","findOne","name","to","balance","_id","$inc","objectsWithUsers","ownerUserIds","fields","userIdWhenStopped","key","self","onStop","errorThrownWhenCallingSetUserIdDirectlyOnServer","call","setUserIdAfterUnblock","threw","originalUserId","collName","universalSubscribers","each","index","sub","push","without","testOverlappingSubs","added","removed","runtimeUniversalSubCreation","Random","id","foo","ready","stopInHandler","stop","error","internalError","throwInHandler","errorInHandler","throwWhenUserIdSet","errorLater","defer","One","Two","normal","dup","_suppress_log","notCursor","resultByValueArrays","getArray","testId","has","pushToArray","value"],"mappings":"AAAAA,OAAOC,OAAP,CAAe;AACbC,WAAS,YAAW,CAClB;AACD,GAHY;AAIbC,QAAM;AAAS;AAAiB;AAC9BC,UAAMC,SAAN,EAAiB,CAACC,MAAMC,GAAP,CAAjB;AACA,WAAOC,EAAEC,OAAF,CAAUJ,SAAV,CAAP;AACD,GAPY;AAQbK,WAAS;AAAS;AAAe;AAC/BN,UAAMC,SAAN,EAAiB,CAACC,MAAMC,GAAP,CAAjB;AACA,WAAOF,UAAU,CAAV,CAAP;AACD,GAXY;AAYbM,aAAW,UAASC,KAAT,EAAgBC,OAAhB,EAAyB;AAClCT,UAAMQ,KAAN,EAAaE,MAAb;AACAV,UACES,OADF,EAEEP,MAAMS,QAAN,CAAe;AACbC,gBAAUV,MAAMS,QAAN,CAAeE,OAAf,CADG;AAEbC,0BAAoBZ,MAAMS,QAAN,CAAeE,OAAf;AAFP,KAAf,CAFF;AAOAJ,cAAUA,WAAWM,OAAOC,MAAP,CAAc,IAAd,CAArB;AACA,QAAIC,cACDrB,OAAOsB,QAAP,IAAmBV,UAAU,QAA9B,IACCZ,OAAOuB,QAAP,IAAmBX,UAAU,QAD9B,IAEAA,UAAU,MAHZ;;AAKA,QAAIS,WAAJ,EAAiB;AACf,UAAIG,CAAJ;AACA,UAAIX,QAAQG,QAAZ,EACEQ,IAAI,IAAIxB,OAAOyB,KAAX,CAAiB,GAAjB,EAAsB,+BAAtB,CAAJ,CADF,KAEKD,IAAI,IAAIC,KAAJ,CAAU,mCAAV,CAAJ;AACLD,QAAEE,eAAF,GAAoB,IAApB,CALe,CAOf;AACA;;AACA,UAAI1B,OAAOsB,QAAP,IAAmBT,QAAQK,kBAA/B,EAAmD;AACjD,YAAIS,SAASC,IAAIC,OAAJ,CAAY,eAAZ,CAAb;;AACA,YAAIC,IAAI,IAAIH,MAAJ,EAAR;AACAG,UAAE,OAAF,EAAWN,CAAX;AACAA,YAAIM,EAAEC,IAAF,EAAJ;AACD;;AACD,YAAMP,CAAN;AACD;AACF,GA5CY;AA6CbQ,aAAW,UAASC,MAAT,EAAiB;AAC1B7B,UAAM6B,MAAN,EAAc3B,MAAM4B,KAAN,CAAYpB,MAAZ,EAAoB,IAApB,CAAd;AACA,SAAKkB,SAAL,CAAeC,MAAf;AACD;AAhDY,CAAf,E,CAmDA;AACA;AACA;AACA;AACA;;AACA,IAAIjC,OAAOsB,QAAX,EAAqB;AACnB;AACA;AACA,MAAIa,UAAUhB,OAAOC,MAAP,CAAc,IAAd,CAAd;;AAEA,MAAIO,SAASC,IAAIC,OAAJ,CAAY,eAAZ,CAAb;;AAEA,MAAIO,sBAAsB,UAASC,KAAT,EAAgBC,WAAhB,EAA6B;AACrD;AACA,QAAIC,SAASJ,QAAQE,KAAR,CAAb;AACA,QAAI,CAACE,MAAL,EAAa;AACb,WAAOJ,QAAQE,KAAR,CAAP;AACAE,WAAOC,MAAP,CAAc,QAAd,EAAwBF,WAAxB;AACD,GAND;;AAQAtC,SAAOC,OAAP,CAAe;AACbwC,iBAAa,UAASJ,KAAT,EAAgB;AAC3BjC,YAAMiC,KAAN,EAAavB,MAAb;AACA,UAAIyB,SAAUJ,QAAQE,KAAR,IAAiB;AAC7BG,gBAAQ,IAAIb,MAAJ,EADqB;AAE7Be,eAAO1C,OAAO2C,UAAP,CAAkB,YAAW;AAClCP,8BAAoBC,KAApB,EAA2B,IAA3B;AACD,SAFM,EAEJ,IAFI;AAFsB,OAA/B;AAOA,WAAKO,OAAL;AACA,aAAOL,OAAOC,MAAP,CAAcT,IAAd,EAAP;AACD,KAZY;AAabc,2CAAuC,UAASR,KAAT,EAAgB;AACrDjC,YAAMiC,KAAN,EAAavB,MAAb;AACA,UAAIyB,SAASJ,QAAQE,KAAR,CAAb;AACA,UAAI,CAACE,MAAL,EAAa,OAHwC,CAGhC;;AACrBO,mBAAaP,OAAOG,KAApB;AACAN,0BAAoBC,KAApB,EAA2B,KAA3B;AACD;AAnBY,GAAf;AAqBD;AAED;;;AAEAU,SAAS,IAAIC,MAAMC,UAAV,CAAqB,QAArB,CAAT;AACAF,OAAOG,KAAP,CAAa;AACXC,UAAQ,YAAW;AACjB,WAAO,IAAP;AACD,GAHU;AAIXC,UAAQ,YAAW;AACjB,WAAO,IAAP;AACD,GANU;AAOXC,UAAQ,YAAW;AACjB,WAAO,IAAP;AACD,GATU;AAUXC,SAAO;AAVI,CAAb;AAaAtD,OAAOuD,OAAP,CAAe,YAAW;AACxB,MAAIvD,OAAOsB,QAAX,EAAqByB,OAAOM,MAAP,CAAc,EAAd,EADG,CACgB;AACzC,CAFD;AAIA,IAAIrD,OAAOsB,QAAX,EACEtB,OAAOwD,OAAP,CAAe,QAAf,EAAyB,UAASC,KAAT,EAAgB;AACvCrD,QAAMqD,KAAN,EAAa3C,MAAb;AACA,SAAOiC,OAAOW,IAAP,CAAY;AAAED,WAAOA;AAAT,GAAZ,CAAP;AACD,CAHD;AAKFzD,OAAOC,OAAP,CAAe;AACb,qBAAmB,UAASwD,KAAT,EAAgBE,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4CC,KAA5C,EAAmD;AACpE1D,UAAMqD,KAAN,EAAa3C,MAAb;AACAV,UAAMuD,SAAN,EAAiB7C,MAAjB;AACAV,UAAMwD,OAAN,EAAe9C,MAAf;AACAV,UAAMyD,MAAN,EAAcE,MAAd;AACA3D,UAAM0D,KAAN,EAAaxD,MAAMS,QAAN,CAAeE,OAAf,CAAb;AACA,QAAI+C,OAAOjB,OAAOkB,OAAP,CAAe;AAAEC,YAAMP,SAAR;AAAmBF,aAAOA;AAA1B,KAAf,CAAX;AACA,QAAIU,KAAKpB,OAAOkB,OAAP,CAAe;AAAEC,YAAMN,OAAR;AAAiBH,aAAOA;AAAxB,KAAf,CAAT;AAEA,QAAIzD,OAAOsB,QAAX,EAAqBwC,QAAQ,KAAR;AAErB,QAAI,CAACE,IAAL,EACE,MAAM,IAAIhE,OAAOyB,KAAX,CACJ,GADI,EAEJ,qBAAqBkC,SAArB,GAAiC,MAAjC,GAA0CF,KAFtC,CAAN;AAKF,QAAI,CAACU,EAAL,EACE,MAAM,IAAInE,OAAOyB,KAAX,CACJ,GADI,EAEJ,qBAAqBmC,OAArB,GAA+B,MAA/B,GAAwCH,KAFpC,CAAN;AAKF,QAAIO,KAAKI,OAAL,GAAeP,MAAf,IAAyB,CAACC,KAA9B,EACE,MAAM,IAAI9D,OAAOyB,KAAX,CAAiB,GAAjB,EAAsB,oBAAtB,CAAN;AAEFsB,WAAOK,MAAP,CAAcY,KAAKK,GAAnB,EAAwB;AAAEC,YAAM;AAAEF,iBAAS,CAACP;AAAZ;AAAR,KAAxB;AACAd,WAAOK,MAAP,CAAce,GAAGE,GAAjB,EAAsB;AAAEC,YAAM;AAAEF,iBAASP;AAAX;AAAR,KAAtB;AACD;AA7BY,CAAf;AAgCA;AAEA;;AAEAU,mBAAmB,IAAIvB,MAAMC,UAAV,CAAqB,kBAArB,CAAnB;;AAEA,IAAIjD,OAAOsB,QAAX,EAAqB;AACnBiD,mBAAiBlB,MAAjB,CAAwB,EAAxB;AACAkB,mBAAiBpB,MAAjB,CAAwB;AAAEe,UAAM,eAAR;AAAyBM,kBAAc,CAAC,IAAD;AAAvC,GAAxB;AACAD,mBAAiBpB,MAAjB,CAAwB;AAAEe,UAAM,kBAAR;AAA4BM,kBAAc,CAAC,GAAD;AAA1C,GAAxB;AACAD,mBAAiBpB,MAAjB,CAAwB;AACtBe,UAAM,sBADgB;AAEtBM,kBAAc,CAAC,GAAD,EAAM,GAAN;AAFQ,GAAxB;AAIAD,mBAAiBpB,MAAjB,CAAwB;AACtBe,UAAM,sBADgB;AAEtBM,kBAAc,CAAC,GAAD,EAAM,GAAN;AAFQ,GAAxB;AAIAD,mBAAiBpB,MAAjB,CAAwB;AAAEe,UAAM,kBAAR;AAA4BM,kBAAc,CAAC,GAAD;AAA1C,GAAxB;AACAD,mBAAiBpB,MAAjB,CAAwB;AAAEe,UAAM,kBAAR;AAA4BM,kBAAc,CAAC,GAAD;AAA1C,GAAxB;AAEAxE,SAAOwD,OAAP,CAAe,kBAAf,EAAmC,YAAW;AAC5C,WAAOe,iBAAiBb,IAAjB,CACL;AAAEc,oBAAc,KAAKvC;AAArB,KADK,EAEL;AAAEwC,cAAQ;AAAED,sBAAc;AAAhB;AAAV,KAFK,CAAP;AAID,GALD;;AAOA,GAAC,YAAW;AACV,QAAIE,oBAAoBvD,OAAOC,MAAP,CAAc,IAAd,CAAxB;AACApB,WAAOwD,OAAP,CAAe,oBAAf,EAAqC,UAASmB,GAAT,EAAc;AACjDvE,YAAMuE,GAAN,EAAW7D,MAAX;AACA,UAAI8D,OAAO,IAAX;AACAA,WAAKC,MAAL,CAAY,YAAW;AACrBH,0BAAkBC,GAAlB,IAAyBC,KAAK3C,MAA9B;AACD,OAFD;AAGD,KAND;AAQAjC,WAAOC,OAAP,CAAe;AACbyE,yBAAmB,UAASC,GAAT,EAAc;AAC/BvE,cAAMuE,GAAN,EAAW7D,MAAX;AACA,eAAO4D,kBAAkBC,GAAlB,CAAP;AACD;AAJY,KAAf;AAMD,GAhBD;AAiBD;AAED;AAEA;;;AAEA,IAAI3E,OAAOsB,QAAX,EAAqB;AACnBtB,SAAOuD,OAAP,CAAe,YAAW;AACxBuB,sDAAkD,IAAlD;;AACA,QAAI;AACF9E,aAAO+E,IAAP,CAAY,WAAZ,EAAyB,MAAzB;AACD,KAFD,CAEE,OAAOvD,CAAP,EAAU;AACVsD,wDAAkDtD,CAAlD;AACD;AACF,GAPD;AAQD,C,CAED;;;AAEA,IAAIxB,OAAOsB,QAAX,EAAqB;AACnBtB,SAAOC,OAAP,CAAe;AACb+E,2BAAuB,YAAW;AAChC,WAAKpC,OAAL;AACA,UAAIqC,QAAQ,KAAZ;AACA,UAAIC,iBAAiB,KAAKjD,MAA1B;;AACA,UAAI;AACF;AACA;AACA,aAAKD,SAAL,CAAekD,iBAAiB,KAAhC;AACD,OAJD,CAIE,OAAO1D,CAAP,EAAU;AACVyD,gBAAQ,IAAR;AACD;;AACD,aAAOA,SAAS,KAAKhD,MAAL,KAAgBiD,cAAhC;AACD;AAbY,GAAf;AAeD;AAED;AAEA;;;AAEA,IAAIlF,OAAOsB,QAAX,EAAqB;AACnB,GAAC,YAAW;AACV,QAAI6D,WAAW,0BAAf;AACA,QAAIC,uBAAuB,CAAC,EAAD,EAAK,EAAL,CAA3B;;AAEA5E,MAAE6E,IAAF,CAAO,CAAC,CAAD,EAAI,CAAJ,CAAP,EAAe,UAASC,KAAT,EAAgB;AAC7BtF,aAAOwD,OAAP,CAAe,IAAf,EAAqB,YAAW;AAC9B,YAAI+B,MAAM,IAAV;AACAH,6BAAqBE,KAArB,EAA4BE,IAA5B,CAAiCD,GAAjC;AACAA,YAAIV,MAAJ,CAAW,YAAW;AACpBO,+BAAqBE,KAArB,IAA8B9E,EAAEiF,OAAF,CAC5BL,qBAAqBE,KAArB,CAD4B,EAE5BC,GAF4B,CAA9B;AAID,SALD;AAMD,OATD;AAUD,KAXD;;AAaAvF,WAAOC,OAAP,CAAe;AACbyF,2BAAqB,UAASrD,KAAT,EAAgB;AACnCjC,cAAMiC,KAAN,EAAavB,MAAb;;AACAN,UAAE6E,IAAF,CAAOD,qBAAqB,CAArB,CAAP,EAAgC,UAASG,GAAT,EAAc;AAC5CA,cAAII,KAAJ,CAAUR,QAAV,EAAoB9C,KAApB,EAA2B,EAA3B;AACD,SAFD;;AAGA7B,UAAE6E,IAAF,CAAOD,qBAAqB,CAArB,CAAP,EAAgC,UAASG,GAAT,EAAc;AAC5CA,cAAII,KAAJ,CAAUR,QAAV,EAAoB9C,KAApB,EAA2B,EAA3B;AACD,SAFD;;AAGA7B,UAAE6E,IAAF,CAAOD,qBAAqB,CAArB,CAAP,EAAgC,UAASG,GAAT,EAAc;AAC5CA,cAAIK,OAAJ,CAAYT,QAAZ,EAAsB9C,KAAtB;AACD,SAFD;AAGD;AAZY,KAAf;AAcD,GA/BD;AAgCD,C,CAED;;;AAEA,IAAIrC,OAAOsB,QAAX,EAAqB;AACnBtB,SAAOC,OAAP,CAAe;AACb4F,iCAA6B,UAASxD,KAAT,EAAgB;AAC3CjC,YAAMiC,KAAN,EAAavB,MAAb;AACAd,aAAOwD,OAAP,CAAe,IAAf,EAAqB,YAAW;AAC9B,aAAKmC,KAAL,CAAW,oBAAX,EAAiCtD,KAAjC,EAAwC,EAAxC;AACD,OAFD;AAGD;AANY,GAAf;AAQD,C,CAED;;;AAEA,IAAIrC,OAAOsB,QAAX,EAAqB;AACnBtB,SAAOwD,OAAP,CAAe,iBAAf,EAAkC,UAAS2B,QAAT,EAAmBtE,OAAnB,EAA4B;AAC5DT,UAAM+E,QAAN,EAAgBrE,MAAhB,EAD4D,CAE5D;;AACAV,UAAMS,OAAN,EAAeM,MAAf;AACA,QAAIoE,MAAM,IAAV,CAJ4D,CAM5D;AACA;AACA;;AACAA,QAAII,KAAJ,CAAUR,QAAV,EAAoBW,OAAOC,EAAP,EAApB,EAAiC;AAAEC,WAAK;AAAP,KAAjC;AACAT,QAAIU,KAAJ;;AAEA,QAAIpF,QAAQqF,aAAZ,EAA2B;AACzBX,UAAIY,IAAJ;AACA;AACD;;AAED,QAAIC,KAAJ;;AACA,QAAIvF,QAAQwF,aAAZ,EAA2B;AACzBD,cAAQ,IAAI3E,KAAJ,CAAU,QAAV,CAAR;AACA2E,YAAM1E,eAAN,GAAwB,IAAxB,CAFyB,CAEK;AAC/B,KAHD,MAGO;AACL0E,cAAQ,IAAIpG,OAAOyB,KAAX,CAAiB,GAAjB,EAAsB,gBAAtB,CAAR;AACD;;AACD,QAAIZ,QAAQyF,cAAZ,EAA4B;AAC1B,YAAMF,KAAN;AACD,KAFD,MAEO,IAAIvF,QAAQ0F,cAAZ,EAA4B;AACjChB,UAAIa,KAAJ,CAAUA,KAAV;AACD,KAFM,MAEA,IAAIvF,QAAQ2F,kBAAZ,EAAgC;AACrC,UAAIjB,IAAItD,MAAR,EAAgB,MAAMmE,KAAN;AACjB,KAFM,MAEA,IAAIvF,QAAQ4F,UAAZ,EAAwB;AAC7BzG,aAAO0G,KAAP,CAAa,YAAW;AACtBnB,YAAIa,KAAJ,CAAUA,KAAV;AACD,OAFD;AAGD;AACF,GAnCD;AAoCD;AAED;AAEA;;;AACAO,MAAM,IAAI3D,MAAMC,UAAV,CAAqB,eAArB,CAAN;AACA2D,MAAM,IAAI5D,MAAMC,UAAV,CAAqB,eAArB,CAAN;;AAEA,IAAIjD,OAAOsB,QAAX,EAAqB;AACnBqF,MAAItD,MAAJ,CAAW,EAAX;AACAsD,MAAIxD,MAAJ,CAAW;AAAEe,UAAM;AAAR,GAAX;AACAyC,MAAIxD,MAAJ,CAAW;AAAEe,UAAM;AAAR,GAAX;AAEA0C,MAAIvD,MAAJ,CAAW,EAAX;AACAuD,MAAIzD,MAAJ,CAAW;AAAEe,UAAM;AAAR,GAAX;AACA0C,MAAIzD,MAAJ,CAAW;AAAEe,UAAM;AAAR,GAAX;AACA0C,MAAIzD,MAAJ,CAAW;AAAEe,UAAM;AAAR,GAAX;AAEAlE,SAAOwD,OAAP,CAAe,cAAf,EAA+B,UAAS3C,OAAT,EAAkB;AAC/C;AACAT,UAAMS,OAAN,EAAeM,MAAf;;AACA,QAAIN,QAAQgG,MAAZ,EAAoB;AAClB,aAAO,CAACF,IAAIjD,IAAJ,EAAD,EAAakD,IAAIlD,IAAJ,EAAb,CAAP;AACD,KAFD,MAEO,IAAI7C,QAAQiG,GAAZ,EAAiB;AACtB;AACA9G,aAAO+G,aAAP,CAAqB,CAArB;;AACA,aAAO,CACLJ,IAAIjD,IAAJ,EADK,EAELiD,IAAIjD,IAAJ,CAAS;AAAEQ,cAAM;AAAR,OAAT,CAFK,EAEyB;AAC9B0C,UAAIlD,IAAJ,EAHK,CAAP;AAKD,KARM,MAQA,IAAI7C,QAAQmG,SAAZ,EAAuB;AAC5B;AACAhH,aAAO+G,aAAP,CAAqB,CAArB;;AACA,aAAO,CAACJ,IAAIjD,IAAJ,EAAD,EAAa,cAAb,EAA6BkD,IAAIlD,IAAJ,EAA7B,CAAP;AACD,KAJM,MAIA,MAAM,oBAAN;AACR,GAlBD;AAmBD,C,CAED;;;AACA,IAAIuD,sBAAsB9F,OAAOC,MAAP,CAAc,IAAd,CAA1B;AACApB,OAAOC,OAAP,CAAe;AACbiH,YAAU,UAASC,MAAT,EAAiB;AACzB,QAAI,CAAC3G,EAAE4G,GAAF,CAAMH,mBAAN,EAA2BE,MAA3B,CAAL,EAAyCF,oBAAoBE,MAApB,IAA8B,EAA9B;AACzC,WAAOF,oBAAoBE,MAApB,CAAP;AACD,GAJY;AAKbE,eAAa,UAASF,MAAT,EAAiBG,KAAjB,EAAwB;AACnC,QAAI,CAAC9G,EAAE4G,GAAF,CAAMH,mBAAN,EAA2BE,MAA3B,CAAL,EAAyCF,oBAAoBE,MAApB,IAA8B,EAA9B;AACzCF,wBAAoBE,MAApB,EAA4B3B,IAA5B,CAAiC8B,KAAjC;AACD;AARY,CAAf","sourcesContent":["Meteor.methods({\n  nothing: function() {\n    // No need to check if there are no arguments.\n  },\n  echo: function(/* arguments */) {\n    check(arguments, [Match.Any]);\n    return _.toArray(arguments);\n  },\n  echoOne: function(/*arguments*/) {\n    check(arguments, [Match.Any]);\n    return arguments[0];\n  },\n  exception: function(where, options) {\n    check(where, String);\n    check(\n      options,\n      Match.Optional({\n        intended: Match.Optional(Boolean),\n        throwThroughFuture: Match.Optional(Boolean)\n      })\n    );\n    options = options || Object.create(null);\n    var shouldThrow =\n      (Meteor.isServer && where === 'server') ||\n      (Meteor.isClient && where === 'client') ||\n      where === 'both';\n\n    if (shouldThrow) {\n      var e;\n      if (options.intended)\n        e = new Meteor.Error(999, 'Client-visible test exception');\n      else e = new Error('Test method throwing an exception');\n      e._expectedByTest = true;\n\n      // We used to improperly serialize errors that were thrown through a\n      // future first.\n      if (Meteor.isServer && options.throwThroughFuture) {\n        var Future = Npm.require('fibers/future');\n        var f = new Future();\n        f['throw'](e);\n        e = f.wait();\n      }\n      throw e;\n    }\n  },\n  setUserId: function(userId) {\n    check(userId, Match.OneOf(String, null));\n    this.setUserId(userId);\n  }\n});\n\n// Methods to help test applying methods with `wait: true`: delayedTrue returns\n// true 1s after being run unless makeDelayedTrueImmediatelyReturnFalse was run\n// in the meanwhile. Increasing the timeout makes the \"wait: true\" test slower;\n// decreasing the timeout makes the \"wait: false\" test flakier (ie, the timeout\n// could fire before processing the second method).\nif (Meteor.isServer) {\n  // Keys are random tokens, used to isolate multiple test invocations from each\n  // other.\n  var waiters = Object.create(null);\n\n  var Future = Npm.require('fibers/future');\n\n  var returnThroughFuture = function(token, returnValue) {\n    // Make sure that when we call return, the fields are already cleared.\n    var record = waiters[token];\n    if (!record) return;\n    delete waiters[token];\n    record.future['return'](returnValue);\n  };\n\n  Meteor.methods({\n    delayedTrue: function(token) {\n      check(token, String);\n      var record = (waiters[token] = {\n        future: new Future(),\n        timer: Meteor.setTimeout(function() {\n          returnThroughFuture(token, true);\n        }, 1000)\n      });\n\n      this.unblock();\n      return record.future.wait();\n    },\n    makeDelayedTrueImmediatelyReturnFalse: function(token) {\n      check(token, String);\n      var record = waiters[token];\n      if (!record) return; // since delayedTrue's timeout had already run\n      clearTimeout(record.timer);\n      returnThroughFuture(token, false);\n    }\n  });\n}\n\n/*****/\n\nLedger = new Mongo.Collection('ledger');\nLedger.allow({\n  insert: function() {\n    return true;\n  },\n  update: function() {\n    return true;\n  },\n  remove: function() {\n    return true;\n  },\n  fetch: []\n});\n\nMeteor.startup(function() {\n  if (Meteor.isServer) Ledger.remove({}); // XXX can this please be Ledger.remove()?\n});\n\nif (Meteor.isServer)\n  Meteor.publish('ledger', function(world) {\n    check(world, String);\n    return Ledger.find({ world: world });\n  });\n\nMeteor.methods({\n  'ledger/transfer': function(world, from_name, to_name, amount, cheat) {\n    check(world, String);\n    check(from_name, String);\n    check(to_name, String);\n    check(amount, Number);\n    check(cheat, Match.Optional(Boolean));\n    var from = Ledger.findOne({ name: from_name, world: world });\n    var to = Ledger.findOne({ name: to_name, world: world });\n\n    if (Meteor.isServer) cheat = false;\n\n    if (!from)\n      throw new Meteor.Error(\n        404,\n        'No such account ' + from_name + ' in ' + world\n      );\n\n    if (!to)\n      throw new Meteor.Error(\n        404,\n        'No such account ' + to_name + ' in ' + world\n      );\n\n    if (from.balance < amount && !cheat)\n      throw new Meteor.Error(409, 'Insufficient funds');\n\n    Ledger.update(from._id, { $inc: { balance: -amount } });\n    Ledger.update(to._id, { $inc: { balance: amount } });\n  }\n});\n\n/*****/\n\n/// Helpers for \"livedata - changing userid reruns subscriptions...\"\n\nobjectsWithUsers = new Mongo.Collection('objectsWithUsers');\n\nif (Meteor.isServer) {\n  objectsWithUsers.remove({});\n  objectsWithUsers.insert({ name: 'owned by none', ownerUserIds: [null] });\n  objectsWithUsers.insert({ name: 'owned by one - a', ownerUserIds: ['1'] });\n  objectsWithUsers.insert({\n    name: 'owned by one/two - a',\n    ownerUserIds: ['1', '2']\n  });\n  objectsWithUsers.insert({\n    name: 'owned by one/two - b',\n    ownerUserIds: ['1', '2']\n  });\n  objectsWithUsers.insert({ name: 'owned by two - a', ownerUserIds: ['2'] });\n  objectsWithUsers.insert({ name: 'owned by two - b', ownerUserIds: ['2'] });\n\n  Meteor.publish('objectsWithUsers', function() {\n    return objectsWithUsers.find(\n      { ownerUserIds: this.userId },\n      { fields: { ownerUserIds: 0 } }\n    );\n  });\n\n  (function() {\n    var userIdWhenStopped = Object.create(null);\n    Meteor.publish('recordUserIdOnStop', function(key) {\n      check(key, String);\n      var self = this;\n      self.onStop(function() {\n        userIdWhenStopped[key] = self.userId;\n      });\n    });\n\n    Meteor.methods({\n      userIdWhenStopped: function(key) {\n        check(key, String);\n        return userIdWhenStopped[key];\n      }\n    });\n  })();\n}\n\n/*****/\n\n/// Helper for \"livedata - setUserId fails when called on server\"\n\nif (Meteor.isServer) {\n  Meteor.startup(function() {\n    errorThrownWhenCallingSetUserIdDirectlyOnServer = null;\n    try {\n      Meteor.call('setUserId', '1000');\n    } catch (e) {\n      errorThrownWhenCallingSetUserIdDirectlyOnServer = e;\n    }\n  });\n}\n\n/// Helper for \"livedata - no setUserId after unblock\"\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    setUserIdAfterUnblock: function() {\n      this.unblock();\n      var threw = false;\n      var originalUserId = this.userId;\n      try {\n        // Calling setUserId after unblock should throw an error (and not mutate\n        // userId).\n        this.setUserId(originalUserId + 'bla');\n      } catch (e) {\n        threw = true;\n      }\n      return threw && this.userId === originalUserId;\n    }\n  });\n}\n\n/*****/\n\n/// Helper for \"livedata - overlapping universal subs\"\n\nif (Meteor.isServer) {\n  (function() {\n    var collName = 'overlappingUniversalSubs';\n    var universalSubscribers = [[], []];\n\n    _.each([0, 1], function(index) {\n      Meteor.publish(null, function() {\n        var sub = this;\n        universalSubscribers[index].push(sub);\n        sub.onStop(function() {\n          universalSubscribers[index] = _.without(\n            universalSubscribers[index],\n            sub\n          );\n        });\n      });\n    });\n\n    Meteor.methods({\n      testOverlappingSubs: function(token) {\n        check(token, String);\n        _.each(universalSubscribers[0], function(sub) {\n          sub.added(collName, token, {});\n        });\n        _.each(universalSubscribers[1], function(sub) {\n          sub.added(collName, token, {});\n        });\n        _.each(universalSubscribers[0], function(sub) {\n          sub.removed(collName, token);\n        });\n      }\n    });\n  })();\n}\n\n/// Helper for \"livedata - runtime universal sub creation\"\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    runtimeUniversalSubCreation: function(token) {\n      check(token, String);\n      Meteor.publish(null, function() {\n        this.added('runtimeSubCreation', token, {});\n      });\n    }\n  });\n}\n\n/// Helper for \"livedata - publisher errors\"\n\nif (Meteor.isServer) {\n  Meteor.publish('publisherErrors', function(collName, options) {\n    check(collName, String);\n    // See below to see what options are accepted.\n    check(options, Object);\n    var sub = this;\n\n    // First add a random item, which should be cleaned up. We use ready/onReady\n    // to make sure that the second test block is only called after the added is\n    // processed, so that there's any chance of the coll.find().count() failing.\n    sub.added(collName, Random.id(), { foo: 42 });\n    sub.ready();\n\n    if (options.stopInHandler) {\n      sub.stop();\n      return;\n    }\n\n    var error;\n    if (options.internalError) {\n      error = new Error('Egads!');\n      error._expectedByTest = true; // don't log\n    } else {\n      error = new Meteor.Error(412, 'Explicit error');\n    }\n    if (options.throwInHandler) {\n      throw error;\n    } else if (options.errorInHandler) {\n      sub.error(error);\n    } else if (options.throwWhenUserIdSet) {\n      if (sub.userId) throw error;\n    } else if (options.errorLater) {\n      Meteor.defer(function() {\n        sub.error(error);\n      });\n    }\n  });\n}\n\n/*****/\n\n/// Helpers for \"livedata - publish multiple cursors\"\nOne = new Mongo.Collection('collectionOne');\nTwo = new Mongo.Collection('collectionTwo');\n\nif (Meteor.isServer) {\n  One.remove({});\n  One.insert({ name: 'value1' });\n  One.insert({ name: 'value2' });\n\n  Two.remove({});\n  Two.insert({ name: 'value3' });\n  Two.insert({ name: 'value4' });\n  Two.insert({ name: 'value5' });\n\n  Meteor.publish('multiPublish', function(options) {\n    // See below to see what options are accepted.\n    check(options, Object);\n    if (options.normal) {\n      return [One.find(), Two.find()];\n    } else if (options.dup) {\n      // Suppress the log of the expected internal error.\n      Meteor._suppress_log(1);\n      return [\n        One.find(),\n        One.find({ name: 'value2' }), // multiple cursors for one collection - error\n        Two.find()\n      ];\n    } else if (options.notCursor) {\n      // Suppress the log of the expected internal error.\n      Meteor._suppress_log(1);\n      return [One.find(), 'not a cursor', Two.find()];\n    } else throw 'unexpected options';\n  });\n}\n\n/// Helper for \"livedata - result by value\"\nvar resultByValueArrays = Object.create(null);\nMeteor.methods({\n  getArray: function(testId) {\n    if (!_.has(resultByValueArrays, testId)) resultByValueArrays[testId] = [];\n    return resultByValueArrays[testId];\n  },\n  pushToArray: function(testId, value) {\n    if (!_.has(resultByValueArrays, testId)) resultByValueArrays[testId] = [];\n    resultByValueArrays[testId].push(value);\n  }\n});\n"]},"sourceType":"script","hash":"6452e7e2285e0039f053795c701124a5b920566a"}
