{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/api/config.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/config.js","filename":"imports/api/config.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"imports/api/config.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/config.js"}},"code":"module.export({\n  senseConfig: () => senseConfig,\n  missingParameters: () => missingParameters\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\n\nconst _QIXSchema = require('enigma.js/schemas/3.2.json'); //This is the config that we need to make available on the client (the webpage)\n\n\nif (Meteor.isClient) {\n  var _senseConfig = {\n    \"host\": Meteor.settings.public.qlikSenseHost,\n    \"port\": Meteor.settings.public.qlikSensePort,\n    \"useSSL\": Meteor.settings.public.useSSL,\n    \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n    \"virtualProxySlideGenerator\": Meteor.settings.public.slideGenerator.virtualProxy,\n    \"webIntegrationDemoPort\": Meteor.settings.public.webIntegrationDemoPort,\n    \"QIXSchema\": _QIXSchema //ssbi and slide generator app id are set automatically on main.js (client side, via a call to the server)\n    // config.SSBIAppId = \n    // config.slideGeneratorAppId = \n\n  };\n} //SERVER SIDE\n\n\nif (Meteor.isServer) {\n  module.export({\n    authHeaders: () => authHeaders,\n    validateJSON: () => validateJSON,\n    QRSconfig: () => QRSconfig\n  });\n  let sslRootCas;\n  module.watch(require(\"ssl-root-cas\"), {\n    default(v) {\n      sslRootCas = v;\n    }\n\n  }, 3);\n  let crypto;\n  module.watch(require(\"crypto\"), {\n    default(v) {\n      crypto = v;\n    }\n\n  }, 4);\n  let myQRS;\n  module.watch(require(\"/imports/api/server/QRSAPI\"), {\n    myQRS(v) {\n      myQRS = v;\n    }\n\n  }, 5);\n  process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n  sslRootCas.inject();\n  console.log('This tool uses this config as defined in the settings-XYZ.json file in the root folder: ', Meteor.settings);\n\n  var fs = require('fs-extra');\n\n  const path = require('path');\n\n  var os = require('os'); // import fs from 'fs';\n\n\n  const bluebird = require('bluebird');\n\n  const WebSocket = require('ws');\n\n  if (!Meteor.settings.public.qlikSenseHost) {\n    Meteor.settings.public.qlikSenseHost = os.hostname();\n  }\n\n  if (!Meteor.settings.public.SenseServerInternalLanIP) {\n    Meteor.settings.public.SenseServerInternalLanIP = os.hostname();\n  }\n\n  if (!Meteor.settings.public.webIntegrationHost) {\n    Meteor.settings.public.webIntegrationHost = os.hostname();\n  }\n\n  var _senseConfig = {\n    \"host\": Meteor.settings.public.qlikSenseHost,\n    \"SenseServerInternalLanIP\": Meteor.settings.public.SenseServerInternalLanIP,\n    \"port\": Meteor.settings.public.qlikSensePort,\n    \"useSSL\": Meteor.settings.public.useSSL,\n    \"xrfkey\": generateXrfkey(),\n    \"virtualProxy\": Meteor.settings.private.virtualProxy,\n    //used to connect via REST to Sense, we authenticate via a http header. not for production!!!\n    \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n    \"headerKey\": Meteor.settings.private.headerKey,\n    \"headerValue\": process.env.USERDOMAIN + '\\\\' + process.env.USERNAME,\n    //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n    \"isSecure\": Meteor.settings.private.isSecure,\n    \"qrsPort\": Meteor.settings.private.qrsPort,\n    \"enginePort\": Meteor.settings.private.enginePort\n  };\n\n  if (missingParameters(_senseConfig)) {\n    throw new Meteor.Error('Missing parameters in _senseConfig, you did not populate the settings.json file in the project root of MeteorQRS, or with docker: did you mount the volume with the config including the settings.json file? (with the correct name)');\n  }\n\n  if (!_senseConfig.host) {\n    throw new Meteor.Error('You have not started this meteor project with: meteor --settings settings-development.json ? You missed the reference to this settings file, or it is empty?');\n  } //CONFIG FOR HTTP MODULE WITH HEADER AUTH (TO MAKE REST CALLS TO SENSE VIA HTTP CALLS).\n\n\n  const authHeaders = {\n    'hdr-usr': _senseConfig.headerValue,\n    'X-Qlik-xrfkey': _senseConfig.xrfkey //\n\n  };\n\n  if (!Meteor.settings.private.certificatesDirectory) {\n    Meteor.settings.private.certificatesDirectory = 'C:\\\\ProgramData\\\\Qlik\\\\Sense\\\\Repository\\\\Exported Certificates\\\\.Local Certificates';\n    console.log('Meteor.settings.private.certificatesDirectory was empty, setting it to default: ', Meteor.settings.private.certificatesDirectory);\n  }\n\n  try {\n    module.export({\n      _certs: () => _certs,\n      configCerticates: () => configCerticates,\n      enigmaServerConfig: () => enigmaServerConfig,\n      engineConfig: () => engineConfig,\n      qlikHDRServer: () => qlikHDRServer,\n      qrsSrv: () => qrsSrv,\n      qrs: () => qrs\n    });\n    const _certs = {\n      ca: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/root.pem'),\n      key: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client_key.pem'),\n      cert: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client.pem') //if you use windows and this tool runs on the same machine, you can keep the parameters empty\n      // and we use the user the node service runs under... .\n\n    };\n    var qlikUserDomain = '';\n    var qlikUser = '';\n\n    if (!Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory) {\n      qlikUserDomain = process.env.USERDOMAIN;\n      qlikUser = process.env.USERNAME;\n    } else {\n      qlikUserDomain = Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory;\n      qlikUser = Meteor.settings.broker.qlikSense.connectToSenseAsUser;\n    }\n\n    var configCerticates = {\n      rejectUnauthorized: false,\n      hostname: _senseConfig.SenseServerInternalLanIP,\n      headers: {\n        'x-qlik-xrfkey': _senseConfig.xrfkey,\n        'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n        //`UserDirectory=INTERNAL;UserId=sa_repository` you need to give this user extra roles before this works\n        'Content-Type': 'application/json'\n      },\n      key: _certs.key,\n      cert: _certs.cert,\n      ca: _certs.ca\n    };\n    console.log('configCerticates: we connect to Qlik Sense via certificates using these credentials: ', configCerticates); //used for engimaJS, the engine API javascript wrapper\n\n    var _engineConfig = {\n      host: _senseConfig.SenseServerInternalLanIP,\n      isSecure: _senseConfig.isSecure,\n      port: Meteor.settings.private.enginePort,\n      headers: {\n        'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`\n      },\n      ca: _certs.ca,\n      key: _certs.key,\n      cert: _certs.cert,\n      passphrase: Meteor.settings.private.passphrase,\n      rejectUnauthorized: false,\n      // Don't reject self-signed certs\n      appname: null,\n      QIXSchema: _QIXSchema\n    };\n    const enigmaServerConfig = {\n      schema: _engineConfig.QIXSchema,\n      // appId: appId,\n      session: {\n        host: _engineConfig.host,\n        port: _engineConfig.port\n      },\n      Promise: bluebird,\n\n      createSocket(url) {\n        return new WebSocket(url, {\n          ca: _certs.ca,\n          key: _certs.key,\n          cert: _certs.cert,\n          headers: {\n            'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`\n          }\n        });\n      }\n\n    };\n    const engineConfig = _engineConfig;\n    const qlikHDRServer = 'http://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.port + '/' + _senseConfig.virtualProxy;\n    const qrsSrv = 'https://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.qrsPort;\n    const qrs = new myQRS();\n  } catch (error) {\n    console.warn('Make sure you run the \"QRS START.BAT\" as administrator? Please note that Qlik Sense is not installed, or certificate directory wrong in the settings.json file.'); // throw new Meteor.Error(500, 'We can not connect to Sense yet: Because we can not find the Sense certificates yet in the ' + Meteor.settings.private.certificatesDirectory + '. This can happen if Sense has not yet been installed....');\n  } //END CODE THAT NEEDS CERTIFICATES\n\n\n  function generateXrfkey() {\n    return Random.hexString(16);\n  }\n\n  function validateJSON(body) {\n    try {\n      var data = JSON.parse(body); // if came to here, then valid\n\n      return data;\n    } catch (e) {\n      // failed to parse\n      return null;\n    }\n  }\n\n  const QRSconfig = {\n    authentication: 'header',\n    host: _senseConfig.host,\n    port: _senseConfig.port,\n    useSSL: false,\n    virtualProxy: _senseConfig.virtualProxy,\n    //header proxy\n    headerKey: _senseConfig.headerKey,\n    headerValue: _senseConfig.headerValue //'mydomain\\\\justme'\n\n  };\n\n  try {\n    Meteor.startup(function () {\n      return Promise.asyncApply(() => {\n        console.log('------------------------------------');\n        console.log('Validate settings.json parameters');\n        console.log('------------------------------------');\n        Meteor.absolutePath = path.resolve('.').split(path.sep + '.meteor')[0];\n        console.log('Meteor tries to find the settings-development-example.json file in Meteor.absolutePath:', Meteor.absolutePath);\n        var file = path.join(Meteor.absolutePath, 'settings-development-example.json'); // READ THE FILE \n\n        try {\n          var exampleSettingsFile = Promise.await(fs.readJson(file));\n          console.log('TCL: exampleSettingsFile', exampleSettingsFile);\n        } catch (error) {\n          throw new Error('Meteor can not find your example settings file: ' + file);\n        } // VALIDATE JSON OF SETTINGS FILE AGAINST EXAMPLE SETTINGS FILE\n\n\n        try {\n          validateJSON(exampleSettingsFile);\n        } catch (err) {\n          console.log(err);\n          throw new Error('Meteor wants to check your settings.json with the parameters in the example settings.json in the project root. Error: Cant read the example settings definitions file (not valid JSON): ' + file, err);\n        }\n\n        var keysEqual = compareKeys(Meteor.settings, exampleSettingsFile);\n        console.log('Settings file has all the keys as specified in the example json file?', keysEqual);\n\n        if (!keysEqual) {\n          throw new Error('Settings.json file does not have all keys as defined in the settings-development-example.json (in your project root), Please verify if you have all the keys as specified in the settings-development-example.json in the project root folder. In my dev environment: C:\\\\Users\\\\Qlikexternal\\\\Documents\\\\GitHub\\\\QRSMeteor');\n        }\n      });\n    });\n  } catch (error) {\n    throw new Error(error);\n  }\n} //exit server side config\n\n\nconst senseConfig = _senseConfig;\n\nfunction missingParameters(obj) {\n  for (var key in obj) {\n    if (obj[key] !== null && obj[key] != \"\") return false;\n  }\n\n  return true;\n}\n\nfunction hasSameProps(obj1, obj2) {\n  return Object.keys(obj1).every(function (prop) {\n    return obj2.hasOwnProperty(prop);\n  });\n}\n\nfunction compareKeys(...objects) {\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}","map":{"version":3,"sources":["imports/api/config.js"],"names":["module","export","senseConfig","missingParameters","Mongo","watch","require","v","Random","_","default","_QIXSchema","Meteor","isClient","_senseConfig","settings","public","qlikSenseHost","qlikSensePort","useSSL","virtualProxyClientUsage","slideGenerator","virtualProxy","webIntegrationDemoPort","isServer","authHeaders","validateJSON","QRSconfig","sslRootCas","crypto","myQRS","process","env","inject","console","log","fs","path","os","bluebird","WebSocket","hostname","SenseServerInternalLanIP","webIntegrationHost","generateXrfkey","private","headerKey","USERDOMAIN","USERNAME","isSecure","qrsPort","enginePort","Error","host","headerValue","xrfkey","certificatesDirectory","_certs","configCerticates","enigmaServerConfig","engineConfig","qlikHDRServer","qrsSrv","qrs","ca","readFileSync","key","cert","qlikUserDomain","qlikUser","broker","qlikSense","connectToSenseAsUserDirectory","connectToSenseAsUser","rejectUnauthorized","headers","_engineConfig","port","passphrase","appname","QIXSchema","schema","session","Promise","createSocket","url","error","warn","hexString","body","data","JSON","parse","e","authentication","startup","absolutePath","resolve","split","sep","file","join","exampleSettingsFile","readJson","err","keysEqual","compareKeys","obj","hasSameProps","obj1","obj2","Object","keys","every","prop","hasOwnProperty","objects","allKeys","reduce","object","concat","union","Set","size","length"],"mappings":"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","sourcesContent":["import {\n    Mongo\n} from 'meteor/mongo';\nimport {\n    Random\n} from 'meteor/random';\nimport _ from 'meteor/underscore';\nconst _QIXSchema = require('enigma.js/schemas/3.2.json');\n\n//This is the config that we need to make available on the client (the webpage)\nif (Meteor.isClient) {\n    var _senseConfig = {\n        \"host\": Meteor.settings.public.qlikSenseHost,\n        \"port\": Meteor.settings.public.qlikSensePort,\n        \"useSSL\": Meteor.settings.public.useSSL,\n        \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n        \"virtualProxySlideGenerator\": Meteor.settings.public.slideGenerator.virtualProxy,\n        \"webIntegrationDemoPort\": Meteor.settings.public.webIntegrationDemoPort,\n        \"QIXSchema\": _QIXSchema,\n        //ssbi and slide generator app id are set automatically on main.js (client side, via a call to the server)\n        // config.SSBIAppId = \n        // config.slideGeneratorAppId = \n    };\n}\n\n\n//SERVER SIDE\nif (Meteor.isServer) {\n    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n    import sslRootCas from 'ssl-root-cas';\n    sslRootCas.inject();\n    \n    console.log('This tool uses this config as defined in the settings-XYZ.json file in the root folder: ', Meteor.settings);\n    import crypto from 'crypto';\n    var fs = require('fs-extra');\n    const path = require('path');\n    var os = require('os');\n    // import fs from 'fs';\n    import {\n        myQRS\n    } from '/imports/api/server/QRSAPI';\n    const bluebird = require('bluebird');\n    const WebSocket = require('ws');\n\n    if (!Meteor.settings.public.qlikSenseHost) {\n        Meteor.settings.public.qlikSenseHost = os.hostname();\n    }\n    if (!Meteor.settings.public.SenseServerInternalLanIP) {\n        Meteor.settings.public.SenseServerInternalLanIP = os.hostname();\n    }\n    if (!Meteor.settings.public.webIntegrationHost) {\n        Meteor.settings.public.webIntegrationHost = os.hostname();\n    }\n\n    var _senseConfig = {\n        \"host\": Meteor.settings.public.qlikSenseHost,\n        \"SenseServerInternalLanIP\": Meteor.settings.public.SenseServerInternalLanIP,\n        \"port\": Meteor.settings.public.qlikSensePort,\n        \"useSSL\": Meteor.settings.public.useSSL,\n        \"xrfkey\": generateXrfkey(),\n        \"virtualProxy\": Meteor.settings.private.virtualProxy, //used to connect via REST to Sense, we authenticate via a http header. not for production!!!\n        \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n        \"headerKey\": Meteor.settings.private.headerKey,\n        \"headerValue\": process.env.USERDOMAIN + '\\\\' + process.env.USERNAME, //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n        \"isSecure\": Meteor.settings.private.isSecure,\n        \"qrsPort\": Meteor.settings.private.qrsPort,\n        \"enginePort\": Meteor.settings.private.enginePort\n    };\n\n    if (missingParameters(_senseConfig)) {\n        throw new Meteor.Error('Missing parameters in _senseConfig, you did not populate the settings.json file in the project root of MeteorQRS, or with docker: did you mount the volume with the config including the settings.json file? (with the correct name)');\n    }\n\n    if (!_senseConfig.host) {\n        throw new Meteor.Error('You have not started this meteor project with: meteor --settings settings-development.json ? You missed the reference to this settings file, or it is empty?');\n    }\n\n    //CONFIG FOR HTTP MODULE WITH HEADER AUTH (TO MAKE REST CALLS TO SENSE VIA HTTP CALLS).\n    export const authHeaders = {\n            'hdr-usr': _senseConfig.headerValue,\n            'X-Qlik-xrfkey': _senseConfig.xrfkey\n        } //\n    if (!Meteor.settings.private.certificatesDirectory) {\n        Meteor.settings.private.certificatesDirectory = 'C:\\\\ProgramData\\\\Qlik\\\\Sense\\\\Repository\\\\Exported Certificates\\\\.Local Certificates';\n        console.log('Meteor.settings.private.certificatesDirectory was empty, setting it to default: ', Meteor.settings.private.certificatesDirectory)\n    }\n\n    try {\n        export const _certs = {\n            ca: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/root.pem'),\n            key: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client_key.pem'),\n            cert: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client.pem'),\n        }\n\n        //if you use windows and this tool runs on the same machine, you can keep the parameters empty\n        // and we use the user the node service runs under... .\n        var qlikUserDomain = '';\n        var qlikUser = '';\n\n        if (!Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory) {\n            qlikUserDomain = process.env.USERDOMAIN;\n            qlikUser = process.env.USERNAME;\n        } else {\n            qlikUserDomain = Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory;\n            qlikUser = Meteor.settings.broker.qlikSense.connectToSenseAsUser\n        }\n\n        export var configCerticates = {\n            rejectUnauthorized: false,\n            hostname: _senseConfig.SenseServerInternalLanIP,\n            headers: {\n                'x-qlik-xrfkey': _senseConfig.xrfkey,\n                'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`, //`UserDirectory=INTERNAL;UserId=sa_repository` you need to give this user extra roles before this works\n                'Content-Type': 'application/json'\n            },\n            key: _certs.key,\n            cert: _certs.cert,\n            ca: _certs.ca\n        };\n        console.log('configCerticates: we connect to Qlik Sense via certificates using these credentials: ', configCerticates);\n\n        //used for engimaJS, the engine API javascript wrapper\n        var _engineConfig = {\n            host: _senseConfig.SenseServerInternalLanIP,\n            isSecure: _senseConfig.isSecure,\n            port: Meteor.settings.private.enginePort,\n            headers: {\n                'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n            },\n            ca: _certs.ca,\n            key: _certs.key,\n            cert: _certs.cert,\n            passphrase: Meteor.settings.private.passphrase,\n            rejectUnauthorized: false, // Don't reject self-signed certs\n            appname: null,\n            QIXSchema: _QIXSchema\n        };\n\n        export const enigmaServerConfig = {\n            schema: _engineConfig.QIXSchema,\n            // appId: appId,\n            session: {\n                host: _engineConfig.host,\n                port: _engineConfig.port,\n            },\n            Promise: bluebird,\n            createSocket(url) {\n                return new WebSocket(url, {\n                    ca: _certs.ca,\n                    key: _certs.key,\n                    cert: _certs.cert,\n                    headers: {\n                        'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n                    },\n                });\n            },\n            // handleLog: logRow => console.log(JSON.stringify(logRow)),\n        }\n\n        //for enigma.js\n        export const engineConfig = _engineConfig;\n        //for general (mostly client side) stuff\n\n        // Qlik sense QRS endpoint via header authentication\n        export const qlikHDRServer = 'http://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.port + '/' + _senseConfig.virtualProxy;\n        export const qrsSrv = 'https://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.qrsPort;\n\n        export const qrs = new myQRS();\n    } catch (error) {\n        console.warn('Make sure you run the \"QRS START.BAT\" as administrator? Please note that Qlik Sense is not installed, or certificate directory wrong in the settings.json file.');\n        // throw new Meteor.Error(500, 'We can not connect to Sense yet: Because we can not find the Sense certificates yet in the ' + Meteor.settings.private.certificatesDirectory + '. This can happen if Sense has not yet been installed....');\n\n    } //END CODE THAT NEEDS CERTIFICATES\n\n    function generateXrfkey() {\n        return Random.hexString(16);\n    }\n\n    export function validateJSON(body) {\n        try {\n            var data = JSON.parse(body);\n            // if came to here, then valid\n            return data;\n        } catch (e) {\n            // failed to parse\n            return null;\n        }\n    }\n\n    // //https://www.npmjs.com/package/qrs\n    //HEADER AUTHENTICATION\n    export const QRSconfig = {\n        authentication: 'header',\n        host: _senseConfig.host,\n        port: _senseConfig.port,\n        useSSL: false,\n        virtualProxy: _senseConfig.virtualProxy, //header proxy\n        headerKey: _senseConfig.headerKey,\n        headerValue: _senseConfig.headerValue, //'mydomain\\\\justme'\n    };\n\n    try {\n        Meteor.startup(async function() {\n            console.log('------------------------------------');\n            console.log('Validate settings.json parameters');\n            console.log('------------------------------------');\n            Meteor.absolutePath = path.resolve('.').split(path.sep + '.meteor')[0];\n            console.log('Meteor tries to find the settings-development-example.json file in Meteor.absolutePath:', Meteor.absolutePath)\n            var file = path.join(Meteor.absolutePath, 'settings-development-example.json');\t\t\t\n\n            // READ THE FILE \n            try {\n                var exampleSettingsFile = await fs.readJson(file);                \n\t\t\t\tconsole.log('TCL: exampleSettingsFile', exampleSettingsFile)\n            } catch (error) {\n                throw new Error('Meteor can not find your example settings file: ' + file);\n            }\n\n            // VALIDATE JSON OF SETTINGS FILE AGAINST EXAMPLE SETTINGS FILE\n            try {\n                validateJSON(exampleSettingsFile)\n            } catch (err) {\n                console.log(err);\n                throw new Error('Meteor wants to check your settings.json with the parameters in the example settings.json in the project root. Error: Cant read the example settings definitions file (not valid JSON): ' + file, err);\n            }\n\n            var keysEqual = compareKeys(Meteor.settings, exampleSettingsFile);\n            console.log('Settings file has all the keys as specified in the example json file?', keysEqual)\n            if (!keysEqual) {\n                throw new Error('Settings.json file does not have all keys as defined in the settings-development-example.json (in your project root), Please verify if you have all the keys as specified in the settings-development-example.json in the project root folder. In my dev environment: C:\\\\Users\\\\Qlikexternal\\\\Documents\\\\GitHub\\\\QRSMeteor');\n            }\n        })\n\n    } catch (error) {\n        throw new Error(error);\n    }\n} //exit server side config\n\nexport const senseConfig = _senseConfig;\n\nexport function missingParameters(obj) {\n    for (var key in obj) {\n        if (obj[key] !== null && obj[key] != \"\")\n            return false;\n    }\n    return true;\n}\n\nfunction hasSameProps(obj1, obj2) {\n    return Object.keys(obj1).every(function(prop) {\n        return obj2.hasOwnProperty(prop);\n    });\n}\n\nfunction compareKeys(...objects) {\n    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n    const union = new Set(allKeys);\n    return objects.every(object => union.size === Object.keys(object).length);\n}"]},"sourceType":"script","hash":"533fa1398cd114db9d4e4da116d3bf5a2d77dd2b"}
