{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/autoupdate/autoupdate_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/autoupdate/autoupdate_server.js","filename":"packages/autoupdate/autoupdate_server.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/autoupdate/autoupdate_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_server.js"}},"code":"// Publish the current client versions to the client.  When a client\n// sees the subscription change and that there is a new version of the\n// client available on the server, it can reload.\n//\n// By default there are two current client versions. The refreshable client\n// version is identified by a hash of the client resources seen by the browser\n// that are refreshable, such as CSS, while the non refreshable client version\n// is identified by a hash of the rest of the client assets\n// (the HTML, code, and static files in the `public` directory).\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set it will be\n// used as the client id instead.  You can use this to control when\n// the client reloads.  For example, if you want to only force a\n// reload on major changes, you can use a custom AUTOUPDATE_VERSION\n// which you only change when something worth pushing to clients\n// immediately happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions`\n// collection. There are two documents in this collection, a document\n// with _id 'version' which represents the non refreshable client assets,\n// and a document with _id 'version-refreshable' which represents the\n// refreshable client assets. Each document has a 'version' field\n// which is equivalent to the hash of the relevant assets. The refreshable\n// document also contains a list of the refreshable assets, so that the client\n// can swap in the new assets without forcing a page refresh. Clients can\n// observe changes on these documents to detect when there is a new\n// version available.\n//\n// In this implementation only two documents are present in the collection\n// the current refreshable client version and the current nonRefreshable client\n// version.  Developers can easily experiment with different versioning and\n// updating models by forking this package.\nvar Future = Npm.require(\"fibers/future\");\n\nAutoupdate = {}; // The collection of acceptable client versions.\n\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\", {\n  connection: null\n}); // The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\n\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\nvar syncQueue = new Meteor._SynchronousQueue(); // updateVersions can only be called after the server has fully loaded.\n\nvar updateVersions = function (shouldReloadClientProgram) {\n  // Step 1: load the current client program on the server and update the\n  // hash values in __meteor_runtime_config__.\n  if (shouldReloadClientProgram) {\n    WebAppInternals.reloadClientPrograms();\n  } // If we just re-read the client program, or if we don't have an autoupdate\n  // version, calculate it.\n\n\n  if (shouldReloadClientProgram || Autoupdate.autoupdateVersion === null) {\n    Autoupdate.autoupdateVersion = process.env.AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable();\n  } // If we just recalculated it OR if it was set by (eg) test-in-browser,\n  // ensure it ends up in __meteor_runtime_config__.\n\n\n  __meteor_runtime_config__.autoupdateVersion = Autoupdate.autoupdateVersion;\n  Autoupdate.autoupdateVersionRefreshable = __meteor_runtime_config__.autoupdateVersionRefreshable = process.env.AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable();\n  Autoupdate.autoupdateVersionCordova = __meteor_runtime_config__.autoupdateVersionCordova = process.env.AUTOUPDATE_VERSION || WebApp.calculateClientHashCordova(); // Step 2: form the new client boilerplate which contains the updated\n  // assets and __meteor_runtime_config__.\n\n  if (shouldReloadClientProgram) {\n    WebAppInternals.generateBoilerplate();\n  } // XXX COMPAT WITH 0.8.3\n\n\n  if (!ClientVersions.findOne({\n    current: true\n  })) {\n    // To ensure apps with version of Meteor prior to 0.9.0 (in\n    // which the structure of documents in `ClientVersions` was\n    // different) also reload.\n    ClientVersions.insert({\n      current: true\n    });\n  }\n\n  if (!ClientVersions.findOne({\n    _id: \"version\"\n  })) {\n    ClientVersions.insert({\n      _id: \"version\",\n      version: Autoupdate.autoupdateVersion\n    });\n  } else {\n    ClientVersions.update(\"version\", {\n      $set: {\n        version: Autoupdate.autoupdateVersion\n      }\n    });\n  }\n\n  if (!ClientVersions.findOne({\n    _id: \"version-cordova\"\n  })) {\n    ClientVersions.insert({\n      _id: \"version-cordova\",\n      version: Autoupdate.autoupdateVersionCordova,\n      refreshable: false\n    });\n  } else {\n    ClientVersions.update(\"version-cordova\", {\n      $set: {\n        version: Autoupdate.autoupdateVersionCordova\n      }\n    });\n  } // Use `onListening` here because we need to use\n  // `WebAppInternals.refreshableAssets`, which is only set after\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\n\n\n  WebApp.onListening(function () {\n    if (!ClientVersions.findOne({\n      _id: \"version-refreshable\"\n    })) {\n      ClientVersions.insert({\n        _id: \"version-refreshable\",\n        version: Autoupdate.autoupdateVersionRefreshable,\n        assets: WebAppInternals.refreshableAssets\n      });\n    } else {\n      ClientVersions.update(\"version-refreshable\", {\n        $set: {\n          version: Autoupdate.autoupdateVersionRefreshable,\n          assets: WebAppInternals.refreshableAssets\n        }\n      });\n    }\n  });\n};\n\nMeteor.publish(\"meteor_autoupdate_clientVersions\", function (appId) {\n  // `null` happens when a client doesn't have an appId and passes\n  // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n  // `null` as JSON doesn't have `undefined.\n  check(appId, Match.OneOf(String, undefined, null)); // Don't notify clients using wrong appId such as mobile apps built with a\n  // different server but pointing at the same local url\n\n  if (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n  return ClientVersions.find();\n}, {\n  is_auto: true\n});\nMeteor.startup(function () {\n  updateVersions(false);\n});\nvar fut = new Future(); // We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n// so we add a queued task that waits for onListen before 'refresh' can queue\n// tasks. Note that the `onListening` callbacks do not fire until after\n// Meteor.startup, so there is no concern that the 'updateVersions' calls from\n// 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\nsyncQueue.queueTask(function () {\n  fut.wait();\n});\nWebApp.onListening(function () {\n  fut.return();\n});\n\nvar enqueueVersionsRefresh = function () {\n  syncQueue.queueTask(function () {\n    updateVersions(true);\n  });\n}; // Listen for the special {refresh: 'client'} message, which signals that a\n// client asset has changed.\n\n\nprocess.on('message', Meteor.bindEnvironment(function (m) {\n  if (m && m.refresh === 'client') {\n    enqueueVersionsRefresh();\n  }\n}, \"handling client refresh message\")); // Another way to tell the process to refresh: send SIGHUP signal\n\nprocess.on('SIGHUP', Meteor.bindEnvironment(function () {\n  enqueueVersionsRefresh();\n}, \"handling SIGHUP signal for refresh\"));","map":{"version":3,"sources":["packages/autoupdate/autoupdate_server.js"],"names":["Future","Npm","require","Autoupdate","ClientVersions","Mongo","Collection","connection","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","__meteor_runtime_config__","process","env","APP_ID","syncQueue","Meteor","_SynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","WebApp","calculateClientHashNonRefreshable","calculateClientHashRefreshable","calculateClientHashCordova","generateBoilerplate","findOne","current","insert","_id","version","update","$set","refreshable","onListening","assets","refreshableAssets","publish","check","Match","OneOf","String","undefined","find","is_auto","startup","fut","queueTask","wait","return","enqueueVersionsRefresh","on","bindEnvironment","m","refresh"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,SAASC,IAAIC,OAAJ,CAAY,eAAZ,CAAb;;AAEAC,aAAa,EAAb,C,CAEA;;AACAC,iBAAiB,IAAIC,MAAMC,UAAV,CAAqB,kCAArB,EACf;AAAEC,cAAY;AAAd,CADe,CAAjB,C,CAGA;AACA;AACA;AACA;AAEA;AACA;;AACAJ,WAAWK,iBAAX,GAA+B,IAA/B;AACAL,WAAWM,4BAAX,GAA0C,IAA1C;AACAN,WAAWO,wBAAX,GAAsC,IAAtC;AACAP,WAAWQ,KAAX,GAAmBC,0BAA0BD,KAA1B,GAAkCE,QAAQC,GAAR,CAAYC,MAAjE;AAEA,IAAIC,YAAY,IAAIC,OAAOC,iBAAX,EAAhB,C,CAEA;;AACA,IAAIC,iBAAiB,UAAUC,yBAAV,EAAqC;AACxD;AACA;AACA,MAAIA,yBAAJ,EAA+B;AAC7BC,oBAAgBC,oBAAhB;AACD,GALuD,CAOxD;AACA;;;AACA,MAAIF,6BAA6BjB,WAAWK,iBAAX,KAAiC,IAAlE,EAAwE;AACtEL,eAAWK,iBAAX,GACEK,QAAQC,GAAR,CAAYS,kBAAZ,IACAC,OAAOC,iCAAP,EAFF;AAGD,GAbuD,CAcxD;AACA;;;AACAb,4BAA0BJ,iBAA1B,GACEL,WAAWK,iBADb;AAGAL,aAAWM,4BAAX,GACEG,0BAA0BH,4BAA1B,GACEI,QAAQC,GAAR,CAAYS,kBAAZ,IACAC,OAAOE,8BAAP,EAHJ;AAKAvB,aAAWO,wBAAX,GACEE,0BAA0BF,wBAA1B,GACEG,QAAQC,GAAR,CAAYS,kBAAZ,IACAC,OAAOG,0BAAP,EAHJ,CAxBwD,CA6BxD;AACA;;AACA,MAAIP,yBAAJ,EAA+B;AAC7BC,oBAAgBO,mBAAhB;AACD,GAjCuD,CAmCxD;;;AACA,MAAI,CAAExB,eAAeyB,OAAf,CAAuB;AAACC,aAAS;AAAV,GAAvB,CAAN,EAA+C;AAC7C;AACA;AACA;AACA1B,mBAAe2B,MAAf,CAAsB;AAACD,eAAS;AAAV,KAAtB;AACD;;AAED,MAAI,CAAE1B,eAAeyB,OAAf,CAAuB;AAACG,SAAK;AAAN,GAAvB,CAAN,EAAgD;AAC9C5B,mBAAe2B,MAAf,CAAsB;AACpBC,WAAK,SADe;AAEpBC,eAAS9B,WAAWK;AAFA,KAAtB;AAID,GALD,MAKO;AACLJ,mBAAe8B,MAAf,CAAsB,SAAtB,EAAiC;AAAEC,YAAM;AACvCF,iBAAS9B,WAAWK;AADmB;AAAR,KAAjC;AAGD;;AAED,MAAI,CAAEJ,eAAeyB,OAAf,CAAuB;AAACG,SAAK;AAAN,GAAvB,CAAN,EAAwD;AACtD5B,mBAAe2B,MAAf,CAAsB;AACpBC,WAAK,iBADe;AAEpBC,eAAS9B,WAAWO,wBAFA;AAGpB0B,mBAAa;AAHO,KAAtB;AAKD,GAND,MAMO;AACLhC,mBAAe8B,MAAf,CAAsB,iBAAtB,EAAyC;AAAEC,YAAM;AAC/CF,iBAAS9B,WAAWO;AAD2B;AAAR,KAAzC;AAGD,GAhEuD,CAkExD;AACA;AACA;;;AACAc,SAAOa,WAAP,CAAmB,YAAY;AAC7B,QAAI,CAAEjC,eAAeyB,OAAf,CAAuB;AAACG,WAAK;AAAN,KAAvB,CAAN,EAA4D;AAC1D5B,qBAAe2B,MAAf,CAAsB;AACpBC,aAAK,qBADe;AAEpBC,iBAAS9B,WAAWM,4BAFA;AAGpB6B,gBAAQjB,gBAAgBkB;AAHJ,OAAtB;AAKD,KAND,MAMO;AACLnC,qBAAe8B,MAAf,CAAsB,qBAAtB,EAA6C;AAAEC,cAAM;AACnDF,mBAAS9B,WAAWM,4BAD+B;AAEnD6B,kBAAQjB,gBAAgBkB;AAF2B;AAAR,OAA7C;AAID;AACF,GAbD;AAcD,CAnFD;;AAqFAtB,OAAOuB,OAAP,CACE,kCADF,EAEE,UAAU7B,KAAV,EAAiB;AACf;AACA;AACA;AACA8B,QAAM9B,KAAN,EAAa+B,MAAMC,KAAN,CAAYC,MAAZ,EAAoBC,SAApB,EAA+B,IAA/B,CAAb,EAJe,CAMf;AACA;;AACA,MAAI1C,WAAWQ,KAAX,IAAoBA,KAApB,IAA6BR,WAAWQ,KAAX,KAAqBA,KAAtD,EACE,OAAO,EAAP;AAEF,SAAOP,eAAe0C,IAAf,EAAP;AACD,CAdH,EAeE;AAACC,WAAS;AAAV,CAfF;AAkBA9B,OAAO+B,OAAP,CAAe,YAAY;AACzB7B,iBAAe,KAAf;AACD,CAFD;AAIA,IAAI8B,MAAM,IAAIjD,MAAJ,EAAV,C,CAEA;AACA;AACA;AACA;AACA;;AAEAgB,UAAUkC,SAAV,CAAoB,YAAY;AAC9BD,MAAIE,IAAJ;AACD,CAFD;AAIA3B,OAAOa,WAAP,CAAmB,YAAY;AAC7BY,MAAIG,MAAJ;AACD,CAFD;;AAIA,IAAIC,yBAAyB,YAAY;AACvCrC,YAAUkC,SAAV,CAAoB,YAAY;AAC9B/B,mBAAe,IAAf;AACD,GAFD;AAGD,CAJD,C,CAMA;AACA;;;AACAN,QAAQyC,EAAR,CAAW,SAAX,EAAsBrC,OAAOsC,eAAP,CAAuB,UAAUC,CAAV,EAAa;AACxD,MAAIA,KAAKA,EAAEC,OAAF,KAAc,QAAvB,EAAiC;AAC/BJ;AACD;AACF,CAJqB,EAInB,iCAJmB,CAAtB,E,CAMA;;AACAxC,QAAQyC,EAAR,CAAW,QAAX,EAAqBrC,OAAOsC,eAAP,CAAuB,YAAY;AACtDF;AACD,CAFoB,EAElB,oCAFkB,CAArB","sourcesContent":["// Publish the current client versions to the client.  When a client\n// sees the subscription change and that there is a new version of the\n// client available on the server, it can reload.\n//\n// By default there are two current client versions. The refreshable client\n// version is identified by a hash of the client resources seen by the browser\n// that are refreshable, such as CSS, while the non refreshable client version\n// is identified by a hash of the rest of the client assets\n// (the HTML, code, and static files in the `public` directory).\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set it will be\n// used as the client id instead.  You can use this to control when\n// the client reloads.  For example, if you want to only force a\n// reload on major changes, you can use a custom AUTOUPDATE_VERSION\n// which you only change when something worth pushing to clients\n// immediately happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions`\n// collection. There are two documents in this collection, a document\n// with _id 'version' which represents the non refreshable client assets,\n// and a document with _id 'version-refreshable' which represents the\n// refreshable client assets. Each document has a 'version' field\n// which is equivalent to the hash of the relevant assets. The refreshable\n// document also contains a list of the refreshable assets, so that the client\n// can swap in the new assets without forcing a page refresh. Clients can\n// observe changes on these documents to detect when there is a new\n// version available.\n//\n// In this implementation only two documents are present in the collection\n// the current refreshable client version and the current nonRefreshable client\n// version.  Developers can easily experiment with different versioning and\n// updating models by forking this package.\n\nvar Future = Npm.require(\"fibers/future\");\n\nAutoupdate = {};\n\n// The collection of acceptable client versions.\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\",\n  { connection: null });\n\n// The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n\nvar syncQueue = new Meteor._SynchronousQueue();\n\n// updateVersions can only be called after the server has fully loaded.\nvar updateVersions = function (shouldReloadClientProgram) {\n  // Step 1: load the current client program on the server and update the\n  // hash values in __meteor_runtime_config__.\n  if (shouldReloadClientProgram) {\n    WebAppInternals.reloadClientPrograms();\n  }\n\n  // If we just re-read the client program, or if we don't have an autoupdate\n  // version, calculate it.\n  if (shouldReloadClientProgram || Autoupdate.autoupdateVersion === null) {\n    Autoupdate.autoupdateVersion =\n      process.env.AUTOUPDATE_VERSION ||\n      WebApp.calculateClientHashNonRefreshable();\n  }\n  // If we just recalculated it OR if it was set by (eg) test-in-browser,\n  // ensure it ends up in __meteor_runtime_config__.\n  __meteor_runtime_config__.autoupdateVersion =\n    Autoupdate.autoupdateVersion;\n\n  Autoupdate.autoupdateVersionRefreshable =\n    __meteor_runtime_config__.autoupdateVersionRefreshable =\n      process.env.AUTOUPDATE_VERSION ||\n      WebApp.calculateClientHashRefreshable();\n\n  Autoupdate.autoupdateVersionCordova =\n    __meteor_runtime_config__.autoupdateVersionCordova =\n      process.env.AUTOUPDATE_VERSION ||\n      WebApp.calculateClientHashCordova();\n\n  // Step 2: form the new client boilerplate which contains the updated\n  // assets and __meteor_runtime_config__.\n  if (shouldReloadClientProgram) {\n    WebAppInternals.generateBoilerplate();\n  }\n\n  // XXX COMPAT WITH 0.8.3\n  if (! ClientVersions.findOne({current: true})) {\n    // To ensure apps with version of Meteor prior to 0.9.0 (in\n    // which the structure of documents in `ClientVersions` was\n    // different) also reload.\n    ClientVersions.insert({current: true});\n  }\n\n  if (! ClientVersions.findOne({_id: \"version\"})) {\n    ClientVersions.insert({\n      _id: \"version\",\n      version: Autoupdate.autoupdateVersion\n    });\n  } else {\n    ClientVersions.update(\"version\", { $set: {\n      version: Autoupdate.autoupdateVersion\n    }});\n  }\n\n  if (! ClientVersions.findOne({_id: \"version-cordova\"})) {\n    ClientVersions.insert({\n      _id: \"version-cordova\",\n      version: Autoupdate.autoupdateVersionCordova,\n      refreshable: false\n    });\n  } else {\n    ClientVersions.update(\"version-cordova\", { $set: {\n      version: Autoupdate.autoupdateVersionCordova\n    }});\n  }\n\n  // Use `onListening` here because we need to use\n  // `WebAppInternals.refreshableAssets`, which is only set after\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\n  WebApp.onListening(function () {\n    if (! ClientVersions.findOne({_id: \"version-refreshable\"})) {\n      ClientVersions.insert({\n        _id: \"version-refreshable\",\n        version: Autoupdate.autoupdateVersionRefreshable,\n        assets: WebAppInternals.refreshableAssets\n      });\n    } else {\n      ClientVersions.update(\"version-refreshable\", { $set: {\n        version: Autoupdate.autoupdateVersionRefreshable,\n        assets: WebAppInternals.refreshableAssets\n      }});\n    }\n  });\n};\n\nMeteor.publish(\n  \"meteor_autoupdate_clientVersions\",\n  function (appId) {\n    // `null` happens when a client doesn't have an appId and passes\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n    // `null` as JSON doesn't have `undefined.\n    check(appId, Match.OneOf(String, undefined, null));\n\n    // Don't notify clients using wrong appId such as mobile apps built with a\n    // different server but pointing at the same local url\n    if (Autoupdate.appId && appId && Autoupdate.appId !== appId)\n      return [];\n\n    return ClientVersions.find();\n  },\n  {is_auto: true}\n);\n\nMeteor.startup(function () {\n  updateVersions(false);\n});\n\nvar fut = new Future();\n\n// We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n// so we add a queued task that waits for onListen before 'refresh' can queue\n// tasks. Note that the `onListening` callbacks do not fire until after\n// Meteor.startup, so there is no concern that the 'updateVersions' calls from\n// 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\nsyncQueue.queueTask(function () {\n  fut.wait();\n});\n\nWebApp.onListening(function () {\n  fut.return();\n});\n\nvar enqueueVersionsRefresh = function () {\n  syncQueue.queueTask(function () {\n    updateVersions(true);\n  });\n};\n\n// Listen for the special {refresh: 'client'} message, which signals that a\n// client asset has changed.\nprocess.on('message', Meteor.bindEnvironment(function (m) {\n  if (m && m.refresh === 'client') {\n    enqueueVersionsRefresh();\n  }\n}, \"handling client refresh message\"));\n\n// Another way to tell the process to refresh: send SIGHUP signal\nprocess.on('SIGHUP', Meteor.bindEnvironment(function () {\n  enqueueVersionsRefresh();\n}, \"handling SIGHUP signal for refresh\"));\n\n"]},"sourceType":"script","hash":"40d66adbcc0e02f2ecc2bd5654ddead743fff94a"}
