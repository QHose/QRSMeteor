{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/reload/reload_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/reload/reload_tests.js","filename":"packages/reload/reload_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/reload/reload_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/reload/reload_tests.js"}},"code":"Tinytest.add(\"reload - migrate\", function (test) {\n  Reload._withFreshProvidersForTest(function () {\n    var ready = false;\n\n    Reload._onMigrate(\"reload test data 1\", function (tryReload, options) {\n      return [ready, {\n        foo: \"bar\"\n      }];\n    });\n\n    Reload._onMigrate(\"reload test data 2\", function (tryReload, options) {\n      return [true, {\n        baz: \"bar\"\n      }];\n    }); // When one provider returns false, no migration data should be stored.\n\n\n    test.isFalse(Reload._migrate(function () {}));\n    test.isFalse(Reload._getData()); // If an immediate migration is happening, then it shouldn't matter if\n    // one provider returns false.\n\n    test.isTrue(Reload._migrate(function () {}, {\n      immediateMigration: true\n    }));\n    var data = JSON.parse(Reload._getData());\n    test.equal(data.data[\"reload test data 1\"], {\n      foo: \"bar\"\n    });\n    test.equal(data.data[\"reload test data 2\"], {\n      baz: \"bar\"\n    });\n    test.equal(data.reload, true); // Now all providers are ready.\n\n    ready = true;\n    test.isTrue(Reload._migrate(function () {}));\n    data = JSON.parse(Reload._getData());\n    test.equal(data.data[\"reload test data 1\"], {\n      foo: \"bar\"\n    });\n    test.equal(data.data[\"reload test data 2\"], {\n      baz: \"bar\"\n    });\n    test.equal(data.reload, true);\n  });\n});","map":{"version":3,"sources":["packages/reload/reload_tests.js"],"names":["Tinytest","add","test","Reload","_withFreshProvidersForTest","ready","_onMigrate","tryReload","options","foo","baz","isFalse","_migrate","_getData","isTrue","immediateMigration","data","JSON","parse","equal","reload"],"mappings":"AAAAA,SAASC,GAAT,CAAa,kBAAb,EAAiC,UAAUC,IAAV,EAAgB;AAC/CC,SAAOC,0BAAP,CAAkC,YAAY;AAC5C,QAAIC,QAAQ,KAAZ;;AAEAF,WAAOG,UAAP,CAAkB,oBAAlB,EAAwC,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AACpE,aAAO,CAACH,KAAD,EAAQ;AAAEI,aAAK;AAAP,OAAR,CAAP;AACD,KAFD;;AAIAN,WAAOG,UAAP,CAAkB,oBAAlB,EAAwC,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AACpE,aAAO,CAAC,IAAD,EAAO;AAAEE,aAAK;AAAP,OAAP,CAAP;AACD,KAFD,EAP4C,CAW5C;;;AACAR,SAAKS,OAAL,CAAaR,OAAOS,QAAP,CAAgB,YAAY,CAAG,CAA/B,CAAb;AACAV,SAAKS,OAAL,CAAaR,OAAOU,QAAP,EAAb,EAb4C,CAe5C;AACA;;AACAX,SAAKY,MAAL,CAAYX,OAAOS,QAAP,CAAgB,YAAY,CAAG,CAA/B,EAAiC;AAAEG,0BAAoB;AAAtB,KAAjC,CAAZ;AACA,QAAIC,OAAOC,KAAKC,KAAL,CAAWf,OAAOU,QAAP,EAAX,CAAX;AACAX,SAAKiB,KAAL,CAAWH,KAAKA,IAAL,CAAU,oBAAV,CAAX,EAA4C;AAAEP,WAAK;AAAP,KAA5C;AACAP,SAAKiB,KAAL,CAAWH,KAAKA,IAAL,CAAU,oBAAV,CAAX,EAA4C;AAAEN,WAAK;AAAP,KAA5C;AACAR,SAAKiB,KAAL,CAAWH,KAAKI,MAAhB,EAAwB,IAAxB,EArB4C,CAuB5C;;AACAf,YAAQ,IAAR;AACAH,SAAKY,MAAL,CAAYX,OAAOS,QAAP,CAAgB,YAAY,CAAG,CAA/B,CAAZ;AAEAI,WAAOC,KAAKC,KAAL,CAAWf,OAAOU,QAAP,EAAX,CAAP;AACAX,SAAKiB,KAAL,CAAWH,KAAKA,IAAL,CAAU,oBAAV,CAAX,EAA4C;AAAEP,WAAK;AAAP,KAA5C;AACAP,SAAKiB,KAAL,CAAWH,KAAKA,IAAL,CAAU,oBAAV,CAAX,EAA4C;AAAEN,WAAK;AAAP,KAA5C;AACAR,SAAKiB,KAAL,CAAWH,KAAKI,MAAhB,EAAwB,IAAxB;AACD,GA/BD;AAgCD,CAjCD","sourcesContent":["Tinytest.add(\"reload - migrate\", function (test) {\n  Reload._withFreshProvidersForTest(function () {\n    var ready = false;\n\n    Reload._onMigrate(\"reload test data 1\", function (tryReload, options) {\n      return [ready, { foo: \"bar\" }];\n    });\n\n    Reload._onMigrate(\"reload test data 2\", function (tryReload, options) {\n      return [true, { baz: \"bar\" }];\n    });\n\n    // When one provider returns false, no migration data should be stored.\n    test.isFalse(Reload._migrate(function () { }));\n    test.isFalse(Reload._getData());\n\n    // If an immediate migration is happening, then it shouldn't matter if\n    // one provider returns false.\n    test.isTrue(Reload._migrate(function () { }, { immediateMigration: true }));\n    var data = JSON.parse(Reload._getData());\n    test.equal(data.data[\"reload test data 1\"], { foo: \"bar\" });\n    test.equal(data.data[\"reload test data 2\"], { baz: \"bar\" });\n    test.equal(data.reload, true);\n\n    // Now all providers are ready.\n    ready = true;\n    test.isTrue(Reload._migrate(function () { }));\n\n    data = JSON.parse(Reload._getData());\n    test.equal(data.data[\"reload test data 1\"], { foo: \"bar\" });\n    test.equal(data.data[\"reload test data 2\"], { baz: \"bar\" });\n    test.equal(data.reload, true);\n  });\n});\n"]},"sourceType":"script","hash":"5e8feefae13cb8e5be26d623bbe1d76f9443a768"}
