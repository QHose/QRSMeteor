{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/ddp-client/common/MethodInvoker.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/ddp-client/common/MethodInvoker.js","filename":"packages/ddp-client/common/MethodInvoker.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/ddp-client/common/MethodInvoker.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/common/MethodInvoker.js"}},"code":"module.export({\n  \"default\": function () {\n    return MethodInvoker;\n  }\n});\n\nvar MethodInvoker =\n/*#__PURE__*/\nfunction () {\n  function MethodInvoker(options) {\n    // Public (within this file) fields.\n    this.methodId = options.methodId;\n    this.sentMessage = false;\n    this._callback = options.callback;\n    this._connection = options.connection;\n    this._message = options.message;\n\n    this._onResultReceived = options.onResultReceived || function () {};\n\n    this._wait = options.wait;\n    this.noRetry = options.noRetry;\n    this._methodResult = null;\n    this._dataVisible = false; // Register with the connection.\n\n    this._connection._methodInvokers[this.methodId] = this;\n  } // Sends the method message to the server. May be called additional times if\n  // we lose the connection and reconnect before receiving a result.\n\n\n  var _proto = MethodInvoker.prototype;\n\n  _proto.sendMessage = function () {\n    function sendMessage() {\n      // This function is called before sending a method (including resending on\n      // reconnect). We should only (re)send methods where we don't already have a\n      // result!\n      if (this.gotResult()) throw new Error('sendingMethod is called on method with result'); // If we're re-sending it, it doesn't matter if data was written the first\n      // time.\n\n      this._dataVisible = false;\n      this.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is\n      // done.\n\n      if (this._wait) this._connection._methodsBlockingQuiescence[this.methodId] = true; // Actually send the message.\n\n      this._connection._send(this._message);\n    }\n\n    return sendMessage;\n  }(); // Invoke the callback, if we have both a result and know that all data has\n  // been written to the local cache.\n\n\n  _proto._maybeInvokeCallback = function () {\n    function _maybeInvokeCallback() {\n      if (this._methodResult && this._dataVisible) {\n        // Call the callback. (This won't throw: the callback was wrapped with\n        // bindEnvironment.)\n        this._callback(this._methodResult[0], this._methodResult[1]); // Forget about this method.\n\n\n        delete this._connection._methodInvokers[this.methodId]; // Let the connection know that this method is finished, so it can try to\n        // move on to the next block of methods.\n\n        this._connection._outstandingMethodFinished();\n      }\n    }\n\n    return _maybeInvokeCallback;\n  }(); // Call with the result of the method from the server. Only may be called\n  // once; once it is called, you should not call sendMessage again.\n  // If the user provided an onResultReceived callback, call it immediately.\n  // Then invoke the main callback if data is also visible.\n\n\n  _proto.receiveResult = function () {\n    function receiveResult(err, result) {\n      if (this.gotResult()) throw new Error('Methods should only receive results once');\n      this._methodResult = [err, result];\n\n      this._onResultReceived(err, result);\n\n      this._maybeInvokeCallback();\n    }\n\n    return receiveResult;\n  }(); // Call this when all data written by the method is visible. This means that\n  // the method has returns its \"data is done\" message *AND* all server\n  // documents that are buffered at that time have been written to the local\n  // cache. Invokes the main callback if the result has been received.\n\n\n  _proto.dataVisible = function () {\n    function dataVisible() {\n      this._dataVisible = true;\n\n      this._maybeInvokeCallback();\n    }\n\n    return dataVisible;\n  }(); // True if receiveResult has been called.\n\n\n  _proto.gotResult = function () {\n    function gotResult() {\n      return !!this._methodResult;\n    }\n\n    return gotResult;\n  }();\n\n  return MethodInvoker;\n}();","map":{"version":3,"sources":["packages/ddp-client/common/MethodInvoker.js"],"names":["module","export","MethodInvoker","options","methodId","sentMessage","_callback","callback","_connection","connection","_message","message","_onResultReceived","onResultReceived","_wait","wait","noRetry","_methodResult","_dataVisible","_methodInvokers","sendMessage","gotResult","Error","_methodsBlockingQuiescence","_send","_maybeInvokeCallback","_outstandingMethodFinished","receiveResult","err","result","dataVisible"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIC,aAAJ;AAAA;AAAT,CAAd;;IAKqBA,a;;;AACnB,yBAAYC,OAAZ,EAAqB;AACnB;AACA,SAAKC,QAAL,GAAgBD,QAAQC,QAAxB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AAEA,SAAKC,SAAL,GAAiBH,QAAQI,QAAzB;AACA,SAAKC,WAAL,GAAmBL,QAAQM,UAA3B;AACA,SAAKC,QAAL,GAAgBP,QAAQQ,OAAxB;;AACA,SAAKC,iBAAL,GAAyBT,QAAQU,gBAAR,IAA6B,YAAM,CAAE,CAA9D;;AACA,SAAKC,KAAL,GAAaX,QAAQY,IAArB;AACA,SAAKC,OAAL,GAAeb,QAAQa,OAAvB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,YAAL,GAAoB,KAApB,CAZmB,CAcnB;;AACA,SAAKV,WAAL,CAAiBW,eAAjB,CAAiC,KAAKf,QAAtC,IAAkD,IAAlD;AACD,G,CACD;AACA;;;;;SACAgB,W;2BAAc;AACZ;AACA;AACA;AACA,UAAI,KAAKC,SAAL,EAAJ,EACE,MAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN,CALU,CAOZ;AACA;;AACA,WAAKJ,YAAL,GAAoB,KAApB;AACA,WAAKb,WAAL,GAAmB,IAAnB,CAVY,CAYZ;AACA;;AACA,UAAI,KAAKS,KAAT,EACE,KAAKN,WAAL,CAAiBe,0BAAjB,CAA4C,KAAKnB,QAAjD,IAA6D,IAA7D,CAfU,CAiBZ;;AACA,WAAKI,WAAL,CAAiBgB,KAAjB,CAAuB,KAAKd,QAA5B;AACD;;;OACD;AACA;;;SACAe,oB;oCAAuB;AACrB,UAAI,KAAKR,aAAL,IAAsB,KAAKC,YAA/B,EAA6C;AAC3C;AACA;AACA,aAAKZ,SAAL,CAAe,KAAKW,aAAL,CAAmB,CAAnB,CAAf,EAAsC,KAAKA,aAAL,CAAmB,CAAnB,CAAtC,EAH2C,CAK3C;;;AACA,eAAO,KAAKT,WAAL,CAAiBW,eAAjB,CAAiC,KAAKf,QAAtC,CAAP,CAN2C,CAQ3C;AACA;;AACA,aAAKI,WAAL,CAAiBkB,0BAAjB;AACD;AACF;;;OACD;AACA;AACA;AACA;;;SACAC,a;2BAAcC,G,EAAKC,M,EAAQ;AACzB,UAAI,KAAKR,SAAL,EAAJ,EACE,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACF,WAAKL,aAAL,GAAqB,CAACW,GAAD,EAAMC,MAAN,CAArB;;AACA,WAAKjB,iBAAL,CAAuBgB,GAAvB,EAA4BC,MAA5B;;AACA,WAAKJ,oBAAL;AACD;;;OACD;AACA;AACA;AACA;;;SACAK,W;2BAAc;AACZ,WAAKZ,YAAL,GAAoB,IAApB;;AACA,WAAKO,oBAAL;AACD;;;OACD;;;SACAJ,S;yBAAY;AACV,aAAO,CAAC,CAAC,KAAKJ,aAAd;AACD","sourcesContent":["// A MethodInvoker manages sending a method to the server and calling the user's\n// callbacks. On construction, it registers itself in the connection's\n// _methodInvokers map; it removes itself once the method is fully finished and\n// the callback is invoked. This occurs when it has both received a result,\n// and the data written by it is fully visible.\nexport default class MethodInvoker {\n  constructor(options) {\n    // Public (within this file) fields.\n    this.methodId = options.methodId;\n    this.sentMessage = false;\n\n    this._callback = options.callback;\n    this._connection = options.connection;\n    this._message = options.message;\n    this._onResultReceived = options.onResultReceived || (() => {});\n    this._wait = options.wait;\n    this.noRetry = options.noRetry;\n    this._methodResult = null;\n    this._dataVisible = false;\n\n    // Register with the connection.\n    this._connection._methodInvokers[this.methodId] = this;\n  }\n  // Sends the method message to the server. May be called additional times if\n  // we lose the connection and reconnect before receiving a result.\n  sendMessage() {\n    // This function is called before sending a method (including resending on\n    // reconnect). We should only (re)send methods where we don't already have a\n    // result!\n    if (this.gotResult())\n      throw new Error('sendingMethod is called on method with result');\n\n    // If we're re-sending it, it doesn't matter if data was written the first\n    // time.\n    this._dataVisible = false;\n    this.sentMessage = true;\n\n    // If this is a wait method, make all data messages be buffered until it is\n    // done.\n    if (this._wait)\n      this._connection._methodsBlockingQuiescence[this.methodId] = true;\n\n    // Actually send the message.\n    this._connection._send(this._message);\n  }\n  // Invoke the callback, if we have both a result and know that all data has\n  // been written to the local cache.\n  _maybeInvokeCallback() {\n    if (this._methodResult && this._dataVisible) {\n      // Call the callback. (This won't throw: the callback was wrapped with\n      // bindEnvironment.)\n      this._callback(this._methodResult[0], this._methodResult[1]);\n\n      // Forget about this method.\n      delete this._connection._methodInvokers[this.methodId];\n\n      // Let the connection know that this method is finished, so it can try to\n      // move on to the next block of methods.\n      this._connection._outstandingMethodFinished();\n    }\n  }\n  // Call with the result of the method from the server. Only may be called\n  // once; once it is called, you should not call sendMessage again.\n  // If the user provided an onResultReceived callback, call it immediately.\n  // Then invoke the main callback if data is also visible.\n  receiveResult(err, result) {\n    if (this.gotResult())\n      throw new Error('Methods should only receive results once');\n    this._methodResult = [err, result];\n    this._onResultReceived(err, result);\n    this._maybeInvokeCallback();\n  }\n  // Call this when all data written by the method is visible. This means that\n  // the method has returns its \"data is done\" message *AND* all server\n  // documents that are buffered at that time have been written to the local\n  // cache. Invokes the main callback if the result has been received.\n  dataVisible() {\n    this._dataVisible = true;\n    this._maybeInvokeCallback();\n  }\n  // True if receiveResult has been called.\n  gotResult() {\n    return !!this._methodResult;\n  }\n}\n"]},"sourceType":"script","hash":"f5b9a7a5b35cdc3eba8c745c83a0da74cddd3cf0"}
