{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/ejson/ejson_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/ejson/ejson_tests.js","filename":"packages/ejson/ejson_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/ejson/ejson_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ejson/ejson_tests.js"}},"code":"let EJSON;\nmodule.watch(require(\"./ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\nlet EJSONTest;\nmodule.watch(require(\"./custom_models_for_tests\"), {\n  default(v) {\n    EJSONTest = v;\n  }\n\n}, 1);\nTinytest.add('ejson - keyOrderSensitive', test => {\n  test.isTrue(EJSON.equals({\n    a: {\n      b: 1,\n      c: 2\n    },\n    d: {\n      e: 3,\n      f: 4\n    }\n  }, {\n    d: {\n      f: 4,\n      e: 3\n    },\n    a: {\n      c: 2,\n      b: 1\n    }\n  }));\n  test.isFalse(EJSON.equals({\n    a: {\n      b: 1,\n      c: 2\n    },\n    d: {\n      e: 3,\n      f: 4\n    }\n  }, {\n    d: {\n      f: 4,\n      e: 3\n    },\n    a: {\n      c: 2,\n      b: 1\n    }\n  }, {\n    keyOrderSensitive: true\n  }));\n  test.isFalse(EJSON.equals({\n    a: {\n      b: 1,\n      c: 2\n    },\n    d: {\n      e: 3,\n      f: 4\n    }\n  }, {\n    a: {\n      c: 2,\n      b: 1\n    },\n    d: {\n      f: 4,\n      e: 3\n    }\n  }, {\n    keyOrderSensitive: true\n  }));\n  test.isFalse(EJSON.equals({\n    a: {}\n  }, {\n    a: {\n      b: 2\n    }\n  }, {\n    keyOrderSensitive: true\n  }));\n  test.isFalse(EJSON.equals({\n    a: {\n      b: 2\n    }\n  }, {\n    a: {}\n  }, {\n    keyOrderSensitive: true\n  }));\n});\nTinytest.add('ejson - nesting and literal', test => {\n  const d = new Date();\n  const obj = {\n    $date: d\n  };\n  const eObj = EJSON.toJSONValue(obj);\n  const roundTrip = EJSON.fromJSONValue(eObj);\n  test.equal(obj, roundTrip);\n});\nTinytest.add('ejson - some equality tests', test => {\n  test.isTrue(EJSON.equals({\n    a: 1,\n    b: 2,\n    c: 3\n  }, {\n    a: 1,\n    c: 3,\n    b: 2\n  }));\n  test.isFalse(EJSON.equals({\n    a: 1,\n    b: 2\n  }, {\n    a: 1,\n    c: 3,\n    b: 2\n  }));\n  test.isFalse(EJSON.equals({\n    a: 1,\n    b: 2,\n    c: 3\n  }, {\n    a: 1,\n    b: 2\n  }));\n  test.isFalse(EJSON.equals({\n    a: 1,\n    b: 2,\n    c: 3\n  }, {\n    a: 1,\n    c: 3,\n    b: 4\n  }));\n  test.isFalse(EJSON.equals({\n    a: {}\n  }, {\n    a: {\n      b: 2\n    }\n  }));\n  test.isFalse(EJSON.equals({\n    a: {\n      b: 2\n    }\n  }, {\n    a: {}\n  }));\n});\nTinytest.add('ejson - equality and falsiness', test => {\n  test.isTrue(EJSON.equals(null, null));\n  test.isTrue(EJSON.equals(undefined, undefined));\n  test.isFalse(EJSON.equals({\n    foo: 'foo'\n  }, null));\n  test.isFalse(EJSON.equals(null, {\n    foo: 'foo'\n  }));\n  test.isFalse(EJSON.equals(undefined, {\n    foo: 'foo'\n  }));\n  test.isFalse(EJSON.equals({\n    foo: 'foo'\n  }, undefined));\n});\nTinytest.add('ejson - NaN and Inf', test => {\n  test.equal(EJSON.parse('{\"$InfNaN\": 1}'), Infinity);\n  test.equal(EJSON.parse('{\"$InfNaN\": -1}'), -Infinity);\n  test.isTrue(Number.isNaN(EJSON.parse('{\"$InfNaN\": 0}')));\n  test.equal(EJSON.parse(EJSON.stringify(Infinity)), Infinity);\n  test.equal(EJSON.parse(EJSON.stringify(-Infinity)), -Infinity);\n  test.isTrue(Number.isNaN(EJSON.parse(EJSON.stringify(NaN))));\n  test.isTrue(EJSON.equals(NaN, NaN));\n  test.isTrue(EJSON.equals(Infinity, Infinity));\n  test.isTrue(EJSON.equals(-Infinity, -Infinity));\n  test.isFalse(EJSON.equals(Infinity, -Infinity));\n  test.isFalse(EJSON.equals(Infinity, NaN));\n  test.isFalse(EJSON.equals(Infinity, 0));\n  test.isFalse(EJSON.equals(NaN, 0));\n  test.isTrue(EJSON.equals(EJSON.parse('{\"a\": {\"$InfNaN\": 1}}'), {\n    a: Infinity\n  }));\n  test.isTrue(EJSON.equals(EJSON.parse('{\"a\": {\"$InfNaN\": 0}}'), {\n    a: NaN\n  }));\n});\nTinytest.add('ejson - clone', test => {\n  const cloneTest = (x, identical) => {\n    const y = EJSON.clone(x);\n    test.isTrue(EJSON.equals(x, y));\n    test.equal(x === y, !!identical);\n  };\n\n  cloneTest(null, true);\n  cloneTest(undefined, true);\n  cloneTest(42, true);\n  cloneTest('asdf', true);\n  cloneTest([1, 2, 3]);\n  cloneTest([1, 'fasdf', {\n    foo: 42\n  }]);\n  cloneTest({\n    x: 42,\n    y: 'asdf'\n  });\n\n  function testCloneArgs()\n  /*arguments*/\n  {\n    const clonedArgs = EJSON.clone(arguments);\n    test.equal(clonedArgs, [1, 2, 'foo', [4]]);\n  }\n\n  ;\n  testCloneArgs(1, 2, 'foo', [4]);\n});\nTinytest.add('ejson - stringify', test => {\n  test.equal(EJSON.stringify(null), 'null');\n  test.equal(EJSON.stringify(true), 'true');\n  test.equal(EJSON.stringify(false), 'false');\n  test.equal(EJSON.stringify(123), '123');\n  test.equal(EJSON.stringify('abc'), '\"abc\"');\n  test.equal(EJSON.stringify([1, 2, 3]), '[1,2,3]');\n  test.equal(EJSON.stringify([1, 2, 3], {\n    indent: true\n  }), '[\\n  1,\\n  2,\\n  3\\n]');\n  test.equal(EJSON.stringify([1, 2, 3], {\n    canonical: false\n  }), '[1,2,3]');\n  test.equal(EJSON.stringify([1, 2, 3], {\n    indent: true,\n    canonical: false\n  }), '[\\n  1,\\n  2,\\n  3\\n]');\n  test.equal(EJSON.stringify([1, 2, 3], {\n    indent: 4\n  }), '[\\n    1,\\n    2,\\n    3\\n]');\n  test.equal(EJSON.stringify([1, 2, 3], {\n    indent: '--'\n  }), '[\\n--1,\\n--2,\\n--3\\n]');\n  test.equal(EJSON.stringify({\n    b: [2, {\n      d: 4,\n      c: 3\n    }],\n    a: 1\n  }, {\n    canonical: true\n  }), '{\"a\":1,\"b\":[2,{\"c\":3,\"d\":4}]}');\n  test.equal(EJSON.stringify({\n    b: [2, {\n      d: 4,\n      c: 3\n    }],\n    a: 1\n  }, {\n    indent: true,\n    canonical: true\n  }), '{\\n' + '  \"a\": 1,\\n' + '  \"b\": [\\n' + '    2,\\n' + '    {\\n' + '      \"c\": 3,\\n' + '      \"d\": 4\\n' + '    }\\n' + '  ]\\n' + '}');\n  test.equal(EJSON.stringify({\n    b: [2, {\n      d: 4,\n      c: 3\n    }],\n    a: 1\n  }, {\n    canonical: false\n  }), '{\"b\":[2,{\"d\":4,\"c\":3}],\"a\":1}');\n  test.equal(EJSON.stringify({\n    b: [2, {\n      d: 4,\n      c: 3\n    }],\n    a: 1\n  }, {\n    indent: true,\n    canonical: false\n  }), '{\\n' + '  \"b\": [\\n' + '    2,\\n' + '    {\\n' + '      \"d\": 4,\\n' + '      \"c\": 3\\n' + '    }\\n' + '  ],\\n' + '  \"a\": 1\\n' + '}');\n});\nTinytest.add('ejson - parse', test => {\n  test.equal(EJSON.parse('[1,2,3]'), [1, 2, 3]);\n  test.throws(() => {\n    EJSON.parse(null);\n  }, /argument should be a string/);\n});\nTinytest.add(\"ejson - regexp\", test => {\n  test.equal(EJSON.stringify(/foo/gi), \"{\\\"$regexp\\\":\\\"foo\\\",\\\"$flags\\\":\\\"gi\\\"}\");\n  var d = new RegExp(\"foo\", \"gi\");\n  var obj = {\n    $regexp: \"foo\",\n    $flags: \"gi\"\n  };\n  var eObj = EJSON.toJSONValue(obj);\n  var roundTrip = EJSON.fromJSONValue(eObj);\n  test.equal(obj, roundTrip);\n});\nTinytest.add('ejson - custom types', test => {\n  const testSameConstructors = (someObj, compareWith) => {\n    test.equal(someObj.constructor, compareWith.constructor);\n\n    if (typeof someObj === 'object') {\n      Object.keys(someObj).forEach(key => {\n        const value = someObj[key];\n        testSameConstructors(value, compareWith[key]);\n      });\n    }\n  };\n\n  const testReallyEqual = (someObj, compareWith) => {\n    test.equal(someObj, compareWith);\n    testSameConstructors(someObj, compareWith);\n  };\n\n  const testRoundTrip = someObj => {\n    const str = EJSON.stringify(someObj);\n    const roundTrip = EJSON.parse(str);\n    testReallyEqual(someObj, roundTrip);\n  };\n\n  const testCustomObject = someObj => {\n    testRoundTrip(someObj);\n    testReallyEqual(someObj, EJSON.clone(someObj));\n  };\n\n  const a = new EJSONTest.Address('Montreal', 'Quebec');\n  testCustomObject({\n    address: a\n  }); // Test that difference is detected even if they\n  // have similar toJSONValue results:\n\n  const nakedA = {\n    city: 'Montreal',\n    state: 'Quebec'\n  };\n  test.notEqual(nakedA, a);\n  test.notEqual(a, nakedA);\n  const holder = new EJSONTest.Holder(nakedA);\n  test.equal(holder.toJSONValue(), a.toJSONValue()); // sanity check\n\n  test.notEqual(holder, a);\n  test.notEqual(a, holder);\n  const d = new Date();\n  const obj = new EJSONTest.Person('John Doe', d, a);\n  testCustomObject(obj); // Test clone is deep:\n\n  const clone = EJSON.clone(obj);\n  clone.address.city = 'Sherbrooke';\n  test.notEqual(obj, clone);\n}); // Verify objects with a property named \"length\" can be handled by the EJSON\n// API properly (see https://github.com/meteor/meteor/issues/5175).\n\nTinytest.add('ejson - handle objects with properties named \"length\"', test => {\n  class Widget {\n    constructor() {\n      this.length = 10;\n    }\n\n  }\n\n  const widget = new Widget();\n  const toJsonWidget = EJSON.toJSONValue(widget);\n  test.equal(widget, toJsonWidget);\n  const fromJsonWidget = EJSON.fromJSONValue(widget);\n  test.equal(widget, fromJsonWidget);\n  const stringifiedWidget = EJSON.stringify(widget);\n  test.equal(stringifiedWidget, '{\"length\":10}');\n  const parsedWidget = EJSON.parse('{\"length\":10}');\n  test.equal({\n    length: 10\n  }, parsedWidget);\n  test.isFalse(EJSON.isBinary(widget));\n  const widget2 = new Widget();\n  test.isTrue(widget, widget2);\n  const clonedWidget = EJSON.clone(widget);\n  test.equal(widget, clonedWidget);\n});","map":{"version":3,"sources":["packages/ejson/ejson_tests.js"],"names":["EJSON","module","watch","require","v","EJSONTest","default","Tinytest","add","test","isTrue","equals","a","b","c","d","e","f","isFalse","keyOrderSensitive","Date","obj","$date","eObj","toJSONValue","roundTrip","fromJSONValue","equal","undefined","foo","parse","Infinity","Number","isNaN","stringify","NaN","cloneTest","x","identical","y","clone","testCloneArgs","clonedArgs","arguments","indent","canonical","throws","RegExp","$regexp","$flags","testSameConstructors","someObj","compareWith","constructor","Object","keys","forEach","key","value","testReallyEqual","testRoundTrip","str","testCustomObject","Address","address","nakedA","city","state","notEqual","holder","Holder","Person","Widget","length","widget","toJsonWidget","fromJsonWidget","stringifiedWidget","parsedWidget","isBinary","widget2","clonedWidget"],"mappings":"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","sourcesContent":["import { EJSON } from './ejson';\nimport EJSONTest from './custom_models_for_tests';\n\nTinytest.add('ejson - keyOrderSensitive', test => {\n  test.isTrue(EJSON.equals({\n    a: {b: 1, c: 2},\n    d: {e: 3, f: 4},\n  }, {\n    d: {f: 4, e: 3},\n    a: {c: 2, b: 1},\n  }));\n\n  test.isFalse(EJSON.equals({\n    a: {b: 1, c: 2},\n    d: {e: 3, f: 4},\n  }, {\n    d: {f: 4, e: 3},\n    a: {c: 2, b: 1},\n  }, {keyOrderSensitive: true}));\n\n  test.isFalse(EJSON.equals({\n    a: {b: 1, c: 2},\n    d: {e: 3, f: 4},\n  }, {\n    a: {c: 2, b: 1},\n    d: {f: 4, e: 3},\n  }, {keyOrderSensitive: true}));\n  test.isFalse(EJSON.equals({a: {}}, {a: {b: 2}}, {keyOrderSensitive: true}));\n  test.isFalse(EJSON.equals({a: {b: 2}}, {a: {}}, {keyOrderSensitive: true}));\n});\n\nTinytest.add('ejson - nesting and literal', test => {\n  const d = new Date();\n  const obj = {$date: d};\n  const eObj = EJSON.toJSONValue(obj);\n  const roundTrip = EJSON.fromJSONValue(eObj);\n  test.equal(obj, roundTrip);\n});\n\nTinytest.add('ejson - some equality tests', test => {\n  test.isTrue(EJSON.equals({a: 1, b: 2, c: 3}, {a: 1, c: 3, b: 2}));\n  test.isFalse(EJSON.equals({a: 1, b: 2}, {a: 1, c: 3, b: 2}));\n  test.isFalse(EJSON.equals({a: 1, b: 2, c: 3}, {a: 1, b: 2}));\n  test.isFalse(EJSON.equals({a: 1, b: 2, c: 3}, {a: 1, c: 3, b: 4}));\n  test.isFalse(EJSON.equals({a: {}}, {a: {b: 2}}));\n  test.isFalse(EJSON.equals({a: {b: 2}}, {a: {}}));\n});\n\nTinytest.add('ejson - equality and falsiness', test => {\n  test.isTrue(EJSON.equals(null, null));\n  test.isTrue(EJSON.equals(undefined, undefined));\n  test.isFalse(EJSON.equals({foo: 'foo'}, null));\n  test.isFalse(EJSON.equals(null, {foo: 'foo'}));\n  test.isFalse(EJSON.equals(undefined, {foo: 'foo'}));\n  test.isFalse(EJSON.equals({foo: 'foo'}, undefined));\n});\n\nTinytest.add('ejson - NaN and Inf', test => {\n  test.equal(EJSON.parse('{\"$InfNaN\": 1}'), Infinity);\n  test.equal(EJSON.parse('{\"$InfNaN\": -1}'), -Infinity);\n  test.isTrue(Number.isNaN(EJSON.parse('{\"$InfNaN\": 0}')));\n  test.equal(EJSON.parse(EJSON.stringify(Infinity)), Infinity);\n  test.equal(EJSON.parse(EJSON.stringify(-Infinity)), -Infinity);\n  test.isTrue(Number.isNaN(EJSON.parse(EJSON.stringify(NaN))));\n  test.isTrue(EJSON.equals(NaN, NaN));\n  test.isTrue(EJSON.equals(Infinity, Infinity));\n  test.isTrue(EJSON.equals(-Infinity, -Infinity));\n  test.isFalse(EJSON.equals(Infinity, -Infinity));\n  test.isFalse(EJSON.equals(Infinity, NaN));\n  test.isFalse(EJSON.equals(Infinity, 0));\n  test.isFalse(EJSON.equals(NaN, 0));\n\n  test.isTrue(EJSON.equals(\n    EJSON.parse('{\"a\": {\"$InfNaN\": 1}}'),\n    {a: Infinity}\n  ));\n  test.isTrue(EJSON.equals(\n    EJSON.parse('{\"a\": {\"$InfNaN\": 0}}'),\n    {a: NaN}\n  ));\n});\n\nTinytest.add('ejson - clone', test => {\n  const cloneTest = (x, identical) => {\n    const y = EJSON.clone(x);\n    test.isTrue(EJSON.equals(x, y));\n    test.equal(x === y, !!identical);\n  };\n  cloneTest(null, true);\n  cloneTest(undefined, true);\n  cloneTest(42, true);\n  cloneTest('asdf', true);\n  cloneTest([1, 2, 3]);\n  cloneTest([1, 'fasdf', {foo: 42}]);\n  cloneTest({x: 42, y: 'asdf'});\n\n  function testCloneArgs(/*arguments*/) {\n    const clonedArgs = EJSON.clone(arguments);\n    test.equal(clonedArgs, [1, 2, 'foo', [4]]);\n  };\n  testCloneArgs(1, 2, 'foo', [4]);\n});\n\nTinytest.add('ejson - stringify', test => {\n  test.equal(EJSON.stringify(null), 'null');\n  test.equal(EJSON.stringify(true), 'true');\n  test.equal(EJSON.stringify(false), 'false');\n  test.equal(EJSON.stringify(123), '123');\n  test.equal(EJSON.stringify('abc'), '\"abc\"');\n\n  test.equal(EJSON.stringify([1, 2, 3]),\n     '[1,2,3]'\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {indent: true}),\n    '[\\n  1,\\n  2,\\n  3\\n]'\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {canonical: false}),\n    '[1,2,3]'\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {indent: true, canonical: false}),\n    '[\\n  1,\\n  2,\\n  3\\n]'\n  );\n\n  test.equal(EJSON.stringify([1, 2, 3], {indent: 4}),\n    '[\\n    1,\\n    2,\\n    3\\n]'\n  );\n  test.equal(EJSON.stringify([1, 2, 3], {indent: '--'}),\n    '[\\n--1,\\n--2,\\n--3\\n]'\n  );\n\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {canonical: true}\n    ),\n    '{\"a\":1,\"b\":[2,{\"c\":3,\"d\":4}]}'\n  );\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {\n        indent: true,\n        canonical: true,\n      }\n    ),\n    '{\\n' +\n    '  \"a\": 1,\\n' +\n    '  \"b\": [\\n' +\n    '    2,\\n' +\n    '    {\\n' +\n    '      \"c\": 3,\\n' +\n    '      \"d\": 4\\n' +\n    '    }\\n' +\n    '  ]\\n' +\n    '}'\n  );\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {canonical: false}\n    ),\n    '{\"b\":[2,{\"d\":4,\"c\":3}],\"a\":1}'\n  );\n  test.equal(\n    EJSON.stringify(\n      {b: [2, {d: 4, c: 3}], a: 1},\n      {indent: true, canonical: false}\n    ),\n    '{\\n' +\n    '  \"b\": [\\n' +\n    '    2,\\n' +\n    '    {\\n' +\n    '      \"d\": 4,\\n' +\n    '      \"c\": 3\\n' +\n    '    }\\n' +\n    '  ],\\n' +\n    '  \"a\": 1\\n' +\n    '}'\n  );\n});\n\nTinytest.add('ejson - parse', test => {\n  test.equal(EJSON.parse('[1,2,3]'), [1, 2, 3]);\n  test.throws(\n    () => { EJSON.parse(null); },\n    /argument should be a string/\n  );\n});\n\nTinytest.add(\"ejson - regexp\", test => {\n  test.equal(EJSON.stringify(/foo/gi), \"{\\\"$regexp\\\":\\\"foo\\\",\\\"$flags\\\":\\\"gi\\\"}\");\n  var d = new RegExp(\"foo\", \"gi\");\n  var obj = { $regexp: \"foo\", $flags: \"gi\" };\n\n  var eObj = EJSON.toJSONValue(obj);\n  var roundTrip = EJSON.fromJSONValue(eObj);\n  test.equal(obj, roundTrip);\n});\n\nTinytest.add('ejson - custom types', test => {\n  const testSameConstructors = (someObj, compareWith) => {\n    test.equal(someObj.constructor, compareWith.constructor);\n    if (typeof someObj === 'object') {\n      Object.keys(someObj).forEach(key => {\n        const value = someObj[key];\n        testSameConstructors(value, compareWith[key]);\n      });\n    }\n  };\n\n  const testReallyEqual = (someObj, compareWith) => {\n    test.equal(someObj, compareWith);\n    testSameConstructors(someObj, compareWith);\n  };\n\n  const testRoundTrip = (someObj) => {\n    const str = EJSON.stringify(someObj);\n    const roundTrip = EJSON.parse(str);\n    testReallyEqual(someObj, roundTrip);\n  };\n\n  const testCustomObject = (someObj) => {\n    testRoundTrip(someObj);\n    testReallyEqual(someObj, EJSON.clone(someObj));\n  };\n\n  const a = new EJSONTest.Address('Montreal', 'Quebec');\n  testCustomObject( {address: a} );\n  // Test that difference is detected even if they\n  // have similar toJSONValue results:\n  const nakedA = {city: 'Montreal', state: 'Quebec'};\n  test.notEqual(nakedA, a);\n  test.notEqual(a, nakedA);\n  const holder = new EJSONTest.Holder(nakedA);\n  test.equal(holder.toJSONValue(), a.toJSONValue()); // sanity check\n  test.notEqual(holder, a);\n  test.notEqual(a, holder);\n\n  const d = new Date();\n  const obj = new EJSONTest.Person('John Doe', d, a);\n  testCustomObject( obj );\n\n  // Test clone is deep:\n  const clone = EJSON.clone(obj);\n  clone.address.city = 'Sherbrooke';\n  test.notEqual( obj, clone );\n});\n\n// Verify objects with a property named \"length\" can be handled by the EJSON\n// API properly (see https://github.com/meteor/meteor/issues/5175).\nTinytest.add('ejson - handle objects with properties named \"length\"', test => {\n  class Widget {\n    constructor() {\n      this.length = 10;\n    }\n  }\n  const widget = new Widget();\n\n  const toJsonWidget = EJSON.toJSONValue(widget);\n  test.equal(widget, toJsonWidget);\n\n  const fromJsonWidget = EJSON.fromJSONValue(widget);\n  test.equal(widget, fromJsonWidget);\n\n  const stringifiedWidget = EJSON.stringify(widget);\n  test.equal(stringifiedWidget, '{\"length\":10}');\n\n  const parsedWidget = EJSON.parse('{\"length\":10}');\n  test.equal({ length: 10 }, parsedWidget);\n\n  test.isFalse(EJSON.isBinary(widget));\n\n  const widget2 = new Widget();\n  test.isTrue(widget, widget2);\n\n  const clonedWidget = EJSON.clone(widget);\n  test.equal(widget, clonedWidget);\n});\n"]},"sourceType":"script","hash":"72aca7b2f68a8ef2f3ed417a0761c134bbff0e18"}
