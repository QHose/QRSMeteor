{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/minimongo/common.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/minimongo/common.js","filename":"packages/minimongo/common.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/minimongo/common.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/common.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nmodule.export({\n  hasOwn: function () {\n    return hasOwn;\n  },\n  ELEMENT_OPERATORS: function () {\n    return ELEMENT_OPERATORS;\n  },\n  compileDocumentSelector: function () {\n    return compileDocumentSelector;\n  },\n  equalityElementMatcher: function () {\n    return equalityElementMatcher;\n  },\n  expandArraysInBranches: function () {\n    return expandArraysInBranches;\n  },\n  isIndexable: function () {\n    return isIndexable;\n  },\n  isNumericKey: function () {\n    return isNumericKey;\n  },\n  isOperatorObject: function () {\n    return isOperatorObject;\n  },\n  makeLookupFunction: function () {\n    return makeLookupFunction;\n  },\n  nothingMatcher: function () {\n    return nothingMatcher;\n  },\n  pathsToTree: function () {\n    return pathsToTree;\n  },\n  populateDocumentWithQueryFields: function () {\n    return populateDocumentWithQueryFields;\n  },\n  projectionDetails: function () {\n    return projectionDetails;\n  },\n  regexpElementMatcher: function () {\n    return regexpElementMatcher;\n  }\n});\nvar LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar ELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      } // XXX could require to be ints or round or something\n\n\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      var elementMatchers = operand.map(function (option) {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(function (matcher) {\n          return matcher(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return function (value) {\n        return Array.isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        var operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127\n        };\n\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(\"unknown string alias for $type: \" + operand);\n        }\n\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {\n          throw Error(\"Invalid numerical $type code: \" + operand);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return function (value) {\n        return value !== undefined && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $bitsAllSet: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAllSet');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every(function (byte, i) {\n          return (bitmask[i] & byte) === byte;\n        });\n      };\n    }\n  },\n  $bitsAnySet: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAnySet');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some(function (byte, i) {\n          return (~bitmask[i] & byte) !== byte;\n        });\n      };\n    }\n  },\n  $bitsAllClear: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAllClear');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every(function (byte, i) {\n          return !(bitmask[i] & byte);\n        });\n      };\n    }\n  },\n  $bitsAnyClear: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some(function (byte, i) {\n          return (bitmask[i] & byte) !== byte;\n        });\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      var regexp;\n\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        var source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      var isDocMatcher = !isOperatorObject(Object.keys(operand).filter(function (key) {\n        return !hasOwn.call(LOGICAL_OPERATORS, key);\n      }).reduce(function (a, b) {\n        var _Object$assign;\n\n        return Object.assign(a, (_Object$assign = {}, _Object$assign[b] = operand[b], _Object$assign));\n      }, {}), true);\n      var subMatcher;\n\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher, {\n          inElemMatch: true\n        });\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return function (value) {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg = void 0;\n\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{\n              value: arrayElement,\n              dontIterate: true\n            }];\n          } // XXX support $near in $elemMatch by propagating $distance?\n\n\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n};\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));\n  },\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return function (doc) {\n      var result = matchers.some(function (fn) {\n        return fn(doc).result;\n      }); // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n\n      return {\n        result: result\n      };\n    };\n  },\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = matchers.every(function (fn) {\n        return !fn(doc).result;\n      }); // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n\n      return {\n        result: result\n      };\n    };\n  },\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', \"return \" + selectorValue);\n    } // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n\n\n    return function (doc) {\n      return {\n        result: selectorValue.call(doc, doc)\n      };\n    };\n  },\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {\n        result: true\n      };\n    };\n  }\n}; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\n\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    } // Not sure why, but this seems to be what MongoDB does.\n\n\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    var branchedMatchers = operand.map(function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      } // This is always a regexp or equality selector.\n\n\n      return compileValueSelector(criterion, matcher);\n    }); // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n\n    var maxDistance, point, distance;\n\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(point, {\n            type: 'Point',\n            coordinates: pointToArray(value)\n          });\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = function (value) {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      var result = {\n        result: false\n      };\n      expandArraysInBranches(branchedValues).every(function (branch) {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        var curDistance;\n\n        if (!matcher._isUpdate) {\n          if (!((0, _typeof2.default)(branch.value) === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.\n\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          } // Skip anything that's a tie.\n\n\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n      return result;\n    };\n  }\n}; // NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\n\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return function (docOrBranches) {\n    var match = {};\n    match.result = subMatchers.every(function (fn) {\n      var subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n\n      if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {\n        match.distance = subResult.distance;\n      } // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n\n\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    }); // If we didn't actually match, forget any extra metadata we came up with.\n\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(function (subSelector) {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {\n      inElemMatch: inElemMatch\n    });\n  });\n} // Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\n\n\nfunction compileDocumentSelector(docSelector, matcher) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var docMatchers = Object.keys(docSelector).map(function (key) {\n    var subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    } // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n\n\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    } // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n\n\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    var lookUpByIndex = makeLookupFunction(key);\n    var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);\n    return function (doc) {\n      return valueMatcher(lookUpByIndex(doc));\n    };\n  }).filter(Boolean);\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));\n} // Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\n\n\nfunction convertElementMatcherToBranchedMatcher(elementMatcher) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (branches) {\n    var expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n    var match = {};\n    match.result = expanded.some(function (element) {\n      var matched = elementMatcher(element.value); // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      } // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n\n\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n    return match;\n  };\n} // Helpers for $near.\n\n\nfunction distanceCoordinatePairs(a, b) {\n  var pointA = pointToArray(a);\n  var pointB = pointToArray(b);\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n} // Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\n\n\nfunction equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  } // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n\n\n  if (elementSelector == null) {\n    return function (value) {\n      return value == null;\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {\n    result: true\n  };\n}\n\nfunction expandArraysInBranches(branches, skipTheArrays) {\n  var branchesOut = [];\n  branches.forEach(function (branch) {\n    var thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        arrayIndices: branch.arrayIndices,\n        value: branch.value\n      });\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach(function (value, i) {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value: value\n        });\n      });\n    }\n  });\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  } // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n\n\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  } // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n\n\n  if (Array.isArray(operand) && operand.every(function (x) {\n    return Number.isInteger(x) && x >= 0;\n  })) {\n    var buffer = new ArrayBuffer((Math.max.apply(Math, (0, _toConsumableArray2.default)(operand)) >> 3) + 1);\n    var view = new Uint8Array(buffer);\n    operand.forEach(function (x) {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n    return view;\n  } // bad operand\n\n\n  throw Error(\"operand to \" + selector + \" must be a numeric bitmask (representable as a \" + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    var buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));\n    var view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension\n\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach(function (byte, i) {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  } // bindata\n\n\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  } // no match\n\n\n  return false;\n} // Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\n\n\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(function (existingKey) {\n    if (existingKey.length > key.length && existingKey.indexOf(key + \".\") === 0 || key.length > existingKey.length && key.indexOf(existingKey + \".\") === 0) {\n      throw new Error(\"cannot infer query fields to set, both paths '\" + existingKey + \"' and \" + (\"'\" + key + \"' are matched\"));\n    } else if (existingKey === key) {\n      throw new Error(\"cannot infer query fields to set, path '\" + key + \"' is matched twice\");\n    }\n  });\n  document[key] = value;\n} // Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\n\n\nfunction invertBranchedMatcher(branchedMatcher) {\n  return function (branchValues) {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {\n      result: !branchedMatcher(branchValues).result\n    };\n  };\n}\n\nfunction isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nfunction isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\nfunction isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  var theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(function (selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\"Inconsistent operator: \" + JSON.stringify(valueSelector));\n      }\n\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return function () {\n          return false;\n        };\n      } // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n\n\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined) {\n          value = null;\n        } // Comparisons are never true among things of different type (except\n        // null vs undefined).\n\n\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n} // makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\n\n\nfunction makeLookupFunction(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'));\n\n  var omitUnnecessaryFields = function (result) {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  }; // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n\n\n  return function (doc) {\n    var arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      } // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n\n\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    } // Do our first lookup.\n\n\n    var firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices: arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    } // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n\n\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({\n        arrayIndices: arrayIndices,\n        value: undefined\n      })];\n    }\n\n    var result = [];\n\n    var appendToResult = function (more) {\n      result.push.apply(result, (0, _toConsumableArray2.default)(more));\n    }; // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n\n\n    appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n\n    if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach(function (branch, arrayIndex) {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {\n  makeLookupFunction: makeLookupFunction\n};\n\nMinimongoError = function (message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof message === 'string' && options.field) {\n    message += \" for field '\" + options.field + \"'\";\n  }\n\n  var error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nfunction nothingMatcher(docOrBranchedValues) {\n  return {\n    result: false\n  };\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  var operatorMatchers = Object.keys(valueSelector).map(function (operator) {\n    var operand = valueSelector[operator];\n    var simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';\n    var simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);\n    var simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(function (x) {\n      return x === Object(x);\n    });\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);\n    }\n\n    throw new Error(\"Unrecognized operator: \" + operator);\n  });\n  return andBranchedMatchers(operatorMatchers);\n} // paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\n\n\nfunction pathsToTree(paths, newLeafFn, conflictFn) {\n  var root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  paths.forEach(function (path) {\n    var pathArray = path.split('.');\n    var tree = root; // use .every just for iteration with break\n\n    var success = pathArray.slice(0, -1).every(function (key, i) {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path\n\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n      return true;\n    });\n\n    if (success) {\n      var lastKey = pathArray[pathArray.length - 1];\n\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n} // Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n// Handles one key/value pair to put in the selector document\n\n\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n} // Handles a key, value pair to put in the selector document\n// if the value is an object\n\n\nfunction populateDocumentWithObject(document, key, value) {\n  var keys = Object.keys(value);\n  var unprefixedKeys = keys.filter(function (op) {\n    return op[0] !== '$';\n  });\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(\"unknown operator: \" + unprefixedKeys[0]);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(function (op) {\n      var object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(function (element) {\n          return populateDocumentWithKeyValue(document, key, element);\n        });\n      }\n    });\n  }\n} // Fills a document with certain fields from an upsert selector\n\n\nfunction populateDocumentWithQueryFields(query) {\n  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(function (key) {\n      var value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(function (element) {\n          return populateDocumentWithQueryFields(element, document);\n        });\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\nfunction projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(function (key) {\n      return key !== '_id';\n    });\n  }\n\n  var including = null; // Unknown\n\n  fieldsKeys.forEach(function (keyPath) {\n    var rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    } // This error message is copied from MongoDB shell\n\n\n    if (including !== rule) {\n      throw MinimongoError('You cannot currently mix including and excluding fields.');\n    }\n  });\n  var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {\n    return including;\n  }, function (node, path, fullPath) {\n    // Check passed projection fields' keys: If you have two rules such as\n    // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n    // that happens, there is a probability you are doing something wrong,\n    // framework should notify you about such mistake earlier on cursor\n    // compilation step than later during runtime.  Note, that real mongo\n    // doesn't do anything about it and the later rule appears in projection\n    // project, more priority it takes.\n    //\n    // Example, assume following in mongo shell:\n    // > db.coll.insert({ a: { b: 23, c: 44 } })\n    // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n    // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n    //\n    // Note, how second time the return set of keys is different.\n    var currentPath = fullPath;\n    var anotherPath = path;\n    throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath + \" found in fields option, \" + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');\n  });\n  return {\n    including: including,\n    tree: projectionRulesTree\n  };\n}\n\nfunction regexpElementMatcher(regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    } // Regexps only work against strings.\n\n\n    if (typeof value !== 'string') {\n      return false;\n    } // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n\n\n    regexp.lastIndex = 0;\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\"The dotted field '\" + key + \"' in '\" + path + \".\" + key + \" is not valid for storage.\");\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\"The dollar ($) prefixed field  '\" + path + \".\" + key + \" is not valid for storage.\");\n  }\n} // Recursively validates an object that is nested more than one level deep\n\n\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(function (key) {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}","map":{"version":3,"sources":["packages/minimongo/common.js"],"names":["module","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","watch","require","v","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","operandAliasMap","call","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","LOGICAL_OPERATORS","key","reduce","a","b","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","fn","doc","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","curDistance","_isUpdate","branch","arrayIndices","andSomeMatchers","subMatchers","match","subResult","docOrBranches","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","expanded","branches","matched","element","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","concat","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","thisIsOperator","selKey","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","omitUnnecessaryFields","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","pathArray","path","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","rule","keyPath","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath"],"mappings":"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","sourcesContent":["import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        const operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127,\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(`unknown string alias for $type: ${operand}`);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1\n          || (operand > 19 && operand !== 127)) {\n          throw Error(`Invalid numerical $type code: ${operand}`);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'))\n  );\n\n  const omitUnnecessaryFields = result => {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices = []) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({arrayIndices, value: undefined})];\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n"]},"sourceType":"script","hash":"660dc59599311d7a3986e2839900faaf6128f6e6"}
