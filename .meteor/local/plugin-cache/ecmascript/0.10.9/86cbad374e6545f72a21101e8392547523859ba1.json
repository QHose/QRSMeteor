{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/aldeed:schema-index/lib/indexing.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/aldeed:schema-index/lib/indexing.js","filename":"packages/aldeed:schema-index/lib/indexing.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/aldeed:schema-index/lib/indexing.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:schema-index/lib/indexing.js"}},"code":"// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  sparse: Match.Optional(Boolean)\n}); // Define validation error messages (legacy)\n\nif (!SimpleSchema.version || SimpleSchema.version < 2) {\n  SimpleSchema.messages({\n    notUnique: '[label] must be unique'\n  });\n}\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    // Define validation error messages\n    if (ss.version >= 2) {\n      ss.messageBox.messages({\n        notUnique: '{{label}} must be unique'\n      });\n    }\n\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {// no index with that name, which is what we want\n        }\n      });\n    }\n\n    var propName = ss.version === 2 ? 'mergedSchema' : 'schema'; // Loop over fields definitions and ensure collection indexes (server side only)\n\n    _.each(ss[propName](), function (definition, fieldName) {\n      if ('index' in definition || definition.unique === true) {\n        var index = {},\n            indexValue; // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n\n        var indexName = 'c2_' + fieldName; // In the index object, we want object array keys without the \".$\" piece\n\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false; // If unique and optional, force sparse to prevent errors\n\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}","map":{"version":3,"sources":["packages/aldeed:schema-index/lib/indexing.js"],"names":["SimpleSchema","extendOptions","index","Match","Optional","OneOf","Number","String","Boolean","unique","sparse","version","messages","notUnique","Meteor","isServer","Collection2","on","collection","ss","messageBox","ensureIndex","indexName","startup","_collection","_ensureIndex","background","name","dropIndex","_dropIndex","err","propName","_","each","definition","fieldName","indexValue","idxFieldName","replace","optional"],"mappings":"AAAA;AACAA,aAAaC,aAAb,CAA2B;AACzBC,SAAOC,MAAMC,QAAN,CAAeD,MAAME,KAAN,CAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,OAA5B,CAAf,CADkB;AAEzBC,UAAQN,MAAMC,QAAN,CAAeI,OAAf,CAFiB;AAGzBE,UAAQP,MAAMC,QAAN,CAAeI,OAAf;AAHiB,CAA3B,E,CAMA;;AACA,IAAI,CAACR,aAAaW,OAAd,IAAyBX,aAAaW,OAAb,GAAuB,CAApD,EAAuD;AACrDX,eAAaY,QAAb,CAAsB;AACpBC,eAAW;AADS,GAAtB;AAGD;;AAED,IAAIC,OAAOC,QAAX,EAAqB;AACnBC,cAAYC,EAAZ,CAAe,iBAAf,EAAkC,UAAUC,UAAV,EAAsBC,EAAtB,EAA0B;AAC1D;AACA,QAAIA,GAAGR,OAAH,IAAc,CAAlB,EAAqB;AACnBQ,SAAGC,UAAH,CAAcR,QAAd,CAAuB;AACrBC,mBAAW;AADU,OAAvB;AAGD;;AAED,aAASQ,WAAT,CAAqBnB,KAArB,EAA4BoB,SAA5B,EAAuCb,MAAvC,EAA+CC,MAA/C,EAAuD;AACrDI,aAAOS,OAAP,CAAe,YAAY;AACzBL,mBAAWM,WAAX,CAAuBC,YAAvB,CAAoCvB,KAApC,EAA2C;AACzCwB,sBAAY,IAD6B;AAEzCC,gBAAML,SAFmC;AAGzCb,kBAAQA,MAHiC;AAIzCC,kBAAQA;AAJiC,SAA3C;AAMD,OAPD;AAQD;;AAED,aAASkB,SAAT,CAAmBN,SAAnB,EAA8B;AAC5BR,aAAOS,OAAP,CAAe,YAAY;AACzB,YAAI;AACFL,qBAAWM,WAAX,CAAuBK,UAAvB,CAAkCP,SAAlC;AACD,SAFD,CAEE,OAAOQ,GAAP,EAAY,CACZ;AACD;AACF,OAND;AAOD;;AAED,QAAMC,WAAWZ,GAAGR,OAAH,KAAe,CAAf,GAAmB,cAAnB,GAAoC,QAArD,CA7B0D,CA+B1D;;AACAqB,MAAEC,IAAF,CAAOd,GAAGY,QAAH,GAAP,EAAuB,UAASG,UAAT,EAAqBC,SAArB,EAAgC;AACrD,UAAI,WAAWD,UAAX,IAAyBA,WAAWzB,MAAX,KAAsB,IAAnD,EAAyD;AACvD,YAAIP,QAAQ,EAAZ;AAAA,YAAgBkC,UAAhB,CADuD,CAEvD;AACA;;AACA,YAAI,WAAWF,UAAf,EAA2B;AACzBE,uBAAaF,WAAWhC,KAAxB;AACA,cAAIkC,eAAe,IAAnB,EAAyBA,aAAa,CAAb;AAC1B,SAHD,MAGO;AACLA,uBAAa,CAAb;AACD;;AACD,YAAId,YAAY,QAAQa,SAAxB,CAVuD,CAWvD;;AACA,YAAIE,eAAeF,UAAUG,OAAV,CAAkB,SAAlB,EAA6B,GAA7B,CAAnB;AACApC,cAAMmC,YAAN,IAAsBD,UAAtB;AACA,YAAI3B,SAAS,CAAC,CAACyB,WAAWzB,MAAb,KAAwB2B,eAAe,CAAf,IAAoBA,eAAe,CAAC,CAA5D,CAAb;AACA,YAAI1B,SAASwB,WAAWxB,MAAX,IAAqB,KAAlC,CAfuD,CAiBvD;;AACA,YAAI,CAACA,MAAD,IAAWD,MAAX,IAAqByB,WAAWK,QAApC,EAA8C7B,SAAS,IAAT;;AAE9C,YAAI0B,eAAe,KAAnB,EAA0B;AACxBR,oBAAUN,SAAV;AACD,SAFD,MAEO;AACLD,sBAAYnB,KAAZ,EAAmBoB,SAAnB,EAA8Bb,MAA9B,EAAsCC,MAAtC;AACD;AACF;AACF,KA3BD;AA4BD,GA5DD;AA6DD","sourcesContent":["// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  sparse: Match.Optional(Boolean),\n});\n\n// Define validation error messages (legacy)\nif (!SimpleSchema.version || SimpleSchema.version < 2) {\n  SimpleSchema.messages({\n    notUnique: '[label] must be unique',\n  });\n}\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    // Define validation error messages\n    if (ss.version >= 2) {\n      ss.messageBox.messages({\n        notUnique: '{{label}} must be unique',\n      });\n    }\n\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {\n          // no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    _.each(ss[propName](), function(definition, fieldName) {\n      if ('index' in definition || definition.unique === true) {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;\n\n        // If unique and optional, force sparse to prevent errors\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}"]},"sourceType":"script","hash":"86cbad374e6545f72a21101e8392547523859ba1"}
