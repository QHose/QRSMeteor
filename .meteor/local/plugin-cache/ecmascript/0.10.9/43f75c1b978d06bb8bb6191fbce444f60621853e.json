{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/ddp-client/test/livedata_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/ddp-client/test/livedata_tests.js","filename":"packages/ddp-client/test/livedata_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/ddp-client/test/livedata_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/test/livedata_tests.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar DDP;\nmodule.watch(require(\"../common/namespace.js\"), {\n  DDP: function (v) {\n    DDP = v;\n  }\n}, 0);\nvar Connection;\nmodule.watch(require(\"../common/livedata_connection.js\"), {\n  Connection: function (v) {\n    Connection = v;\n  }\n}, 1);\n\n// XXX should check error codes\nvar failure = function (test, code, reason) {\n  return function (error, result) {\n    test.equal(result, undefined);\n    test.isTrue(error && (0, _typeof2.default)(error) === 'object');\n\n    if (error && (0, _typeof2.default)(error) === 'object') {\n      if (typeof code === 'number') {\n        test.instanceOf(error, Meteor.Error);\n        code && test.equal(error.error, code);\n        reason && test.equal(error.reason, reason); // XXX should check that other keys aren't present.. should\n        // probably use something like the Matcher we used to have\n      } else {\n        // for normal Javascript errors\n        test.instanceOf(error, Error);\n        test.equal(error.message, code);\n      }\n    }\n  };\n};\n\nvar failureOnStopped = function (test, code, reason) {\n  var f = failure(test, code, reason);\n  return function (error) {\n    if (error) {\n      f(error);\n    }\n  };\n};\n\nTinytest.add('livedata - Meteor.Error', function (test) {\n  var error = new Meteor.Error(123, 'kittens', 'puppies');\n  test.instanceOf(error, Meteor.Error);\n  test.instanceOf(error, Error);\n  test.equal(error.error, 123);\n  test.equal(error.reason, 'kittens');\n  test.equal(error.details, 'puppies');\n});\n\nif (Meteor.isServer) {\n  Tinytest.add('livedata - version negotiation', function (test) {\n    var versionCheck = function (clientVersions, serverVersions, expected) {\n      test.equal(DDPServer._calculateVersion(clientVersions, serverVersions), expected);\n    };\n\n    versionCheck(['A', 'B', 'C'], ['A', 'B', 'C'], 'A');\n    versionCheck(['B', 'C'], ['A', 'B', 'C'], 'B');\n    versionCheck(['A', 'B', 'C'], ['B', 'C'], 'B');\n    versionCheck(['foo', 'bar', 'baz'], ['A', 'B', 'C'], 'A');\n  });\n}\n\nTinytest.add('livedata - methods with colliding names', function (test) {\n  var x = Random.id();\n  var m = {};\n\n  m[x] = function () {};\n\n  Meteor.methods(m);\n  test.throws(function () {\n    Meteor.methods(m);\n  });\n});\nTinytest.add('livedata - non-function method', function (test) {\n  var x = Random.id();\n  var m = {};\n  m[x] = 'kitten';\n  test.throws(function () {\n    Meteor.methods(m);\n  });\n});\n\nvar echoTest = function (item) {\n  return function (test, expect) {\n    if (Meteor.isServer) {\n      test.equal(Meteor.call('echo', item), [item]);\n      test.equal(Meteor.call('echoOne', item), item);\n    }\n\n    if (Meteor.isClient) test.equal(Meteor.call('echo', item), undefined);\n    test.equal(Meteor.call('echo', item, expect(undefined, [item])), undefined);\n    test.equal(Meteor.call('echoOne', item, expect(undefined, item)), undefined);\n  };\n};\n\ntestAsyncMulti('livedata - basic method invocation', [// Unknown methods\nfunction (test, expect) {\n  if (Meteor.isServer) {\n    // On server, with no callback, throws exception\n    try {\n      var ret = Meteor.call('unknown method');\n    } catch (e) {\n      test.equal(e.error, 404);\n      var threw = true;\n    }\n\n    test.isTrue(threw);\n    test.equal(ret, undefined);\n  }\n\n  if (Meteor.isClient) {\n    // On client, with no callback, just returns undefined\n    var ret = Meteor.call('unknown method');\n    test.equal(ret, undefined);\n  } // On either, with a callback, calls the callback and does not throw\n\n\n  var ret = Meteor.call('unknown method', expect(failure(test, 404, \"Method 'unknown method' not found\")));\n  test.equal(ret, undefined);\n}, function (test, expect) {\n  // make sure 'undefined' is preserved as such, instead of turning\n  // into null (JSON does not have 'undefined' so there is special\n  // code for this)\n  if (Meteor.isServer) test.equal(Meteor.call('nothing'), undefined);\n  if (Meteor.isClient) test.equal(Meteor.call('nothing'), undefined);\n  test.equal(Meteor.call('nothing', expect(undefined, undefined)), undefined);\n}, function (test, expect) {\n  if (Meteor.isServer) test.equal(Meteor.call('echo'), []);\n  if (Meteor.isClient) test.equal(Meteor.call('echo'), undefined);\n  test.equal(Meteor.call('echo', expect(undefined, [])), undefined);\n}, echoTest(new Date()), echoTest({\n  d: new Date(),\n  s: 'foobarbaz'\n}), echoTest([new Date(), 'foobarbaz']), echoTest(new Mongo.ObjectID()), echoTest({\n  o: new Mongo.ObjectID()\n}), echoTest({\n  $date: 30\n}), // literal\nechoTest({\n  $literal: {\n    $date: 30\n  }\n}), echoTest(12), echoTest(Infinity), echoTest(-Infinity), function (test, expect) {\n  if (Meteor.isServer) test.equal(Meteor.call('echo', 12, {\n    x: 13\n  }), [12, {\n    x: 13\n  }]);\n  if (Meteor.isClient) test.equal(Meteor.call('echo', 12, {\n    x: 13\n  }), undefined);\n  test.equal(Meteor.call('echo', 12, {\n    x: 13\n  }, expect(undefined, [12, {\n    x: 13\n  }])), undefined);\n}, // test that `wait: false` is respected\nfunction (test, expect) {\n  if (Meteor.isClient) {\n    // For test isolation\n    var token = Random.id();\n    Meteor.apply('delayedTrue', [token], {\n      wait: false\n    }, expect(function (err, res) {\n      test.equal(res, false);\n    }));\n    Meteor.apply('makeDelayedTrueImmediatelyReturnFalse', [token]);\n  }\n}, // test that `wait: true` is respected\nfunction (test, expect) {\n  if (Meteor.isClient) {\n    var token = Random.id();\n    Meteor.apply('delayedTrue', [token], {\n      wait: true\n    }, expect(function (err, res) {\n      test.equal(res, true);\n    }));\n    Meteor.apply('makeDelayedTrueImmediatelyReturnFalse', [token]);\n  }\n}, function (test, expect) {\n  // No callback\n  if (Meteor.isServer) {\n    test.throws(function () {\n      Meteor.call('exception', 'both');\n    });\n    test.throws(function () {\n      Meteor.call('exception', 'server');\n    }); // No exception, because no code will run on the client\n\n    test.equal(Meteor.call('exception', 'client'), undefined);\n  }\n\n  if (Meteor.isClient) {\n    // The client exception is thrown away because it's in the\n    // stub. The server exception is throw away because we didn't\n    // give a callback.\n    test.equal(Meteor.call('exception', 'both'), undefined);\n    test.equal(Meteor.call('exception', 'server'), undefined);\n    test.equal(Meteor.call('exception', 'client'), undefined); // If we pass throwStubExceptions then we *should* see thrown exceptions\n    // on the client\n\n    test.throws(function () {\n      Meteor.apply('exception', ['both'], {\n        throwStubExceptions: true\n      });\n    });\n    test.equal(Meteor.apply('exception', ['server'], {\n      throwStubExceptions: true\n    }), undefined);\n    test.throws(function () {\n      Meteor.apply('exception', ['client'], {\n        throwStubExceptions: true\n      });\n    });\n  } // With callback\n\n\n  if (Meteor.isClient) {\n    test.equal(Meteor.call('exception', 'both', expect(failure(test, 500, 'Internal server error'))), undefined);\n    test.equal(Meteor.call('exception', 'server', expect(failure(test, 500, 'Internal server error'))), undefined);\n    test.equal(Meteor.call('exception', 'client'), undefined);\n  }\n\n  if (Meteor.isServer) {\n    test.equal(Meteor.call('exception', 'both', expect(failure(test, 'Test method throwing an exception'))), undefined);\n    test.equal(Meteor.call('exception', 'server', expect(failure(test, 'Test method throwing an exception'))), undefined);\n    test.equal(Meteor.call('exception', 'client'), undefined);\n  }\n}, function (test, expect) {\n  if (Meteor.isServer) {\n    var threw = false;\n\n    try {\n      Meteor.call('exception', 'both', {\n        intended: true\n      });\n    } catch (e) {\n      threw = true;\n      test.equal(e.error, 999);\n      test.equal(e.reason, 'Client-visible test exception');\n    }\n\n    test.isTrue(threw);\n    threw = false;\n\n    try {\n      Meteor.call('exception', 'both', {\n        intended: true,\n        throwThroughFuture: true\n      });\n    } catch (e) {\n      threw = true;\n      test.equal(e.error, 999);\n      test.equal(e.reason, 'Client-visible test exception');\n    }\n\n    test.isTrue(threw);\n  }\n\n  if (Meteor.isClient) {\n    test.equal(Meteor.call('exception', 'both', {\n      intended: true\n    }, expect(failure(test, 999, 'Client-visible test exception'))), undefined);\n    test.equal(Meteor.call('exception', 'server', {\n      intended: true\n    }, expect(failure(test, 999, 'Client-visible test exception'))), undefined);\n    test.equal(Meteor.call('exception', 'server', {\n      intended: true,\n      throwThroughFuture: true\n    }, expect(failure(test, 999, 'Client-visible test exception'))), undefined);\n  }\n}]);\n\nvar checkBalances = function (test, a, b) {\n  var alice = Ledger.findOne({\n    name: 'alice',\n    world: test.runId()\n  });\n  var bob = Ledger.findOne({\n    name: 'bob',\n    world: test.runId()\n  });\n  test.equal(alice.balance, a);\n  test.equal(bob.balance, b);\n}; // would be nice to have a database-aware test harness of some kind --\n// this is a big hack (and XXX pollutes the global test namespace)\n\n\ntestAsyncMulti('livedata - compound methods', [function (test, expect) {\n  if (Meteor.isClient) Meteor.subscribe('ledger', test.runId(), expect());\n  Ledger.insert({\n    name: 'alice',\n    balance: 100,\n    world: test.runId()\n  }, expect(function () {}));\n  Ledger.insert({\n    name: 'bob',\n    balance: 50,\n    world: test.runId()\n  }, expect(function () {}));\n}, function (test, expect) {\n  Meteor.call('ledger/transfer', test.runId(), 'alice', 'bob', 10, expect(function (err, result) {\n    test.equal(err, undefined);\n    test.equal(result, undefined);\n    checkBalances(test, 90, 60);\n  }));\n  checkBalances(test, 90, 60);\n}, function (test, expect) {\n  Meteor.call('ledger/transfer', test.runId(), 'alice', 'bob', 100, true, expect(function (err, result) {\n    failure(test, 409)(err, result); // Balances are reverted back to pre-stub values.\n\n    checkBalances(test, 90, 60);\n  }));\n  if (Meteor.isClient) // client can fool itself by cheating, but only until the sync\n    // finishes\n    checkBalances(test, -10, 160);else checkBalances(test, 90, 60);\n}]); // Replaces the Connection's `_livedata_data` method to push incoming\n// messages on a given collection to an array. This can be used to\n// verify that the right data is sent on the wire\n//\n// @param messages {Array} The array to which to append the messages\n// @return {Function} A function to call to undo the eavesdropping\n\nvar eavesdropOnCollection = function (livedata_connection, collection_name, messages) {\n  var old_livedata_data = _.bind(livedata_connection._livedata_data, livedata_connection); // Kind of gross since all tests past this one will run with this\n  // hook set up. That's probably fine since we only check a specific\n  // collection but still...\n  //\n  // Should we consider having a separate connection per Tinytest or\n  // some similar scheme?\n\n\n  livedata_connection._livedata_data = function (msg) {\n    if (msg.collection && msg.collection === collection_name) {\n      messages.push(msg);\n    }\n\n    old_livedata_data(msg);\n  };\n\n  return function () {\n    livedata_connection._livedata_data = old_livedata_data;\n  };\n};\n\nif (Meteor.isClient) {\n  testAsyncMulti('livedata - changing userid reruns subscriptions without flapping data on the wire', [function (test, expect) {\n    var messages = [];\n    var undoEavesdrop = eavesdropOnCollection(Meteor.connection, 'objectsWithUsers', messages); // A helper for testing incoming set and unset messages\n    // XXX should this be extracted as a general helper together with\n    // eavesdropOnCollection?\n\n    var expectMessages = function (expectedAddedMessageCount, expectedRemovedMessageCount, expectedNamesInCollection) {\n      var actualAddedMessageCount = 0;\n      var actualRemovedMessageCount = 0;\n\n      _.each(messages, function (msg) {\n        if (msg.msg === 'added') ++actualAddedMessageCount;else if (msg.msg === 'removed') ++actualRemovedMessageCount;else test.fail({\n          unexpected: JSON.stringify(msg)\n        });\n      });\n\n      test.equal(actualAddedMessageCount, expectedAddedMessageCount);\n      test.equal(actualRemovedMessageCount, expectedRemovedMessageCount);\n      expectedNamesInCollection.sort();\n      test.equal(_.pluck(objectsWithUsers.find({}, {\n        sort: ['name']\n      }).fetch(), 'name'), expectedNamesInCollection);\n      messages.length = 0; // clear messages without creating a new object\n    }; // make sure we're not already logged in. can happen if accounts\n    // tests fail oddly.\n\n\n    Meteor.apply('setUserId', [null], {\n      wait: true\n    }, expect(function () {}));\n    Meteor.subscribe('objectsWithUsers', expect(function () {\n      expectMessages(1, 0, ['owned by none']);\n      Meteor.apply('setUserId', ['1'], {\n        wait: true\n      }, afterFirstSetUserId);\n    }));\n    var afterFirstSetUserId = expect(function () {\n      expectMessages(3, 1, ['owned by one - a', 'owned by one/two - a', 'owned by one/two - b']);\n      Meteor.apply('setUserId', ['2'], {\n        wait: true\n      }, afterSecondSetUserId);\n    });\n    var afterSecondSetUserId = expect(function () {\n      expectMessages(2, 1, ['owned by one/two - a', 'owned by one/two - b', 'owned by two - a', 'owned by two - b']);\n      Meteor.apply('setUserId', ['2'], {\n        wait: true\n      }, afterThirdSetUserId);\n    });\n    var afterThirdSetUserId = expect(function () {\n      // Nothing should have been sent since the results of the\n      // query are the same (\"don't flap data on the wire\")\n      expectMessages(0, 0, ['owned by one/two - a', 'owned by one/two - b', 'owned by two - a', 'owned by two - b']);\n      undoEavesdrop();\n    });\n  }, function (test, expect) {\n    var key = Random.id();\n    Meteor.subscribe('recordUserIdOnStop', key);\n    Meteor.apply('setUserId', ['100'], {\n      wait: true\n    }, expect(function () {}));\n    Meteor.apply('setUserId', ['101'], {\n      wait: true\n    }, expect(function () {}));\n    Meteor.call('userIdWhenStopped', key, expect(function (err, result) {\n      test.isFalse(err);\n      test.equal(result, '100');\n    })); // clean up\n\n    Meteor.apply('setUserId', [null], {\n      wait: true\n    }, expect(function () {}));\n  }]);\n}\n\nTinytest.add('livedata - setUserId error when called from server', function (test) {\n  if (Meteor.isServer) {\n    test.equal(errorThrownWhenCallingSetUserIdDirectlyOnServer.message, \"Can't call setUserId on a server initiated method call\");\n  }\n});\n\nif (Meteor.isServer) {\n  var pubHandles = {};\n}\n\nMeteor.methods({\n  'livedata/setup': function (id) {\n    check(id, String);\n\n    if (Meteor.isServer) {\n      pubHandles[id] = {};\n      Meteor.publish('pub1' + id, function () {\n        pubHandles[id].pub1 = this;\n        this.ready();\n      });\n      Meteor.publish('pub2' + id, function () {\n        pubHandles[id].pub2 = this;\n        this.ready();\n      });\n    }\n  },\n  'livedata/pub1go': function (id) {\n    check(id, String);\n\n    if (Meteor.isServer) {\n      pubHandles[id].pub1.added('MultiPubCollection' + id, 'foo', {\n        a: 'aa'\n      });\n      return 1;\n    }\n\n    return 0;\n  },\n  'livedata/pub2go': function (id) {\n    check(id, String);\n\n    if (Meteor.isServer) {\n      pubHandles[id].pub2.added('MultiPubCollection' + id, 'foo', {\n        b: 'bb'\n      });\n      return 2;\n    }\n\n    return 0;\n  }\n});\n\nif (Meteor.isClient) {\n  (function () {\n    var MultiPub;\n    var id = Random.id();\n    testAsyncMulti('livedata - added from two different subs', [function (test, expect) {\n      Meteor.call('livedata/setup', id, expect(function () {}));\n    }, function (test, expect) {\n      MultiPub = new Mongo.Collection('MultiPubCollection' + id);\n      var sub1 = Meteor.subscribe('pub1' + id, expect(function () {}));\n      var sub2 = Meteor.subscribe('pub2' + id, expect(function () {}));\n    }, function (test, expect) {\n      Meteor.call('livedata/pub1go', id, expect(function (err, res) {\n        test.equal(res, 1);\n      }));\n    }, function (test, expect) {\n      test.equal(MultiPub.findOne('foo'), {\n        _id: 'foo',\n        a: 'aa'\n      });\n    }, function (test, expect) {\n      Meteor.call('livedata/pub2go', id, expect(function (err, res) {\n        test.equal(res, 2);\n      }));\n    }, function (test, expect) {\n      test.equal(MultiPub.findOne('foo'), {\n        _id: 'foo',\n        a: 'aa',\n        b: 'bb'\n      });\n    }]);\n  })();\n}\n\nif (Meteor.isClient) {\n  testAsyncMulti('livedata - overlapping universal subs', [function (test, expect) {\n    var coll = new Mongo.Collection('overlappingUniversalSubs');\n    var token = Random.id();\n    test.isFalse(coll.findOne(token));\n    Meteor.call('testOverlappingSubs', token, expect(function (err) {\n      test.isFalse(err);\n      test.isTrue(coll.findOne(token));\n    }));\n  }]);\n  testAsyncMulti('livedata - runtime universal sub creation', [function (test, expect) {\n    var coll = new Mongo.Collection('runtimeSubCreation');\n    var token = Random.id();\n    test.isFalse(coll.findOne(token));\n    Meteor.call('runtimeUniversalSubCreation', token, expect(function (err) {\n      test.isFalse(err);\n      test.isTrue(coll.findOne(token));\n    }));\n  }]);\n  testAsyncMulti('livedata - no setUserId after unblock', [function (test, expect) {\n    Meteor.call('setUserIdAfterUnblock', expect(function (err, result) {\n      test.isFalse(err);\n      test.isTrue(result);\n    }));\n  }]);\n  testAsyncMulti('livedata - publisher errors with onError callback', function () {\n    var conn, collName, coll;\n    var errorFromRerun;\n    var gotErrorFromStopper = false;\n    return [function (test, expect) {\n      // Use a separate connection so that we can safely check to see if\n      // conn._subscriptions is empty.\n      conn = new Connection('/', {\n        reloadWithOutstanding: true\n      });\n      collName = Random.id();\n      coll = new Mongo.Collection(collName, {\n        connection: conn\n      });\n\n      var testSubError = function (options) {\n        conn.subscribe('publisherErrors', collName, options, {\n          onReady: expect(),\n          onError: expect(failure(test, options.internalError ? 500 : 412, options.internalError ? 'Internal server error' : 'Explicit error'))\n        });\n      };\n\n      testSubError({\n        throwInHandler: true\n      });\n      testSubError({\n        throwInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorInHandler: true\n      });\n      testSubError({\n        errorInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorLater: true\n      });\n      testSubError({\n        errorLater: true,\n        internalError: true\n      });\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe('publisherErrors', collName, {\n        throwWhenUserIdSet: true\n      }, {\n        onReady: expect(),\n        onError: function (error) {\n          errorFromRerun = error;\n        }\n      });\n    }, function (test, expect) {\n      // Because the last subscription is ready, we should have a document.\n      test.equal(coll.find().count(), 1);\n      test.isFalse(errorFromRerun);\n      test.equal(_.size(conn._subscriptions), 1); // white-box test\n\n      conn.call('setUserId', 'bla', expect(function () {}));\n    }, function (test, expect) {\n      // Now that we've re-run, we should have stopped the subscription,\n      // gotten a error, and lost the document.\n      test.equal(coll.find().count(), 0);\n      test.isTrue(errorFromRerun);\n      test.instanceOf(errorFromRerun, Meteor.Error);\n      test.equal(errorFromRerun.error, 412);\n      test.equal(errorFromRerun.reason, 'Explicit error');\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe('publisherErrors', collName, {\n        stopInHandler: true\n      }, {\n        onError: function () {\n          gotErrorFromStopper = true;\n        }\n      }); // Call a method. This method won't be processed until the publisher's\n      // function returns, so blocking on it being done ensures that we've\n      // gotten the removed/nosub/etc.\n\n      conn.call('nothing', expect(function () {}));\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0); // sub.stop does NOT call onError.\n\n      test.isFalse(gotErrorFromStopper);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn._stream.disconnect({\n        _permanent: true\n      });\n    }];\n  }());\n  testAsyncMulti('livedata - publisher errors with onStop callback', function () {\n    var conn, collName, coll;\n    var errorFromRerun;\n    var gotErrorFromStopper = false;\n    return [function (test, expect) {\n      // Use a separate connection so that we can safely check to see if\n      // conn._subscriptions is empty.\n      conn = new Connection('/', {\n        reloadWithOutstanding: true\n      });\n      collName = Random.id();\n      coll = new Mongo.Collection(collName, {\n        connection: conn\n      });\n\n      var testSubError = function (options) {\n        conn.subscribe('publisherErrors', collName, options, {\n          onReady: expect(),\n          onStop: expect(failureOnStopped(test, options.internalError ? 500 : 412, options.internalError ? 'Internal server error' : 'Explicit error'))\n        });\n      };\n\n      testSubError({\n        throwInHandler: true\n      });\n      testSubError({\n        throwInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorInHandler: true\n      });\n      testSubError({\n        errorInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorLater: true\n      });\n      testSubError({\n        errorLater: true,\n        internalError: true\n      });\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe('publisherErrors', collName, {\n        throwWhenUserIdSet: true\n      }, {\n        onReady: expect(),\n        onStop: function (error) {\n          errorFromRerun = error;\n        }\n      });\n    }, function (test, expect) {\n      // Because the last subscription is ready, we should have a document.\n      test.equal(coll.find().count(), 1);\n      test.isFalse(errorFromRerun);\n      test.equal(_.size(conn._subscriptions), 1); // white-box test\n\n      conn.call('setUserId', 'bla', expect(function () {}));\n    }, function (test, expect) {\n      // Now that we've re-run, we should have stopped the subscription,\n      // gotten a error, and lost the document.\n      test.equal(coll.find().count(), 0);\n      test.isTrue(errorFromRerun);\n      test.instanceOf(errorFromRerun, Meteor.Error);\n      test.equal(errorFromRerun.error, 412);\n      test.equal(errorFromRerun.reason, 'Explicit error');\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe('publisherErrors', collName, {\n        stopInHandler: true\n      }, {\n        onStop: function (error) {\n          if (error) {\n            gotErrorFromStopper = true;\n          }\n        }\n      }); // Call a method. This method won't be processed until the publisher's\n      // function returns, so blocking on it being done ensures that we've\n      // gotten the removed/nosub/etc.\n\n      conn.call('nothing', expect(function () {}));\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0); // sub.stop does NOT call onError.\n\n      test.isFalse(gotErrorFromStopper);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn._stream.disconnect({\n        _permanent: true\n      });\n    }];\n  }());\n  testAsyncMulti('livedata - publish multiple cursors', [function (test, expect) {\n    var sub = Meteor.subscribe('multiPublish', {\n      normal: 1\n    }, {\n      onReady: expect(function () {\n        test.isTrue(sub.ready());\n        test.equal(One.find().count(), 2);\n        test.equal(Two.find().count(), 3);\n      }),\n      onError: failure()\n    });\n  }, function (test, expect) {\n    Meteor.subscribe('multiPublish', {\n      dup: 1\n    }, {\n      onReady: failure(),\n      onError: expect(failure(test, 500, 'Internal server error'))\n    });\n  }, function (test, expect) {\n    Meteor.subscribe('multiPublish', {\n      notCursor: 1\n    }, {\n      onReady: failure(),\n      onError: expect(failure(test, 500, 'Internal server error'))\n    });\n  }]);\n}\n\nvar selfUrl = Meteor.isServer ? Meteor.absoluteUrl() : Meteor._relativeToSiteRootUrl('/');\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    s2s: function (arg) {\n      check(arg, String);\n      return 's2s ' + arg;\n    }\n  });\n}\n\n(function () {\n  testAsyncMulti('livedata - connect works from both client and server', [function (test, expect) {\n    var self = this;\n    self.conn = DDP.connect(selfUrl);\n    pollUntil(expect, function () {\n      return self.conn.status().connected;\n    }, 10000);\n  }, function (test, expect) {\n    var self = this;\n\n    if (self.conn.status().connected) {\n      self.conn.call('s2s', 'foo', expect(function (err, res) {\n        if (err) throw err;\n        test.equal(res, 's2s foo');\n      }));\n    }\n  }]);\n})();\n\nif (Meteor.isServer) {\n  (function () {\n    testAsyncMulti('livedata - method call on server blocks in a fiber way', [function (test, expect) {\n      var self = this;\n      self.conn = DDP.connect(selfUrl);\n      pollUntil(expect, function () {\n        return self.conn.status().connected;\n      }, 10000);\n    }, function (test, expect) {\n      var self = this;\n\n      if (self.conn.status().connected) {\n        test.equal(self.conn.call('s2s', 'foo'), 's2s foo');\n      }\n    }]);\n  })();\n}\n\n(function () {\n  testAsyncMulti('livedata - connect fails to unknown place', [function (test, expect) {\n    var self = this;\n    self.conn = DDP.connect('example.com', {\n      _dontPrintErrors: true\n    });\n    Meteor.setTimeout(expect(function () {\n      test.isFalse(self.conn.status().connected, 'Not connected');\n      self.conn.close();\n    }), 500);\n  }]);\n})();\n\nif (Meteor.isServer) {\n  Meteor.publish('publisherCloning', function () {\n    var self = this;\n    var fields = {\n      x: {\n        y: 42\n      }\n    };\n    self.added('publisherCloning', 'a', fields);\n    fields.x.y = 43;\n    self.changed('publisherCloning', 'a', fields);\n    self.ready();\n  });\n} else {\n  var PublisherCloningCollection = new Mongo.Collection('publisherCloning');\n  testAsyncMulti('livedata - publish callbacks clone', [function (test, expect) {\n    Meteor.subscribe('publisherCloning', {\n      normal: 1\n    }, {\n      onReady: expect(function () {\n        test.equal(PublisherCloningCollection.findOne(), {\n          _id: 'a',\n          x: {\n            y: 43\n          }\n        });\n      }),\n      onError: failure()\n    });\n  }]);\n}\n\ntestAsyncMulti('livedata - result by value', [function (test, expect) {\n  var self = this;\n  self.testId = Random.id();\n  Meteor.call('getArray', self.testId, expect(function (error, firstResult) {\n    test.isFalse(error);\n    test.isTrue(firstResult);\n    self.firstResult = firstResult;\n  }));\n}, function (test, expect) {\n  var self = this;\n  Meteor.call('pushToArray', self.testId, 'xxx', expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  var self = this;\n  Meteor.call('getArray', self.testId, expect(function (error, secondResult) {\n    test.isFalse(error);\n    test.equal(self.firstResult.length + 1, secondResult.length);\n  }));\n}]); // XXX some things to test in greater detail:\n// staying in simulation mode\n// time warp\n// serialization / beginAsync(true) / beginAsync(false)\n// malformed messages (need raw wire access)\n// method completion/satisfaction\n// subscriptions (multiple APIs, including autorun?)\n// subscription completion\n// subscription attribute shadowing\n// server method calling methods on other server (eg, should simulate)\n// subscriptions and methods being idempotent\n// reconnection\n// reconnection not resulting in method re-execution\n// reconnection tolerating all kinds of lost messages (including data)\n// [probably lots more]","map":{"version":3,"sources":["packages/ddp-client/test/livedata_tests.js"],"names":["DDP","module","watch","require","v","Connection","failure","test","code","reason","error","result","equal","undefined","isTrue","instanceOf","Meteor","Error","message","failureOnStopped","f","Tinytest","add","details","isServer","versionCheck","clientVersions","serverVersions","expected","DDPServer","_calculateVersion","x","Random","id","m","methods","throws","echoTest","item","expect","call","isClient","testAsyncMulti","ret","e","threw","Date","d","s","Mongo","ObjectID","o","$date","$literal","Infinity","token","apply","wait","err","res","throwStubExceptions","intended","throwThroughFuture","checkBalances","a","b","alice","Ledger","findOne","name","world","runId","bob","balance","subscribe","insert","eavesdropOnCollection","livedata_connection","collection_name","messages","old_livedata_data","_","bind","_livedata_data","msg","collection","push","undoEavesdrop","connection","expectMessages","expectedAddedMessageCount","expectedRemovedMessageCount","expectedNamesInCollection","actualAddedMessageCount","actualRemovedMessageCount","each","fail","unexpected","JSON","stringify","sort","pluck","objectsWithUsers","find","fetch","length","afterFirstSetUserId","afterSecondSetUserId","afterThirdSetUserId","key","isFalse","errorThrownWhenCallingSetUserIdDirectlyOnServer","pubHandles","check","String","publish","pub1","ready","pub2","added","MultiPub","Collection","sub1","sub2","_id","coll","conn","collName","errorFromRerun","gotErrorFromStopper","reloadWithOutstanding","testSubError","options","onReady","onError","internalError","throwInHandler","errorInHandler","errorLater","count","size","_subscriptions","throwWhenUserIdSet","stopInHandler","_stream","disconnect","_permanent","onStop","sub","normal","One","Two","dup","notCursor","selfUrl","absoluteUrl","_relativeToSiteRootUrl","s2s","arg","self","connect","pollUntil","status","connected","_dontPrintErrors","setTimeout","close","fields","y","changed","PublisherCloningCollection","testId","firstResult","secondResult"],"mappings":"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","sourcesContent":["import { DDP } from '../common/namespace.js';\nimport { Connection } from '../common/livedata_connection.js';\n\n// XXX should check error codes\nvar failure = function(test, code, reason) {\n  return function(error, result) {\n    test.equal(result, undefined);\n    test.isTrue(error && typeof error === 'object');\n    if (error && typeof error === 'object') {\n      if (typeof code === 'number') {\n        test.instanceOf(error, Meteor.Error);\n        code && test.equal(error.error, code);\n        reason && test.equal(error.reason, reason);\n        // XXX should check that other keys aren't present.. should\n        // probably use something like the Matcher we used to have\n      } else {\n        // for normal Javascript errors\n        test.instanceOf(error, Error);\n        test.equal(error.message, code);\n      }\n    }\n  };\n};\n\nvar failureOnStopped = function(test, code, reason) {\n  var f = failure(test, code, reason);\n\n  return function(error) {\n    if (error) {\n      f(error);\n    }\n  };\n};\n\nTinytest.add('livedata - Meteor.Error', function(test) {\n  var error = new Meteor.Error(123, 'kittens', 'puppies');\n  test.instanceOf(error, Meteor.Error);\n  test.instanceOf(error, Error);\n  test.equal(error.error, 123);\n  test.equal(error.reason, 'kittens');\n  test.equal(error.details, 'puppies');\n});\n\nif (Meteor.isServer) {\n  Tinytest.add('livedata - version negotiation', function(test) {\n    var versionCheck = function(clientVersions, serverVersions, expected) {\n      test.equal(\n        DDPServer._calculateVersion(clientVersions, serverVersions),\n        expected\n      );\n    };\n\n    versionCheck(['A', 'B', 'C'], ['A', 'B', 'C'], 'A');\n    versionCheck(['B', 'C'], ['A', 'B', 'C'], 'B');\n    versionCheck(['A', 'B', 'C'], ['B', 'C'], 'B');\n    versionCheck(['foo', 'bar', 'baz'], ['A', 'B', 'C'], 'A');\n  });\n}\n\nTinytest.add('livedata - methods with colliding names', function(test) {\n  var x = Random.id();\n  var m = {};\n  m[x] = function() {};\n  Meteor.methods(m);\n\n  test.throws(function() {\n    Meteor.methods(m);\n  });\n});\n\nTinytest.add('livedata - non-function method', function(test) {\n  var x = Random.id();\n  var m = {};\n  m[x] = 'kitten';\n\n  test.throws(function() {\n    Meteor.methods(m);\n  });\n});\n\nvar echoTest = function(item) {\n  return function(test, expect) {\n    if (Meteor.isServer) {\n      test.equal(Meteor.call('echo', item), [item]);\n      test.equal(Meteor.call('echoOne', item), item);\n    }\n    if (Meteor.isClient) test.equal(Meteor.call('echo', item), undefined);\n\n    test.equal(Meteor.call('echo', item, expect(undefined, [item])), undefined);\n    test.equal(\n      Meteor.call('echoOne', item, expect(undefined, item)),\n      undefined\n    );\n  };\n};\n\ntestAsyncMulti('livedata - basic method invocation', [\n  // Unknown methods\n  function(test, expect) {\n    if (Meteor.isServer) {\n      // On server, with no callback, throws exception\n      try {\n        var ret = Meteor.call('unknown method');\n      } catch (e) {\n        test.equal(e.error, 404);\n        var threw = true;\n      }\n      test.isTrue(threw);\n      test.equal(ret, undefined);\n    }\n\n    if (Meteor.isClient) {\n      // On client, with no callback, just returns undefined\n      var ret = Meteor.call('unknown method');\n      test.equal(ret, undefined);\n    }\n\n    // On either, with a callback, calls the callback and does not throw\n    var ret = Meteor.call(\n      'unknown method',\n      expect(failure(test, 404, \"Method 'unknown method' not found\"))\n    );\n    test.equal(ret, undefined);\n  },\n\n  function(test, expect) {\n    // make sure 'undefined' is preserved as such, instead of turning\n    // into null (JSON does not have 'undefined' so there is special\n    // code for this)\n    if (Meteor.isServer) test.equal(Meteor.call('nothing'), undefined);\n    if (Meteor.isClient) test.equal(Meteor.call('nothing'), undefined);\n\n    test.equal(Meteor.call('nothing', expect(undefined, undefined)), undefined);\n  },\n\n  function(test, expect) {\n    if (Meteor.isServer) test.equal(Meteor.call('echo'), []);\n    if (Meteor.isClient) test.equal(Meteor.call('echo'), undefined);\n\n    test.equal(Meteor.call('echo', expect(undefined, [])), undefined);\n  },\n\n  echoTest(new Date()),\n  echoTest({ d: new Date(), s: 'foobarbaz' }),\n  echoTest([new Date(), 'foobarbaz']),\n  echoTest(new Mongo.ObjectID()),\n  echoTest({ o: new Mongo.ObjectID() }),\n  echoTest({ $date: 30 }), // literal\n  echoTest({ $literal: { $date: 30 } }),\n  echoTest(12),\n  echoTest(Infinity),\n  echoTest(-Infinity),\n\n  function(test, expect) {\n    if (Meteor.isServer)\n      test.equal(Meteor.call('echo', 12, { x: 13 }), [12, { x: 13 }]);\n    if (Meteor.isClient)\n      test.equal(Meteor.call('echo', 12, { x: 13 }), undefined);\n\n    test.equal(\n      Meteor.call('echo', 12, { x: 13 }, expect(undefined, [12, { x: 13 }])),\n      undefined\n    );\n  },\n\n  // test that `wait: false` is respected\n  function(test, expect) {\n    if (Meteor.isClient) {\n      // For test isolation\n      var token = Random.id();\n      Meteor.apply(\n        'delayedTrue',\n        [token],\n        { wait: false },\n        expect(function(err, res) {\n          test.equal(res, false);\n        })\n      );\n      Meteor.apply('makeDelayedTrueImmediatelyReturnFalse', [token]);\n    }\n  },\n\n  // test that `wait: true` is respected\n  function(test, expect) {\n    if (Meteor.isClient) {\n      var token = Random.id();\n      Meteor.apply(\n        'delayedTrue',\n        [token],\n        { wait: true },\n        expect(function(err, res) {\n          test.equal(res, true);\n        })\n      );\n      Meteor.apply('makeDelayedTrueImmediatelyReturnFalse', [token]);\n    }\n  },\n\n  function(test, expect) {\n    // No callback\n\n    if (Meteor.isServer) {\n      test.throws(function() {\n        Meteor.call('exception', 'both');\n      });\n      test.throws(function() {\n        Meteor.call('exception', 'server');\n      });\n      // No exception, because no code will run on the client\n      test.equal(Meteor.call('exception', 'client'), undefined);\n    }\n\n    if (Meteor.isClient) {\n      // The client exception is thrown away because it's in the\n      // stub. The server exception is throw away because we didn't\n      // give a callback.\n      test.equal(Meteor.call('exception', 'both'), undefined);\n      test.equal(Meteor.call('exception', 'server'), undefined);\n      test.equal(Meteor.call('exception', 'client'), undefined);\n\n      // If we pass throwStubExceptions then we *should* see thrown exceptions\n      // on the client\n      test.throws(function() {\n        Meteor.apply('exception', ['both'], { throwStubExceptions: true });\n      });\n      test.equal(\n        Meteor.apply('exception', ['server'], { throwStubExceptions: true }),\n        undefined\n      );\n      test.throws(function() {\n        Meteor.apply('exception', ['client'], { throwStubExceptions: true });\n      });\n    }\n\n    // With callback\n\n    if (Meteor.isClient) {\n      test.equal(\n        Meteor.call(\n          'exception',\n          'both',\n          expect(failure(test, 500, 'Internal server error'))\n        ),\n        undefined\n      );\n      test.equal(\n        Meteor.call(\n          'exception',\n          'server',\n          expect(failure(test, 500, 'Internal server error'))\n        ),\n        undefined\n      );\n      test.equal(Meteor.call('exception', 'client'), undefined);\n    }\n\n    if (Meteor.isServer) {\n      test.equal(\n        Meteor.call(\n          'exception',\n          'both',\n          expect(failure(test, 'Test method throwing an exception'))\n        ),\n        undefined\n      );\n      test.equal(\n        Meteor.call(\n          'exception',\n          'server',\n          expect(failure(test, 'Test method throwing an exception'))\n        ),\n        undefined\n      );\n      test.equal(Meteor.call('exception', 'client'), undefined);\n    }\n  },\n\n  function(test, expect) {\n    if (Meteor.isServer) {\n      var threw = false;\n      try {\n        Meteor.call('exception', 'both', { intended: true });\n      } catch (e) {\n        threw = true;\n        test.equal(e.error, 999);\n        test.equal(e.reason, 'Client-visible test exception');\n      }\n      test.isTrue(threw);\n      threw = false;\n      try {\n        Meteor.call('exception', 'both', {\n          intended: true,\n          throwThroughFuture: true\n        });\n      } catch (e) {\n        threw = true;\n        test.equal(e.error, 999);\n        test.equal(e.reason, 'Client-visible test exception');\n      }\n      test.isTrue(threw);\n    }\n\n    if (Meteor.isClient) {\n      test.equal(\n        Meteor.call(\n          'exception',\n          'both',\n          { intended: true },\n          expect(failure(test, 999, 'Client-visible test exception'))\n        ),\n        undefined\n      );\n      test.equal(\n        Meteor.call(\n          'exception',\n          'server',\n          { intended: true },\n          expect(failure(test, 999, 'Client-visible test exception'))\n        ),\n        undefined\n      );\n      test.equal(\n        Meteor.call(\n          'exception',\n          'server',\n          {\n            intended: true,\n            throwThroughFuture: true\n          },\n          expect(failure(test, 999, 'Client-visible test exception'))\n        ),\n        undefined\n      );\n    }\n  }\n]);\n\nvar checkBalances = function(test, a, b) {\n  var alice = Ledger.findOne({ name: 'alice', world: test.runId() });\n  var bob = Ledger.findOne({ name: 'bob', world: test.runId() });\n  test.equal(alice.balance, a);\n  test.equal(bob.balance, b);\n};\n\n// would be nice to have a database-aware test harness of some kind --\n// this is a big hack (and XXX pollutes the global test namespace)\ntestAsyncMulti('livedata - compound methods', [\n  function(test, expect) {\n    if (Meteor.isClient) Meteor.subscribe('ledger', test.runId(), expect());\n\n    Ledger.insert(\n      { name: 'alice', balance: 100, world: test.runId() },\n      expect(function() {})\n    );\n    Ledger.insert(\n      { name: 'bob', balance: 50, world: test.runId() },\n      expect(function() {})\n    );\n  },\n  function(test, expect) {\n    Meteor.call(\n      'ledger/transfer',\n      test.runId(),\n      'alice',\n      'bob',\n      10,\n      expect(function(err, result) {\n        test.equal(err, undefined);\n        test.equal(result, undefined);\n        checkBalances(test, 90, 60);\n      })\n    );\n    checkBalances(test, 90, 60);\n  },\n  function(test, expect) {\n    Meteor.call(\n      'ledger/transfer',\n      test.runId(),\n      'alice',\n      'bob',\n      100,\n      true,\n      expect(function(err, result) {\n        failure(test, 409)(err, result);\n        // Balances are reverted back to pre-stub values.\n        checkBalances(test, 90, 60);\n      })\n    );\n\n    if (Meteor.isClient)\n      // client can fool itself by cheating, but only until the sync\n      // finishes\n      checkBalances(test, -10, 160);\n    else checkBalances(test, 90, 60);\n  }\n]);\n\n// Replaces the Connection's `_livedata_data` method to push incoming\n// messages on a given collection to an array. This can be used to\n// verify that the right data is sent on the wire\n//\n// @param messages {Array} The array to which to append the messages\n// @return {Function} A function to call to undo the eavesdropping\nvar eavesdropOnCollection = function(\n  livedata_connection,\n  collection_name,\n  messages\n) {\n  var old_livedata_data = _.bind(\n    livedata_connection._livedata_data,\n    livedata_connection\n  );\n\n  // Kind of gross since all tests past this one will run with this\n  // hook set up. That's probably fine since we only check a specific\n  // collection but still...\n  //\n  // Should we consider having a separate connection per Tinytest or\n  // some similar scheme?\n  livedata_connection._livedata_data = function(msg) {\n    if (msg.collection && msg.collection === collection_name) {\n      messages.push(msg);\n    }\n    old_livedata_data(msg);\n  };\n\n  return function() {\n    livedata_connection._livedata_data = old_livedata_data;\n  };\n};\n\nif (Meteor.isClient) {\n  testAsyncMulti(\n    'livedata - changing userid reruns subscriptions without flapping data on the wire',\n    [\n      function(test, expect) {\n        var messages = [];\n        var undoEavesdrop = eavesdropOnCollection(\n          Meteor.connection,\n          'objectsWithUsers',\n          messages\n        );\n\n        // A helper for testing incoming set and unset messages\n        // XXX should this be extracted as a general helper together with\n        // eavesdropOnCollection?\n        var expectMessages = function(\n          expectedAddedMessageCount,\n          expectedRemovedMessageCount,\n          expectedNamesInCollection\n        ) {\n          var actualAddedMessageCount = 0;\n          var actualRemovedMessageCount = 0;\n          _.each(messages, function(msg) {\n            if (msg.msg === 'added') ++actualAddedMessageCount;\n            else if (msg.msg === 'removed') ++actualRemovedMessageCount;\n            else test.fail({ unexpected: JSON.stringify(msg) });\n          });\n          test.equal(actualAddedMessageCount, expectedAddedMessageCount);\n          test.equal(actualRemovedMessageCount, expectedRemovedMessageCount);\n          expectedNamesInCollection.sort();\n          test.equal(\n            _.pluck(\n              objectsWithUsers.find({}, { sort: ['name'] }).fetch(),\n              'name'\n            ),\n            expectedNamesInCollection\n          );\n          messages.length = 0; // clear messages without creating a new object\n        };\n\n        // make sure we're not already logged in. can happen if accounts\n        // tests fail oddly.\n        Meteor.apply(\n          'setUserId',\n          [null],\n          { wait: true },\n          expect(function() {})\n        );\n\n        Meteor.subscribe(\n          'objectsWithUsers',\n          expect(function() {\n            expectMessages(1, 0, ['owned by none']);\n            Meteor.apply(\n              'setUserId',\n              ['1'],\n              { wait: true },\n              afterFirstSetUserId\n            );\n          })\n        );\n\n        var afterFirstSetUserId = expect(function() {\n          expectMessages(3, 1, [\n            'owned by one - a',\n            'owned by one/two - a',\n            'owned by one/two - b'\n          ]);\n          Meteor.apply(\n            'setUserId',\n            ['2'],\n            { wait: true },\n            afterSecondSetUserId\n          );\n        });\n\n        var afterSecondSetUserId = expect(function() {\n          expectMessages(2, 1, [\n            'owned by one/two - a',\n            'owned by one/two - b',\n            'owned by two - a',\n            'owned by two - b'\n          ]);\n          Meteor.apply('setUserId', ['2'], { wait: true }, afterThirdSetUserId);\n        });\n\n        var afterThirdSetUserId = expect(function() {\n          // Nothing should have been sent since the results of the\n          // query are the same (\"don't flap data on the wire\")\n          expectMessages(0, 0, [\n            'owned by one/two - a',\n            'owned by one/two - b',\n            'owned by two - a',\n            'owned by two - b'\n          ]);\n          undoEavesdrop();\n        });\n      },\n      function(test, expect) {\n        var key = Random.id();\n        Meteor.subscribe('recordUserIdOnStop', key);\n        Meteor.apply(\n          'setUserId',\n          ['100'],\n          { wait: true },\n          expect(function() {})\n        );\n        Meteor.apply(\n          'setUserId',\n          ['101'],\n          { wait: true },\n          expect(function() {})\n        );\n        Meteor.call(\n          'userIdWhenStopped',\n          key,\n          expect(function(err, result) {\n            test.isFalse(err);\n            test.equal(result, '100');\n          })\n        );\n        // clean up\n        Meteor.apply(\n          'setUserId',\n          [null],\n          { wait: true },\n          expect(function() {})\n        );\n      }\n    ]\n  );\n}\n\nTinytest.add('livedata - setUserId error when called from server', function(\n  test\n) {\n  if (Meteor.isServer) {\n    test.equal(\n      errorThrownWhenCallingSetUserIdDirectlyOnServer.message,\n      \"Can't call setUserId on a server initiated method call\"\n    );\n  }\n});\n\nif (Meteor.isServer) {\n  var pubHandles = {};\n}\nMeteor.methods({\n  'livedata/setup': function(id) {\n    check(id, String);\n    if (Meteor.isServer) {\n      pubHandles[id] = {};\n      Meteor.publish('pub1' + id, function() {\n        pubHandles[id].pub1 = this;\n        this.ready();\n      });\n      Meteor.publish('pub2' + id, function() {\n        pubHandles[id].pub2 = this;\n        this.ready();\n      });\n    }\n  },\n  'livedata/pub1go': function(id) {\n    check(id, String);\n    if (Meteor.isServer) {\n      pubHandles[id].pub1.added('MultiPubCollection' + id, 'foo', { a: 'aa' });\n      return 1;\n    }\n    return 0;\n  },\n  'livedata/pub2go': function(id) {\n    check(id, String);\n    if (Meteor.isServer) {\n      pubHandles[id].pub2.added('MultiPubCollection' + id, 'foo', { b: 'bb' });\n      return 2;\n    }\n    return 0;\n  }\n});\n\nif (Meteor.isClient) {\n  (function() {\n    var MultiPub;\n    var id = Random.id();\n    testAsyncMulti('livedata - added from two different subs', [\n      function(test, expect) {\n        Meteor.call('livedata/setup', id, expect(function() {}));\n      },\n      function(test, expect) {\n        MultiPub = new Mongo.Collection('MultiPubCollection' + id);\n        var sub1 = Meteor.subscribe('pub1' + id, expect(function() {}));\n        var sub2 = Meteor.subscribe('pub2' + id, expect(function() {}));\n      },\n      function(test, expect) {\n        Meteor.call(\n          'livedata/pub1go',\n          id,\n          expect(function(err, res) {\n            test.equal(res, 1);\n          })\n        );\n      },\n      function(test, expect) {\n        test.equal(MultiPub.findOne('foo'), { _id: 'foo', a: 'aa' });\n      },\n      function(test, expect) {\n        Meteor.call(\n          'livedata/pub2go',\n          id,\n          expect(function(err, res) {\n            test.equal(res, 2);\n          })\n        );\n      },\n      function(test, expect) {\n        test.equal(MultiPub.findOne('foo'), { _id: 'foo', a: 'aa', b: 'bb' });\n      }\n    ]);\n  })();\n}\n\nif (Meteor.isClient) {\n  testAsyncMulti('livedata - overlapping universal subs', [\n    function(test, expect) {\n      var coll = new Mongo.Collection('overlappingUniversalSubs');\n      var token = Random.id();\n      test.isFalse(coll.findOne(token));\n      Meteor.call(\n        'testOverlappingSubs',\n        token,\n        expect(function(err) {\n          test.isFalse(err);\n          test.isTrue(coll.findOne(token));\n        })\n      );\n    }\n  ]);\n\n  testAsyncMulti('livedata - runtime universal sub creation', [\n    function(test, expect) {\n      var coll = new Mongo.Collection('runtimeSubCreation');\n      var token = Random.id();\n      test.isFalse(coll.findOne(token));\n      Meteor.call(\n        'runtimeUniversalSubCreation',\n        token,\n        expect(function(err) {\n          test.isFalse(err);\n          test.isTrue(coll.findOne(token));\n        })\n      );\n    }\n  ]);\n\n  testAsyncMulti('livedata - no setUserId after unblock', [\n    function(test, expect) {\n      Meteor.call(\n        'setUserIdAfterUnblock',\n        expect(function(err, result) {\n          test.isFalse(err);\n          test.isTrue(result);\n        })\n      );\n    }\n  ]);\n\n  testAsyncMulti(\n    'livedata - publisher errors with onError callback',\n    (function() {\n      var conn, collName, coll;\n      var errorFromRerun;\n      var gotErrorFromStopper = false;\n      return [\n        function(test, expect) {\n          // Use a separate connection so that we can safely check to see if\n          // conn._subscriptions is empty.\n          conn = new Connection('/', {\n            reloadWithOutstanding: true\n          });\n          collName = Random.id();\n          coll = new Mongo.Collection(collName, { connection: conn });\n\n          var testSubError = function(options) {\n            conn.subscribe('publisherErrors', collName, options, {\n              onReady: expect(),\n              onError: expect(\n                failure(\n                  test,\n                  options.internalError ? 500 : 412,\n                  options.internalError\n                    ? 'Internal server error'\n                    : 'Explicit error'\n                )\n              )\n            });\n          };\n          testSubError({ throwInHandler: true });\n          testSubError({ throwInHandler: true, internalError: true });\n          testSubError({ errorInHandler: true });\n          testSubError({ errorInHandler: true, internalError: true });\n          testSubError({ errorLater: true });\n          testSubError({ errorLater: true, internalError: true });\n        },\n        function(test, expect) {\n          test.equal(coll.find().count(), 0);\n          test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n          conn.subscribe(\n            'publisherErrors',\n            collName,\n            { throwWhenUserIdSet: true },\n            {\n              onReady: expect(),\n              onError: function(error) {\n                errorFromRerun = error;\n              }\n            }\n          );\n        },\n        function(test, expect) {\n          // Because the last subscription is ready, we should have a document.\n          test.equal(coll.find().count(), 1);\n          test.isFalse(errorFromRerun);\n          test.equal(_.size(conn._subscriptions), 1); // white-box test\n          conn.call('setUserId', 'bla', expect(function() {}));\n        },\n        function(test, expect) {\n          // Now that we've re-run, we should have stopped the subscription,\n          // gotten a error, and lost the document.\n          test.equal(coll.find().count(), 0);\n          test.isTrue(errorFromRerun);\n          test.instanceOf(errorFromRerun, Meteor.Error);\n          test.equal(errorFromRerun.error, 412);\n          test.equal(errorFromRerun.reason, 'Explicit error');\n          test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n          conn.subscribe(\n            'publisherErrors',\n            collName,\n            { stopInHandler: true },\n            {\n              onError: function() {\n                gotErrorFromStopper = true;\n              }\n            }\n          );\n          // Call a method. This method won't be processed until the publisher's\n          // function returns, so blocking on it being done ensures that we've\n          // gotten the removed/nosub/etc.\n          conn.call('nothing', expect(function() {}));\n        },\n        function(test, expect) {\n          test.equal(coll.find().count(), 0);\n          // sub.stop does NOT call onError.\n          test.isFalse(gotErrorFromStopper);\n          test.equal(_.size(conn._subscriptions), 0); // white-box test\n          conn._stream.disconnect({ _permanent: true });\n        }\n      ];\n    })()\n  );\n\n  testAsyncMulti(\n    'livedata - publisher errors with onStop callback',\n    (function() {\n      var conn, collName, coll;\n      var errorFromRerun;\n      var gotErrorFromStopper = false;\n      return [\n        function(test, expect) {\n          // Use a separate connection so that we can safely check to see if\n          // conn._subscriptions is empty.\n          conn = new Connection('/', {\n            reloadWithOutstanding: true\n          });\n          collName = Random.id();\n          coll = new Mongo.Collection(collName, { connection: conn });\n\n          var testSubError = function(options) {\n            conn.subscribe('publisherErrors', collName, options, {\n              onReady: expect(),\n              onStop: expect(\n                failureOnStopped(\n                  test,\n                  options.internalError ? 500 : 412,\n                  options.internalError\n                    ? 'Internal server error'\n                    : 'Explicit error'\n                )\n              )\n            });\n          };\n          testSubError({ throwInHandler: true });\n          testSubError({ throwInHandler: true, internalError: true });\n          testSubError({ errorInHandler: true });\n          testSubError({ errorInHandler: true, internalError: true });\n          testSubError({ errorLater: true });\n          testSubError({ errorLater: true, internalError: true });\n        },\n        function(test, expect) {\n          test.equal(coll.find().count(), 0);\n          test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n          conn.subscribe(\n            'publisherErrors',\n            collName,\n            { throwWhenUserIdSet: true },\n            {\n              onReady: expect(),\n              onStop: function(error) {\n                errorFromRerun = error;\n              }\n            }\n          );\n        },\n        function(test, expect) {\n          // Because the last subscription is ready, we should have a document.\n          test.equal(coll.find().count(), 1);\n          test.isFalse(errorFromRerun);\n          test.equal(_.size(conn._subscriptions), 1); // white-box test\n          conn.call('setUserId', 'bla', expect(function() {}));\n        },\n        function(test, expect) {\n          // Now that we've re-run, we should have stopped the subscription,\n          // gotten a error, and lost the document.\n          test.equal(coll.find().count(), 0);\n          test.isTrue(errorFromRerun);\n          test.instanceOf(errorFromRerun, Meteor.Error);\n          test.equal(errorFromRerun.error, 412);\n          test.equal(errorFromRerun.reason, 'Explicit error');\n          test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n          conn.subscribe(\n            'publisherErrors',\n            collName,\n            { stopInHandler: true },\n            {\n              onStop: function(error) {\n                if (error) {\n                  gotErrorFromStopper = true;\n                }\n              }\n            }\n          );\n          // Call a method. This method won't be processed until the publisher's\n          // function returns, so blocking on it being done ensures that we've\n          // gotten the removed/nosub/etc.\n          conn.call('nothing', expect(function() {}));\n        },\n        function(test, expect) {\n          test.equal(coll.find().count(), 0);\n          // sub.stop does NOT call onError.\n          test.isFalse(gotErrorFromStopper);\n          test.equal(_.size(conn._subscriptions), 0); // white-box test\n          conn._stream.disconnect({ _permanent: true });\n        }\n      ];\n    })()\n  );\n\n  testAsyncMulti('livedata - publish multiple cursors', [\n    function(test, expect) {\n      var sub = Meteor.subscribe(\n        'multiPublish',\n        { normal: 1 },\n        {\n          onReady: expect(function() {\n            test.isTrue(sub.ready());\n            test.equal(One.find().count(), 2);\n            test.equal(Two.find().count(), 3);\n          }),\n          onError: failure()\n        }\n      );\n    },\n    function(test, expect) {\n      Meteor.subscribe(\n        'multiPublish',\n        { dup: 1 },\n        {\n          onReady: failure(),\n          onError: expect(failure(test, 500, 'Internal server error'))\n        }\n      );\n    },\n    function(test, expect) {\n      Meteor.subscribe(\n        'multiPublish',\n        { notCursor: 1 },\n        {\n          onReady: failure(),\n          onError: expect(failure(test, 500, 'Internal server error'))\n        }\n      );\n    }\n  ]);\n}\n\nvar selfUrl = Meteor.isServer\n  ? Meteor.absoluteUrl()\n  : Meteor._relativeToSiteRootUrl('/');\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    s2s: function(arg) {\n      check(arg, String);\n      return 's2s ' + arg;\n    }\n  });\n}\n(function() {\n  testAsyncMulti('livedata - connect works from both client and server', [\n    function(test, expect) {\n      var self = this;\n      self.conn = DDP.connect(selfUrl);\n      pollUntil(\n        expect,\n        function() {\n          return self.conn.status().connected;\n        },\n        10000\n      );\n    },\n\n    function(test, expect) {\n      var self = this;\n      if (self.conn.status().connected) {\n        self.conn.call(\n          's2s',\n          'foo',\n          expect(function(err, res) {\n            if (err) throw err;\n            test.equal(res, 's2s foo');\n          })\n        );\n      }\n    }\n  ]);\n})();\n\nif (Meteor.isServer) {\n  (function() {\n    testAsyncMulti('livedata - method call on server blocks in a fiber way', [\n      function(test, expect) {\n        var self = this;\n        self.conn = DDP.connect(selfUrl);\n        pollUntil(\n          expect,\n          function() {\n            return self.conn.status().connected;\n          },\n          10000\n        );\n      },\n\n      function(test, expect) {\n        var self = this;\n        if (self.conn.status().connected) {\n          test.equal(self.conn.call('s2s', 'foo'), 's2s foo');\n        }\n      }\n    ]);\n  })();\n}\n\n(function() {\n  testAsyncMulti('livedata - connect fails to unknown place', [\n    function(test, expect) {\n      var self = this;\n      self.conn = DDP.connect('example.com', { _dontPrintErrors: true });\n      Meteor.setTimeout(\n        expect(function() {\n          test.isFalse(self.conn.status().connected, 'Not connected');\n          self.conn.close();\n        }),\n        500\n      );\n    }\n  ]);\n})();\n\nif (Meteor.isServer) {\n  Meteor.publish('publisherCloning', function() {\n    var self = this;\n    var fields = { x: { y: 42 } };\n    self.added('publisherCloning', 'a', fields);\n    fields.x.y = 43;\n    self.changed('publisherCloning', 'a', fields);\n    self.ready();\n  });\n} else {\n  var PublisherCloningCollection = new Mongo.Collection('publisherCloning');\n  testAsyncMulti('livedata - publish callbacks clone', [\n    function(test, expect) {\n      Meteor.subscribe(\n        'publisherCloning',\n        { normal: 1 },\n        {\n          onReady: expect(function() {\n            test.equal(PublisherCloningCollection.findOne(), {\n              _id: 'a',\n              x: { y: 43 }\n            });\n          }),\n          onError: failure()\n        }\n      );\n    }\n  ]);\n}\n\ntestAsyncMulti('livedata - result by value', [\n  function(test, expect) {\n    var self = this;\n    self.testId = Random.id();\n    Meteor.call(\n      'getArray',\n      self.testId,\n      expect(function(error, firstResult) {\n        test.isFalse(error);\n        test.isTrue(firstResult);\n        self.firstResult = firstResult;\n      })\n    );\n  },\n  function(test, expect) {\n    var self = this;\n    Meteor.call(\n      'pushToArray',\n      self.testId,\n      'xxx',\n      expect(function(error) {\n        test.isFalse(error);\n      })\n    );\n  },\n  function(test, expect) {\n    var self = this;\n    Meteor.call(\n      'getArray',\n      self.testId,\n      expect(function(error, secondResult) {\n        test.isFalse(error);\n        test.equal(self.firstResult.length + 1, secondResult.length);\n      })\n    );\n  }\n]);\n\n// XXX some things to test in greater detail:\n// staying in simulation mode\n// time warp\n// serialization / beginAsync(true) / beginAsync(false)\n// malformed messages (need raw wire access)\n// method completion/satisfaction\n// subscriptions (multiple APIs, including autorun?)\n// subscription completion\n// subscription attribute shadowing\n// server method calling methods on other server (eg, should simulate)\n// subscriptions and methods being idempotent\n// reconnection\n// reconnection not resulting in method re-execution\n// reconnection tolerating all kinds of lost messages (including data)\n// [probably lots more]\n"]},"sourceType":"script","hash":"43f75c1b978d06bb8bb6191fbce444f60621853e"}
