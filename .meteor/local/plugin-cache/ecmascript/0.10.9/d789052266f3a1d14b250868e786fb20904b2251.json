{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/accounts-base/accounts_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/accounts-base/accounts_server.js","filename":"packages/accounts-base/accounts_server.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/accounts-base/accounts_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_server.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  AccountsServer: () => AccountsServer\n});\nlet AccountsCommon;\nmodule.watch(require(\"./accounts_common.js\"), {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  }\n\n}, 0);\n\nvar crypto = Npm.require('crypto');\n\nclass AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n    this._server = server || Meteor.server; // Set up the server's methods, as if by calling Meteor.methods.\n\n    this._initServerMethods();\n\n    this._initAccountDataHooks(); // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n\n\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    this._initServerPublications(); // connectionId -> {connection, loginToken}\n\n\n    this._accountData = {}; // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1; // for the number described above.\n    // list of all registered handlers.\n\n    this._loginHandlers = [];\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n    this._validateLoginHook = new Hook({\n      bindEnvironment: false\n    });\n    this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n  } ///\n  /// CURRENT USER\n  ///\n  // @override of \"abstract\" non-implementation in accounts_common.js\n\n\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the infomation from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n\n    if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  } ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n\n\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n\n\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  } ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n\n\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n\n\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n}\n\n;\nvar Ap = AccountsServer.prototype; // Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\n\nfunction cloneAttemptWithConnection(connection, attempt) {\n  var clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n}\n\nAp._validateLogin = function (connection, attempt) {\n  this._validateLoginHook.each(function (callback) {\n    var ret;\n\n    try {\n      ret = callback(cloneAttemptWithConnection(connection, attempt));\n    } catch (e) {\n      attempt.allowed = false; // XXX this means the last thrown error overrides previous error\n      // messages. Maybe this is surprising to users and we should make\n      // overriding errors more explicit. (see\n      // https://github.com/meteor/meteor/issues/1960)\n\n      attempt.error = e;\n      return true;\n    }\n\n    if (!ret) {\n      attempt.allowed = false; // don't override a specific error provided by a previous\n      // validator or the initial attempt (eg \"incorrect password\").\n\n      if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    return true;\n  });\n};\n\nAp._successfulLogin = function (connection, attempt) {\n  this._onLoginHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._failedLogin = function (connection, attempt) {\n  this._onLoginFailureHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._successfulLogout = function (connection, userId) {\n  const user = userId && this.users.findOne(userId);\n\n  this._onLogoutHook.each(function (callback) {\n    callback({\n      user,\n      connection\n    });\n    return true;\n  });\n}; ///\n/// LOGIN METHODS\n///\n// Login methods return to the client an object containing these\n// fields when the user was logged in successfully:\n//\n//   id: userId\n//   token: *\n//   tokenExpires: *\n//\n// tokenExpires is optional and intends to provide a hint to the\n// client as to when the token will expire. If not provided, the\n// client will call Accounts._tokenExpiration, passing it the date\n// that it received the token.\n//\n// The login method will throw an error back to the client if the user\n// failed to log in.\n//\n//\n// Login handlers and service specific login methods such as\n// `createUser` internally return a `result` object containing these\n// fields:\n//\n//   type:\n//     optional string; the service name, overrides the handler\n//     default if present.\n//\n//   error:\n//     exception; if the user is not allowed to login, the reason why.\n//\n//   userId:\n//     string; the user id of the user attempting to login (if\n//     known), required for an allowed login.\n//\n//   options:\n//     optional object merged into the result returned by the login\n//     method; used by HAMK from SRP.\n//\n//   stampedLoginToken:\n//     optional object with `token` and `when` indicating the login\n//     token is already present in the database, returned by the\n//     \"resume\" login handler.\n//\n// For convenience, login methods can also throw an exception, which\n// is converted into an {error} result.  However, if the id of the\n// user attempting the login is known, a {userId, error} result should\n// be returned instead since the user id is not captured when an\n// exception is thrown.\n//\n// This internal `result` object is automatically converted into the\n// public {id, token, tokenExpires} object returned to the client.\n// Try a login method, converting thrown exceptions into an {error}\n// result.  The `type` argument is a default, inserted into the result\n// object if not explicitly returned.\n//\n\n\nvar tryLoginMethod = function (type, fn) {\n  var result;\n\n  try {\n    result = fn();\n  } catch (e) {\n    result = {\n      error: e\n    };\n  }\n\n  if (result && !result.type && type) result.type = type;\n  return result;\n}; // Log in a user on a connection.\n//\n// We use the method invocation to set the user id on the connection,\n// not the connection object directly. setUserId is tied to methods to\n// enforce clear ordering of method application (using wait methods on\n// the client, and a no setUserId after unblock restriction on the\n// server)\n//\n// The `stampedLoginToken` parameter is optional.  When present, it\n// indicates that the login token has already been inserted into the\n// database and doesn't need to be inserted again.  (It's used by the\n// \"resume\" login handler).\n\n\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {\n  var self = this;\n\n  if (!stampedLoginToken) {\n    stampedLoginToken = self._generateStampedLoginToken();\n\n    self._insertLoginToken(userId, stampedLoginToken);\n  } // This order (and the avoidance of yields) is important to make\n  // sure that when publish functions are rerun, they see a\n  // consistent view of the world: the userId is set and matches\n  // the login token on the connection (not that there is\n  // currently a public API for reading the login token on a\n  // connection).\n\n\n  Meteor._noYieldsAllowed(function () {\n    self._setLoginToken(userId, methodInvocation.connection, self._hashLoginToken(stampedLoginToken.token));\n  });\n\n  methodInvocation.setUserId(userId);\n  return {\n    id: userId,\n    token: stampedLoginToken.token,\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)\n  };\n}; // After a login method has completed, call the login hooks.  Note\n// that `attemptLogin` is called for *all* login attempts, even ones\n// which aren't successful (such as an invalid password, etc).\n//\n// If the login is allowed and isn't aborted by a validate login hook\n// callback, log in the user.\n//\n\n\nAp._attemptLogin = function (methodInvocation, methodName, methodArgs, result) {\n  if (!result) throw new Error(\"result is required\"); // XXX A programming error in a login handler can lead to this occuring, and\n  // then we don't call onLogin or onLoginFailure callbacks. Should\n  // tryLoginMethod catch this case and turn it into an error?\n\n  if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");\n  var user;\n  if (result.userId) user = this.users.findOne(result.userId);\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: !!(result.userId && !result.error),\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n  if (result.error) attempt.error = result.error;\n  if (user) attempt.user = user; // _validateLogin may mutate `attempt` by adding an error and changing allowed\n  // to false, but that's the only change it can make (and the user's callbacks\n  // only get a clone of `attempt`).\n\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  if (attempt.allowed) {\n    var ret = _.extend(this._loginUser(methodInvocation, result.userId, result.stampedLoginToken), result.options || {});\n\n    ret.type = attempt.type;\n\n    this._successfulLogin(methodInvocation.connection, attempt);\n\n    return ret;\n  } else {\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    throw attempt.error;\n  }\n}; // All service specific login methods should go through this function.\n// Ensure that thrown exceptions are caught and that login hook\n// callbacks are still called.\n//\n\n\nAp._loginMethod = function (methodInvocation, methodName, methodArgs, type, fn) {\n  return this._attemptLogin(methodInvocation, methodName, methodArgs, tryLoginMethod(type, fn));\n}; // Report a login attempt failed outside the context of a normal login\n// method. This is for use in the case where there is a multi-step login\n// procedure (eg SRP based password login). If a method early in the\n// chain fails, it should call this function to report a failure. There\n// is no corresponding method for a successful login; methods that can\n// succeed at logging a user in should always be actual login methods\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n\n\nAp._reportLoginFailure = function (methodInvocation, methodName, methodArgs, result) {\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: false,\n    error: result.error,\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n\n  if (result.userId) {\n    attempt.user = this.users.findOne(result.userId);\n  }\n\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  this._failedLogin(methodInvocation.connection, attempt); // _validateLogin may mutate attempt to set a new error message. Return\n  // the modified version.\n\n\n  return attempt;\n}; ///\n/// LOGIN HANDLERS\n///\n// The main entry point for auth packages to hook in to login.\n//\n// A login handler is a login method which can return `undefined` to\n// indicate that the login request is not handled by this handler.\n//\n// @param name {String} Optional.  The service name, used by default\n// if a specific service name isn't returned in the result.\n//\n// @param handler {Function} A function that receives an options object\n// (as passed as an argument to the `login` method) and returns one of:\n// - `undefined`, meaning don't handle;\n// - a login method result object\n\n\nAp.registerLoginHandler = function (name, handler) {\n  if (!handler) {\n    handler = name;\n    name = null;\n  }\n\n  this._loginHandlers.push({\n    name: name,\n    handler: handler\n  });\n}; // Checks a user's credentials against all the registered login\n// handlers, and returns a login token if the credentials are valid. It\n// is like the login method, except that it doesn't set the logged-in\n// user on the connection. Throws a Meteor.Error if logging in fails,\n// including the case where none of the login handlers handled the login\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n//\n// For example, if you want to login with a plaintext password, `options` could be\n//   { user: { username: <username> }, password: <password> }, or\n//   { user: { email: <email> }, password: <password> }.\n// Try all of the registered login handlers until one of them doesn't\n// return `undefined`, meaning it handled this call to `login`. Return\n// that return value.\n\n\nAp._runLoginHandlers = function (methodInvocation, options) {\n  for (var i = 0; i < this._loginHandlers.length; ++i) {\n    var handler = this._loginHandlers[i];\n    var result = tryLoginMethod(handler.name, function () {\n      return handler.handler.call(methodInvocation, options);\n    });\n\n    if (result) {\n      return result;\n    }\n\n    if (result !== undefined) {\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n    }\n  }\n\n  return {\n    type: null,\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")\n  };\n}; // Deletes the given loginToken from the database.\n//\n// For new-style hashed token, this will cause all connections\n// associated with the token to be closed.\n//\n// Any connections associated with old-style unhashed tokens will be\n// in the process of becoming associated with hashed tokens and then\n// they'll get closed.\n\n\nAp.destroyToken = function (userId, loginToken) {\n  this.users.update(userId, {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [{\n          hashedToken: loginToken\n        }, {\n          token: loginToken\n        }]\n      }\n    }\n  });\n};\n\nAp._initServerMethods = function () {\n  // The methods created in this function need to be created here so that\n  // this variable is available in their scope.\n  var accounts = this; // This object will be populated with methods and then passed to\n  // accounts._server.methods further below.\n\n  var methods = {}; // @returns {Object|null}\n  //   If successful, returns {token: reconnectToken, id: userId}\n  //   If unsuccessful (for example, if the user closed the oauth login popup),\n  //     throws an error describing the reason\n\n  methods.login = function (options) {\n    var self = this; // Login handlers should really also check whatever field they look at in\n    // options, but we don't enforce it.\n\n    check(options, Object);\n\n    var result = accounts._runLoginHandlers(self, options);\n\n    return accounts._attemptLogin(self, \"login\", arguments, result);\n  };\n\n  methods.logout = function () {\n    var token = accounts._getLoginToken(this.connection.id);\n\n    accounts._setLoginToken(this.userId, this.connection, null);\n\n    if (token && this.userId) accounts.destroyToken(this.userId, token);\n\n    accounts._successfulLogout(this.connection, this.userId);\n\n    this.setUserId(null);\n  }; // Delete all the current user's tokens and close all open connections logged\n  // in as this user. Returns a fresh new login token that this client can\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n  // immediately instead of using a delay.\n  //\n  // XXX COMPAT WITH 0.7.2\n  // This single `logoutOtherClients` method has been replaced with two\n  // methods, one that you call to get a new token, and another that you\n  // call to remove all tokens except your own. The new design allows\n  // clients to know when other clients have actually been logged\n  // out. (The `logoutOtherClients` method guarantees the caller that\n  // the other clients will be logged out at some point, but makes no\n  // guarantees about when.) This method is left in for backwards\n  // compatibility, especially since application code might be calling\n  // this method directly.\n  //\n  // @returns {Object} Object with token and tokenExpires keys.\n\n\n  methods.logoutOtherClients = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": true\n      }\n    });\n\n    if (user) {\n      // Save the current tokens in the database to be deleted in\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n      // caller's browser time to find the fresh token in localStorage. We save\n      // the tokens in the database in case we crash before actually deleting\n      // them.\n      var tokens = user.services.resume.loginTokens;\n\n      var newToken = accounts._generateStampedLoginToken();\n\n      var userId = self.userId;\n      accounts.users.update(userId, {\n        $set: {\n          \"services.resume.loginTokensToDelete\": tokens,\n          \"services.resume.haveLoginTokensToDelete\": true\n        },\n        $push: {\n          \"services.resume.loginTokens\": accounts._hashStampedToken(newToken)\n        }\n      });\n      Meteor.setTimeout(function () {\n        // The observe on Meteor.users will take care of closing the connections\n        // associated with `tokens`.\n        accounts._deleteSavedTokensForUser(userId, tokens);\n      }, accounts._noConnectionCloseDelayForTest ? 0 : CONNECTION_CLOSE_DELAY_MS); // We do not set the login token on this connection, but instead the\n      // observe closes the connection and the client will reconnect with the\n      // new token.\n\n      return {\n        token: newToken.token,\n        tokenExpires: accounts._tokenExpiration(newToken.when)\n      };\n    } else {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n  }; // Generates a new login token with the same expiration as the\n  // connection's current token and saves it to the database. Associates\n  // the connection with this new token and returns it. Throws an error\n  // if called on a connection that isn't logged in.\n  //\n  // @returns Object\n  //   If successful, returns { token: <new token>, id: <user id>,\n  //   tokenExpires: <expiration date> }.\n\n\n  methods.getNewToken = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": 1\n      }\n    });\n\n    if (!self.userId || !user) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    } // Be careful not to generate a new token that has a later\n    // expiration than the curren token. Otherwise, a bad guy with a\n    // stolen token could use this method to stop his stolen token from\n    // ever expiring.\n\n\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);\n\n    var currentStampedToken = _.find(user.services.resume.loginTokens, function (stampedToken) {\n      return stampedToken.hashedToken === currentHashedToken;\n    });\n\n    if (!currentStampedToken) {\n      // safety belt: this should never happen\n      throw new Meteor.Error(\"Invalid login token\");\n    }\n\n    var newStampedToken = accounts._generateStampedLoginToken();\n\n    newStampedToken.when = currentStampedToken.when;\n\n    accounts._insertLoginToken(self.userId, newStampedToken);\n\n    return accounts._loginUser(self, self.userId, newStampedToken);\n  }; // Removes all tokens except the token associated with the current\n  // connection. Throws an error if the connection is not logged\n  // in. Returns nothing on success.\n\n\n  methods.removeOtherTokens = function () {\n    var self = this;\n\n    if (!self.userId) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n\n    var currentToken = accounts._getLoginToken(self.connection.id);\n\n    accounts.users.update(self.userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          hashedToken: {\n            $ne: currentToken\n          }\n        }\n      }\n    });\n  }; // Allow a one-time configuration for a login service. Modifications\n  // to this collection are also allowed in insecure mode.\n\n\n  methods.configureLoginService = function (options) {\n    check(options, Match.ObjectIncluding({\n      service: String\n    })); // Don't let random users configure a service we haven't added yet (so\n    // that when we do later add it, it's set up with their configuration\n    // instead of ours).\n    // XXX if service configuration is oauth-specific then this code should\n    //     be in accounts-oauth; if it's not then the registry should be\n    //     in this package\n\n    if (!(accounts.oauth && _.contains(accounts.oauth.serviceNames(), options.service))) {\n      throw new Meteor.Error(403, \"Service unknown\");\n    }\n\n    var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n    if (ServiceConfiguration.configurations.findOne({\n      service: options.service\n    })) throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n    if (_.has(options, \"secret\") && usingOAuthEncryption()) options.secret = OAuthEncryption.seal(options.secret);\n    ServiceConfiguration.configurations.insert(options);\n  };\n\n  accounts._server.methods(methods);\n};\n\nAp._initAccountDataHooks = function () {\n  var accounts = this;\n\n  accounts._server.onConnection(function (connection) {\n    accounts._accountData[connection.id] = {\n      connection: connection\n    };\n    connection.onClose(function () {\n      accounts._removeTokenFromConnection(connection.id);\n\n      delete accounts._accountData[connection.id];\n    });\n  });\n};\n\nAp._initServerPublications = function () {\n  var accounts = this; // Publish all login service configuration fields other than secret.\n\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {\n    var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n    return ServiceConfiguration.configurations.find({}, {\n      fields: {\n        secret: 0\n      }\n    });\n  }, {\n    is_auto: true\n  }); // not techincally autopublish, but stops the warning.\n  // Publish the current user's record to the client.\n\n\n  accounts._server.publish(null, function () {\n    if (this.userId) {\n      return accounts.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          profile: 1,\n          username: 1,\n          emails: 1\n        }\n      });\n    } else {\n      return null;\n    }\n  },\n  /*suppress autopublish warning*/\n  {\n    is_auto: true\n  }); // Use Meteor.startup to give other packages a chance to call\n  // addAutopublishFields.\n\n\n  Package.autopublish && Meteor.startup(function () {\n    // ['profile', 'username'] -> {profile: 1, username: 1}\n    var toFieldSelector = function (fields) {\n      return _.object(_.map(fields, function (field) {\n        return [field, 1];\n      }));\n    };\n\n    accounts._server.publish(null, function () {\n      if (this.userId) {\n        return accounts.users.find({\n          _id: this.userId\n        }, {\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)\n        });\n      } else {\n        return null;\n      }\n    },\n    /*suppress autopublish warning*/\n    {\n      is_auto: true\n    }); // XXX this publish is neither dedup-able nor is it optimized by our special\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)\n    // run-time performance every time a user document is changed (eg someone\n    // logging in). If this is a problem, we can instead write a manual publish\n    // function which filters out fields based on 'this.userId'.\n\n\n    accounts._server.publish(null, function () {\n      var selector = this.userId ? {\n        _id: {\n          $ne: this.userId\n        }\n      } : {};\n      return accounts.users.find(selector, {\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)\n      });\n    },\n    /*suppress autopublish warning*/\n    {\n      is_auto: true\n    });\n  });\n}; // Add to the list of fields or subfields to be automatically\n// published if autopublish is on. Must be called from top-level\n// code (ie, before Meteor.startup hooks run).\n//\n// @param opts {Object} with:\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n\n\nAp.addAutopublishFields = function (opts) {\n  this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n\n  this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);\n}; ///\n/// ACCOUNT DATA\n///\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a\n// connection. Maybe there should be a public way to do that.\n\n\nAp._getAccountData = function (connectionId, field) {\n  var data = this._accountData[connectionId];\n  return data && data[field];\n};\n\nAp._setAccountData = function (connectionId, field, value) {\n  var data = this._accountData[connectionId]; // safety belt. shouldn't happen. accountData is set in onConnection,\n  // we don't have a connectionId until it is set.\n\n  if (!data) return;\n  if (value === undefined) delete data[field];else data[field] = value;\n}; ///\n/// RECONNECT TOKENS\n///\n/// support reconnecting using a meteor login token\n\n\nAp._hashLoginToken = function (loginToken) {\n  var hash = crypto.createHash('sha256');\n  hash.update(loginToken);\n  return hash.digest('base64');\n}; // {token, when} => {hashedToken, when}\n\n\nAp._hashStampedToken = function (stampedToken) {\n  return _.extend(_.omit(stampedToken, 'token'), {\n    hashedToken: this._hashLoginToken(stampedToken.token)\n  });\n}; // Using $addToSet avoids getting an index error if another client\n// logging in simultaneously has already inserted the new hashed\n// token.\n\n\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {\n  query = query ? _.clone(query) : {};\n  query._id = userId;\n  this.users.update(query, {\n    $addToSet: {\n      \"services.resume.loginTokens\": hashedToken\n    }\n  });\n}; // Exported for tests.\n\n\nAp._insertLoginToken = function (userId, stampedToken, query) {\n  this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);\n};\n\nAp._clearAllLoginTokens = function (userId) {\n  this.users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': []\n    }\n  });\n}; // test hook\n\n\nAp._getUserObserve = function (connectionId) {\n  return this._userObservesForConnections[connectionId];\n}; // Clean up this connection's association with the token: that is, stop\n// the observe that we started when we associated the connection with\n// this token.\n\n\nAp._removeTokenFromConnection = function (connectionId) {\n  if (_.has(this._userObservesForConnections, connectionId)) {\n    var observe = this._userObservesForConnections[connectionId];\n\n    if (typeof observe === 'number') {\n      // We're in the process of setting up an observe for this connection. We\n      // can't clean up that observe yet, but if we delete the placeholder for\n      // this connection, then the observe will get cleaned up as soon as it has\n      // been set up.\n      delete this._userObservesForConnections[connectionId];\n    } else {\n      delete this._userObservesForConnections[connectionId];\n      observe.stop();\n    }\n  }\n};\n\nAp._getLoginToken = function (connectionId) {\n  return this._getAccountData(connectionId, 'loginToken');\n}; // newToken is a hashed token.\n\n\nAp._setLoginToken = function (userId, connection, newToken) {\n  var self = this;\n\n  self._removeTokenFromConnection(connection.id);\n\n  self._setAccountData(connection.id, 'loginToken', newToken);\n\n  if (newToken) {\n    // Set up an observe for this token. If the token goes away, we need\n    // to close the connection.  We defer the observe because there's\n    // no need for it to be on the critical path for login; we just need\n    // to ensure that the connection will get closed at some point if\n    // the token gets deleted.\n    //\n    // Initially, we set the observe for this connection to a number; this\n    // signifies to other code (which might run while we yield) that we are in\n    // the process of setting up an observe for this connection. Once the\n    // observe is ready to go, we replace the number with the real observe\n    // handle (unless the placeholder has been deleted or replaced by a\n    // different placehold number, signifying that the connection was closed\n    // already -- in this case we just clean up the observe that we started).\n    var myObserveNumber = ++self._nextUserObserveNumber;\n    self._userObservesForConnections[connection.id] = myObserveNumber;\n    Meteor.defer(function () {\n      // If something else happened on this connection in the meantime (it got\n      // closed, or another call to _setLoginToken happened), just do\n      // nothing. We don't need to start an observe for an old connection or old\n      // token.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        return;\n      }\n\n      var foundMatchingUser; // Because we upgrade unhashed login tokens to hashed tokens at\n      // login time, sessions will only be logged in with a hashed\n      // token. Thus we only need to observe hashed tokens here.\n\n      var observe = self.users.find({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': newToken\n      }, {\n        fields: {\n          _id: 1\n        }\n      }).observeChanges({\n        added: function () {\n          foundMatchingUser = true;\n        },\n        removed: function () {\n          connection.close(); // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }\n      }); // If the user ran another login or logout command we were waiting for the\n      // defer or added to fire (ie, another call to _setLoginToken occurred),\n      // then we let the later one win (start an observe, etc) and just stop our\n      // observe now.\n      //\n      // Similarly, if the connection was already closed, then the onClose\n      // callback would have called _removeTokenFromConnection and there won't\n      // be an entry in _userObservesForConnections. We can stop the observe.\n\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        observe.stop();\n        return;\n      }\n\n      self._userObservesForConnections[connection.id] = observe;\n\n      if (!foundMatchingUser) {\n        // We've set up an observe on the user associated with `newToken`,\n        // so if the new token is removed from the database, we'll close\n        // the connection. But the token might have already been deleted\n        // before we set up the observe, which wouldn't have closed the\n        // connection because the observe wasn't running yet.\n        connection.close();\n      }\n    });\n  }\n};\n\nfunction setupDefaultLoginHandlers(accounts) {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n} // Login handler for resume tokens.\n\n\nfunction defaultResumeLoginHandler(accounts, options) {\n  if (!options.resume) return undefined;\n  check(options.resume, String);\n\n  var hashedToken = accounts._hashLoginToken(options.resume); // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n\n\n  var user = accounts.users.findOne({\n    \"services.resume.loginTokens.hashedToken\": hashedToken\n  });\n\n  if (!user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [{\n        \"services.resume.loginTokens.hashedToken\": hashedToken\n      }, {\n        \"services.resume.loginTokens.token\": options.resume\n      }]\n    });\n  }\n\n  if (!user) return {\n    error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n  }; // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n\n  var oldUnhashedStyleToken;\n\n  var token = _.find(user.services.resume.loginTokens, function (token) {\n    return token.hashedToken === hashedToken;\n  });\n\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = _.find(user.services.resume.loginTokens, function (token) {\n      return token.token === options.resume;\n    });\n    oldUnhashedStyleToken = true;\n  }\n\n  var tokenExpires = accounts._tokenExpiration(token.when);\n\n  if (new Date() >= tokenExpires) return {\n    userId: user._id,\n    error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n  }; // Update to a hashed token when an unhashed token is encountered.\n\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update({\n      _id: user._id,\n      \"services.resume.loginTokens.token\": options.resume\n    }, {\n      $addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }\n    }); // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          \"token\": options.resume\n        }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n} // (Also used by Meteor Accounts server and tests).\n//\n\n\nAp._generateStampedLoginToken = function () {\n  return {\n    token: Random.secret(),\n    when: new Date()\n  };\n}; ///\n/// TOKEN EXPIRATION\n///\n\n\nfunction expirePasswordToken(accounts, oldestValidDate, tokenFilter, userId) {\n  const userFilter = userId ? {\n    _id: userId\n  } : {};\n  const resetRangeOr = {\n    $or: [{\n      \"services.password.reset.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.password.reset.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  };\n  const expireFilter = {\n    $and: [tokenFilter, resetRangeOr]\n  };\n  accounts.users.update((0, _objectSpread2.default)({}, userFilter, expireFilter), {\n    $unset: {\n      \"services.password.reset\": \"\"\n    }\n  }, {\n    multi: true\n  });\n} // Deletes expired tokens from the database and closes all open connections\n// associated with these tokens.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\n\n\nAp._expireTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n  if (oldestValidDate && !userId || !oldestValidDate && userId) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n  var userFilter = userId ? {\n    _id: userId\n  } : {}; // Backwards compatible with older versions of meteor that stored login token\n  // timestamps as numbers.\n\n  this.users.update(_.extend(userFilter, {\n    $or: [{\n      \"services.resume.loginTokens.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.resume.loginTokens.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  }), {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [{\n          when: {\n            $lt: oldestValidDate\n          }\n        }, {\n          when: {\n            $lt: +oldestValidDate\n          }\n        }]\n      }\n    }\n  }, {\n    multi: true\n  }); // The observe on Meteor.users will take care of closing connections for\n  // expired tokens.\n}; // Deletes expired password reset tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\n\n\nAp._expirePasswordResetTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n  if (oldestValidDate && !userId || !oldestValidDate && userId) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n  var tokenFilter = {\n    $or: [{\n      \"services.password.reset.reason\": \"reset\"\n    }, {\n      \"services.password.reset.reason\": {\n        $exists: false\n      }\n    }]\n  };\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}; // Deletes expired password enroll tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\n\n\nAp._expirePasswordEnrollTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n  if (oldestValidDate && !userId || !oldestValidDate && userId) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n  var tokenFilter = {\n    \"services.password.reset.reason\": \"enroll\"\n  };\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}; // @override from accounts_common.js\n\n\nAp.config = function (options) {\n  // Call the overridden implementation of the method.\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments); // If the user set loginExpirationInDays to null, then we need to clear the\n  // timer that periodically expires tokens.\n\n  if (_.has(this._options, \"loginExpirationInDays\") && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);\n    this.expireTokenInterval = null;\n  }\n\n  return superResult;\n};\n\nfunction setExpireTokensInterval(accounts) {\n  accounts.expireTokenInterval = Meteor.setInterval(function () {\n    accounts._expireTokens();\n\n    accounts._expirePasswordResetTokens();\n\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n} ///\n/// OAuth Encryption Support\n///\n\n\nvar OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nfunction usingOAuthEncryption() {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n} // OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\n\n\nfunction pinEncryptedFieldsToUser(serviceData, userId) {\n  _.each(_.keys(serviceData), function (key) {\n    var value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n} // Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\n\nMeteor.startup(function () {\n  if (!usingOAuthEncryption()) {\n    return;\n  }\n\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: {\n        $exists: true\n      }\n    }, {\n      \"secret.algorithm\": {\n        $exists: false\n      }\n    }]\n  }).forEach(function (config) {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n}); // XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\n\nfunction defaultCreateUserHook(options, user) {\n  if (options.profile) user.profile = options.profile;\n  return user;\n} // Called by accounts-password\n\n\nAp.insertUserDoc = function (options, user) {\n  // - clone user document, to protect from modification\n  // - add createdAt timestamp\n  // - prepare an _id, so that you can modify other collections (eg\n  // create a first task for every new user)\n  //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might\n  // end up having modified some other collection\n  // inappropriately. The solution is probably to have onCreateUser\n  // accept two callbacks - one that gets called before inserting\n  // the user document (in which you can modify its contents), and\n  // one that gets called after (in which you should change other\n  // collections)\n  user = _.extend({\n    createdAt: new Date(),\n    _id: Random.id()\n  }, user);\n\n  if (user.services) {\n    _.each(user.services, function (serviceData) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n    });\n  }\n\n  var fullUser;\n\n  if (this._onCreateUserHook) {\n    fullUser = this._onCreateUserHook(options, user); // This is *not* part of the API. We need this because we can't isolate\n    // the global server environment between tests, meaning we can't test\n    // both having a create user hook set and not having one set.\n\n    if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);\n  } else {\n    fullUser = defaultCreateUserHook(options, user);\n  }\n\n  _.each(this._validateNewUserHooks, function (hook) {\n    if (!hook(fullUser)) throw new Meteor.Error(403, \"User validation failed\");\n  });\n\n  var userId;\n\n  try {\n    userId = this.users.insert(fullUser);\n  } catch (e) {\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e;\n    if (e.code !== 11000) throw e;\n    if (e.errmsg.indexOf('emails.address') !== -1) throw new Meteor.Error(403, \"Email already exists.\");\n    if (e.errmsg.indexOf('username') !== -1) throw new Meteor.Error(403, \"Username already exists.\"); // XXX better error reporting for services.facebook.id duplicate, etc\n\n    throw e;\n  }\n\n  return userId;\n}; // Helper function: returns false if email does not match company domain from\n// the configuration.\n\n\nAp._testEmailDomain = function (email) {\n  var domain = this._options.restrictCreationByEmailDomain;\n  return !domain || _.isFunction(domain) && domain(email) || _.isString(domain) && new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i').test(email);\n}; // Validate new user's email or Google/Facebook/GitHub account's email\n\n\nfunction defaultValidateNewUserHook(user) {\n  var self = this;\n  var domain = self._options.restrictCreationByEmailDomain;\n  if (!domain) return true;\n  var emailIsGood = false;\n\n  if (!_.isEmpty(user.emails)) {\n    emailIsGood = _.any(user.emails, function (email) {\n      return self._testEmailDomain(email.address);\n    });\n  } else if (!_.isEmpty(user.services)) {\n    // Find any email of any service and check it\n    emailIsGood = _.any(user.services, function (service) {\n      return service.email && self._testEmailDomain(service.email);\n    });\n  }\n\n  if (emailIsGood) return true;\n  if (_.isString(domain)) throw new Meteor.Error(403, \"@\" + domain + \" email required\");else throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n} ///\n/// MANAGING USER OBJECTS\n///\n// Updates or creates a user after we authenticate with a 3rd party.\n//\n// @param serviceName {String} Service name (eg, twitter).\n// @param serviceData {Object} Data to store in the user's record\n//        under services[serviceName]. Must include an \"id\" field\n//        which is a unique identifier for the user in the service.\n// @param options {Object, optional} Other options to pass to insertUserDoc\n//        (eg, profile)\n// @returns {Object} Object with token and id keys, like the result\n//        of the \"login\" method.\n//\n\n\nAp.updateOrCreateUserFromExternalService = function (serviceName, serviceData, options) {\n  options = _.clone(options || {});\n  if (serviceName === \"password\" || serviceName === \"resume\") throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n  if (!_.has(serviceData, 'id')) throw new Error(\"Service data for service \" + serviceName + \" must include id\"); // Look for a user with the appropriate service user id.\n\n  var selector = {};\n  var serviceIdKey = \"services.\" + serviceName + \".id\"; // XXX Temporary special case for Twitter. (Issue #629)\n  //   The serviceData.id will be a string representation of an integer.\n  //   We want it to match either a stored string or int representation.\n  //   This is to cater to earlier versions of Meteor storing twitter\n  //   user IDs in number form, and recent versions storing them as strings.\n  //   This can be removed once migration technology is in place, and twitter\n  //   users stored with integer IDs have been migrated to string IDs.\n\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n    selector[\"$or\"] = [{}, {}];\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n  } else {\n    selector[serviceIdKey] = serviceData.id;\n  }\n\n  var user = this.users.findOne(selector); // When creating a new user we pass through all options. When updating an\n  // existing user, by default we only process/pass through the serviceData\n  // (eg, so that we keep an unexpired access token and don't cache old email\n  // addresses in serviceData.email). The onExternalLogin hook can be used when\n  // creating or updating a user, to modify or pass through more options as\n  // needed.\n\n  var opts = user ? {} : options;\n\n  if (this._onExternalLoginHook) {\n    opts = this._onExternalLoginHook(options, user);\n  }\n\n  if (user) {\n    pinEncryptedFieldsToUser(serviceData, user._id);\n    var setAttrs = {};\n\n    _.each(serviceData, function (value, key) {\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;\n    }); // XXX Maybe we should re-use the selector above and notice if the update\n    //     touches nothing?\n\n\n    setAttrs = _.extend({}, setAttrs, opts);\n    this.users.update(user._id, {\n      $set: setAttrs\n    });\n    return {\n      type: serviceName,\n      userId: user._id\n    };\n  } else {\n    // Create a new user with the service data.\n    user = {\n      services: {}\n    };\n    user.services[serviceName] = serviceData;\n    return {\n      type: serviceName,\n      userId: this.insertUserDoc(opts, user)\n    };\n  }\n};\n\nfunction setupUsersCollection(users) {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: function (userId, user, fields, modifier) {\n      // make sure it is our record\n      if (user._id !== userId) return false; // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n\n      if (fields.length !== 1 || fields[0] !== 'profile') return false;\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n\n  }); /// DEFAULT INDEXES ON USERS\n\n  users._ensureIndex('username', {\n    unique: 1,\n    sparse: 1\n  });\n\n  users._ensureIndex('emails.address', {\n    unique: 1,\n    sparse: 1\n  });\n\n  users._ensureIndex('services.resume.loginTokens.hashedToken', {\n    unique: 1,\n    sparse: 1\n  });\n\n  users._ensureIndex('services.resume.loginTokens.token', {\n    unique: 1,\n    sparse: 1\n  }); // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n\n\n  users._ensureIndex('services.resume.haveLoginTokensToDelete', {\n    sparse: 1\n  }); // For expiring login tokens\n\n\n  users._ensureIndex(\"services.resume.loginTokens.when\", {\n    sparse: 1\n  }); // For expiring password tokens\n\n\n  users._ensureIndex('services.password.reset.when', {\n    sparse: 1\n  });\n} ///\n/// CLEAN UP FOR `logoutOtherClients`\n///\n\n\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {\n  if (tokensToDelete) {\n    this.users.update(userId, {\n      $unset: {\n        \"services.resume.haveLoginTokensToDelete\": 1,\n        \"services.resume.loginTokensToDelete\": 1\n      },\n      $pullAll: {\n        \"services.resume.loginTokens\": tokensToDelete\n      }\n    });\n  }\n};\n\nAp._deleteSavedTokensForAllUsersOnStartup = function () {\n  var self = this; // If we find users who have saved tokens to delete on startup, delete\n  // them now. It's possible that the server could have crashed and come\n  // back up before new tokens are found in localStorage, but this\n  // shouldn't happen very often. We shouldn't put a delay here because\n  // that would give a lot of power to an attacker with a stolen login\n  // token and the ability to crash the server.\n\n  Meteor.startup(function () {\n    self.users.find({\n      \"services.resume.haveLoginTokensToDelete\": true\n    }, {\n      \"services.resume.loginTokensToDelete\": 1\n    }).forEach(function (user) {\n      self._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete);\n    });\n  });\n};","map":{"version":3,"sources":["packages/accounts-base/accounts_server.js"],"names":["module","export","AccountsServer","AccountsCommon","watch","require","v","crypto","Npm","constructor","server","_server","Meteor","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","users","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","Hook","bindEnvironment","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","userId","currentInvocation","DDP","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","Error","validateLoginAttempt","func","register","validateNewUser","push","onCreateUser","_onCreateUserHook","onExternalLogin","_onExternalLoginHook","Ap","prototype","cloneAttemptWithConnection","connection","attempt","clonedAttempt","EJSON","clone","_validateLogin","each","callback","ret","e","allowed","error","_successfulLogin","_onLoginHook","_failedLogin","_onLoginFailureHook","_successfulLogout","user","findOne","_onLogoutHook","tryLoginMethod","type","fn","result","_loginUser","methodInvocation","stampedLoginToken","self","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","token","setUserId","id","tokenExpires","_tokenExpiration","when","_attemptLogin","methodName","methodArgs","methodArguments","_","toArray","extend","options","_loginMethod","_reportLoginFailure","registerLoginHandler","name","handler","_runLoginHandlers","i","length","call","undefined","destroyToken","loginToken","update","$pull","$or","hashedToken","accounts","methods","login","check","Object","arguments","logout","_getLoginToken","logoutOtherClients","fields","tokens","services","resume","loginTokens","newToken","$set","$push","_hashStampedToken","setTimeout","_deleteSavedTokensForUser","_noConnectionCloseDelayForTest","CONNECTION_CLOSE_DELAY_MS","getNewToken","currentHashedToken","currentStampedToken","find","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","Match","ObjectIncluding","service","String","oauth","contains","serviceNames","ServiceConfiguration","Package","configurations","has","usingOAuthEncryption","secret","OAuthEncryption","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","is_auto","_id","profile","username","emails","autopublish","startup","toFieldSelector","object","map","field","selector","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","_getAccountData","connectionId","data","_setAccountData","value","hash","createHash","digest","omit","_insertHashedLoginToken","query","$addToSet","_clearAllLoginTokens","_getUserObserve","observe","stop","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","defaultResumeLoginHandler","oldUnhashedStyleToken","Date","Random","expirePasswordToken","oldestValidDate","tokenFilter","userFilter","resetRangeOr","$lt","expireFilter","$and","$unset","multi","_expireTokens","tokenLifetimeMs","_getTokenLifetimeMs","_expirePasswordResetTokens","_getPasswordResetTokenLifetimeMs","$exists","_expirePasswordEnrollTokens","_getPasswordEnrollTokenLifetimeMs","config","superResult","_options","loginExpirationInDays","expireTokenInterval","clearInterval","setInterval","EXPIRE_TOKENS_INTERVAL_MS","keyIsLoaded","pinEncryptedFieldsToUser","serviceData","keys","key","isSealed","open","forEach","defaultCreateUserHook","insertUserDoc","createdAt","fullUser","hook","code","errmsg","indexOf","_testEmailDomain","email","domain","restrictCreationByEmailDomain","isFunction","isString","RegExp","_escapeRegExp","test","emailIsGood","isEmpty","any","address","updateOrCreateUserFromExternalService","serviceName","serviceIdKey","isNaN","parseInt","setAttrs","allow","modifier","fetch","_ensureIndex","unique","sparse","tokensToDelete","$pullAll","loginTokensToDelete"],"mappings":"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","sourcesContent":["var crypto = Npm.require('crypto');\n\nimport {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the infomation from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n};\n\nvar Ap = AccountsServer.prototype;\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nfunction cloneAttemptWithConnection(connection, attempt) {\n  var clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n}\n\nAp._validateLogin = function (connection, attempt) {\n  this._validateLoginHook.each(function (callback) {\n    var ret;\n    try {\n      ret = callback(cloneAttemptWithConnection(connection, attempt));\n    }\n    catch (e) {\n      attempt.allowed = false;\n      // XXX this means the last thrown error overrides previous error\n      // messages. Maybe this is surprising to users and we should make\n      // overriding errors more explicit. (see\n      // https://github.com/meteor/meteor/issues/1960)\n      attempt.error = e;\n      return true;\n    }\n    if (! ret) {\n      attempt.allowed = false;\n      // don't override a specific error provided by a previous\n      // validator or the initial attempt (eg \"incorrect password\").\n      if (!attempt.error)\n        attempt.error = new Meteor.Error(403, \"Login forbidden\");\n    }\n    return true;\n  });\n};\n\n\nAp._successfulLogin = function (connection, attempt) {\n  this._onLoginHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._failedLogin = function (connection, attempt) {\n  this._onLoginFailureHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._successfulLogout = function (connection, userId) {\n  const user = userId && this.users.findOne(userId);\n  this._onLogoutHook.each(function (callback) {\n    callback({ user, connection });\n    return true;\n  });\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Login methods return to the client an object containing these\n// fields when the user was logged in successfully:\n//\n//   id: userId\n//   token: *\n//   tokenExpires: *\n//\n// tokenExpires is optional and intends to provide a hint to the\n// client as to when the token will expire. If not provided, the\n// client will call Accounts._tokenExpiration, passing it the date\n// that it received the token.\n//\n// The login method will throw an error back to the client if the user\n// failed to log in.\n//\n//\n// Login handlers and service specific login methods such as\n// `createUser` internally return a `result` object containing these\n// fields:\n//\n//   type:\n//     optional string; the service name, overrides the handler\n//     default if present.\n//\n//   error:\n//     exception; if the user is not allowed to login, the reason why.\n//\n//   userId:\n//     string; the user id of the user attempting to login (if\n//     known), required for an allowed login.\n//\n//   options:\n//     optional object merged into the result returned by the login\n//     method; used by HAMK from SRP.\n//\n//   stampedLoginToken:\n//     optional object with `token` and `when` indicating the login\n//     token is already present in the database, returned by the\n//     \"resume\" login handler.\n//\n// For convenience, login methods can also throw an exception, which\n// is converted into an {error} result.  However, if the id of the\n// user attempting the login is known, a {userId, error} result should\n// be returned instead since the user id is not captured when an\n// exception is thrown.\n//\n// This internal `result` object is automatically converted into the\n// public {id, token, tokenExpires} object returned to the client.\n\n\n// Try a login method, converting thrown exceptions into an {error}\n// result.  The `type` argument is a default, inserted into the result\n// object if not explicitly returned.\n//\nvar tryLoginMethod = function (type, fn) {\n  var result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\n\n// Log in a user on a connection.\n//\n// We use the method invocation to set the user id on the connection,\n// not the connection object directly. setUserId is tied to methods to\n// enforce clear ordering of method application (using wait methods on\n// the client, and a no setUserId after unblock restriction on the\n// server)\n//\n// The `stampedLoginToken` parameter is optional.  When present, it\n// indicates that the login token has already been inserted into the\n// database and doesn't need to be inserted again.  (It's used by the\n// \"resume\" login handler).\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {\n  var self = this;\n\n  if (! stampedLoginToken) {\n    stampedLoginToken = self._generateStampedLoginToken();\n    self._insertLoginToken(userId, stampedLoginToken);\n  }\n\n  // This order (and the avoidance of yields) is important to make\n  // sure that when publish functions are rerun, they see a\n  // consistent view of the world: the userId is set and matches\n  // the login token on the connection (not that there is\n  // currently a public API for reading the login token on a\n  // connection).\n  Meteor._noYieldsAllowed(function () {\n    self._setLoginToken(\n      userId,\n      methodInvocation.connection,\n      self._hashLoginToken(stampedLoginToken.token)\n    );\n  });\n\n  methodInvocation.setUserId(userId);\n\n  return {\n    id: userId,\n    token: stampedLoginToken.token,\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)\n  };\n};\n\n\n// After a login method has completed, call the login hooks.  Note\n// that `attemptLogin` is called for *all* login attempts, even ones\n// which aren't successful (such as an invalid password, etc).\n//\n// If the login is allowed and isn't aborted by a validate login hook\n// callback, log in the user.\n//\nAp._attemptLogin = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  if (!result)\n    throw new Error(\"result is required\");\n\n  // XXX A programming error in a login handler can lead to this occuring, and\n  // then we don't call onLogin or onLoginFailure callbacks. Should\n  // tryLoginMethod catch this case and turn it into an error?\n  if (!result.userId && !result.error)\n    throw new Error(\"A login method must specify a userId or an error\");\n\n  var user;\n  if (result.userId)\n    user = this.users.findOne(result.userId);\n\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: !! (result.userId && !result.error),\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n  if (result.error)\n    attempt.error = result.error;\n  if (user)\n    attempt.user = user;\n\n  // _validateLogin may mutate `attempt` by adding an error and changing allowed\n  // to false, but that's the only change it can make (and the user's callbacks\n  // only get a clone of `attempt`).\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  if (attempt.allowed) {\n    var ret = _.extend(\n      this._loginUser(\n        methodInvocation,\n        result.userId,\n        result.stampedLoginToken\n      ),\n      result.options || {}\n    );\n    ret.type = attempt.type;\n    this._successfulLogin(methodInvocation.connection, attempt);\n    return ret;\n  }\n  else {\n    this._failedLogin(methodInvocation.connection, attempt);\n    throw attempt.error;\n  }\n};\n\n\n// All service specific login methods should go through this function.\n// Ensure that thrown exceptions are caught and that login hook\n// callbacks are still called.\n//\nAp._loginMethod = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  type,\n  fn\n) {\n  return this._attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    tryLoginMethod(type, fn)\n  );\n};\n\n\n// Report a login attempt failed outside the context of a normal login\n// method. This is for use in the case where there is a multi-step login\n// procedure (eg SRP based password login). If a method early in the\n// chain fails, it should call this function to report a failure. There\n// is no corresponding method for a successful login; methods that can\n// succeed at logging a user in should always be actual login methods\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).\nAp._reportLoginFailure = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: false,\n    error: result.error,\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n\n  if (result.userId) {\n    attempt.user = this.users.findOne(result.userId);\n  }\n\n  this._validateLogin(methodInvocation.connection, attempt);\n  this._failedLogin(methodInvocation.connection, attempt);\n\n  // _validateLogin may mutate attempt to set a new error message. Return\n  // the modified version.\n  return attempt;\n};\n\n\n///\n/// LOGIN HANDLERS\n///\n\n// The main entry point for auth packages to hook in to login.\n//\n// A login handler is a login method which can return `undefined` to\n// indicate that the login request is not handled by this handler.\n//\n// @param name {String} Optional.  The service name, used by default\n// if a specific service name isn't returned in the result.\n//\n// @param handler {Function} A function that receives an options object\n// (as passed as an argument to the `login` method) and returns one of:\n// - `undefined`, meaning don't handle;\n// - a login method result object\n\nAp.registerLoginHandler = function (name, handler) {\n  if (! handler) {\n    handler = name;\n    name = null;\n  }\n\n  this._loginHandlers.push({\n    name: name,\n    handler: handler\n  });\n};\n\n\n// Checks a user's credentials against all the registered login\n// handlers, and returns a login token if the credentials are valid. It\n// is like the login method, except that it doesn't set the logged-in\n// user on the connection. Throws a Meteor.Error if logging in fails,\n// including the case where none of the login handlers handled the login\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n//\n// For example, if you want to login with a plaintext password, `options` could be\n//   { user: { username: <username> }, password: <password> }, or\n//   { user: { email: <email> }, password: <password> }.\n\n// Try all of the registered login handlers until one of them doesn't\n// return `undefined`, meaning it handled this call to `login`. Return\n// that return value.\nAp._runLoginHandlers = function (methodInvocation, options) {\n  for (var i = 0; i < this._loginHandlers.length; ++i) {\n    var handler = this._loginHandlers[i];\n\n    var result = tryLoginMethod(\n      handler.name,\n      function () {\n        return handler.handler.call(methodInvocation, options);\n      }\n    );\n\n    if (result) {\n      return result;\n    }\n\n    if (result !== undefined) {\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n    }\n  }\n\n  return {\n    type: null,\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")\n  };\n};\n\n// Deletes the given loginToken from the database.\n//\n// For new-style hashed token, this will cause all connections\n// associated with the token to be closed.\n//\n// Any connections associated with old-style unhashed tokens will be\n// in the process of becoming associated with hashed tokens and then\n// they'll get closed.\nAp.destroyToken = function (userId, loginToken) {\n  this.users.update(userId, {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { hashedToken: loginToken },\n          { token: loginToken }\n        ]\n      }\n    }\n  });\n};\n\nAp._initServerMethods = function () {\n  // The methods created in this function need to be created here so that\n  // this variable is available in their scope.\n  var accounts = this;\n\n  // This object will be populated with methods and then passed to\n  // accounts._server.methods further below.\n  var methods = {};\n\n  // @returns {Object|null}\n  //   If successful, returns {token: reconnectToken, id: userId}\n  //   If unsuccessful (for example, if the user closed the oauth login popup),\n  //     throws an error describing the reason\n  methods.login = function (options) {\n    var self = this;\n\n    // Login handlers should really also check whatever field they look at in\n    // options, but we don't enforce it.\n    check(options, Object);\n\n    var result = accounts._runLoginHandlers(self, options);\n\n    return accounts._attemptLogin(self, \"login\", arguments, result);\n  };\n\n  methods.logout = function () {\n    var token = accounts._getLoginToken(this.connection.id);\n    accounts._setLoginToken(this.userId, this.connection, null);\n    if (token && this.userId)\n      accounts.destroyToken(this.userId, token);\n    accounts._successfulLogout(this.connection, this.userId);\n    this.setUserId(null);\n  };\n\n  // Delete all the current user's tokens and close all open connections logged\n  // in as this user. Returns a fresh new login token that this client can\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n  // immediately instead of using a delay.\n  //\n  // XXX COMPAT WITH 0.7.2\n  // This single `logoutOtherClients` method has been replaced with two\n  // methods, one that you call to get a new token, and another that you\n  // call to remove all tokens except your own. The new design allows\n  // clients to know when other clients have actually been logged\n  // out. (The `logoutOtherClients` method guarantees the caller that\n  // the other clients will be logged out at some point, but makes no\n  // guarantees about when.) This method is left in for backwards\n  // compatibility, especially since application code might be calling\n  // this method directly.\n  //\n  // @returns {Object} Object with token and tokenExpires keys.\n  methods.logoutOtherClients = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": true\n      }\n    });\n    if (user) {\n      // Save the current tokens in the database to be deleted in\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n      // caller's browser time to find the fresh token in localStorage. We save\n      // the tokens in the database in case we crash before actually deleting\n      // them.\n      var tokens = user.services.resume.loginTokens;\n      var newToken = accounts._generateStampedLoginToken();\n      var userId = self.userId;\n      accounts.users.update(userId, {\n        $set: {\n          \"services.resume.loginTokensToDelete\": tokens,\n          \"services.resume.haveLoginTokensToDelete\": true\n        },\n        $push: { \"services.resume.loginTokens\": accounts._hashStampedToken(newToken) }\n      });\n      Meteor.setTimeout(function () {\n        // The observe on Meteor.users will take care of closing the connections\n        // associated with `tokens`.\n        accounts._deleteSavedTokensForUser(userId, tokens);\n      }, accounts._noConnectionCloseDelayForTest ? 0 :\n                        CONNECTION_CLOSE_DELAY_MS);\n      // We do not set the login token on this connection, but instead the\n      // observe closes the connection and the client will reconnect with the\n      // new token.\n      return {\n        token: newToken.token,\n        tokenExpires: accounts._tokenExpiration(newToken.when)\n      };\n    } else {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n  };\n\n  // Generates a new login token with the same expiration as the\n  // connection's current token and saves it to the database. Associates\n  // the connection with this new token and returns it. Throws an error\n  // if called on a connection that isn't logged in.\n  //\n  // @returns Object\n  //   If successful, returns { token: <new token>, id: <user id>,\n  //   tokenExpires: <expiration date> }.\n  methods.getNewToken = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: { \"services.resume.loginTokens\": 1 }\n    });\n    if (! self.userId || ! user) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    // Be careful not to generate a new token that has a later\n    // expiration than the curren token. Otherwise, a bad guy with a\n    // stolen token could use this method to stop his stolen token from\n    // ever expiring.\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);\n    var currentStampedToken = _.find(\n      user.services.resume.loginTokens,\n      function (stampedToken) {\n        return stampedToken.hashedToken === currentHashedToken;\n      }\n    );\n    if (! currentStampedToken) { // safety belt: this should never happen\n      throw new Meteor.Error(\"Invalid login token\");\n    }\n    var newStampedToken = accounts._generateStampedLoginToken();\n    newStampedToken.when = currentStampedToken.when;\n    accounts._insertLoginToken(self.userId, newStampedToken);\n    return accounts._loginUser(self, self.userId, newStampedToken);\n  };\n\n  // Removes all tokens except the token associated with the current\n  // connection. Throws an error if the connection is not logged\n  // in. Returns nothing on success.\n  methods.removeOtherTokens = function () {\n    var self = this;\n    if (! self.userId) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    var currentToken = accounts._getLoginToken(self.connection.id);\n    accounts.users.update(self.userId, {\n      $pull: {\n        \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n      }\n    });\n  };\n\n  // Allow a one-time configuration for a login service. Modifications\n  // to this collection are also allowed in insecure mode.\n  methods.configureLoginService = function (options) {\n    check(options, Match.ObjectIncluding({service: String}));\n    // Don't let random users configure a service we haven't added yet (so\n    // that when we do later add it, it's set up with their configuration\n    // instead of ours).\n    // XXX if service configuration is oauth-specific then this code should\n    //     be in accounts-oauth; if it's not then the registry should be\n    //     in this package\n    if (!(accounts.oauth\n          && _.contains(accounts.oauth.serviceNames(), options.service))) {\n      throw new Meteor.Error(403, \"Service unknown\");\n    }\n\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    if (ServiceConfiguration.configurations.findOne({service: options.service}))\n      throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n\n    if (_.has(options, \"secret\") && usingOAuthEncryption())\n      options.secret = OAuthEncryption.seal(options.secret);\n\n    ServiceConfiguration.configurations.insert(options);\n  };\n\n  accounts._server.methods(methods);\n};\n\nAp._initAccountDataHooks = function () {\n  var accounts = this;\n\n  accounts._server.onConnection(function (connection) {\n    accounts._accountData[connection.id] = {\n      connection: connection\n    };\n\n    connection.onClose(function () {\n      accounts._removeTokenFromConnection(connection.id);\n      delete accounts._accountData[connection.id];\n    });\n  });\n};\n\nAp._initServerPublications = function () {\n  var accounts = this;\n\n  // Publish all login service configuration fields other than secret.\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n  }, {is_auto: true}); // not techincally autopublish, but stops the warning.\n\n  // Publish the current user's record to the client.\n  accounts._server.publish(null, function () {\n    if (this.userId) {\n      return accounts.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          profile: 1,\n          username: 1,\n          emails: 1\n        }\n      });\n    } else {\n      return null;\n    }\n  }, /*suppress autopublish warning*/{is_auto: true});\n\n  // Use Meteor.startup to give other packages a chance to call\n  // addAutopublishFields.\n  Package.autopublish && Meteor.startup(function () {\n    // ['profile', 'username'] -> {profile: 1, username: 1}\n    var toFieldSelector = function (fields) {\n      return _.object(_.map(fields, function (field) {\n        return [field, 1];\n      }));\n    };\n\n    accounts._server.publish(null, function () {\n      if (this.userId) {\n        return accounts.users.find({\n          _id: this.userId\n        }, {\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)\n        });\n      } else {\n        return null;\n      }\n    }, /*suppress autopublish warning*/{is_auto: true});\n\n    // XXX this publish is neither dedup-able nor is it optimized by our special\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)\n    // run-time performance every time a user document is changed (eg someone\n    // logging in). If this is a problem, we can instead write a manual publish\n    // function which filters out fields based on 'this.userId'.\n    accounts._server.publish(null, function () {\n      var selector = this.userId ? {\n        _id: { $ne: this.userId }\n      } : {};\n\n      return accounts.users.find(selector, {\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)\n      });\n    }, /*suppress autopublish warning*/{is_auto: true});\n  });\n};\n\n// Add to the list of fields or subfields to be automatically\n// published if autopublish is on. Must be called from top-level\n// code (ie, before Meteor.startup hooks run).\n//\n// @param opts {Object} with:\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in\nAp.addAutopublishFields = function (opts) {\n  this._autopublishFields.loggedInUser.push.apply(\n    this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n  this._autopublishFields.otherUsers.push.apply(\n    this._autopublishFields.otherUsers, opts.forOtherUsers);\n};\n\n///\n/// ACCOUNT DATA\n///\n\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a\n// connection. Maybe there should be a public way to do that.\nAp._getAccountData = function (connectionId, field) {\n  var data = this._accountData[connectionId];\n  return data && data[field];\n};\n\nAp._setAccountData = function (connectionId, field, value) {\n  var data = this._accountData[connectionId];\n\n  // safety belt. shouldn't happen. accountData is set in onConnection,\n  // we don't have a connectionId until it is set.\n  if (!data)\n    return;\n\n  if (value === undefined)\n    delete data[field];\n  else\n    data[field] = value;\n};\n\n\n///\n/// RECONNECT TOKENS\n///\n/// support reconnecting using a meteor login token\n\nAp._hashLoginToken = function (loginToken) {\n  var hash = crypto.createHash('sha256');\n  hash.update(loginToken);\n  return hash.digest('base64');\n};\n\n\n// {token, when} => {hashedToken, when}\nAp._hashStampedToken = function (stampedToken) {\n  return _.extend(_.omit(stampedToken, 'token'), {\n    hashedToken: this._hashLoginToken(stampedToken.token)\n  });\n};\n\n\n// Using $addToSet avoids getting an index error if another client\n// logging in simultaneously has already inserted the new hashed\n// token.\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {\n  query = query ? _.clone(query) : {};\n  query._id = userId;\n  this.users.update(query, {\n    $addToSet: {\n      \"services.resume.loginTokens\": hashedToken\n    }\n  });\n};\n\n\n// Exported for tests.\nAp._insertLoginToken = function (userId, stampedToken, query) {\n  this._insertHashedLoginToken(\n    userId,\n    this._hashStampedToken(stampedToken),\n    query\n  );\n};\n\n\nAp._clearAllLoginTokens = function (userId) {\n  this.users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': []\n    }\n  });\n};\n\n// test hook\nAp._getUserObserve = function (connectionId) {\n  return this._userObservesForConnections[connectionId];\n};\n\n// Clean up this connection's association with the token: that is, stop\n// the observe that we started when we associated the connection with\n// this token.\nAp._removeTokenFromConnection = function (connectionId) {\n  if (_.has(this._userObservesForConnections, connectionId)) {\n    var observe = this._userObservesForConnections[connectionId];\n    if (typeof observe === 'number') {\n      // We're in the process of setting up an observe for this connection. We\n      // can't clean up that observe yet, but if we delete the placeholder for\n      // this connection, then the observe will get cleaned up as soon as it has\n      // been set up.\n      delete this._userObservesForConnections[connectionId];\n    } else {\n      delete this._userObservesForConnections[connectionId];\n      observe.stop();\n    }\n  }\n};\n\nAp._getLoginToken = function (connectionId) {\n  return this._getAccountData(connectionId, 'loginToken');\n};\n\n// newToken is a hashed token.\nAp._setLoginToken = function (userId, connection, newToken) {\n  var self = this;\n\n  self._removeTokenFromConnection(connection.id);\n  self._setAccountData(connection.id, 'loginToken', newToken);\n\n  if (newToken) {\n    // Set up an observe for this token. If the token goes away, we need\n    // to close the connection.  We defer the observe because there's\n    // no need for it to be on the critical path for login; we just need\n    // to ensure that the connection will get closed at some point if\n    // the token gets deleted.\n    //\n    // Initially, we set the observe for this connection to a number; this\n    // signifies to other code (which might run while we yield) that we are in\n    // the process of setting up an observe for this connection. Once the\n    // observe is ready to go, we replace the number with the real observe\n    // handle (unless the placeholder has been deleted or replaced by a\n    // different placehold number, signifying that the connection was closed\n    // already -- in this case we just clean up the observe that we started).\n    var myObserveNumber = ++self._nextUserObserveNumber;\n    self._userObservesForConnections[connection.id] = myObserveNumber;\n    Meteor.defer(function () {\n      // If something else happened on this connection in the meantime (it got\n      // closed, or another call to _setLoginToken happened), just do\n      // nothing. We don't need to start an observe for an old connection or old\n      // token.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        return;\n      }\n\n      var foundMatchingUser;\n      // Because we upgrade unhashed login tokens to hashed tokens at\n      // login time, sessions will only be logged in with a hashed\n      // token. Thus we only need to observe hashed tokens here.\n      var observe = self.users.find({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': newToken\n      }, { fields: { _id: 1 } }).observeChanges({\n        added: function () {\n          foundMatchingUser = true;\n        },\n        removed: function () {\n          connection.close();\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }\n      });\n\n      // If the user ran another login or logout command we were waiting for the\n      // defer or added to fire (ie, another call to _setLoginToken occurred),\n      // then we let the later one win (start an observe, etc) and just stop our\n      // observe now.\n      //\n      // Similarly, if the connection was already closed, then the onClose\n      // callback would have called _removeTokenFromConnection and there won't\n      // be an entry in _userObservesForConnections. We can stop the observe.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        observe.stop();\n        return;\n      }\n\n      self._userObservesForConnections[connection.id] = observe;\n\n      if (! foundMatchingUser) {\n        // We've set up an observe on the user associated with `newToken`,\n        // so if the new token is removed from the database, we'll close\n        // the connection. But the token might have already been deleted\n        // before we set up the observe, which wouldn't have closed the\n        // connection because the observe wasn't running yet.\n        connection.close();\n      }\n    });\n  }\n};\n\nfunction setupDefaultLoginHandlers(accounts) {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}\n\n// Login handler for resume tokens.\nfunction defaultResumeLoginHandler(accounts, options) {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  var hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  var user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {\"services.resume.loginTokens.token\": options.resume}\n      ]\n    });\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  var oldUnhashedStyleToken;\n  var token = _.find(user.services.resume.loginTokens, function (token) {\n    return token.hashedToken === hashedToken;\n  });\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = _.find(user.services.resume.loginTokens, function (token) {\n      return token.token === options.resume;\n    });\n    oldUnhashedStyleToken = true;\n  }\n\n  var tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n}\n\n// (Also used by Meteor Accounts server and tests).\n//\nAp._generateStampedLoginToken = function () {\n  return {\n    token: Random.secret(),\n    when: new Date\n  };\n};\n\n///\n/// TOKEN EXPIRATION\n///\n\nfunction expirePasswordToken(accounts, oldestValidDate, tokenFilter, userId) {\n  const userFilter = userId ? {_id: userId} : {};\n  const resetRangeOr = {\n    $or: [\n      { \"services.password.reset.when\": { $lt: oldestValidDate } },\n      { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n    ]\n  };\n  const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n\n  accounts.users.update({...userFilter, ...expireFilter}, {\n    $unset: {\n      \"services.password.reset\": \"\"\n    }\n  }, { multi: true });\n}\n\n// Deletes expired tokens from the database and closes all open connections\n// associated with these tokens.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expireTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n  var userFilter = userId ? {_id: userId} : {};\n\n\n  // Backwards compatible with older versions of meteor that stored login token\n  // timestamps as numbers.\n  this.users.update(_.extend(userFilter, {\n    $or: [\n      { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n      { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n    ]\n  }), {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { when: { $lt: oldestValidDate } },\n          { when: { $lt: +oldestValidDate } }\n        ]\n      }\n    }\n  }, { multi: true });\n  // The observe on Meteor.users will take care of closing connections for\n  // expired tokens.\n};\n\n// Deletes expired password reset tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expirePasswordResetTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n\n  var tokenFilter = {\n    $or: [\n      { \"services.password.reset.reason\": \"reset\"},\n      { \"services.password.reset.reason\": {$exists: false}}\n    ]\n  };\n\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}\n\n// Deletes expired password enroll tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expirePasswordEnrollTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n\n  var tokenFilter = {\n    \"services.password.reset.reason\": \"enroll\"\n  };\n\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}\n\n// @override from accounts_common.js\nAp.config = function (options) {\n  // Call the overridden implementation of the method.\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n  // If the user set loginExpirationInDays to null, then we need to clear the\n  // timer that periodically expires tokens.\n  if (_.has(this._options, \"loginExpirationInDays\") &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);\n    this.expireTokenInterval = null;\n  }\n\n  return superResult;\n};\n\nfunction setExpireTokensInterval(accounts) {\n  accounts.expireTokenInterval = Meteor.setInterval(function () {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}\n\n\n///\n/// OAuth Encryption Support\n///\n\nvar OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nfunction usingOAuthEncryption() {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}\n\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nfunction pinEncryptedFieldsToUser(serviceData, userId) {\n  _.each(_.keys(serviceData), function (key) {\n    var value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(function () {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(function (config) {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nfunction defaultCreateUserHook(options, user) {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n}\n\n// Called by accounts-password\nAp.insertUserDoc = function (options, user) {\n  // - clone user document, to protect from modification\n  // - add createdAt timestamp\n  // - prepare an _id, so that you can modify other collections (eg\n  // create a first task for every new user)\n  //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might\n  // end up having modified some other collection\n  // inappropriately. The solution is probably to have onCreateUser\n  // accept two callbacks - one that gets called before inserting\n  // the user document (in which you can modify its contents), and\n  // one that gets called after (in which you should change other\n  // collections)\n  user = _.extend({\n    createdAt: new Date(),\n    _id: Random.id()\n  }, user);\n\n  if (user.services) {\n    _.each(user.services, function (serviceData) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n    });\n  }\n\n  var fullUser;\n  if (this._onCreateUserHook) {\n    fullUser = this._onCreateUserHook(options, user);\n\n    // This is *not* part of the API. We need this because we can't isolate\n    // the global server environment between tests, meaning we can't test\n    // both having a create user hook set and not having one set.\n    if (fullUser === 'TEST DEFAULT HOOK')\n      fullUser = defaultCreateUserHook(options, user);\n  } else {\n    fullUser = defaultCreateUserHook(options, user);\n  }\n\n  _.each(this._validateNewUserHooks, function (hook) {\n    if (! hook(fullUser))\n      throw new Meteor.Error(403, \"User validation failed\");\n  });\n\n  var userId;\n  try {\n    userId = this.users.insert(fullUser);\n  } catch (e) {\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e;\n    if (e.code !== 11000) throw e;\n    if (e.errmsg.indexOf('emails.address') !== -1)\n      throw new Meteor.Error(403, \"Email already exists.\");\n    if (e.errmsg.indexOf('username') !== -1)\n      throw new Meteor.Error(403, \"Username already exists.\");\n    // XXX better error reporting for services.facebook.id duplicate, etc\n    throw e;\n  }\n  return userId;\n};\n\n// Helper function: returns false if email does not match company domain from\n// the configuration.\nAp._testEmailDomain = function (email) {\n  var domain = this._options.restrictCreationByEmailDomain;\n  return !domain ||\n    (_.isFunction(domain) && domain(email)) ||\n    (_.isString(domain) &&\n      (new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i')).test(email));\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  var self = this;\n  var domain = self._options.restrictCreationByEmailDomain;\n  if (!domain)\n    return true;\n\n  var emailIsGood = false;\n  if (!_.isEmpty(user.emails)) {\n    emailIsGood = _.any(user.emails, function (email) {\n      return self._testEmailDomain(email.address);\n    });\n  } else if (!_.isEmpty(user.services)) {\n    // Find any email of any service and check it\n    emailIsGood = _.any(user.services, function (service) {\n      return service.email && self._testEmailDomain(service.email);\n    });\n  }\n\n  if (emailIsGood)\n    return true;\n\n  if (_.isString(domain))\n    throw new Meteor.Error(403, \"@\" + domain + \" email required\");\n  else\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n}\n\n///\n/// MANAGING USER OBJECTS\n///\n\n// Updates or creates a user after we authenticate with a 3rd party.\n//\n// @param serviceName {String} Service name (eg, twitter).\n// @param serviceData {Object} Data to store in the user's record\n//        under services[serviceName]. Must include an \"id\" field\n//        which is a unique identifier for the user in the service.\n// @param options {Object, optional} Other options to pass to insertUserDoc\n//        (eg, profile)\n// @returns {Object} Object with token and id keys, like the result\n//        of the \"login\" method.\n//\nAp.updateOrCreateUserFromExternalService = function (\n  serviceName,\n  serviceData,\n  options\n) {\n  options = _.clone(options || {});\n\n  if (serviceName === \"password\" || serviceName === \"resume\")\n    throw new Error(\n      \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n  if (!_.has(serviceData, 'id'))\n    throw new Error(\n      \"Service data for service \" + serviceName + \" must include id\");\n\n  // Look for a user with the appropriate service user id.\n  var selector = {};\n  var serviceIdKey = \"services.\" + serviceName + \".id\";\n\n  // XXX Temporary special case for Twitter. (Issue #629)\n  //   The serviceData.id will be a string representation of an integer.\n  //   We want it to match either a stored string or int representation.\n  //   This is to cater to earlier versions of Meteor storing twitter\n  //   user IDs in number form, and recent versions storing them as strings.\n  //   This can be removed once migration technology is in place, and twitter\n  //   users stored with integer IDs have been migrated to string IDs.\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n    selector[\"$or\"] = [{},{}];\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n  } else {\n    selector[serviceIdKey] = serviceData.id;\n  }\n\n  var user = this.users.findOne(selector);\n\n  // When creating a new user we pass through all options. When updating an\n  // existing user, by default we only process/pass through the serviceData\n  // (eg, so that we keep an unexpired access token and don't cache old email\n  // addresses in serviceData.email). The onExternalLogin hook can be used when\n  // creating or updating a user, to modify or pass through more options as\n  // needed.\n  var opts = user ? {} : options;\n  if (this._onExternalLoginHook) {\n    opts = this._onExternalLoginHook(options, user);\n  }\n\n  if (user) {\n    pinEncryptedFieldsToUser(serviceData, user._id);\n\n    var setAttrs = {};\n    _.each(serviceData, function (value, key) {\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;\n    });\n\n    // XXX Maybe we should re-use the selector above and notice if the update\n    //     touches nothing?\n    setAttrs = _.extend({}, setAttrs, opts);\n    this.users.update(user._id, {\n      $set: setAttrs\n    });\n\n    return {\n      type: serviceName,\n      userId: user._id\n    };\n  } else {\n    // Create a new user with the service data.\n    user = {services: {}};\n    user.services[serviceName] = serviceData;\n    return {\n      type: serviceName,\n      userId: this.insertUserDoc(opts, user)\n    };\n  }\n};\n\nfunction setupUsersCollection(users) {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: function (userId, user, fields, modifier) {\n      // make sure it is our record\n      if (user._id !== userId)\n        return false;\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile')\n        return false;\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users._ensureIndex('username', {unique: 1, sparse: 1});\n  users._ensureIndex('emails.address', {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.hashedToken',\n                     {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.token',\n                     {unique: 1, sparse: 1});\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users._ensureIndex('services.resume.haveLoginTokensToDelete',\n                     { sparse: 1 });\n  // For expiring login tokens\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: 1 });\n  // For expiring password tokens\n  users._ensureIndex('services.password.reset.when', { sparse: 1 });\n}\n\n///\n/// CLEAN UP FOR `logoutOtherClients`\n///\n\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {\n  if (tokensToDelete) {\n    this.users.update(userId, {\n      $unset: {\n        \"services.resume.haveLoginTokensToDelete\": 1,\n        \"services.resume.loginTokensToDelete\": 1\n      },\n      $pullAll: {\n        \"services.resume.loginTokens\": tokensToDelete\n      }\n    });\n  }\n};\n\nAp._deleteSavedTokensForAllUsersOnStartup = function () {\n  var self = this;\n\n  // If we find users who have saved tokens to delete on startup, delete\n  // them now. It's possible that the server could have crashed and come\n  // back up before new tokens are found in localStorage, but this\n  // shouldn't happen very often. We shouldn't put a delay here because\n  // that would give a lot of power to an attacker with a stolen login\n  // token and the ability to crash the server.\n  Meteor.startup(function () {\n    self.users.find({\n      \"services.resume.haveLoginTokensToDelete\": true\n    }, {\n      \"services.resume.loginTokensToDelete\": 1\n    }).forEach(function (user) {\n      self._deleteSavedTokensForUser(\n        user._id,\n        user.services.resume.loginTokensToDelete\n      );\n    });\n  });\n};\n"]},"sourceType":"script","hash":"d789052266f3a1d14b250868e786fb20904b2251"}
