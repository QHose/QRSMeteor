{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/accounts-base/localstorage_token.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/accounts-base/localstorage_token.js","filename":"packages/accounts-base/localstorage_token.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/accounts-base/localstorage_token.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/localstorage_token.js"}},"code":"let AccountsClient;\nmodule.watch(require(\"./accounts_client.js\"), {\n  AccountsClient(v) {\n    AccountsClient = v;\n  }\n\n}, 0);\nvar Ap = AccountsClient.prototype; // This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n// Login with a Meteor access token. This is the only public function\n// here.\n\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n}; // Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\n\n\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n\n  this._pollStoredLoginToken();\n}; ///\n/// STORING\n///\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\n\n\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n\n  if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires); // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n\n\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY); // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n\n\n  this._lastLoginTokenWhenPolled = null;\n}; // This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\n\n\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n}; ///\n/// AUTO-LOGIN\n///\n\n\nAp._initLocalStorage = function () {\n  var self = this; // Key names to use in localStorage\n\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n\n    var token = self._storedLoginToken();\n\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{\n            resume: token\n          }]\n        });\n      });\n    }\n  } // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n\n\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (!self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken(); // != instead of !== just to make sure undefined and null are treated the same\n\n\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};","map":{"version":3,"sources":["packages/accounts-base/localstorage_token.js"],"names":["AccountsClient","module","watch","require","v","Ap","prototype","Meteor","loginWithToken","token","callback","Accounts","callLoginMethod","methodArguments","resume","userCallback","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","id","USER_ID_KEY","_storeLoginToken","userId","tokenExpires","_localStorage","setItem","_tokenExpiration","Date","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","_unstoreLoginToken","removeItem","_storedLoginToken","getItem","_storedLoginTokenExpires","_storedUserId","_unstoreLoginTokenIfExpiresSoon","_tokenExpiresSoon","_initLocalStorage","self","rootUrlPathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","connection","namespace","_stream","rawUrl","setUserId","err","_debug","makeClientLoggedOut","_pageLoadLogin","type","allowed","error","methodName","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","logout"],"mappings":"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","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\nvar Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n"]},"sourceType":"script","hash":"2f1fe2a72047629179b680d52205c7fe3c4c4a15"}
