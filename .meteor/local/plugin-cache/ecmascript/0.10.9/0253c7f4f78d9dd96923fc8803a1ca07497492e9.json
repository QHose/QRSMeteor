{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"imports/api/server/QRSFunctionsExtension.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/server/QRSFunctionsExtension.js","filename":"imports/api/server/QRSFunctionsExtension.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"imports/api/server/QRSFunctionsExtension.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/server/QRSFunctionsExtension.js"}},"code":"module.export({\n  uploadExtensions: () => uploadExtensions\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet myQRS;\nmodule.watch(require(\"/imports/api/server/QRSAPI\"), {\n  myQRS(v) {\n    myQRS = v;\n  }\n\n}, 1);\nlet qlikHDRServer, senseConfig;\nmodule.watch(require(\"/imports/api/config.js\"), {\n  qlikHDRServer(v) {\n    qlikHDRServer = v;\n  },\n\n  senseConfig(v) {\n    senseConfig = v;\n  }\n\n}, 2);\n\n//\n// ─── INSTALL NPM MODULES ────────────────────────────────────────────────────────\n//\nconst fs = require('fs-extra');\n\nconst path = require('path');\n\nconst enigma = require('enigma.js');\n\nvar promise = require('bluebird');\n\nvar request = require('request');\n\nvar qrs = new myQRS(); // export async function automaticUploadExtensions() {\n//     console.log('Automatically download the extensions from Github and upload to Qlik Sense');\n//     var url = 'https://github.com/kai/qlik-sense-timeline.git';\n//     var req = request.get(url);\n//     console.log('req', req)\n// }\n\nfunction uploadExtensions() {\n  return Promise.asyncApply(() => {\n    console.log('--------------------------UPLOAD EXTENSIONS'); // LOAD ALL EXTENSIONS IN FOLDER\n\n    var extensionsFolder = '';\n\n    try {\n      extensionsFolder = path.join(Meteor.settings.broker.automationBaseFolder, 'extensions');\n      console.log('extensionsFolder', extensionsFolder);\n      var extensions = Promise.await(fs.readdir(extensionsFolder));\n    } catch (err) {\n      throw error('error loading all extensions in folder.', err);\n    } // FOR EACH EXTENSION FOUND, UPLOAD IT    \n\n\n    Promise.await(Promise.all(extensions.map(extension => Promise.asyncApply(() => {\n      console.log('Current extension', extension);\n\n      try {\n        //CREATE A FILEPATH          \n        var filePath = path.join(extensionsFolder, extension); //UPLOAD THE APP, GET THE APP ID BACK\n\n        var result = Promise.await(uploadExtension('', filePath));\n      } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('Unable to upload the app to Qlik Sense. ', err);\n      }\n    }))));\n  });\n}\n\nfunction uploadExtension(password, filePath) {\n  return Promise.asyncApply(() => {\n    console.log('uploadExtension: try to upload extension from path: ' + filePath);\n    var formData = {\n      my_file: fs.createReadStream(filePath)\n    }; // qrs.post('/qrs/extension/upload?pwd=' + password, data)\n\n    return Promise.await(new Promise(function (resolve, reject) {\n      request.post({\n        url: qlikHDRServer + '/qrs/extension/upload?&xrfkey=' + senseConfig.xrfkey,\n        //removed password parameter, assume blank\n        headers: {\n          'hdr-usr': senseConfig.headerValue,\n          'X-Qlik-xrfkey': senseConfig.xrfkey\n        },\n        formData: formData\n      }, function (error, res, body) {\n        if (!error) {\n          try {\n            var id = JSON.parse(body).id;\n            console.log('Uploaded \"' + path.basename(filePath) + ' to Qlik Sense.'); //\n          } catch (err) {\n            console.log('Qlik Sense reported: ', body);\n          }\n\n          resolve();\n        } else {\n          reject(error);\n        }\n      });\n    }));\n  });\n}","map":{"version":3,"sources":["imports/api/server/QRSFunctionsExtension.js"],"names":["module","export","uploadExtensions","Meteor","watch","require","v","myQRS","qlikHDRServer","senseConfig","fs","path","enigma","promise","request","qrs","console","log","extensionsFolder","join","settings","broker","automationBaseFolder","extensions","readdir","err","error","Promise","all","map","extension","filePath","result","uploadExtension","Error","password","formData","my_file","createReadStream","resolve","reject","post","url","xrfkey","headers","headerValue","res","body","id","JSON","parse","basename"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { myQRS } from '/imports/api/server/QRSAPI';\n\n\n//\n// ─── IMPORT CONFIG FOR QLIK SENSE QRS AND ENGINE API ────────────────────────────\n//\n\n\nimport {\n    qlikHDRServer, // Qlik sense QRS endpoint via header authentication\n    senseConfig,\n} from '/imports/api/config.js';\n\n//\n// ─── INSTALL NPM MODULES ────────────────────────────────────────────────────────\n//\n\nconst fs = require('fs-extra');\nconst path = require('path');\nconst enigma = require('enigma.js');\nvar promise = require('bluebird');\nvar request = require('request');\nvar qrs = new myQRS();\n\n// export async function automaticUploadExtensions() {\n//     console.log('Automatically download the extensions from Github and upload to Qlik Sense');\n//     var url = 'https://github.com/kai/qlik-sense-timeline.git';\n//     var req = request.get(url);\n//     console.log('req', req)\n\n// }\n\nexport async function uploadExtensions() {\n    console.log('--------------------------UPLOAD EXTENSIONS');\n    // LOAD ALL EXTENSIONS IN FOLDER\n    var extensionsFolder = '';\n    try {\n        extensionsFolder = path.join(Meteor.settings.broker.automationBaseFolder, 'extensions');\n        console.log('extensionsFolder', extensionsFolder)\n        var extensions = await fs.readdir(extensionsFolder);\n    } catch (err) {\n        throw error('error loading all extensions in folder.', err);\n    }\n\n    // FOR EACH EXTENSION FOUND, UPLOAD IT    \n    await Promise.all(extensions.map(async(extension) => {\n        console.log('Current extension', extension)\n        try {\n            //CREATE A FILEPATH          \n            var filePath = path.join(extensionsFolder, extension);\n\n            //UPLOAD THE APP, GET THE APP ID BACK\n            var result = await uploadExtension('', filePath);\n        } catch (err) {\n            console.error(err);\n            throw new Meteor.Error('Unable to upload the app to Qlik Sense. ', err)\n        }\n    }))\n\n}\n\n\nasync function uploadExtension(password, filePath) {\n\n    console.log('uploadExtension: try to upload extension from path: ' + filePath);\n    var formData = {\n        my_file: fs.createReadStream(filePath)\n    };\n\n    // qrs.post('/qrs/extension/upload?pwd=' + password, data)\n    return await new Promise(function(resolve, reject) {\n\n        request.post({\n            url: qlikHDRServer + '/qrs/extension/upload?&xrfkey=' + senseConfig.xrfkey, //removed password parameter, assume blank\n            headers: {\n                'hdr-usr': senseConfig.headerValue,\n                'X-Qlik-xrfkey': senseConfig.xrfkey\n            },\n            formData: formData\n        }, function(error, res, body) {\n            if (!error) {\n                try {\n                    var id = JSON.parse(body).id;\n                    console.log('Uploaded \"' + path.basename(filePath) + ' to Qlik Sense.'); //\n                } catch (err) {\n                    console.log('Qlik Sense reported: ', body)\n                }\n                resolve();\n            } else {\n                reject(error);\n            }\n        });\n    });\n\n}"]},"sourceType":"script","hash":"0253c7f4f78d9dd96923fc8803a1ca07497492e9"}
