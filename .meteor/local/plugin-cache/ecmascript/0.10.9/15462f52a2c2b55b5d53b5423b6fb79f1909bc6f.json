{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/minimongo/cursor.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/minimongo/cursor.js","filename":"packages/minimongo/cursor.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","generatorOpts":{"filename":"packages/minimongo/cursor.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/cursor.js"}},"code":"module.export({\n  \"default\": function () {\n    return Cursor;\n  }\n});\nvar LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn;\nmodule.watch(require(\"./common.js\"), {\n  hasOwn: function (v) {\n    hasOwn = v;\n  }\n}, 1);\n\nvar Cursor =\n/*#__PURE__*/\nfunction () {\n  // don't call this ctor directly.  use LocalCollection.find().\n  function Cursor(collection, selector) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || [], {\n          matcher: this.matcher\n        });\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n    this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.\n\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n\n\n  var _proto = Cursor.prototype;\n\n  _proto.count = function () {\n    function count() {\n      var applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.reactive) {\n        // allow the observe to be unordered\n        this._depend({\n          added: true,\n          removed: true\n        }, true);\n      }\n\n      return this._getRawObjects({\n        ordered: true,\n        applySkipLimit: applySkipLimit\n      }).length;\n    }\n\n    return count;\n  }();\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n\n\n  _proto.fetch = function () {\n    function fetch() {\n      var result = [];\n      this.forEach(function (doc) {\n        result.push(doc);\n      });\n      return result;\n    }\n\n    return fetch;\n  }();\n\n  _proto[Symbol.iterator] = function () {\n    var _this = this;\n\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n\n    var index = 0;\n\n    var objects = this._getRawObjects({\n      ordered: true\n    });\n\n    return {\n      next: function () {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          var element = _this._projectionFn(objects[index++]);\n\n          if (_this._transform) element = _this._transform(element);\n          return {\n            value: element\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  };\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n\n\n  _proto.forEach = function () {\n    function forEach(callback, thisArg) {\n      var _this2 = this;\n\n      if (this.reactive) {\n        this._depend({\n          addedBefore: true,\n          removed: true,\n          changed: true,\n          movedBefore: true\n        });\n      }\n\n      this._getRawObjects({\n        ordered: true\n      }).forEach(function (element, i) {\n        // This doubles as a clone operation.\n        element = _this2._projectionFn(element);\n\n        if (_this2._transform) {\n          element = _this2._transform(element);\n        }\n\n        callback.call(thisArg, element, i, _this2);\n      });\n    }\n\n    return forEach;\n  }();\n\n  _proto.getTransform = function () {\n    function getTransform() {\n      return this._transform;\n    }\n\n    return getTransform;\n  }();\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n\n\n  _proto.map = function () {\n    function map(callback, thisArg) {\n      var _this3 = this;\n\n      var result = [];\n      this.forEach(function (doc, i) {\n        result.push(callback.call(thisArg, doc, i, _this3));\n      });\n      return result;\n    }\n\n    return map;\n  }(); // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n\n\n  _proto.observe = function () {\n    function observe(options) {\n      return LocalCollection._observeFromObserveChanges(this, options);\n    }\n\n    return observe;\n  }();\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n\n\n  _proto.observeChanges = function () {\n    function observeChanges(options) {\n      var _this4 = this;\n\n      var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with\n      // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n      // comment in _modifyAndNotify\n      // XXX allow skip/limit with unordered observe\n\n\n      if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n        throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n      }\n\n      if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n        throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n      }\n\n      var distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();\n      var query = {\n        cursor: this,\n        dirty: false,\n        distances: distances,\n        matcher: this.matcher,\n        // not fast pathed\n        ordered: ordered,\n        projectionFn: this._projectionFn,\n        resultsSnapshot: null,\n        sorter: ordered && this.sorter\n      };\n      var qid; // Non-reactive queries call added[Before] and then never call anything\n      // else.\n\n      if (this.reactive) {\n        qid = this.collection.next_qid++;\n        this.collection.queries[qid] = query;\n      }\n\n      query.results = this._getRawObjects({\n        ordered: ordered,\n        distances: query.distances\n      });\n\n      if (this.collection.paused) {\n        query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();\n      } // wrap callbacks we were passed. callbacks only fire when not paused and\n      // are never undefined\n      // Filters out blacklisted fields according to cursor's projection.\n      // XXX wrong place for this?\n      // furthermore, callbacks enqueue until the operation we're working on is\n      // done.\n\n\n      var wrapCallback = function (fn) {\n        if (!fn) {\n          return function () {};\n        }\n\n        var self = _this4;\n        return function ()\n        /* args*/\n        {\n          var _this5 = this;\n\n          if (self.collection.paused) {\n            return;\n          }\n\n          var args = arguments;\n\n          self.collection._observeQueue.queueTask(function () {\n            fn.apply(_this5, args);\n          });\n        };\n      };\n\n      query.added = wrapCallback(options.added);\n      query.changed = wrapCallback(options.changed);\n      query.removed = wrapCallback(options.removed);\n\n      if (ordered) {\n        query.addedBefore = wrapCallback(options.addedBefore);\n        query.movedBefore = wrapCallback(options.movedBefore);\n      }\n\n      if (!options._suppress_initial && !this.collection.paused) {\n        var results = ordered ? query.results : query.results._map;\n        Object.keys(results).forEach(function (key) {\n          var doc = results[key];\n          var fields = EJSON.clone(doc);\n          delete fields._id;\n\n          if (ordered) {\n            query.addedBefore(doc._id, _this4._projectionFn(fields), null);\n          }\n\n          query.added(doc._id, _this4._projectionFn(fields));\n        });\n      }\n\n      var handle = Object.assign(new LocalCollection.ObserveHandle(), {\n        collection: this.collection,\n        stop: function () {\n          if (_this4.reactive) {\n            delete _this4.collection.queries[qid];\n          }\n        }\n      });\n\n      if (this.reactive && Tracker.active) {\n        // XXX in many cases, the same observe will be recreated when\n        // the current autorun is rerun.  we could save work by\n        // letting it linger across rerun and potentially get\n        // repurposed if the same observe is performed, using logic\n        // similar to that of Meteor.subscribe.\n        Tracker.onInvalidate(function () {\n          handle.stop();\n        });\n      } // run the observe callbacks resulting from the initial contents\n      // before we leave the observe.\n\n\n      this.collection._observeQueue.drain();\n\n      return handle;\n    }\n\n    return observeChanges;\n  }(); // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n\n\n  _proto.rewind = function () {\n    function rewind() {}\n\n    return rewind;\n  }(); // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n\n\n  _proto._depend = function () {\n    function _depend(changers, _allow_unordered) {\n      if (Tracker.active) {\n        var dependency = new Tracker.Dependency();\n        var notify = dependency.changed.bind(dependency);\n        dependency.depend();\n        var options = {\n          _allow_unordered: _allow_unordered,\n          _suppress_initial: true\n        };\n        ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(function (fn) {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        }); // observeChanges will stop() when this computation is invalidated\n\n        this.observeChanges(options);\n      }\n    }\n\n    return _depend;\n  }();\n\n  _proto._getCollectionName = function () {\n    function _getCollectionName() {\n      return this.collection.name;\n    }\n\n    return _getCollectionName;\n  }(); // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n\n\n  _proto._getRawObjects = function () {\n    function _getRawObjects() {\n      var _this6 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // By default this method will respect skip and limit because .fetch(),\n      // .forEach() etc... expect this behaviour. It can be forced to ignore\n      // skip and limit by setting applySkipLimit to false (.count() does this,\n      // for example)\n      var applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n      // compatible\n\n      var results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value\n\n      if (this._selectorId !== undefined) {\n        // If you have non-zero skip and ask for a single id, you get nothing.\n        // This is so it matches the behavior of the '{_id: foo}' path.\n        if (applySkipLimit && this.skip) {\n          return results;\n        }\n\n        var selectedDoc = this.collection._docs.get(this._selectorId);\n\n        if (selectedDoc) {\n          if (options.ordered) {\n            results.push(selectedDoc);\n          } else {\n            results.set(this._selectorId, selectedDoc);\n          }\n        }\n\n        return results;\n      } // slow path for arbitrary selector, sort, skip, limit\n      // in the observeChanges case, distances is actually part of the \"query\"\n      // (ie, live results set) object.  in other cases, distances is only used\n      // inside this function.\n\n\n      var distances;\n\n      if (this.matcher.hasGeoQuery() && options.ordered) {\n        if (options.distances) {\n          distances = options.distances;\n          distances.clear();\n        } else {\n          distances = new LocalCollection._IdMap();\n        }\n      }\n\n      this.collection._docs.forEach(function (doc, id) {\n        var matchResult = _this6.matcher.documentMatches(doc);\n\n        if (matchResult.result) {\n          if (options.ordered) {\n            results.push(doc);\n\n            if (distances && matchResult.distance !== undefined) {\n              distances.set(id, matchResult.distance);\n            }\n          } else {\n            results.set(id, doc);\n          }\n        } // Override to ensure all docs are matched if ignoring skip & limit\n\n\n        if (!applySkipLimit) {\n          return true;\n        } // Fast path for limited unsorted queries.\n        // XXX 'length' check here seems wrong for ordered\n\n\n        return !_this6.limit || _this6.skip || _this6.sorter || results.length !== _this6.limit;\n      });\n\n      if (!options.ordered) {\n        return results;\n      }\n\n      if (this.sorter) {\n        results.sort(this.sorter.getComparator({\n          distances: distances\n        }));\n      } // Return the full set of results if there is no skip or limit or if we're\n      // ignoring them\n\n\n      if (!applySkipLimit || !this.limit && !this.skip) {\n        return results;\n      }\n\n      return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);\n    }\n\n    return _getRawObjects;\n  }();\n\n  _proto._publishCursor = function () {\n    function _publishCursor(subscription) {\n      // XXX minimongo should not depend on mongo-livedata!\n      if (!Package.mongo) {\n        throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');\n      }\n\n      if (!this.collection.name) {\n        throw new Error('Can\\'t publish a cursor from a collection without a name.');\n      }\n\n      return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);\n    }\n\n    return _publishCursor;\n  }();\n\n  return Cursor;\n}();","map":{"version":3,"sources":["packages/minimongo/cursor.js"],"names":["module","export","Cursor","LocalCollection","watch","require","v","hasOwn","collection","selector","options","sorter","matcher","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","call","_id","undefined","hasGeoQuery","sort","Sorter","skip","limit","fields","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","applySkipLimit","_depend","added","removed","_getRawObjects","ordered","length","fetch","result","forEach","push","doc","Symbol","iterator","addedBefore","changed","movedBefore","index","objects","next","element","value","done","callback","thisArg","i","getTransform","map","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","Error","distances","_IdMap","query","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","fn","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","_map","Object","keys","key","EJSON","clone","handle","assign","ObserveHandle","stop","active","onInvalidate","drain","rewind","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","name","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","distance","getComparator","slice","_publishCursor","subscription","Package","mongo","Mongo","Collection"],"mappings":"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","sourcesContent":["import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(\n          options.sort || [],\n          {matcher: this.matcher}\n        );\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n  rewind() {}\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n"]},"sourceType":"script","hash":"15462f52a2c2b55b5d53b5423b6fb79f1909bc6f"}
