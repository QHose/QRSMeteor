{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/diff-sequence/tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/diff-sequence/tests.js","filename":"packages/diff-sequence/tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/diff-sequence/tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/diff-sequence/tests.js"}},"code":"Tinytest.add(\"diff-sequence - diff changes ordering\", function (test) {\n  var makeDocs = function (ids) {\n    return _.map(ids, function (id) {\n      return {\n        _id: id\n      };\n    });\n  };\n\n  var testMutation = function (a, b) {\n    var aa = makeDocs(a);\n    var bb = makeDocs(b);\n    var aaCopy = EJSON.clone(aa);\n    DiffSequence.diffQueryOrderedChanges(aa, bb, {\n      addedBefore: function (id, doc, before) {\n        if (before === null) {\n          aaCopy.push(_.extend({\n            _id: id\n          }, doc));\n          return;\n        }\n\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === before) {\n            aaCopy.splice(i, 0, _.extend({\n              _id: id\n            }, doc));\n            return;\n          }\n        }\n      },\n      movedBefore: function (id, before) {\n        var found;\n\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === id) {\n            found = aaCopy[i];\n            aaCopy.splice(i, 1);\n          }\n        }\n\n        if (before === null) {\n          aaCopy.push(_.extend({\n            _id: id\n          }, found));\n          return;\n        }\n\n        for (i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === before) {\n            aaCopy.splice(i, 0, _.extend({\n              _id: id\n            }, found));\n            return;\n          }\n        }\n      },\n      removed: function (id) {\n        var found;\n\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === id) {\n            found = aaCopy[i];\n            aaCopy.splice(i, 1);\n          }\n        }\n      }\n    });\n    test.equal(aaCopy, bb);\n  };\n\n  var testBothWays = function (a, b) {\n    testMutation(a, b);\n    testMutation(b, a);\n  };\n\n  testBothWays([\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"]);\n  testBothWays([\"a\", \"b\", \"c\"], []);\n  testBothWays([\"a\", \"b\", \"c\"], [\"e\", \"f\"]);\n  testBothWays([\"a\", \"b\", \"c\", \"d\"], [\"c\", \"b\", \"a\"]);\n  testBothWays(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], ['A', 'B', 'F', 'G', 'C', 'D', 'I', 'L', 'M', 'N', 'H']);\n  testBothWays(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], ['A', 'B', 'C', 'D', 'F', 'G', 'H', 'E', 'I']);\n});\nTinytest.add(\"diff-sequence - diff\", function (test) {\n  // test correctness\n  var diffTest = function (origLen, newOldIdx) {\n    var oldResults = new Array(origLen);\n\n    for (var i = 1; i <= origLen; i++) oldResults[i - 1] = {\n      _id: i\n    };\n\n    var newResults = _.map(newOldIdx, function (n) {\n      var doc = {\n        _id: Math.abs(n)\n      };\n      if (n < 0) doc.changed = true;\n      return doc;\n    });\n\n    var find = function (arr, id) {\n      for (var i = 0; i < arr.length; i++) {\n        if (EJSON.equals(arr[i]._id, id)) return i;\n      }\n\n      return -1;\n    };\n\n    var results = _.clone(oldResults);\n\n    var observer = {\n      addedBefore: function (id, fields, before) {\n        var before_idx;\n        if (before === null) before_idx = results.length;else before_idx = find(results, before);\n\n        var doc = _.extend({\n          _id: id\n        }, fields);\n\n        test.isFalse(before_idx < 0 || before_idx > results.length);\n        results.splice(before_idx, 0, doc);\n      },\n      removed: function (id) {\n        var at_idx = find(results, id);\n        test.isFalse(at_idx < 0 || at_idx >= results.length);\n        results.splice(at_idx, 1);\n      },\n      changed: function (id, fields) {\n        var at_idx = find(results, id);\n        var oldDoc = results[at_idx];\n        var doc = EJSON.clone(oldDoc);\n        DiffSequence.applyChanges(doc, fields);\n        test.isFalse(at_idx < 0 || at_idx >= results.length);\n        test.equal(doc._id, oldDoc._id);\n        results[at_idx] = doc;\n      },\n      movedBefore: function (id, before) {\n        var old_idx = find(results, id);\n        var new_idx;\n        if (before === null) new_idx = results.length;else new_idx = find(results, before);\n        if (new_idx > old_idx) new_idx--;\n        test.isFalse(old_idx < 0 || old_idx >= results.length);\n        test.isFalse(new_idx < 0 || new_idx >= results.length);\n        results.splice(new_idx, 0, results.splice(old_idx, 1)[0]);\n      }\n    };\n    DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer);\n    test.equal(results, newResults);\n  }; // edge cases and cases run into during debugging\n\n\n  diffTest(5, [5, 1, 2, 3, 4]);\n  diffTest(0, [1, 2, 3, 4]);\n  diffTest(4, []);\n  diffTest(7, [4, 5, 6, 7, 1, 2, 3]);\n  diffTest(7, [5, 6, 7, 1, 2, 3, 4]);\n  diffTest(10, [7, 4, 11, 6, 12, 1, 5]);\n  diffTest(3, [3, 2, 1]);\n  diffTest(10, [2, 7, 4, 6, 11, 3, 8, 9]);\n  diffTest(0, []);\n  diffTest(1, []);\n  diffTest(0, [1]);\n  diffTest(1, [1]);\n  diffTest(5, [1, 2, 3, 4, 5]); // interaction between \"changed\" and other ops\n\n  diffTest(5, [-5, -1, 2, -3, 4]);\n  diffTest(7, [-4, -5, 6, 7, -1, 2, 3]);\n  diffTest(7, [5, 6, -7, 1, 2, -3, 4]);\n  diffTest(10, [7, -4, 11, 6, 12, -1, 5]);\n  diffTest(3, [-3, -2, -1]);\n  diffTest(10, [-2, 7, 4, 6, 11, -3, -8, 9]);\n});","map":{"version":3,"sources":["packages/diff-sequence/tests.js"],"names":["Tinytest","add","test","makeDocs","ids","_","map","id","_id","testMutation","a","b","aa","bb","aaCopy","EJSON","clone","DiffSequence","diffQueryOrderedChanges","addedBefore","doc","before","push","extend","i","length","splice","movedBefore","found","removed","equal","testBothWays","diffTest","origLen","newOldIdx","oldResults","Array","newResults","n","Math","abs","changed","find","arr","equals","results","observer","fields","before_idx","isFalse","at_idx","oldDoc","applyChanges","old_idx","new_idx"],"mappings":"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","sourcesContent":["Tinytest.add(\"diff-sequence - diff changes ordering\", function (test) {\n  var makeDocs = function (ids) {\n    return _.map(ids, function (id) { return {_id: id};});\n  };\n  var testMutation = function (a, b) {\n    var aa = makeDocs(a);\n    var bb = makeDocs(b);\n    var aaCopy = EJSON.clone(aa);\n    DiffSequence.diffQueryOrderedChanges(aa, bb, {\n\n      addedBefore: function (id, doc, before) {\n        if (before === null) {\n          aaCopy.push( _.extend({_id: id}, doc));\n          return;\n        }\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === before) {\n            aaCopy.splice(i, 0, _.extend({_id: id}, doc));\n            return;\n          }\n        }\n      },\n      movedBefore: function (id, before) {\n        var found;\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === id) {\n            found = aaCopy[i];\n            aaCopy.splice(i, 1);\n          }\n        }\n        if (before === null) {\n          aaCopy.push( _.extend({_id: id}, found));\n          return;\n        }\n        for (i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === before) {\n            aaCopy.splice(i, 0, _.extend({_id: id}, found));\n            return;\n          }\n        }\n      },\n      removed: function (id) {\n        var found;\n        for (var i = 0; i < aaCopy.length; i++) {\n          if (aaCopy[i]._id === id) {\n            found = aaCopy[i];\n            aaCopy.splice(i, 1);\n          }\n        }\n      }\n    });\n    test.equal(aaCopy, bb);\n  };\n\n  var testBothWays = function (a, b) {\n    testMutation(a, b);\n    testMutation(b, a);\n  };\n\n  testBothWays([\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"]);\n  testBothWays([\"a\", \"b\", \"c\"], []);\n  testBothWays([\"a\", \"b\", \"c\"], [\"e\",\"f\"]);\n  testBothWays([\"a\", \"b\", \"c\", \"d\"], [\"c\", \"b\", \"a\"]);\n  testBothWays(['A','B','C','D','E','F','G','H','I'],\n               ['A','B','F','G','C','D','I','L','M','N','H']);\n  testBothWays(['A','B','C','D','E','F','G','H','I'],['A','B','C','D','F','G','H','E','I']);\n});\n\nTinytest.add(\"diff-sequence - diff\", function (test) {\n\n  // test correctness\n\n  var diffTest = function(origLen, newOldIdx) {\n    var oldResults = new Array(origLen);\n    for (var i = 1; i <= origLen; i++)\n      oldResults[i-1] = {_id: i};\n\n    var newResults = _.map(newOldIdx, function(n) {\n      var doc = {_id: Math.abs(n)};\n      if (n < 0)\n        doc.changed = true;\n      return doc;\n    });\n    var find = function (arr, id) {\n      for (var i = 0; i < arr.length; i++) {\n        if (EJSON.equals(arr[i]._id, id))\n          return i;\n      }\n      return -1;\n    };\n\n    var results = _.clone(oldResults);\n    var observer = {\n      addedBefore: function(id, fields, before) {\n        var before_idx;\n        if (before === null)\n          before_idx = results.length;\n        else\n          before_idx = find (results, before);\n        var doc = _.extend({_id: id}, fields);\n        test.isFalse(before_idx < 0 || before_idx > results.length);\n        results.splice(before_idx, 0, doc);\n      },\n      removed: function(id) {\n        var at_idx = find (results, id);\n        test.isFalse(at_idx < 0 || at_idx >= results.length);\n        results.splice(at_idx, 1);\n      },\n      changed: function(id, fields) {\n        var at_idx = find (results, id);\n        var oldDoc = results[at_idx];\n        var doc = EJSON.clone(oldDoc);\n        DiffSequence.applyChanges(doc, fields);\n        test.isFalse(at_idx < 0 || at_idx >= results.length);\n        test.equal(doc._id, oldDoc._id);\n        results[at_idx] = doc;\n      },\n      movedBefore: function(id, before) {\n        var old_idx = find(results, id);\n        var new_idx;\n        if (before === null)\n          new_idx = results.length;\n        else\n          new_idx = find (results, before);\n        if (new_idx > old_idx)\n          new_idx--;\n        test.isFalse(old_idx < 0 || old_idx >= results.length);\n        test.isFalse(new_idx < 0 || new_idx >= results.length);\n        results.splice(new_idx, 0, results.splice(old_idx, 1)[0]);\n      }\n    };\n\n    DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer);\n    test.equal(results, newResults);\n  };\n\n  // edge cases and cases run into during debugging\n  diffTest(5, [5, 1, 2, 3, 4]);\n  diffTest(0, [1, 2, 3, 4]);\n  diffTest(4, []);\n  diffTest(7, [4, 5, 6, 7, 1, 2, 3]);\n  diffTest(7, [5, 6, 7, 1, 2, 3, 4]);\n  diffTest(10, [7, 4, 11, 6, 12, 1, 5]);\n  diffTest(3, [3, 2, 1]);\n  diffTest(10, [2, 7, 4, 6, 11, 3, 8, 9]);\n  diffTest(0, []);\n  diffTest(1, []);\n  diffTest(0, [1]);\n  diffTest(1, [1]);\n  diffTest(5, [1, 2, 3, 4, 5]);\n\n  // interaction between \"changed\" and other ops\n  diffTest(5, [-5, -1, 2, -3, 4]);\n  diffTest(7, [-4, -5, 6, 7, -1, 2, 3]);\n  diffTest(7, [5, 6, -7, 1, 2, -3, 4]);\n  diffTest(10, [7, -4, 11, 6, 12, -1, 5]);\n  diffTest(3, [-3, -2, -1]);\n  diffTest(10, [-2, 7, 4, 6, 11, -3, -8, 9]);\n});\n\n"]},"sourceType":"script","hash":"2bbc5501e05139b1d7b4ad1b50d7b1d76fc5331e"}
