{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"packages/accounts-password/email_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/accounts-password/email_tests.js","filename":"packages/accounts-password/email_tests.js","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/home/martijn/Documents/GitHub/QRSMeteor","root":"/home/martijn/Documents/GitHub/QRSMeteor","presets":[],"generatorOpts":{"filename":"packages/accounts-password/email_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/email_tests.js"}},"code":"var resetPasswordToken;\nvar verifyEmailToken;\nvar enrollAccountToken;\n\nAccounts._isolateLoginTokenForTest();\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n}\n\ntestAsyncMulti(\"accounts emails - reset password flow\", [function (test, expect) {\n  this.randomSuffix = Random.id();\n  this.email = \"Ada-intercept@example.com\" + this.randomSuffix; // Create the user with another email and add the tested for email later,\n  // so we can test whether forgotPassword respects the passed in email\n\n  Accounts.createUser({\n    email: \"another@example.com\" + this.randomSuffix,\n    password: 'foobar'\n  }, expect(error => {\n    test.equal(error, undefined);\n    Meteor.call(\"addEmailForTestAndVerify\", this.email);\n  }));\n}, function (test, expect) {\n  Accounts.forgotPassword({\n    email: this.email\n  }, expect(error => {\n    test.equal(error, undefined);\n  }));\n}, function (test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", this.email, expect((error, result) => {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 2); // the first is the email verification\n\n    var options = result[1];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    resetPasswordToken = match[1];\n    test.isTrue(options.html.match(re));\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n}, function (test, expect) {\n  Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect(error => {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({\n    email: this.email\n  }, \"newPassword\", expect(error => {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\ntestAsyncMulti(`accounts emails - \\\nreset password flow with case insensitive email`, [function (test, expect) {\n  this.randomSuffix = Random.id();\n  this.email = \"Ada-intercept@example.com\" + this.randomSuffix; // Create the user with another email and add the tested for email later,\n  // so we can test whether forgotPassword respects the passed in email\n\n  Accounts.createUser({\n    email: \"another@example.com\" + this.randomSuffix,\n    password: 'foobar'\n  }, expect(error => {\n    test.equal(error, undefined);\n    Meteor.call(\"addEmailForTestAndVerify\", this.email);\n  }));\n}, function (test, expect) {\n  Accounts.forgotPassword({\n    email: \"ada-intercept@example.com\" + this.randomSuffix\n  }, expect(error => {\n    test.equal(error, undefined);\n  }));\n}, function (test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", this.email, expect((error, result) => {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 2); // the first is the email verification\n\n    var options = result[1];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    resetPasswordToken = match[1];\n    test.isTrue(options.html.match(re));\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n}, function (test, expect) {\n  Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect(error => {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({\n    email: this.email\n  }, \"newPassword\", expect(error => {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\nvar getVerifyEmailToken = function (email, test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", email, expect((error, result) => {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 1);\n    var options = result[0];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/verify-email/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    verifyEmailToken = match[1];\n    test.isTrue(options.html.match(re));\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n};\n\nvar loggedIn = function (test, expect) {\n  return expect(error => {\n    test.equal(error, undefined);\n    test.isTrue(Meteor.user());\n  });\n};\n\ntestAsyncMulti(\"accounts emails - verify email flow\", [function (test, expect) {\n  this.email = Random.id() + \"-intercept@example.com\";\n  const emailId = Random.id();\n  this.anotherEmail = emailId.toLowerCase() + \"-intercept@example.com\"; // Add the same email as 'anotherEmail' but in upper case in order to check if\n  // the verification token will be removed for the email in upperCase and in\n  // lowerCase.\n\n  this.anotherEmailCaps = emailId.toUpperCase() + \"-INTERCEPT@example.com\";\n  Accounts.createUser({\n    email: this.email,\n    password: 'foobar'\n  }, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isFalse(Meteor.user().emails[0].verified); // We should NOT be publishing things like verification tokens!\n\n  test.isFalse(_.has(Meteor.user(), 'services'));\n}, function (test, expect) {\n  getVerifyEmailToken(this.email, test, expect);\n}, function (test, expect) {\n  // Log out, to test that verifyEmail logs us back in.\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Accounts.verifyEmail(verifyEmailToken, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  Accounts.connection.call(\"addEmailForTestAndVerify\", this.anotherEmail, expect((error, result) => {\n    test.isFalse(error);\n    test.equal(Meteor.user().emails.length, 2);\n    test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n    test.isFalse(Meteor.user().emails[1].verified);\n  }));\n}, function (test, expect) {\n  getVerifyEmailToken(this.anotherEmail, test, expect);\n}, function (test, expect) {\n  // Log out, to test that verifyEmail logs us back in. (And if we don't\n  // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Accounts.verifyEmail(verifyEmailToken, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n  test.isTrue(Meteor.user().emails[1].verified);\n}, function (test, expect) {\n  Accounts.connection.call(\"addEmailForTestAndVerify\", this.anotherEmailCaps, expect((error, result) => {\n    test.isFalse(error);\n    test.equal(Meteor.user().emails.length, 3);\n    test.equal(Meteor.user().emails[2].address, this.anotherEmailCaps);\n    test.isFalse(Meteor.user().emails[2].verified);\n  }));\n}, function (test, expect) {\n  getVerifyEmailToken(this.anotherEmailCaps, test, expect);\n}, function (test, expect) {\n  // Log out, to test that verifyEmail logs us back in. (And if we don't\n  // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Accounts.verifyEmail(verifyEmailToken, loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails[2].address, this.anotherEmailCaps);\n  test.isTrue(Meteor.user().emails[2].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);\n\nvar getEnrollAccountToken = function (email, test, expect) {\n  Accounts.connection.call(\"getInterceptedEmails\", email, expect((error, result) => {\n    test.equal(error, undefined);\n    test.notEqual(result, undefined);\n    test.equal(result.length, 1);\n    var options = result[0];\n    var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\");\n    var match = options.text.match(re);\n    test.isTrue(match);\n    enrollAccountToken = match[1];\n    test.isTrue(options.html.match(re));\n    test.equal(options.from, 'test@meteor.com');\n    test.equal(options.headers['My-Custom-Header'], 'Cool');\n  }));\n};\n\ntestAsyncMulti(\"accounts emails - enroll account flow\", [function (test, expect) {\n  this.email = Random.id() + \"-intercept@example.com\";\n  Accounts.connection.call(\"createUserOnServer\", this.email, expect((error, result) => {\n    test.isFalse(error);\n    var user = result;\n    test.equal(user.emails.length, 1);\n    test.equal(user.emails[0].address, this.email);\n    test.isFalse(user.emails[0].verified);\n  }));\n}, function (test, expect) {\n  getEnrollAccountToken(this.email, test, expect);\n}, function (test, expect) {\n  Accounts.resetPassword(enrollAccountToken, 'password', loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}, function (test, expect) {\n  Meteor.loginWithPassword({\n    email: this.email\n  }, 'password', loggedIn(test, expect));\n}, function (test, expect) {\n  test.equal(Meteor.user().emails.length, 1);\n  test.equal(Meteor.user().emails[0].address, this.email);\n  test.isTrue(Meteor.user().emails[0].verified);\n}, function (test, expect) {\n  Meteor.logout(expect(error => {\n    test.equal(error, undefined);\n    test.equal(Meteor.user(), null);\n  }));\n}]);","map":{"version":3,"sources":["packages/accounts-password/email_tests.js"],"names":["resetPasswordToken","verifyEmailToken","enrollAccountToken","Accounts","_isolateLoginTokenForTest","Meteor","isServer","removeDefaultRateLimit","testAsyncMulti","test","expect","randomSuffix","Random","id","email","createUser","password","error","equal","undefined","call","forgotPassword","connection","result","notEqual","length","options","re","RegExp","absoluteUrl","match","text","isTrue","html","from","headers","resetPassword","isFalse","logout","user","loginWithPassword","getVerifyEmailToken","loggedIn","emailId","anotherEmail","toLowerCase","anotherEmailCaps","toUpperCase","emails","address","verified","_","has","verifyEmail","getEnrollAccountToken"],"mappings":"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","sourcesContent":["var resetPasswordToken;\nvar verifyEmailToken;\nvar enrollAccountToken;\n\nAccounts._isolateLoginTokenForTest();\n\nif (Meteor.isServer) {\n  Accounts.removeDefaultRateLimit();\n}\n\ntestAsyncMulti(\"accounts emails - reset password flow\", [\n  function (test, expect) {\n    this.randomSuffix = Random.id();\n    this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n    // Create the user with another email and add the tested for email later,\n    // so we can test whether forgotPassword respects the passed in email\n    Accounts.createUser({email: \"another@example.com\" + this.randomSuffix, password: 'foobar'},\n      expect((error) => {\n        test.equal(error, undefined);\n        Meteor.call(\"addEmailForTestAndVerify\", this.email);\n      }));\n  },\n  function (test, expect) {\n    Accounts.forgotPassword({email: this.email}, expect((error) => {\n      test.equal(error, undefined);\n    }));\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"getInterceptedEmails\", this.email, expect((error, result) => {\n        test.equal(error, undefined);\n        test.notEqual(result, undefined);\n        test.equal(result.length, 2); // the first is the email verification\n        var options = result[1];\n\n        var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n        var match = options.text.match(re);\n        test.isTrue(match);\n        resetPasswordToken = match[1];\n        test.isTrue(options.html.match(re));\n\n        test.equal(options.from, 'test@meteor.com');\n        test.equal(options.headers['My-Custom-Header'], 'Cool');\n      }));\n  },\n  function (test, expect) {\n    Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect((error) => {\n      test.isFalse(error);\n    }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword(\n      {email: this.email}, \"newPassword\",\n      expect((error) => {\n        test.isFalse(error);\n      }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\ntestAsyncMulti(`accounts emails - \\\nreset password flow with case insensitive email`, [\n  function (test, expect) {\n    this.randomSuffix = Random.id();\n    this.email = \"Ada-intercept@example.com\" + this.randomSuffix;\n    // Create the user with another email and add the tested for email later,\n    // so we can test whether forgotPassword respects the passed in email\n    Accounts.createUser({email: \"another@example.com\" + this.randomSuffix, password: 'foobar'},\n      expect((error) => {\n        test.equal(error, undefined);\n        Meteor.call(\"addEmailForTestAndVerify\", this.email);\n      }));\n  },\n  function (test, expect) {\n    Accounts.forgotPassword({email: \"ada-intercept@example.com\" + this.randomSuffix}, expect((error) => {\n      test.equal(error, undefined);\n    }));\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"getInterceptedEmails\", this.email, expect((error, result) => {\n        test.equal(error, undefined);\n        test.notEqual(result, undefined);\n        test.equal(result.length, 2); // the first is the email verification\n        var options = result[1];\n\n        var re = new RegExp(Meteor.absoluteUrl() + \"#/reset-password/(\\\\S*)\");\n        var match = options.text.match(re);\n        test.isTrue(match);\n        resetPasswordToken = match[1];\n        test.isTrue(options.html.match(re));\n\n        test.equal(options.from, 'test@meteor.com');\n        test.equal(options.headers['My-Custom-Header'], 'Cool');\n      }));\n  },\n  function (test, expect) {\n    Accounts.resetPassword(resetPasswordToken, \"newPassword\", expect((error) => {\n      test.isFalse(error);\n    }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword(\n      {email: this.email}, \"newPassword\",\n      expect((error) => {\n        test.isFalse(error);\n      }));\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\nvar getVerifyEmailToken = function (email, test, expect) {\n  Accounts.connection.call(\n    \"getInterceptedEmails\", email, expect((error, result) => {\n      test.equal(error, undefined);\n      test.notEqual(result, undefined);\n      test.equal(result.length, 1);\n      var options = result[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/verify-email/(\\\\S*)\");\n      var match = options.text.match(re);\n      test.isTrue(match);\n      verifyEmailToken = match[1];\n      test.isTrue(options.html.match(re));\n\n      test.equal(options.from, 'test@meteor.com');\n      test.equal(options.headers['My-Custom-Header'], 'Cool');\n    }));\n};\n\nvar loggedIn = function (test, expect) {\n  return expect((error) => {\n    test.equal(error, undefined);\n    test.isTrue(Meteor.user());\n  });\n};\n\ntestAsyncMulti(\"accounts emails - verify email flow\", [\n  function (test, expect) {\n    this.email = Random.id() + \"-intercept@example.com\";\n    const emailId = Random.id();\n    this.anotherEmail = emailId.toLowerCase() + \"-intercept@example.com\";\n    // Add the same email as 'anotherEmail' but in upper case in order to check if\n    // the verification token will be removed for the email in upperCase and in\n    // lowerCase.\n    this.anotherEmailCaps = emailId.toUpperCase() +\"-INTERCEPT@example.com\";\n    Accounts.createUser(\n      {email: this.email, password: 'foobar'},\n      loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isFalse(Meteor.user().emails[0].verified);\n    // We should NOT be publishing things like verification tokens!\n    test.isFalse(_.has(Meteor.user(), 'services'));\n  },\n  function (test, expect) {\n    getVerifyEmailToken(this.email, test, expect);\n  },\n  function (test, expect) {\n    // Log out, to test that verifyEmail logs us back in.\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Accounts.verifyEmail(verifyEmailToken,\n                         loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"addEmailForTestAndVerify\", this.anotherEmail,\n      expect((error, result) => {\n        test.isFalse(error);\n        test.equal(Meteor.user().emails.length, 2);\n        test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n        test.isFalse(Meteor.user().emails[1].verified);\n      }));\n  },\n  function (test, expect) {\n    getVerifyEmailToken(this.anotherEmail, test, expect);\n  },\n  function (test, expect) {\n    // Log out, to test that verifyEmail logs us back in. (And if we don't\n    // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Accounts.verifyEmail(verifyEmailToken,\n                         loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails[1].address, this.anotherEmail);\n    test.isTrue(Meteor.user().emails[1].verified);\n  },\n  function (test, expect) {\n    Accounts.connection.call(\n      \"addEmailForTestAndVerify\", this.anotherEmailCaps,\n      expect((error, result) => {\n        test.isFalse(error);\n        test.equal(Meteor.user().emails.length, 3);\n        test.equal(Meteor.user().emails[2].address, this.anotherEmailCaps);\n        test.isFalse(Meteor.user().emails[2].verified);\n      }));\n  },\n  function (test, expect) {\n    getVerifyEmailToken(this.anotherEmailCaps, test, expect);\n  },\n  function (test, expect) {\n    // Log out, to test that verifyEmail logs us back in. (And if we don't\n    // do that, waitUntilLoggedIn won't be able to prevent race conditions.)\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Accounts.verifyEmail(verifyEmailToken,\n                         loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails[2].address, this.anotherEmailCaps);\n    test.isTrue(Meteor.user().emails[2].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n\nvar getEnrollAccountToken = function (email, test, expect) {\n  Accounts.connection.call(\n    \"getInterceptedEmails\", email, expect((error, result) => {\n      test.equal(error, undefined);\n      test.notEqual(result, undefined);\n      test.equal(result.length, 1);\n      var options = result[0];\n\n      var re = new RegExp(Meteor.absoluteUrl() + \"#/enroll-account/(\\\\S*)\")\n      var match = options.text.match(re);\n      test.isTrue(match);\n      enrollAccountToken = match[1];\n      test.isTrue(options.html.match(re));\n\n      test.equal(options.from, 'test@meteor.com');\n      test.equal(options.headers['My-Custom-Header'], 'Cool');\n    }));\n};\n\ntestAsyncMulti(\"accounts emails - enroll account flow\", [\n  function (test, expect) {\n    this.email = Random.id() + \"-intercept@example.com\";\n    Accounts.connection.call(\"createUserOnServer\", this.email,\n      expect((error, result) => {\n        test.isFalse(error);\n        var user = result;\n        test.equal(user.emails.length, 1);\n        test.equal(user.emails[0].address, this.email);\n        test.isFalse(user.emails[0].verified);\n      }));\n  },\n  function (test, expect) {\n    getEnrollAccountToken(this.email, test, expect);\n  },\n  function (test, expect) {\n    Accounts.resetPassword(enrollAccountToken, 'password',\n                           loggedIn(test, expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  },\n  function (test, expect) {\n    Meteor.loginWithPassword({email: this.email}, 'password',\n                             loggedIn(test ,expect));\n  },\n  function (test, expect) {\n    test.equal(Meteor.user().emails.length, 1);\n    test.equal(Meteor.user().emails[0].address, this.email);\n    test.isTrue(Meteor.user().emails[0].verified);\n  },\n  function (test, expect) {\n    Meteor.logout(expect((error) => {\n      test.equal(error, undefined);\n      test.equal(Meteor.user(), null);\n    }));\n  }\n]);\n"]},"sourceType":"script","hash":"9e0cf294eeb5eee133c290324a555f5ce83f3ed3"}
