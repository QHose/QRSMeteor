{"head":"","body":"","js":"\nTemplate.__checkName(\"reactiveTable\");\nTemplate[\"reactiveTable\"] = new Template(\"Template.reactiveTable\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"context\"));\n  }, function() {\n    return [ \"\\n  \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"ready\"));\n    }, function() {\n      return [ \"\\n    \", HTML.DIV({\n        class: \"clearfix\"\n      }, \"\\n      \", HTML.DIV({\n        class: \"reactive-table-options col-sm-8 pull-right\"\n      }, \"\\n        \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"showFilter\"));\n      }, function() {\n        return [ \"\\n          \", HTML.DIV({\n          class: \"reactive-table-filter form-group col-sm-8 pull-right\"\n        }, \"\\n            \", Blaze._TemplateWith(function() {\n          return {\n            id: Spacebars.call(view.lookup(\"getFilterId\")),\n            useFontAwesome: Spacebars.call(view.lookup(\"useFontAwesome\"))\n          };\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"reactiveTableFilter\"));\n        }), \"\\n          \"), \"\\n        \" ];\n      }), \"\\n        \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"showColumnToggles\"));\n      }, function() {\n        return [ \"\\n          \", HTML.DIV({\n          class: \"reactive-table-columns-dropdown col-sm-4 pull-right\"\n        }, \"\\n            \", HTML.BUTTON({\n          class: \"btn btn-default dropdown-toggle\",\n          id: function() {\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];\n          },\n          \"data-toggle\": \"dropdown\"\n        }, \"\\n              \", Blaze.View(\"lookup:i18n\", function() {\n          return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.columns\");\n        }), \"\\n            \"), \"\\n            \", HTML.UL({\n          class: \"dropdown-menu dropdown-menu-right\",\n          role: \"menu\",\n          \"aria-labelledby\": function() {\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];\n          }\n        }, \"\\n              \", Blaze.Each(function() {\n          return Spacebars.call(view.lookup(\"fields\"));\n        }, function() {\n          return [ \"\\n                \", Blaze.Unless(function() {\n            return Spacebars.call(view.lookup(\"hideToggle\"));\n          }, function() {\n            return [ \"\\n                  \", HTML.LI({\n              role: \"presentation\"\n            }, HTML.A({\n              role: \"menuitem\",\n              tabindex: \"-1\",\n              \"data-target\": \"#\"\n            }, \"\\n                    \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isVisible\"));\n            }, function() {\n              return [ \"\\n                      \", HTML.INPUT({\n                type: \"checkbox\",\n                checked: \"\",\n                \"data-fieldid\": function() {\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));\n                }\n              }), \"\\n                    \" ];\n            }, function() {\n              return [ \"\\n                      \", HTML.INPUT({\n                type: \"checkbox\",\n                \"data-fieldid\": function() {\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));\n                }\n              }), \"\\n                    \" ];\n            }), \"\\n                    \", HTML.LABEL(\"\\n                      \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n            }, function() {\n              return Spacebars.With(function() {\n                return Spacebars.call(view.lookup(\"labelData\"));\n              }, function() {\n                return Spacebars.include(function() {\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                });\n              }, function() {\n                return Spacebars.include(view.lookupTemplate(\"label\"));\n              });\n            }, function() {\n              return Blaze.View(\"lookup:getLabel\", function() {\n                return Spacebars.mustache(view.lookup(\"getLabel\"));\n              });\n            }), \"\\n                    \"), \"\\n                  \")), \"\\n                \" ];\n          }), \"\\n              \" ];\n        }), \"\\n            \"), \"\\n          \"), \"\\n        \" ];\n      }), \"\\n      \"), \"\\n    \"), \"\\n    \", Blaze.Unless(function() {\n        return Spacebars.call(view.lookup(\"noData\"));\n      }, function() {\n        return [ \"\\n      \", HTML.TABLE({\n          id: function() {\n            return Spacebars.mustache(view.lookup(\"id\"));\n          },\n          class: function() {\n            return [ Spacebars.mustache(view.lookup(\"class\")), \" reactive-table\" ];\n          }\n        }, \"\\n        \", HTML.THEAD(\"\\n          \", HTML.TR(\"\\n            \", Blaze.Each(function() {\n          return Spacebars.call(view.lookup(\"fields\"));\n        }, function() {\n          return [ \"\\n              \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isVisible\"));\n          }, function() {\n            return [ \"\\n                \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isPrimarySortField\"));\n            }, function() {\n              return [ \"\\n                  \", HTML.TH({\n                class: function() {\n                  return [ Blaze.If(function() {\n                    return Spacebars.call(view.lookup(\"isSortable\"));\n                  }, function() {\n                    return \"sortable \";\n                  }), Spacebars.mustache(view.lookup(\"getHeaderClass\")) ];\n                },\n                fieldid: function() {\n                  return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));\n                }\n              }, \"\\n                    \", Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n              }, function() {\n                return Spacebars.With(function() {\n                  return Spacebars.call(view.lookup(\"labelData\"));\n                }, function() {\n                  return Spacebars.include(function() {\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                  });\n                }, function() {\n                  return Spacebars.include(view.lookupTemplate(\"label\"));\n                });\n              }, function() {\n                return Blaze.View(\"lookup:getLabel\", function() {\n                  return Spacebars.mustache(view.lookup(\"getLabel\"));\n                });\n              }), HTML.CharRef({\n                html: \"&nbsp;\",\n                str: \" \"\n              }), HTML.CharRef({\n                html: \"&nbsp;\",\n                str: \" \"\n              }), \"\\n                    \", Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"isAscending\"));\n              }, function() {\n                return [ \"\\n                      \", Blaze.If(function() {\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));\n                }, function() {\n                  return [ \"\\n                        \", HTML.I({\n                    class: \"fa fa-sort-asc\"\n                  }), \"\\n                      \" ];\n                }, function() {\n                  return [ \"\\n                        \", HTML.CharRef({\n                    html: \"&#x25B2;\",\n                    str: \"▲\"\n                  }), \"\\n                      \" ];\n                }), \"\\n                    \" ];\n              }, function() {\n                return [ \"\\n                      \", Blaze.If(function() {\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));\n                }, function() {\n                  return [ \"\\n                        \", HTML.I({\n                    class: \"fa fa-sort-desc\"\n                  }), \"\\n                      \" ];\n                }, function() {\n                  return [ \"\\n                        \", HTML.CharRef({\n                    html: \"&#x25BC;\",\n                    str: \"▼\"\n                  }), \"\\n                      \" ];\n                }), \"\\n                    \" ];\n              }), \"\\n                  \"), \"\\n                \" ];\n            }, function() {\n              return [ \"\\n                  \", Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"isSortable\"));\n              }, function() {\n                return [ \"\\n                    \", HTML.TH({\n                  class: function() {\n                    return [ Spacebars.mustache(view.lookup(\"getHeaderClass\")), \" sortable\" ];\n                  },\n                  fieldid: function() {\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));\n                  }\n                }, Blaze.If(function() {\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n                }, function() {\n                  return Spacebars.With(function() {\n                    return Spacebars.call(view.lookup(\"labelData\"));\n                  }, function() {\n                    return Spacebars.include(function() {\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                    });\n                  }, function() {\n                    return Spacebars.include(view.lookupTemplate(\"label\"));\n                  });\n                }, function() {\n                  return Blaze.View(\"lookup:getLabel\", function() {\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));\n                  });\n                })), \"\\n                  \" ];\n              }, function() {\n                return [ \"\\n                    \", HTML.TH({\n                  class: function() {\n                    return Spacebars.mustache(view.lookup(\"getHeaderClass\"));\n                  },\n                  fieldid: function() {\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));\n                  }\n                }, Blaze.If(function() {\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n                }, function() {\n                  return Spacebars.With(function() {\n                    return Spacebars.call(view.lookup(\"labelData\"));\n                  }, function() {\n                    return Spacebars.include(function() {\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                    });\n                  }, function() {\n                    return Spacebars.include(view.lookupTemplate(\"label\"));\n                  });\n                }, function() {\n                  return Blaze.View(\"lookup:getLabel\", function() {\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));\n                  });\n                })), \"\\n                  \" ];\n              }), \"\\n                \" ];\n            }), \"\\n              \" ];\n          }), \"\\n            \" ];\n        }), \"\\n          \"), \"\\n        \"), \"\\n        \", HTML.TBODY(\"\\n          \", Blaze.Each(function() {\n          return Spacebars.call(view.lookup(\"sortedRows\"));\n        }, function() {\n          return [ \"\\n            \", HTML.TR({\n            class: function() {\n              return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"rowClass\"), view.lookup(\".\"));\n            }\n          }, \"\\n              \", Blaze.Each(function() {\n            return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"fields\"));\n          }, function() {\n            return [ \"\\n                \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isVisible\"));\n            }, function() {\n              return [ \"\\n                  \", HTML.TD({\n                class: function() {\n                  return Spacebars.mustache(view.lookup(\"getCellClass\"), view.lookup(\"..\"));\n                }\n              }, Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"tmpl\"));\n              }, function() {\n                return Spacebars.With(function() {\n                  return Spacebars.call(view.lookup(\"..\"));\n                }, function() {\n                  return Spacebars.include(function() {\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"tmpl\"));\n                  });\n                });\n              }, function() {\n                return Blaze.View(\"lookup:getField\", function() {\n                  return Spacebars.mustache(view.lookup(\"getField\"), view.lookup(\"..\"));\n                });\n              })), \"\\n                \" ];\n            }), \"\\n              \" ];\n          }), \"\\n            \"), \"\\n          \" ];\n        }), \"\\n        \"), \"\\n      \"), \"\\n      \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"showNavigation\"));\n        }, function() {\n          return [ \"\\n        \", HTML.DIV({\n            class: \"reactive-table-navigation\"\n          }, \"\\n          \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"showNavigationRowsPerPage\"));\n          }, function() {\n            return [ \"\\n            \", HTML.DIV({\n              class: \"form-inline form-group rows-per-page\"\n            }, \"\\n              \", HTML.LABEL(\"\\n                \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.show\");\n            })), \"\\n                \", HTML.INPUT({\n              class: \"form-control\",\n              type: \"text\",\n              value: function() {\n                return Spacebars.mustache(view.lookup(\"getRowsPerPage\"));\n              }\n            }), \"\\n                \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"showRowCount\"));\n            }, function() {\n              return [ \"\\n                  \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n                return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");\n              })), \"\\n                  \", HTML.SPAN({\n                class: \"rows-per-page-count\"\n              }, Blaze.View(\"lookup:getRowCount\", function() {\n                return Spacebars.mustache(view.lookup(\"getRowCount\"));\n              })), \"\\n                \" ];\n            }), \"\\n                \", HTML.SPAN({\n              class: \"rows-per-page-label\"\n            }, Blaze.View(\"lookup:i18n\", function() {\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.rowsPerPage\");\n            })), \"\\n              \"), \"\\n            \"), \"\\n          \" ];\n          }), \"\\n          \", HTML.DIV({\n            class: \"form-inline form-group page-number\"\n          }, \"\\n            \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isntFirstPage\"));\n          }, function() {\n            return [ \"\\n              \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));\n            }, function() {\n              return [ \"\\n                \", HTML.I({\n                class: \"previous-page fa fa-caret-left\"\n              }), \"\\n              \" ];\n            }, function() {\n              return [ \"\\n                \", HTML.LABEL({\n                class: \"previous-page\"\n              }, HTML.CharRef({\n                html: \"&lt;\",\n                str: \"<\"\n              })), \"\\n              \" ];\n            }), \"\\n            \" ];\n          }), \"\\n            \", HTML.LABEL(\"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.page\");\n          })), \"\\n              \", HTML.INPUT({\n            class: \"form-control\",\n            type: \"text\",\n            value: function() {\n              return Spacebars.mustache(view.lookup(\"getCurrentPage\"));\n            }\n          }), \"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");\n          })), \"\\n              \", HTML.SPAN({\n            class: \"page-number-count\"\n          }, Blaze.View(\"lookup:getPageCount\", function() {\n            return Spacebars.mustache(view.lookup(\"getPageCount\"));\n          })), \"\\n            \"), \"\\n            \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isntLastPage\"));\n          }, function() {\n            return [ \"\\n              \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));\n            }, function() {\n              return [ \"\\n                \", HTML.I({\n                class: \"next-page fa fa-caret-right\"\n              }), \"\\n              \" ];\n            }, function() {\n              return [ \"\\n                \", HTML.LABEL({\n                class: \"next-page\"\n              }, HTML.CharRef({\n                html: \"&gt;\",\n                str: \">\"\n              })), \"\\n              \" ];\n            }), \"\\n            \" ];\n          }), \"\\n          \"), \"\\n        \"), \"\\n      \" ];\n        }), \"\\n    \" ];\n      }, function() {\n        return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"noDataTmpl\")), \"\\n    \" ];\n      }), \"\\n  \" ];\n    }), \"\\n  \" ];\n  });\n}));\n","bodyAttrs":{}}