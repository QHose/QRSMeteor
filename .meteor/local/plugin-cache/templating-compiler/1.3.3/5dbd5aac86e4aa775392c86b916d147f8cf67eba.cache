{"head":"","body":"","js":"\nTemplate.__checkName(\"introduction\");\nTemplate[\"introduction\"] = new Template(\"Template.introduction\", (function() {\n  var view = this;\n  return [ HTML.DIV({\n    class: \"ui two column doubling stackable grid container raised segment\"\n  }, \"\\n        \", Spacebars.include(view.lookupTemplate(\"introConcept\")), \"\\n        \", HTML.Raw('<!-- <div class=\"fourteen wide column ui very padded raised segment\">\\n            {{> introAPI}}\\n        </div>\\n        <div class=\"fourteen wide column ui very padded raised segment\">\\n            {{> introSecurity}}\\n        </div> -->'), \"\\n        \", HTML.Raw(\"<!-- </div> -->\"), \"\\n    \"), HTML.Raw('\\n    <!-- <div class=\"ui container\">\\n        <div class=\"ui very padded segment\">\\n            {{> introConcept}}\\n        </div>\\n        <div class=\"ui very padded segment\">\\n            {{> introAPI}}\\n        </div>\\n        <div class=\"ui very padded segment\">\\n            {{> introSecurity}}\\n        </div>\\n    </div> -->') ];\n}));\n\nTemplate.__checkName(\"introConcept\");\nTemplate[\"introConcept\"] = new Template(\"Template.introConcept\", (function() {\n  var view = this;\n  return [ HTML.Raw('<div class=\"sixteen wide column\">\\n        <h3 class=\"ui header\">The SaaS with Qlik Sense demo platform</h3>\\n    </div>\\n    '), HTML.DIV({\n    class: \"seven wide column\"\n  }, \"\\n        \", HTML.Raw('<p>Questions about SaaS and multi-tenancy with Qlik Sense? In our demonstration site, we show and reveal how you\\n            can easily leverage the power of the Qlik Sense APIs within a multi-tenant SaaS application environment.\\n        <div class=\"ui accordion\">\\n            <div class=\"title\">\\n                <!-- <div class=\"ui mini buttons\"> -->\\n                <a href=\"\" class=\"ui mini button dropdown\">Read more</a>\\n                <!-- <div class=\"or\"></div>\\n                        <a href=\"#\" class=\"ui button howDoesSaaSAutomationWork\"><i class=\"youtube icon\"></i> Introduction video</a>\\n                    </div> -->\\n            </div>\\n            <div class=\"content\">\\n                <p class=\"transition hidden\">APIs are our secret sauce so this website is specifically designed to\\n                    illustrate the unique selling points of our Qlik Sense APIs. Our goal is to illustrate the power of\\n                    Qlik Sense APIs in language that can be easily understood by non-technical business users or\\n                    decision-makers via our step-by-step walk-through. This learning environment was developed using our\\n                    experiences with AFAS, as well as other key customer accounts. We are eager to explain, excite and\\n                    reassure senior executives and management about the Qlik platform by modeling its ease of use and\\n                    full automation capabilities.</p>\\n                <p>Our presentation to the right precedes our full demonstration environment experience, aiming to\\n                    bridge any knowledge gaps for our non-technical prospects while providing a clear and simple pathway\\n                    towards understanding how to embed Qlik Sense in a multi-tenant SaaS application platform. A key\\n                    outcome for using this demonstration asset is to mitigate potential risk early in the sales cycle,\\n                    build enthusiasm/interest for Qlik Sense and its capabilities, and showcase our readiness to support\\n                    the customer or partner’s vision for embedding analytics within their application suite.</p>\\n                <p>This prospect experience is supported by several linked assets. We have a demo website which\\n                    simulates the SaaS platform of an OEM partner, including videos and documentation illustrating each\\n                    integration topic and a presentation taking the audience through a journey which highlights key\\n                    aspects of Qlik Sense, its APIs and the overall value of Qlik.</p>\\n            </div>\\n        </div>\\n        </p>'), \"\\n        \", HTML.Raw('<h3 class=\"ui dividing header\">Using the demo</h3>'), \"\\n        \", HTML.P(Spacebars.include(view.lookupTemplate(\"usingTheDemo\")), \"\\n        \", HTML.Raw('<div class=\"ui accordion\">\\n            <div class=\"title\">\\n                <div class=\"ui mini buttons\">\\n                    <a href=\"\" class=\"ui button dropdown\">Read more</a>\\n                </div>\\n            </div>\\n            <div class=\"content\">\\n                <p class=\"transition hidden\">\\n                    In the demo you will see a screen divided into two parts:\\n                <ul>\\n                    <li>The left side shows \"the broker\" in your SaaS platform, a piece of software that you already use\\n                        today to mass maintain the SaaS applications for all of your customers. This broker executes its\\n                        activities based on the list of your customers, their access rights, and the relevant template\\n                        apps (depending on what the customer has configured in your platform).</li>\\n                    <li>The right side shows you the result of the activities of the broker: the apps and streams\\n                        automatically created in Qlik Sense.</li>\\n                </ul>\\n                In order to finish the demo, you must complete the following steps:\\n                <ul>\\n                    <li><b>Select your customers</b>. In your SaaS platform you have the ability to store which\\n                        customers should receive which apps. We simulate this feature by letting you select the\\n                        customers. By pressing the button, you also select an \"app\" to be used as a template for the\\n                        layout.</li>\\n                    <li><b>Press generate</b>, This will make a copy of the template app for each of your customers. It\\n                        replaces the generic script with a customer specific one and reloads the app. Because you are\\n                        able to insert a custom script, you can also specify specific data models like custom fields and\\n                        tables or create them them on the fly in order to connect to big data sources. In the end we\\n                        make a unique stream for each customer and publish the app into this stream.</li>\\n                    <li><b>Select a user and press the green button.</b> This allows you to test the single sign on and\\n                        make sure that each customer can only see their own data (streams and apps). You can also test\\n                        row level security by opening the \"row level security\" app in the \"everyone stream\". This\\n                        demonstrates that each user only sees the values pertaining to the country of their group\\n                        membership.</li>\\n                    </ul>\\n                </p>\\n            </div>\\n        </div>'), \"\\n        \"), \"\\n    \"), \"\\n    \", HTML.DIV({\n    class: \"nine wide right floated column\"\n  }, \"\\n        \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"URL_Youtube_concept_behind\"));\n    },\n    target: \"_blank\"\n  }, HTML.Raw('<img class=\"ui fluid bordered image\" src=\"images/only generation explanation.gif\">')), \"\\n\\n        \", HTML.Raw('<!--    <DIV class=\"ui fluid image\" data-url=\\'{{URL_Youtube_concept_behind}}\\' data-placeholder=\"/images/only generation explanation.gif\"></DIV> -->'), \"\\n        \", HTML.Raw('<!--         <img class=\"ui fluid image\" src=\"images/only generation explanation.gif\">\\n -->'), \"\\n    \"), \"\\n    \", HTML.DIV({\n    class: \"sixteen wide column\"\n  }, \"\\n        \", HTML.P(\"\\n        \", HTML.DIV({\n    class: \"ui accordion\"\n  }, \"\\n            \", HTML.DIV({\n    class: \"title\"\n  }, \"\\n                \", HTML.DIV({\n    class: \"ui medium buttons\"\n  }, \"\\n                    \", HTML.Raw('<a href=\"#\" class=\"ui dropdown youtube button\"><i class=\"youtube icon\"></i>Video overview</a>'), \"\\n                    \", HTML.Raw('<div class=\"or\"></div>'), \"\\n                    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"useCaseSelection\");\n    },\n    class: \"ui positive button\"\n  }, \"Go to the demo\"), \"\\n                \"), \"\\n            \"), \"\\n            \", HTML.DIV({\n    class: \"content ui segment\"\n  }, \"\\n                \", HTML.Raw('<h4 class=\"transition hidden\">\\n                </h4>'), \"\\n                \", HTML.Raw('<div class=\"ui message\">\\n                    <div class=\"header\">\\n                        Video overview\\n                    </div>\\n                    <p>The videos below have been especially designed to explain a common, single approach… This is not\\n                        the only approach available, but it satisfies the majority of use cases and the video overview\\n                        will accelerate your understanding of it.</p>\\n                    <ul class=\"list\">\\n                        <li>Introduction to the demo platform and integration in general</li>\\n                        <li>Architecture</li>\\n                        <li>Security</li>\\n                        <li>Web integration</li>\\n                    </ul>\\n                </div>'), \"\\n                \", Spacebars.include(view.lookupTemplate(\"videoOverview\")), \"\\n            \"), \"\\n        \"), \"\\n        \"), \"\\n    \") ];\n}));\n\nTemplate.__checkName(\"introAPI\");\nTemplate[\"introAPI\"] = new Template(\"Template.introAPI\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"ui middle aligned stackable grid container\"\n  }, \"\\n        \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n            \", HTML.Raw('<div class=\"seven wide left floated column\">\\n                <img class=\"ui fluid image\" src=\"images/qlik sense embedded example.png\">\\n            </div>'), \"\\n            \", HTML.DIV({\n    class: \"nine wide column\"\n  }, \"\\n                \", HTML.Raw('<h3 class=\"ui header\">API - Process integration</h3>'), \"\\n                \", HTML.Raw(\"<p>Integrate Qlik Sense in your SaaS automation or provisioning process using our .NET API and Visual\\n                    Studio plugin. Or you can also use our javascript, websocket and REST based APIs to automate each\\n                    manual activity. Using this mechanism you can for example create/delete/reload apps for each of your\\n                    customers. You can even create complete dashboards or individual charts on the fly. This removes the\\n                    need to design everything up front.</p>\"), \"\\n                \", HTML.DIV({\n    class: \"center aligned column\"\n  }, \"\\n                    \", HTML.DIV({\n    class: \"ui mini buttons\"\n  }, \"\\n                        \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"APILogs\");\n    },\n    class: \"ui button\"\n  }, \"Read more\"), \"\\n                    \"), \"\\n                \"), \"\\n                \", HTML.Raw('<h3 class=\"ui header\">Web integration: Embed Qlik Sense</h3>'), \"\\n                \", HTML.Raw(\"<p>The beauty of Qlik is it allows you choices for your integration. You can choose the level of web\\n                    integration according to your business requirements. On the client side, you can choose to use our\\n                    client/front-end or you can create your own. If you use the Qlik Sense client you have the following\\n                    options.</p>\"), \"\\n                \", HTML.Raw(\"<p>You can integrate the hub, an app, a sheet or individual charts. In most cases you have the\\n                    flexibility to control whether you would like to see our menu, our selection bar or whether or not\\n                    you would like to provide initial selections or make the charts static so that no selections are\\n                    possible at all.\\n                </p>\"), \"\\n                \", HTML.Raw('<div class=\"ui accordion\">\\n                    <div class=\"title\">\\n                        <i class=\"dropdown icon\"></i> What would the end result look like for a succesful integration of\\n                        Qlik Sense into your application architecture?\\n                    </div>\\n                    <div class=\"content\">\\n                        <p>Your goal is to create within a multi-tenant SaaS platform environment - embedded analytics -\\n                            within your core application(s) where each of your customers would see and use only their\\n                            data. It’s possible for each customer to have a more fine grained authorization structure.\\n                        </p>\\n                        <p>As an example, it is possible to provide authorizations for a specific department or country\\n                            within a dashboard. Ultimately you will see a simple solution in our demonstration in which\\n                            both of our fictitious users, Peter and John, go to the same website, but see different\\n                            things based on their authorizations. Qlik Sense makes this possible because it uses a\\n                            dynamic attribute-based security approach in which we re-use all the pre-existing users and\\n                            roles from your SaaS platform. This ensures Qlik Sense stays automatically in synch and\\n                            avoids the overhead of double maintenance.\\n                        </p>\\n                    </div>\\n                </div>'), \"\\n                \", HTML.DIV({\n    class: \"center aligned column\"\n  }, \"\\n                    \", HTML.DIV({\n    class: \"ui mini buttons\"\n  }, \"\\n                        \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"webIntegration\");\n    },\n    class: \"ui button\"\n  }, \"Read more\"), \"\\n                    \"), \"\\n                \"), \"\\n            \"), \"\\n        \"), \"\\n    \");\n}));\n\nTemplate.__checkName(\"introSecurity\");\nTemplate[\"introSecurity\"] = new Template(\"Template.introSecurity\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"ui middle aligned stackable grid container\"\n  }, \"\\n        \", HTML.DIV({\n    class: \"row\"\n  }, \"\\n            \", HTML.DIV({\n    class: \"nine wide column\"\n  }, \"\\n                \", HTML.Raw('<h3 class=\"ui header\">Security integration</h3>'), \"\\n                \", HTML.Raw('<h4 class=\"ui header\">Authentication - Single Sign on</h4>'), ' We re-use your existing way to authenticate\\n                the users. We will insert a little piece of code inside your existing \"security module\". In this module\\n                you already know who the user is (authentication) and what his rights are (authorization). The only\\n                thing we need to do is create a trust relationship between your server and the new Qlik Sense server\\n                (via a SSL certificate exchange). And send this info about the user (userId, group membership) in a JSON\\n                object to Sense (we call this ticketing).\\n                ', HTML.Raw('<h4 class=\"ui header\">Authorization</h4>'), ' Based on the userId and group membership streams (a way to\\n                group apps, like HR/Finance), apps, sheets (all called \"resources\" in our rule based security model) are\\n                shown or not. Let\\'s say we start simple and each customer can only view their own dashboards. Since we\\n                gave each customer its own stream we can grant access if the name of the stream (your company name)\\n                equals the the name of the company we received from your website in the ticket. We can all control this\\n                by adding 1 row of security configuraton: User.group = Stream.name.\\n                ', HTML.Raw('<div class=\"ui horizontal divider\">\\n                    <!-- Or -->\\n                </div>'), \"\\n                \", HTML.DIV({\n    class: \"center aligned column\"\n  }, \"\\n                    \", HTML.DIV({\n    class: \"ui mini buttons\"\n  }, \"\\n                        \", HTML.Raw('<!-- <a href=\"{{doc_securtityIntegration}}\" target=\"_blank\" class=\"ui button\">Read more</a>\\n                                <div class=\"or\"></div> -->'), \"\\n                        \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"pathFor\"), \"introductionSecurity\");\n    },\n    class: \"ui button\"\n  }, \"Read more\"), \"\\n                    \"), \"\\n                \"), \"\\n            \"), \"\\n            \", HTML.Raw('<div class=\"three wide right floated column\">\\n                <img class=\"ui fluid image\" src=\"images/id_big.png\">\\n            </div>'), \"\\n        \"), \"\\n    \");\n}));\n\nTemplate.__checkName(\"usingTheDemo\");\nTemplate[\"usingTheDemo\"] = new Template(\"Template.usingTheDemo\", (function() {\n  var view = this;\n  return [ HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"URL_Youtube_concept_behind\"));\n    },\n    target: \"_blank\"\n  }, 'This demo shows you how to\\n    copy an app (dashboard) which serves as a \"template layout\" for each of your customers explained in this video'), \".\\n    Besides creating a copy, we will also reload the app with data from the customer database.\" ];\n}));\n","bodyAttrs":{}}