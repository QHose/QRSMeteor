[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar _ = Package.underscore._;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\n\n/* Package-scope variables */\nvar LinkedIn, Linkedin;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/jonperl_linkedin/packages/jonperl_linkedin.js                                               //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/jonperl:linkedin/linkedin_common.js                                                  //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nLinkedIn = {};                                                                                   // 1\n                                                                                                 // 2\n// For compatibility with mondora                                                                // 3\nLinkedin = LinkedIn;                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/jonperl:linkedin/linkedin_server.js                                                  //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nvar urlUtil = Npm.require('url');                                                                // 1\n                                                                                                 // 2\nOAuth.registerService('linkedin', 2, null, function (query) {                                    // 3\n                                                                                                 // 4\n    var response = getTokens(query);                                                             // 5\n    var accessToken = response.accessToken;                                                      // 6\n    var identity = getIdentity(accessToken);                                                     // 7\n                                                                                                 // 8\n    var profileUrl = identity.siteStandardProfileRequest.url;                                    // 9\n    var urlParts = urlUtil.parse(profileUrl, true);                                              // 10\n                                                                                                 // 11\n    var serviceData = {                                                                          // 12\n        id: urlParts.query.id || Random.id(),                                                    // 13\n        accessToken: OAuth.sealSecret(accessToken),                                              // 14\n        expiresAt: (+new Date) + (1000 * response.expiresIn)                                     // 15\n    };                                                                                           // 16\n                                                                                                 // 17\n    var whiteListed = ['firstName', 'headline', 'lastName'];                                     // 18\n                                                                                                 // 19\n    // include all fields from linkedin                                                          // 20\n    // https://developer.linkedin.com/documents/authentication                                   // 21\n    var fields = _.pick(identity, whiteListed);                                                  // 22\n                                                                                                 // 23\n    fields.name = identity.firstName + ' ' + identity.lastName;                                  // 24\n                                                                                                 // 25\n    return {                                                                                     // 26\n        serviceData: serviceData,                                                                // 27\n        options: { profile: fields }                                                             // 28\n    };                                                                                           // 29\n});                                                                                              // 30\n                                                                                                 // 31\n// checks whether a string parses as JSON                                                        // 32\nvar isJSON = function (str) {                                                                    // 33\n    try {                                                                                        // 34\n        JSON.parse(str);                                                                         // 35\n        return true;                                                                             // 36\n    } catch (e) {                                                                                // 37\n        return false;                                                                            // 38\n    }                                                                                            // 39\n};                                                                                               // 40\n                                                                                                 // 41\n// returns an object containing:                                                                 // 42\n// - accessToken                                                                                 // 43\n// - expiresIn: lifetime of token in seconds                                                     // 44\nvar getTokens = function (query) {                                                               // 45\n    var config = ServiceConfiguration.configurations.findOne({service: 'linkedin'});             // 46\n    if (!config)                                                                                 // 47\n        throw new ServiceConfiguration.ConfigError('Service not configured');                    // 48\n                                                                                                 // 49\n    var responseContent;                                                                         // 50\n    try {                                                                                        // 51\n        // Request an access token                                                               // 52\n        responseContent = HTTP.post(                                                             // 53\n            'https://api.linkedin.com/uas/oauth2/accessToken', {                                 // 54\n                params: {                                                                        // 55\n                    grant_type: 'authorization_code',                                            // 56\n                    code: query.code,                                                            // 57\n                    client_id: config.clientId,                                                  // 58\n                    client_secret: config.secret,                                                // 59\n                    redirect_uri: OAuth._redirectUri('linkedin', config)                         // 60\n                }                                                                                // 61\n            }).content;                                                                          // 62\n    } catch (err) {                                                                              // 63\n        throw new Error('Failed to complete OAuth handshake with LinkedIn. ' + err.message);     // 64\n    }                                                                                            // 65\n                                                                                                 // 66\n    // If 'responseContent' does not parse as JSON, it is an error.                              // 67\n    if (!isJSON(responseContent)) {                                                              // 68\n        throw new Error('Failed to complete OAuth handshake with LinkedIn. ' + responseContent); // 69\n    }                                                                                            // 70\n                                                                                                 // 71\n    // Success! Extract access token and expiration                                              // 72\n    var parsedResponse = JSON.parse(responseContent);                                            // 73\n    var accessToken = parsedResponse.access_token;                                               // 74\n    var expiresIn = parsedResponse.expires_in;                                                   // 75\n                                                                                                 // 76\n    if (!accessToken) {                                                                          // 77\n        throw new Error(\"Failed to complete OAuth handshake with LinkedIn \" +                    // 78\n            \"-- can't find access token in HTTP response. \" + responseContent);                  // 79\n    }                                                                                            // 80\n                                                                                                 // 81\n    return {                                                                                     // 82\n        accessToken: accessToken,                                                                // 83\n        expiresIn: expiresIn                                                                     // 84\n    };                                                                                           // 85\n};                                                                                               // 86\n                                                                                                 // 87\nvar getIdentity = function (accessToken) {                                                       // 88\n    try {                                                                                        // 89\n        return HTTP.get('https://www.linkedin.com/v1/people/~', {                                // 90\n            params: { oauth2_access_token: accessToken, format: 'json'}                          // 91\n        }).data;                                                                                 // 92\n    } catch (err) {                                                                              // 93\n        throw new Error('Failed to fetch identity from LinkedIn. ' + err.message,                // 94\n            {response: err.response});                                                           // 95\n    }                                                                                            // 96\n};                                                                                               // 97\n                                                                                                 // 98\nLinkedIn.retrieveCredential = function (credentialToken, credentialSecret) {                     // 99\n    return OAuth.retrieveCredential(credentialToken, credentialSecret)                           // 100\n};                                                                                               // 101\n                                                                                                 // 102\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jonperl:linkedin\", {\n  LinkedIn: LinkedIn,\n  Linkedin: Linkedin\n});\n\n})();\n","servePath":"/packages/jonperl_linkedin.js"}]