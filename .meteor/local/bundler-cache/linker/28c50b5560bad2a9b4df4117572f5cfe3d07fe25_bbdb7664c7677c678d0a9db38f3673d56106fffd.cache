[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar Email, EmailTest, EmailInternals;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/email/email.js                                                                                    //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar Future = Npm.require('fibers/future');\nvar urlModule = Npm.require('url');\nvar nodemailer = Npm.require('node4mailer');\n\nEmail = {};\nEmailTest = {};\n\nEmailInternals = {\n  NpmModules: {\n    mailcomposer: {\n      version: Npm.require('node4mailer/package.json').version,\n      module: Npm.require('node4mailer/lib/mail-composer')\n    },\n    nodemailer: {\n      version: Npm.require('node4mailer/package.json').version,\n      module: Npm.require('node4mailer')\n    }\n  }\n};\n\nvar MailComposer = EmailInternals.NpmModules.mailcomposer.module;\n\nvar makeTransport = function (mailUrlString) {\n  var mailUrl = urlModule.parse(mailUrlString, true);\n\n  if (mailUrl.protocol !== 'smtp:' && mailUrl.protocol !== 'smtps:') {\n    throw new Error(\"Email protocol in $MAIL_URL (\" +\n                    mailUrlString + \") must be 'smtp' or 'smtps'\");\n  }\n\n  if (mailUrl.protocol === 'smtp:' && mailUrl.port === '465') {\n    Meteor._debug(\"The $MAIL_URL is 'smtp://...:465'.  \" +\n                  \"You probably want 'smtps://' (The 's' enables TLS/SSL) \" +\n                  \"since '465' is typically a secure port.\");\n  }\n\n  // Allow overriding pool setting, but default to true.\n  if (!mailUrl.query) {\n    mailUrl.query = {};\n  }\n\n  if (!mailUrl.query.pool) {\n    mailUrl.query.pool = 'true';\n  }\n\n  var transport = nodemailer.createTransport(\n    urlModule.format(mailUrl));\n\n  transport._syncSendMail = Meteor.wrapAsync(transport.sendMail, transport);\n  return transport;\n};\n\nvar getTransport = function() {\n  // We delay this check until the first call to Email.send, in case someone\n  // set process.env.MAIL_URL in startup code. Then we store in a cache until\n  // process.env.MAIL_URL changes.\n  var url = process.env.MAIL_URL;\n  if (this.cacheKey === undefined || this.cacheKey !== url) {\n    this.cacheKey = url;\n    this.cache = url ? makeTransport(url) : null;\n  }\n  return this.cache;\n}\n\nvar nextDevModeMailId = 0;\nvar output_stream = process.stdout;\n\n// Testing hooks\nEmailTest.overrideOutputStream = function (stream) {\n  nextDevModeMailId = 0;\n  output_stream = stream;\n};\n\nEmailTest.restoreOutputStream = function () {\n  output_stream = process.stdout;\n};\n\nvar devModeSend = function (mail) {\n  var devModeMailId = nextDevModeMailId++;\n\n  var stream = output_stream;\n\n  // This approach does not prevent other writers to stdout from interleaving.\n  stream.write(\"====== BEGIN MAIL #\" + devModeMailId + \" ======\\n\");\n  stream.write(\"(Mail not sent; to enable sending, set the MAIL_URL \" +\n               \"environment variable.)\\n\");\n  var readStream = new MailComposer(mail).compile().createReadStream();\n  readStream.pipe(stream, {end: false});\n  var future = new Future;\n  readStream.on('end', function () {\n    stream.write(\"====== END MAIL #\" + devModeMailId + \" ======\\n\");\n    future.return();\n  });\n  future.wait();\n};\n\nvar smtpSend = function (transport, mail) {\n  transport._syncSendMail(mail);\n};\n\n/**\n * Mock out email sending (eg, during a test.) This is private for now.\n *\n * f receives the arguments to Email.send and should return true to go\n * ahead and send the email (or at least, try subsequent hooks), or\n * false to skip sending.\n */\nvar sendHooks = [];\nEmailTest.hookSend = function (f) {\n  sendHooks.push(f);\n};\n\n/**\n * @summary Send an email. Throws an `Error` on failure to contact mail server\n * or if mail server returns an error. All fields should match\n * [RFC5322](http://tools.ietf.org/html/rfc5322) specification.\n *\n * If the `MAIL_URL` environment variable is set, actually sends the email.\n * Otherwise, prints the contents of the email to standard out.\n *\n * Note that this package is based on **mailcomposer 4**, so make sure to refer to\n * [the documentation](https://github.com/nodemailer/mailcomposer/blob/v4.0.1/README.md)\n * for that version when using the `attachments` or `mailComposer` options.\n *\n * @locus Server\n * @param {Object} options\n * @param {String} [options.from] \"From:\" address (required)\n * @param {String|String[]} options.to,cc,bcc,replyTo\n *   \"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses\n * @param {String} [options.inReplyTo] Message-ID this message is replying to\n * @param {String|String[]} [options.references] Array (or space-separated string) of Message-IDs to refer to\n * @param {String} [options.messageId] Message-ID for this message; otherwise, will be set to a random value\n * @param {String} [options.subject]  \"Subject:\" line\n * @param {String} [options.text|html] Mail body (in plain text and/or HTML)\n * @param {String} [options.watchHtml] Mail body in HTML specific for Apple Watch\n * @param {String} [options.icalEvent] iCalendar event attachment\n * @param {Object} [options.headers] Dictionary of custom headers\n * @param {Object[]} [options.attachments] Array of attachment objects, as\n * described in the [mailcomposer documentation](https://github.com/nodemailer/mailcomposer/blob/v4.0.1/README.md#attachments).\n * @param {MailComposer} [options.mailComposer] A [MailComposer](https://nodemailer.com/extras/mailcomposer/#e-mail-message-fields)\n * object representing the message to be sent.  Overrides all other options.\n * You can create a `MailComposer` object via\n * `new EmailInternals.NpmModules.mailcomposer.module`.\n */\nEmail.send = function (options) {\n  for (var i = 0; i < sendHooks.length; i++)\n    if (! sendHooks[i](options))\n      return;\n\n  if (options.mailComposer) {\n    options = options.mailComposer.mail;\n  }\n\n  var transport = getTransport();\n  if (transport) {\n    smtpSend(transport, options);\n  } else {\n    devModeSend(options);\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"email\", {\n  Email: Email,\n  EmailInternals: EmailInternals,\n  EmailTest: EmailTest\n});\n\n})();\n","servePath":"/packages/email.js"}]