[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Google;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"google-oauth\":{\"google_server.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/google-oauth/google_server.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nvar Google = require(\"./namespace.js\");\n\nvar Accounts = require(\"meteor/accounts-base\").Accounts;\n\nvar hasOwn = Object.prototype.hasOwnProperty; // https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\n\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name', 'family_name', 'picture', 'locale', 'timezone', 'gender'];\n\nfunction getServiceDataFromTokens(tokens) {\n  var accessToken = tokens.accessToken;\n  var idToken = tokens.idToken;\n  var scopes = getScopes(accessToken);\n  var identity = getIdentity(accessToken);\n  var serviceData = {\n    accessToken: accessToken,\n    idToken: idToken,\n    scope: scopes\n  };\n\n  if (hasOwn.call(tokens, \"expiresIn\")) {\n    serviceData.expiresAt = Date.now() + 1000 * parseInt(tokens.expiresIn, 10);\n  }\n\n  var fields = Object.create(null);\n  Google.whitelistedFields.forEach(function (name) {\n    if (hasOwn.call(identity, name)) {\n      fields[name] = identity[name];\n    }\n  });\n  Object.assign(serviceData, fields); // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n\n  if (tokens.refreshToken) {\n    serviceData.refreshToken = tokens.refreshToken;\n  }\n\n  return {\n    serviceData: serviceData,\n    options: {\n      profile: {\n        name: identity.name\n      }\n    }\n  };\n}\n\nAccounts.registerLoginHandler(function (request) {\n  if (request.googleSignIn !== true) {\n    return;\n  }\n\n  const tokens = {\n    accessToken: request.accessToken,\n    refreshToken: request.refreshToken,\n    idToken: request.idToken\n  };\n\n  if (request.serverAuthCode) {\n    Object.assign(tokens, getTokens({\n      code: request.serverAuthCode\n    }));\n  }\n\n  const result = getServiceDataFromTokens(tokens);\n  return Accounts.updateOrCreateUserFromExternalService(\"google\", (0, _objectSpread2.default)({\n    id: request.userId,\n    idToken: request.idToken,\n    accessToken: request.accessToken,\n    email: request.email,\n    picture: request.imageUrl\n  }, result.serviceData), result.options);\n});\n\nfunction getServiceData(query) {\n  return getServiceDataFromTokens(getTokens(query));\n}\n\nOAuth.registerService('google', 2, null, getServiceData); // returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request\n\nvar getTokens = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({\n    service: 'google'\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n  var response;\n\n  try {\n    response = HTTP.post(\"https://accounts.google.com/o/oauth2/token\", {\n      params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: OAuth.openSecret(config.secret),\n        redirect_uri: OAuth._redirectUri('google', config),\n        grant_type: 'authorization_code'\n      }\n    });\n  } catch (err) {\n    throw Object.assign(new Error(\"Failed to complete OAuth handshake with Google. \" + err.message), {\n      response: err.response\n    });\n  }\n\n  if (response.data.error) {\n    // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with Google. \" + response.data.error);\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in,\n      idToken: response.data.id_token\n    };\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\"https://www.googleapis.com/oauth2/v1/userinfo\", {\n      params: {\n        access_token: accessToken\n      }\n    }).data;\n  } catch (err) {\n    throw Object.assign(new Error(\"Failed to fetch identity from Google. \" + err.message), {\n      response: err.response\n    });\n  }\n};\n\nvar getScopes = function (accessToken) {\n  try {\n    return HTTP.get(\"https://www.googleapis.com/oauth2/v1/tokeninfo\", {\n      params: {\n        access_token: accessToken\n      }\n    }).data.scope.split(' ');\n  } catch (err) {\n    throw Object.assign(new Error(\"Failed to fetch tokeninfo from Google. \" + err.message), {\n      response: err.response\n    });\n  }\n};\n\nGoogle.retrieveCredential = function (credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"namespace.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/google-oauth/namespace.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// The module.exports object of this module becomes the Google namespace\n// for other modules in this package.\nGoogle = module.exports; // So that api.export finds the \"Google\" property.\n\nGoogle.Google = Google;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/google-oauth/google_server.js\");\nvar exports = require(\"/node_modules/meteor/google-oauth/namespace.js\");\n\n/* Exports */\nPackage._define(\"google-oauth\", exports, {\n  Google: Google\n});\n\n})();\n","servePath":"/packages/google-oauth.js","sourceMap":{"version":3,"sources":["packages/google-oauth/google_server.js","packages/google-oauth/namespace.js"],"names":["Google","require","Accounts","hasOwn","Object","prototype","hasOwnProperty","whitelistedFields","getServiceDataFromTokens","tokens","accessToken","idToken","scopes","getScopes","identity","getIdentity","serviceData","scope","call","expiresAt","Date","now","parseInt","expiresIn","fields","create","forEach","name","assign","refreshToken","options","profile","registerLoginHandler","request","googleSignIn","serverAuthCode","getTokens","code","result","updateOrCreateUserFromExternalService","id","userId","email","picture","imageUrl","getServiceData","query","OAuth","registerService","config","ServiceConfiguration","configurations","findOne","service","ConfigError","response","HTTP","post","params","client_id","clientId","client_secret","openSecret","secret","redirect_uri","_redirectUri","grant_type","err","Error","message","data","error","access_token","refresh_token","expires_in","id_token","get","split","retrieveCredential","credentialToken","credentialSecret","module","exports"],"mappings":"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","file":"/packages/google-oauth.js","sourcesContent":["var Google = require(\"./namespace.js\");\nvar Accounts = require(\"meteor/accounts-base\").Accounts;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n// https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name',\n                   'family_name', 'picture', 'locale', 'timezone', 'gender'];\n\nfunction getServiceDataFromTokens(tokens) {\n  var accessToken = tokens.accessToken;\n  var idToken = tokens.idToken;\n  var scopes = getScopes(accessToken);\n  var identity = getIdentity(accessToken);\n  var serviceData = {\n    accessToken: accessToken,\n    idToken: idToken,\n    scope: scopes\n  };\n\n  if (hasOwn.call(tokens, \"expiresIn\")) {\n    serviceData.expiresAt =\n      Date.now() + 1000 * parseInt(tokens.expiresIn, 10);\n  }\n\n  var fields = Object.create(null);\n  Google.whitelistedFields.forEach(function (name) {\n    if (hasOwn.call(identity, name)) {\n      fields[name] = identity[name];\n    }\n  });\n\n  Object.assign(serviceData, fields);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (tokens.refreshToken) {\n    serviceData.refreshToken = tokens.refreshToken;\n  }\n\n  return {\n    serviceData: serviceData,\n    options: {\n      profile: {\n        name: identity.name\n      }\n    }\n  };\n}\n\nAccounts.registerLoginHandler(function (request) {\n  if (request.googleSignIn !== true) {\n    return;\n  }\n\n  const tokens = {\n    accessToken: request.accessToken,\n    refreshToken: request.refreshToken,\n    idToken: request.idToken,\n  };\n\n  if (request.serverAuthCode) {\n    Object.assign(tokens, getTokens({\n      code: request.serverAuthCode\n    }));\n  }\n\n  const result = getServiceDataFromTokens(tokens);\n\n  return Accounts.updateOrCreateUserFromExternalService(\"google\", {\n    id: request.userId,\n    idToken: request.idToken,\n    accessToken: request.accessToken,\n    email: request.email,\n    picture: request.imageUrl,\n    ...result.serviceData,\n  }, result.options);\n});\n\nfunction getServiceData(query) {\n  return getServiceDataFromTokens(getTokens(query));\n}\n\nOAuth.registerService('google', 2, null, getServiceData);\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request\nvar getTokens = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://accounts.google.com/o/oauth2/token\", {params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: OAuth.openSecret(config.secret),\n        redirect_uri: OAuth._redirectUri('google', config),\n        grant_type: 'authorization_code'\n      }});\n  } catch (err) {\n    throw Object.assign(\n      new Error(\"Failed to complete OAuth handshake with Google. \" + err.message),\n      { response: err.response }\n    );\n  }\n\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with Google. \" + response.data.error);\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in,\n      idToken: response.data.id_token\n    };\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://www.googleapis.com/oauth2/v1/userinfo\",\n      {params: {access_token: accessToken}}).data;\n  } catch (err) {\n    throw Object.assign(\n      new Error(\"Failed to fetch identity from Google. \" + err.message),\n      { response: err.response }\n    );\n  }\n};\n\nvar getScopes = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://www.googleapis.com/oauth2/v1/tokeninfo\",\n      {params: {access_token: accessToken}}).data.scope.split(' ');\n  } catch (err) {\n    throw Object.assign(\n      new Error(\"Failed to fetch tokeninfo from Google. \" + err.message),\n      { response: err.response }\n    );\n  }\n};\n\nGoogle.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n","// The module.exports object of this module becomes the Google namespace\n// for other modules in this package.\nGoogle = module.exports;\n\n// So that api.export finds the \"Google\" property.\nGoogle.Google = Google;\n"]}}]