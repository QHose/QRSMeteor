[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar RateLimiter = Package['rate-limit'].RateLimiter;\n\n/* Package-scope variables */\nvar DDPRateLimiter;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/ddp-rate-limiter/ddp-rate-limiter.js                                   //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\n// Rate Limiter built into DDP with a default error message. See README or\n// online documentation for more details.\nDDPRateLimiter = {};\n\nvar errorMessage = function (rateLimitResult) {\n  return \"Error, too many requests. Please slow down. You must wait \" +\n    Math.ceil(rateLimitResult.timeToReset / 1000) + \" seconds before \" +\n    \"trying again.\";\n};\nvar rateLimiter = new RateLimiter();\n\nDDPRateLimiter.getErrorMessage = function (rateLimitResult) {\n  if (typeof errorMessage === 'function')\n    return errorMessage(rateLimitResult);\n  else\n    return errorMessage;\n};\n\n/**\n * @summary Set error message text when method or subscription rate limit\n * exceeded.\n * @param {string|function} message Functions are passed in an object with a\n * `timeToReset` field that specifies the number of milliseconds until the next\n * method or subscription is allowed to run. The function must return a string\n * of the error message.\n * @locus Server\n */\nDDPRateLimiter.setErrorMessage = function (message) {\n  errorMessage = message;\n};\n\n/**\n * @summary\n * Add a rule that matches against a stream of events describing method or\n * subscription attempts. Each event is an object with the following\n * properties:\n *\n * - `type`: Either \"method\" or \"subscription\"\n * - `name`: The name of the method or subscription being called\n * - `userId`: The user ID attempting the method or subscription\n * - `connectionId`: A string representing the user's DDP connection\n * - `clientAddress`: The IP address of the user\n *\n * Returns unique `ruleId` that can be passed to `removeRule`.\n *\n * @param {Object} matcher\n *   Matchers specify which events are counted towards a rate limit. A matcher\n *   is an object that has a subset of the same properties as the event objects\n *   described above. Each value in a matcher object is one of the following:\n *\n *   - a string: for the event to satisfy the matcher, this value must be equal\n *   to the value of the same property in the event object\n *\n *   - a function: for the event to satisfy the matcher, the function must\n *   evaluate to true when passed the value of the same property\n *   in the event object\n *\n * Here's how events are counted: Each event that satisfies the matcher's\n * filter is mapped to a bucket. Buckets are uniquely determined by the\n * event object's values for all properties present in both the matcher and\n * event objects.\n *\n * @param {number} numRequests  number of requests allowed per time interval.\n * Default = 10.\n * @param {number} timeInterval time interval in milliseconds after which\n * rule's counters are reset. Default = 1000.\n * @param {function} callback function to be called after a rule is executed.\n * @locus Server\n */\nDDPRateLimiter.addRule = function (matcher, numRequests, timeInterval, callback) {\n  return rateLimiter.addRule(matcher, numRequests, timeInterval, callback);\n};\n\nDDPRateLimiter.printRules = function () {\n  return rateLimiter.rules;\n};\n\n/**\n * @summary Removes the specified rule from the rate limiter. If rule had\n * hit a rate limit, that limit is removed as well.\n * @param  {string} id 'ruleId' returned from `addRule`\n * @return {boolean}    True if a rule was removed.\n * @locus Server\n */\nDDPRateLimiter.removeRule = function (id) {\n  return rateLimiter.removeRule(id);\n};\n\n// This is accessed inside livedata_server.js, but shouldn't be called by any\n// user.\nDDPRateLimiter._increment = function (input) {\n  rateLimiter.increment(input);\n};\n\nDDPRateLimiter._check = function (input) {\n  return rateLimiter.check(input);\n};\n\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"ddp-rate-limiter\", {\n  DDPRateLimiter: DDPRateLimiter\n});\n\n})();\n","servePath":"/packages/ddp-rate-limiter.js"}]