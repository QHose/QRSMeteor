[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Retry;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"retry\":{\"retry.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// packages/retry/retry.js                                                   //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nmodule.export({\n  Retry: () => Retry\n});\n\nclass Retry {\n  constructor({\n    baseTimeout = 1000,\n    exponent = 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout = 5 * 60 * 1000,\n    minTimeout = 10,\n    minCount = 2,\n    fuzz = 0.5\n  } = {}) {\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  } // Reset a pending retry, if any.\n\n\n  clear() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n\n    this.retryTimer = null;\n  } // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n\n\n  _timeout(count) {\n    if (count < this.minCount) {\n      return this.minTimeout;\n    } // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n\n\n    var timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)) * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));\n    return timeout;\n  } // Call `fn` after a delay, based on the `count` of which retry this is.\n\n\n  retryLater(count, fn) {\n    var timeout = this._timeout(count);\n\n    if (this.retryTimer) clearTimeout(this.retryTimer);\n    this.retryTimer = Meteor.setTimeout(fn, timeout);\n    return timeout;\n  }\n\n}\n///////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/retry/retry.js\");\n\n/* Exports */\nPackage._define(\"retry\", exports, {\n  Retry: Retry\n});\n\n})();\n","servePath":"/packages/retry.js","sourceMap":{"version":3,"sources":["packages/retry/retry.js"],"names":["module","export","Retry","constructor","baseTimeout","exponent","maxTimeout","minTimeout","minCount","fuzz","retryTimer","clear","clearTimeout","_timeout","count","timeout","Math","min","pow","Random","fraction","retryLater","fn","Meteor","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM,MAAIA;AAAX,CAAd;;AAUO,MAAMA,KAAN,CAAY;AACjBC,cAAY;AACVC,kBAAc,IADJ;AAEVC,eAAW,GAFD;AAGV;AACA;AACAC,iBAAa,IAAI,EAAJ,GAAS,IALZ;AAMVC,iBAAa,EANH;AAOVC,eAAW,CAPD;AAQVC,WAAO;AARG,MASR,EATJ,EASQ;AACN,SAAKL,WAAL,GAAmBA,WAAnB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD,GAlBgB,CAoBjB;;;AACAC,UAAQ;AACN,QAAI,KAAKD,UAAT,EAAqB;AACnBE,mBAAa,KAAKF,UAAlB;AACD;;AACD,SAAKA,UAAL,GAAkB,IAAlB;AACD,GA1BgB,CA4BjB;AACA;;;AACAG,WAASC,KAAT,EAAgB;AACd,QAAIA,QAAQ,KAAKN,QAAjB,EAA2B;AACzB,aAAO,KAAKD,UAAZ;AACD,KAHa,CAKd;AACA;;;AACA,QAAIQ,UAAUC,KAAKC,GAAL,CACZ,KAAKX,UADO,EAEZ,KAAKF,WAAL,GAAmBY,KAAKE,GAAL,CAAS,KAAKb,QAAd,EAAwBS,KAAxB,CAFP,KAIZK,OAAOC,QAAP,KAAoB,KAAKX,IAAzB,IAAiC,IAAI,KAAKA,IAAL,GAAY,CAAjD,CAJY,CAAd;AAOA,WAAOM,OAAP;AACD,GA7CgB,CA+CjB;;;AACAM,aAAWP,KAAX,EAAkBQ,EAAlB,EAAsB;AACpB,QAAIP,UAAU,KAAKF,QAAL,CAAcC,KAAd,CAAd;;AACA,QAAI,KAAKJ,UAAT,EACEE,aAAa,KAAKF,UAAlB;AACF,SAAKA,UAAL,GAAkBa,OAAOC,UAAP,CAAkBF,EAAlB,EAAsBP,OAAtB,CAAlB;AACA,WAAOA,OAAP;AACD;;AAtDgB,C","file":"/packages/retry.js","sourcesContent":["// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n\nexport class Retry {\n  constructor({\n    baseTimeout = 1000,\n    exponent = 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout = 5 * 60 * 1000,\n    minTimeout = 10,\n    minCount = 2,\n    fuzz = 0.5,\n  } = {}) {\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  }\n\n  // Reset a pending retry, if any.\n  clear() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n    this.retryTimer = null;\n  }\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout(count) {\n    if (count < this.minCount) {\n      return this.minTimeout;\n    }\n\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    var timeout = Math.min(\n      this.maxTimeout,\n      this.baseTimeout * Math.pow(this.exponent, count)\n    ) * (\n      Random.fraction() * this.fuzz + (1 - this.fuzz / 2)\n    );\n\n    return timeout;\n  }\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater(count, fn) {\n    var timeout = this._timeout(count);\n    if (this.retryTimer)\n      clearTimeout(this.retryTimer);\n    this.retryTimer = Meteor.setTimeout(fn, timeout);\n    return timeout;\n  }\n}\n"]}}]