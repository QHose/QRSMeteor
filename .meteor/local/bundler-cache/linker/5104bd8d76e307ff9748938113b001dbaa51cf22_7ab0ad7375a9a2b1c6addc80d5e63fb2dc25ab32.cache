[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/amplify/packages/amplify.js                                                                 //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/amplify/amplify.js                                                                   //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\n/*!                                                                                              // 1\n * Amplify 1.1.2                                                                                 // 2\n *                                                                                               // 3\n * Copyright 2011 - 2013 appendTo LLC. (http://appendto.com/team)                                // 4\n * Dual licensed under the MIT or GPL licenses.                                                  // 5\n * http://appendto.com/open-source-licenses                                                      // 6\n *                                                                                               // 7\n * http://amplifyjs.com                                                                          // 8\n */                                                                                              // 9\n(function( global, undefined ) {                                                                 // 10\n                                                                                                 // 11\nvar slice = [].slice,                                                                            // 12\n\tsubscriptions = {};                                                                             // 13\n                                                                                                 // 14\nvar amplify = global.amplify = {                                                                 // 15\n\tpublish: function( topic ) {                                                                    // 16\n\t\tif ( typeof topic !== \"string\" ) {                                                             // 17\n\t\t\tthrow new Error( \"You must provide a valid topic to publish.\" );                              // 18\n\t\t}                                                                                              // 19\n                                                                                                 // 20\n\t\tvar args = slice.call( arguments, 1 ),                                                         // 21\n\t\t\ttopicSubscriptions,                                                                           // 22\n\t\t\tsubscription,                                                                                 // 23\n\t\t\tlength,                                                                                       // 24\n\t\t\ti = 0,                                                                                        // 25\n\t\t\tret;                                                                                          // 26\n                                                                                                 // 27\n\t\tif ( !subscriptions[ topic ] ) {                                                               // 28\n\t\t\treturn true;                                                                                  // 29\n\t\t}                                                                                              // 30\n                                                                                                 // 31\n\t\ttopicSubscriptions = subscriptions[ topic ].slice();                                           // 32\n\t\tfor ( length = topicSubscriptions.length; i < length; i++ ) {                                  // 33\n\t\t\tsubscription = topicSubscriptions[ i ];                                                       // 34\n\t\t\tret = subscription.callback.apply( subscription.context, args );                              // 35\n\t\t\tif ( ret === false ) {                                                                        // 36\n\t\t\t\tbreak;                                                                                       // 37\n\t\t\t}                                                                                             // 38\n\t\t}                                                                                              // 39\n\t\treturn ret !== false;                                                                          // 40\n\t},                                                                                              // 41\n                                                                                                 // 42\n\tsubscribe: function( topic, context, callback, priority ) {                                     // 43\n\t\tif ( typeof topic !== \"string\" ) {                                                             // 44\n\t\t\tthrow new Error( \"You must provide a valid topic to create a subscription.\" );                // 45\n\t\t}                                                                                              // 46\n                                                                                                 // 47\n\t\tif ( arguments.length === 3 && typeof callback === \"number\" ) {                                // 48\n\t\t\tpriority = callback;                                                                          // 49\n\t\t\tcallback = context;                                                                           // 50\n\t\t\tcontext = null;                                                                               // 51\n\t\t}                                                                                              // 52\n\t\tif ( arguments.length === 2 ) {                                                                // 53\n\t\t\tcallback = context;                                                                           // 54\n\t\t\tcontext = null;                                                                               // 55\n\t\t}                                                                                              // 56\n\t\tpriority = priority || 10;                                                                     // 57\n                                                                                                 // 58\n\t\tvar topicIndex = 0,                                                                            // 59\n\t\t\ttopics = topic.split( /\\s/ ),                                                                 // 60\n\t\t\ttopicLength = topics.length,                                                                  // 61\n\t\t\tadded;                                                                                        // 62\n\t\tfor ( ; topicIndex < topicLength; topicIndex++ ) {                                             // 63\n\t\t\ttopic = topics[ topicIndex ];                                                                 // 64\n\t\t\tadded = false;                                                                                // 65\n\t\t\tif ( !subscriptions[ topic ] ) {                                                              // 66\n\t\t\t\tsubscriptions[ topic ] = [];                                                                 // 67\n\t\t\t}                                                                                             // 68\n                                                                                                 // 69\n\t\t\tvar i = subscriptions[ topic ].length - 1,                                                    // 70\n\t\t\t\tsubscriptionInfo = {                                                                         // 71\n\t\t\t\t\tcallback: callback,                                                                         // 72\n\t\t\t\t\tcontext: context,                                                                           // 73\n\t\t\t\t\tpriority: priority                                                                          // 74\n\t\t\t\t};                                                                                           // 75\n                                                                                                 // 76\n\t\t\tfor ( ; i >= 0; i-- ) {                                                                       // 77\n\t\t\t\tif ( subscriptions[ topic ][ i ].priority <= priority ) {                                    // 78\n\t\t\t\t\tsubscriptions[ topic ].splice( i + 1, 0, subscriptionInfo );                                // 79\n\t\t\t\t\tadded = true;                                                                               // 80\n\t\t\t\t\tbreak;                                                                                      // 81\n\t\t\t\t}                                                                                            // 82\n\t\t\t}                                                                                             // 83\n                                                                                                 // 84\n\t\t\tif ( !added ) {                                                                               // 85\n\t\t\t\tsubscriptions[ topic ].unshift( subscriptionInfo );                                          // 86\n\t\t\t}                                                                                             // 87\n\t\t}                                                                                              // 88\n                                                                                                 // 89\n\t\treturn callback;                                                                               // 90\n\t},                                                                                              // 91\n                                                                                                 // 92\n\tunsubscribe: function( topic, context, callback ) {                                             // 93\n\t\tif ( typeof topic !== \"string\" ) {                                                             // 94\n\t\t\tthrow new Error( \"You must provide a valid topic to remove a subscription.\" );                // 95\n\t\t}                                                                                              // 96\n                                                                                                 // 97\n\t\tif ( arguments.length === 2 ) {                                                                // 98\n\t\t\tcallback = context;                                                                           // 99\n\t\t\tcontext = null;                                                                               // 100\n\t\t}                                                                                              // 101\n                                                                                                 // 102\n\t\tif ( !subscriptions[ topic ] ) {                                                               // 103\n\t\t\treturn;                                                                                       // 104\n\t\t}                                                                                              // 105\n                                                                                                 // 106\n\t\tvar length = subscriptions[ topic ].length,                                                    // 107\n\t\t\ti = 0;                                                                                        // 108\n                                                                                                 // 109\n\t\tfor ( ; i < length; i++ ) {                                                                    // 110\n\t\t\tif ( subscriptions[ topic ][ i ].callback === callback ) {                                    // 111\n\t\t\t\tif ( !context || subscriptions[ topic ][ i ].context === context ) {                         // 112\n\t\t\t\t\tsubscriptions[ topic ].splice( i, 1 );                                                      // 113\n\t\t\t\t\t                                                                                            // 114\n\t\t\t\t\t// Adjust counter and length for removed item                                               // 115\n\t\t\t\t\ti--;                                                                                        // 116\n\t\t\t\t\tlength--;                                                                                   // 117\n\t\t\t\t}                                                                                            // 118\n\t\t\t}                                                                                             // 119\n\t\t}                                                                                              // 120\n\t}                                                                                               // 121\n};                                                                                               // 122\n                                                                                                 // 123\n}( this ) );                                                                                     // 124\n                                                                                                 // 125\n(function( amplify, undefined ) {                                                                // 126\n                                                                                                 // 127\nvar store = amplify.store = function( key, value, options ) {                                    // 128\n\tvar type = store.type;                                                                          // 129\n\tif ( options && options.type && options.type in store.types ) {                                 // 130\n\t\ttype = options.type;                                                                           // 131\n\t}                                                                                               // 132\n\treturn store.types[ type ]( key, value, options || {} );                                        // 133\n};                                                                                               // 134\n                                                                                                 // 135\nstore.types = {};                                                                                // 136\nstore.type = null;                                                                               // 137\nstore.addType = function( type, storage ) {                                                      // 138\n\tif ( !store.type ) {                                                                            // 139\n\t\tstore.type = type;                                                                             // 140\n\t}                                                                                               // 141\n                                                                                                 // 142\n\tstore.types[ type ] = storage;                                                                  // 143\n\tstore[ type ] = function( key, value, options ) {                                               // 144\n\t\toptions = options || {};                                                                       // 145\n\t\toptions.type = type;                                                                           // 146\n\t\treturn store( key, value, options );                                                           // 147\n\t};                                                                                              // 148\n};                                                                                               // 149\nstore.error = function() {                                                                       // 150\n\treturn \"amplify.store quota exceeded\";                                                          // 151\n};                                                                                               // 152\n                                                                                                 // 153\nvar rprefix = /^__amplify__/;                                                                    // 154\nfunction createFromStorageInterface( storageType, storage ) {                                    // 155\n\tstore.addType( storageType, function( key, value, options ) {                                   // 156\n\t\tvar storedValue, parsed, i, remove,                                                            // 157\n\t\t\tret = value,                                                                                  // 158\n\t\t\tnow = (new Date()).getTime();                                                                 // 159\n                                                                                                 // 160\n\t\tif ( !key ) {                                                                                  // 161\n\t\t\tret = {};                                                                                     // 162\n\t\t\tremove = [];                                                                                  // 163\n\t\t\ti = 0;                                                                                        // 164\n\t\t\ttry {                                                                                         // 165\n\t\t\t\t// accessing the length property works around a localStorage bug                             // 166\n\t\t\t\t// in Firefox 4.0 where the keys don't update cross-page                                     // 167\n\t\t\t\t// we assign to key just to avoid Closure Compiler from removing                             // 168\n\t\t\t\t// the access as \"useless code\"                                                              // 169\n\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=662511                                       // 170\n\t\t\t\tkey = storage.length;                                                                        // 171\n                                                                                                 // 172\n\t\t\t\twhile ( key = storage.key( i++ ) ) {                                                         // 173\n\t\t\t\t\tif ( rprefix.test( key ) ) {                                                                // 174\n\t\t\t\t\t\tparsed = JSON.parse( storage.getItem( key ) );                                             // 175\n\t\t\t\t\t\tif ( parsed.expires && parsed.expires <= now ) {                                           // 176\n\t\t\t\t\t\t\tremove.push( key );                                                                       // 177\n\t\t\t\t\t\t} else {                                                                                   // 178\n\t\t\t\t\t\t\tret[ key.replace( rprefix, \"\" ) ] = parsed.data;                                          // 179\n\t\t\t\t\t\t}                                                                                          // 180\n\t\t\t\t\t}                                                                                           // 181\n\t\t\t\t}                                                                                            // 182\n\t\t\t\twhile ( key = remove.pop() ) {                                                               // 183\n\t\t\t\t\tstorage.removeItem( key );                                                                  // 184\n\t\t\t\t}                                                                                            // 185\n\t\t\t} catch ( error ) {}                                                                          // 186\n\t\t\treturn ret;                                                                                   // 187\n\t\t}                                                                                              // 188\n                                                                                                 // 189\n\t\t// protect against name collisions with direct storage                                         // 190\n\t\tkey = \"__amplify__\" + key;                                                                     // 191\n                                                                                                 // 192\n\t\tif ( value === undefined ) {                                                                   // 193\n\t\t\tstoredValue = storage.getItem( key );                                                         // 194\n\t\t\tparsed = storedValue ? JSON.parse( storedValue ) : { expires: -1 };                           // 195\n\t\t\tif ( parsed.expires && parsed.expires <= now ) {                                              // 196\n\t\t\t\tstorage.removeItem( key );                                                                   // 197\n\t\t\t} else {                                                                                      // 198\n\t\t\t\treturn parsed.data;                                                                          // 199\n\t\t\t}                                                                                             // 200\n\t\t} else {                                                                                       // 201\n\t\t\tif ( value === null ) {                                                                       // 202\n\t\t\t\tstorage.removeItem( key );                                                                   // 203\n\t\t\t} else {                                                                                      // 204\n\t\t\t\tparsed = JSON.stringify({                                                                    // 205\n\t\t\t\t\tdata: value,                                                                                // 206\n\t\t\t\t\texpires: options.expires ? now + options.expires : null                                     // 207\n\t\t\t\t});                                                                                          // 208\n\t\t\t\ttry {                                                                                        // 209\n\t\t\t\t\tstorage.setItem( key, parsed );                                                             // 210\n\t\t\t\t// quota exceeded                                                                            // 211\n\t\t\t\t} catch( error ) {                                                                           // 212\n\t\t\t\t\t// expire old data and try again                                                            // 213\n\t\t\t\t\tstore[ storageType ]();                                                                     // 214\n\t\t\t\t\ttry {                                                                                       // 215\n\t\t\t\t\t\tstorage.setItem( key, parsed );                                                            // 216\n\t\t\t\t\t} catch( error ) {                                                                          // 217\n\t\t\t\t\t\tthrow store.error();                                                                       // 218\n\t\t\t\t\t}                                                                                           // 219\n\t\t\t\t}                                                                                            // 220\n\t\t\t}                                                                                             // 221\n\t\t}                                                                                              // 222\n                                                                                                 // 223\n\t\treturn ret;                                                                                    // 224\n\t});                                                                                             // 225\n}                                                                                                // 226\n                                                                                                 // 227\n// localStorage + sessionStorage                                                                 // 228\n// IE 8+, Firefox 3.5+, Safari 4+, Chrome 4+, Opera 10.5+, iPhone 2+, Android 2+                 // 229\nfor ( var webStorageType in { localStorage: 1, sessionStorage: 1 } ) {                           // 230\n\t// try/catch for file protocol in Firefox and Private Browsing in Safari 5                      // 231\n\ttry {                                                                                           // 232\n\t\t// Safari 5 in Private Browsing mode exposes localStorage                                      // 233\n\t\t// but doesn't allow storing data, so we attempt to store and remove an item.                  // 234\n\t\t// This will unfortunately give us a false negative if we're at the limit.                     // 235\n\t\twindow[ webStorageType ].setItem( \"__amplify__\", \"x\" );                                        // 236\n\t\twindow[ webStorageType ].removeItem( \"__amplify__\" );                                          // 237\n\t\tcreateFromStorageInterface( webStorageType, window[ webStorageType ] );                        // 238\n\t} catch( e ) {}                                                                                 // 239\n}                                                                                                // 240\n                                                                                                 // 241\n// globalStorage                                                                                 // 242\n// non-standard: Firefox 2+                                                                      // 243\n// https://developer.mozilla.org/en/dom/storage#globalStorage                                    // 244\nif ( !store.types.localStorage && window.globalStorage ) {                                       // 245\n\t// try/catch for file protocol in Firefox                                                       // 246\n\ttry {                                                                                           // 247\n\t\tcreateFromStorageInterface( \"globalStorage\",                                                   // 248\n\t\t\twindow.globalStorage[ window.location.hostname ] );                                           // 249\n\t\t// Firefox 2.0 and 3.0 have sessionStorage and globalStorage                                   // 250\n\t\t// make sure we default to globalStorage                                                       // 251\n\t\t// but don't default to globalStorage in 3.5+ which also has localStorage                      // 252\n\t\tif ( store.type === \"sessionStorage\" ) {                                                       // 253\n\t\t\tstore.type = \"globalStorage\";                                                                 // 254\n\t\t}                                                                                              // 255\n\t} catch( e ) {}                                                                                 // 256\n}                                                                                                // 257\n                                                                                                 // 258\n// userData                                                                                      // 259\n// non-standard: IE 5+                                                                           // 260\n// http://msdn.microsoft.com/en-us/library/ms531424(v=vs.85).aspx                                // 261\n(function() {                                                                                    // 262\n\t// IE 9 has quirks in userData that are a huge pain                                             // 263\n\t// rather than finding a way to detect these quirks                                             // 264\n\t// we just don't register userData if we have localStorage                                      // 265\n\tif ( store.types.localStorage ) {                                                               // 266\n\t\treturn;                                                                                        // 267\n\t}                                                                                               // 268\n                                                                                                 // 269\n\t// append to html instead of body so we can do this from the head                               // 270\n\tvar div = document.createElement( \"div\" ),                                                      // 271\n\t\tattrKey = \"amplify\";                                                                           // 272\n\tdiv.style.display = \"none\";                                                                     // 273\n\tdocument.getElementsByTagName( \"head\" )[ 0 ].appendChild( div );                                // 274\n                                                                                                 // 275\n\t// we can't feature detect userData support                                                     // 276\n\t// so just try and see if it fails                                                              // 277\n\t// surprisingly, even just adding the behavior isn't enough for a failure                       // 278\n\t// so we need to load the data as well                                                          // 279\n\ttry {                                                                                           // 280\n\t\tdiv.addBehavior( \"#default#userdata\" );                                                        // 281\n\t\tdiv.load( attrKey );                                                                           // 282\n\t} catch( e ) {                                                                                  // 283\n\t\tdiv.parentNode.removeChild( div );                                                             // 284\n\t\treturn;                                                                                        // 285\n\t}                                                                                               // 286\n                                                                                                 // 287\n\tstore.addType( \"userData\", function( key, value, options ) {                                    // 288\n\t\tdiv.load( attrKey );                                                                           // 289\n\t\tvar attr, parsed, prevValue, i, remove,                                                        // 290\n\t\t\tret = value,                                                                                  // 291\n\t\t\tnow = (new Date()).getTime();                                                                 // 292\n                                                                                                 // 293\n\t\tif ( !key ) {                                                                                  // 294\n\t\t\tret = {};                                                                                     // 295\n\t\t\tremove = [];                                                                                  // 296\n\t\t\ti = 0;                                                                                        // 297\n\t\t\twhile ( attr = div.XMLDocument.documentElement.attributes[ i++ ] ) {                          // 298\n\t\t\t\tparsed = JSON.parse( attr.value );                                                           // 299\n\t\t\t\tif ( parsed.expires && parsed.expires <= now ) {                                             // 300\n\t\t\t\t\tremove.push( attr.name );                                                                   // 301\n\t\t\t\t} else {                                                                                     // 302\n\t\t\t\t\tret[ attr.name ] = parsed.data;                                                             // 303\n\t\t\t\t}                                                                                            // 304\n\t\t\t}                                                                                             // 305\n\t\t\twhile ( key = remove.pop() ) {                                                                // 306\n\t\t\t\tdiv.removeAttribute( key );                                                                  // 307\n\t\t\t}                                                                                             // 308\n\t\t\tdiv.save( attrKey );                                                                          // 309\n\t\t\treturn ret;                                                                                   // 310\n\t\t}                                                                                              // 311\n                                                                                                 // 312\n\t\t// convert invalid characters to dashes                                                        // 313\n\t\t// http://www.w3.org/TR/REC-xml/#NT-Name                                                       // 314\n\t\t// simplified to assume the starting character is valid                                        // 315\n\t\t// also removed colon as it is invalid in HTML attribute names                                 // 316\n\t\tkey = key.replace( /[^\\-._0-9A-Za-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c-\\u200d\\u203f\\u2040\\u2070-\\u218f]/g, \"-\" );\n\t\t// adjust invalid starting character to deal with our simplified sanitization                  // 318\n\t\tkey = key.replace( /^-/, \"_-\" );                                                               // 319\n                                                                                                 // 320\n\t\tif ( value === undefined ) {                                                                   // 321\n\t\t\tattr = div.getAttribute( key );                                                               // 322\n\t\t\tparsed = attr ? JSON.parse( attr ) : { expires: -1 };                                         // 323\n\t\t\tif ( parsed.expires && parsed.expires <= now ) {                                              // 324\n\t\t\t\tdiv.removeAttribute( key );                                                                  // 325\n\t\t\t} else {                                                                                      // 326\n\t\t\t\treturn parsed.data;                                                                          // 327\n\t\t\t}                                                                                             // 328\n\t\t} else {                                                                                       // 329\n\t\t\tif ( value === null ) {                                                                       // 330\n\t\t\t\tdiv.removeAttribute( key );                                                                  // 331\n\t\t\t} else {                                                                                      // 332\n\t\t\t\t// we need to get the previous value in case we need to rollback                             // 333\n\t\t\t\tprevValue = div.getAttribute( key );                                                         // 334\n\t\t\t\tparsed = JSON.stringify({                                                                    // 335\n\t\t\t\t\tdata: value,                                                                                // 336\n\t\t\t\t\texpires: (options.expires ? (now + options.expires) : null)                                 // 337\n\t\t\t\t});                                                                                          // 338\n\t\t\t\tdiv.setAttribute( key, parsed );                                                             // 339\n\t\t\t}                                                                                             // 340\n\t\t}                                                                                              // 341\n                                                                                                 // 342\n\t\ttry {                                                                                          // 343\n\t\t\tdiv.save( attrKey );                                                                          // 344\n\t\t// quota exceeded                                                                              // 345\n\t\t} catch ( error ) {                                                                            // 346\n\t\t\t// roll the value back to the previous value                                                  // 347\n\t\t\tif ( prevValue === null ) {                                                                   // 348\n\t\t\t\tdiv.removeAttribute( key );                                                                  // 349\n\t\t\t} else {                                                                                      // 350\n\t\t\t\tdiv.setAttribute( key, prevValue );                                                          // 351\n\t\t\t}                                                                                             // 352\n                                                                                                 // 353\n\t\t\t// expire old data and try again                                                              // 354\n\t\t\tstore.userData();                                                                             // 355\n\t\t\ttry {                                                                                         // 356\n\t\t\t\tdiv.setAttribute( key, parsed );                                                             // 357\n\t\t\t\tdiv.save( attrKey );                                                                         // 358\n\t\t\t} catch ( error ) {                                                                           // 359\n\t\t\t\t// roll the value back to the previous value                                                 // 360\n\t\t\t\tif ( prevValue === null ) {                                                                  // 361\n\t\t\t\t\tdiv.removeAttribute( key );                                                                 // 362\n\t\t\t\t} else {                                                                                     // 363\n\t\t\t\t\tdiv.setAttribute( key, prevValue );                                                         // 364\n\t\t\t\t}                                                                                            // 365\n\t\t\t\tthrow store.error();                                                                         // 366\n\t\t\t}                                                                                             // 367\n\t\t}                                                                                              // 368\n\t\treturn ret;                                                                                    // 369\n\t});                                                                                             // 370\n}() );                                                                                           // 371\n                                                                                                 // 372\n// in-memory storage                                                                             // 373\n// fallback for all browsers to enable the API even if we can't persist data                     // 374\n(function() {                                                                                    // 375\n\tvar memory = {},                                                                                // 376\n\t\ttimeout = {};                                                                                  // 377\n                                                                                                 // 378\n\tfunction copy( obj ) {                                                                          // 379\n\t\treturn obj === undefined ? undefined : JSON.parse( JSON.stringify( obj ) );                    // 380\n\t}                                                                                               // 381\n                                                                                                 // 382\n\tstore.addType( \"memory\", function( key, value, options ) {                                      // 383\n\t\tif ( !key ) {                                                                                  // 384\n\t\t\treturn copy( memory );                                                                        // 385\n\t\t}                                                                                              // 386\n                                                                                                 // 387\n\t\tif ( value === undefined ) {                                                                   // 388\n\t\t\treturn copy( memory[ key ] );                                                                 // 389\n\t\t}                                                                                              // 390\n                                                                                                 // 391\n\t\tif ( timeout[ key ] ) {                                                                        // 392\n\t\t\tclearTimeout( timeout[ key ] );                                                               // 393\n\t\t\tdelete timeout[ key ];                                                                        // 394\n\t\t}                                                                                              // 395\n                                                                                                 // 396\n\t\tif ( value === null ) {                                                                        // 397\n\t\t\tdelete memory[ key ];                                                                         // 398\n\t\t\treturn null;                                                                                  // 399\n\t\t}                                                                                              // 400\n                                                                                                 // 401\n\t\tmemory[ key ] = value;                                                                         // 402\n\t\tif ( options.expires ) {                                                                       // 403\n\t\t\ttimeout[ key ] = setTimeout(function() {                                                      // 404\n\t\t\t\tdelete memory[ key ];                                                                        // 405\n\t\t\t\tdelete timeout[ key ];                                                                       // 406\n\t\t\t}, options.expires );                                                                         // 407\n\t\t}                                                                                              // 408\n                                                                                                 // 409\n\t\treturn value;                                                                                  // 410\n\t});                                                                                             // 411\n}() );                                                                                           // 412\n                                                                                                 // 413\n}( this.amplify = this.amplify || {} ) );                                                        // 414\n                                                                                                 // 415\n/*global amplify*/                                                                               // 416\n                                                                                                 // 417\n(function( amplify, undefined ) {                                                                // 418\n'use strict';                                                                                    // 419\n                                                                                                 // 420\nfunction noop() {}                                                                               // 421\nfunction isFunction( obj ) {                                                                     // 422\n\treturn ({}).toString.call( obj ) === \"[object Function]\";                                       // 423\n}                                                                                                // 424\n                                                                                                 // 425\nfunction async( fn ) {                                                                           // 426\n\tvar isAsync = false;                                                                            // 427\n\tsetTimeout(function() {                                                                         // 428\n\t\tisAsync = true;                                                                                // 429\n\t}, 1 );                                                                                         // 430\n\treturn function() {                                                                             // 431\n\t\tvar that = this,                                                                               // 432\n\t\t\targs = arguments;                                                                             // 433\n\t\tif ( isAsync ) {                                                                               // 434\n\t\t\tfn.apply( that, args );                                                                       // 435\n\t\t} else {                                                                                       // 436\n\t\t\tsetTimeout(function() {                                                                       // 437\n\t\t\t\tfn.apply( that, args );                                                                      // 438\n\t\t\t}, 1 );                                                                                       // 439\n\t\t}                                                                                              // 440\n\t};                                                                                              // 441\n}                                                                                                // 442\n                                                                                                 // 443\namplify.request = function( resourceId, data, callback ) {                                       // 444\n\t// default to an empty hash just so we can handle a missing resourceId                          // 445\n\t// in one place                                                                                 // 446\n\tvar settings = resourceId || {};                                                                // 447\n                                                                                                 // 448\n\tif ( typeof settings === \"string\" ) {                                                           // 449\n\t\tif ( isFunction( data ) ) {                                                                    // 450\n\t\t\tcallback = data;                                                                              // 451\n\t\t\tdata = {};                                                                                    // 452\n\t\t}                                                                                              // 453\n\t\tsettings = {                                                                                   // 454\n\t\t\tresourceId: resourceId,                                                                       // 455\n\t\t\tdata: data || {},                                                                             // 456\n\t\t\tsuccess: callback                                                                             // 457\n\t\t};                                                                                             // 458\n\t}                                                                                               // 459\n                                                                                                 // 460\n\tvar request = { abort: noop },                                                                  // 461\n\t\tresource = amplify.request.resources[ settings.resourceId ],                                   // 462\n\t\tsuccess = settings.success || noop,                                                            // 463\n\t\terror = settings.error || noop;                                                                // 464\n                                                                                                 // 465\n\tsettings.success = async( function( data, status ) {                                            // 466\n\t\tstatus = status || \"success\";                                                                  // 467\n\t\tamplify.publish( \"request.success\", settings, data, status );                                  // 468\n\t\tamplify.publish( \"request.complete\", settings, data, status );                                 // 469\n\t\tsuccess( data, status );                                                                       // 470\n\t});                                                                                             // 471\n                                                                                                 // 472\n\tsettings.error = async( function( data, status ) {                                              // 473\n\t\tstatus = status || \"error\";                                                                    // 474\n\t\tamplify.publish( \"request.error\", settings, data, status );                                    // 475\n\t\tamplify.publish( \"request.complete\", settings, data, status );                                 // 476\n\t\terror( data, status );                                                                         // 477\n\t});                                                                                             // 478\n                                                                                                 // 479\n\tif ( !resource ) {                                                                              // 480\n\t\tif ( !settings.resourceId ) {                                                                  // 481\n\t\t\tthrow \"amplify.request: no resourceId provided\";                                              // 482\n\t\t}                                                                                              // 483\n\t\tthrow \"amplify.request: unknown resourceId: \" + settings.resourceId;                           // 484\n\t}                                                                                               // 485\n                                                                                                 // 486\n\tif ( !amplify.publish( \"request.before\", settings ) ) {                                         // 487\n\t\tsettings.error( null, \"abort\" );                                                               // 488\n\t\treturn;                                                                                        // 489\n\t}                                                                                               // 490\n                                                                                                 // 491\n\tamplify.request.resources[ settings.resourceId ]( settings, request );                          // 492\n\treturn request;                                                                                 // 493\n};                                                                                               // 494\n                                                                                                 // 495\namplify.request.types = {};                                                                      // 496\namplify.request.resources = {};                                                                  // 497\namplify.request.define = function( resourceId, type, settings ) {                                // 498\n\tif ( typeof type === \"string\" ) {                                                               // 499\n\t\tif ( !( type in amplify.request.types ) ) {                                                    // 500\n\t\t\tthrow \"amplify.request.define: unknown type: \" + type;                                        // 501\n\t\t}                                                                                              // 502\n                                                                                                 // 503\n\t\tsettings.resourceId = resourceId;                                                              // 504\n\t\tamplify.request.resources[ resourceId ] =                                                      // 505\n\t\t\tamplify.request.types[ type ]( settings );                                                    // 506\n\t} else {                                                                                        // 507\n\t\t// no pre-processor or settings for one-off types (don't invoke)                               // 508\n\t\tamplify.request.resources[ resourceId ] = type;                                                // 509\n\t}                                                                                               // 510\n};                                                                                               // 511\n                                                                                                 // 512\n}( amplify ) );                                                                                  // 513\n                                                                                                 // 514\n                                                                                                 // 515\n(function( amplify, $, undefined ) {                                                             // 516\n'use strict';                                                                                    // 517\n                                                                                                 // 518\nvar xhrProps = [ \"status\", \"statusText\", \"responseText\", \"responseXML\", \"readyState\" ],          // 519\n\t\trurlData = /\\{([^\\}]+)\\}/g;                                                                    // 520\n                                                                                                 // 521\namplify.request.types.ajax = function( defnSettings ) {                                          // 522\n\tdefnSettings = $.extend({                                                                       // 523\n\t\ttype: \"GET\"                                                                                    // 524\n\t}, defnSettings );                                                                              // 525\n                                                                                                 // 526\n\treturn function( settings, request ) {                                                          // 527\n\t\tvar xhr, handleResponse,                                                                       // 528\n\t\t\turl = defnSettings.url,                                                                       // 529\n\t\t\tabort = request.abort,                                                                        // 530\n\t\t\tajaxSettings = $.extend( true, {}, defnSettings, { data: settings.data } ),                   // 531\n\t\t\taborted = false,                                                                              // 532\n\t\t\tampXHR = {                                                                                    // 533\n\t\t\t\treadyState: 0,                                                                               // 534\n\t\t\t\tsetRequestHeader: function( name, value ) {                                                  // 535\n\t\t\t\t\treturn xhr.setRequestHeader( name, value );                                                 // 536\n\t\t\t\t},                                                                                           // 537\n\t\t\t\tgetAllResponseHeaders: function() {                                                          // 538\n\t\t\t\t\treturn xhr.getAllResponseHeaders();                                                         // 539\n\t\t\t\t},                                                                                           // 540\n\t\t\t\tgetResponseHeader: function( key ) {                                                         // 541\n\t\t\t\t\treturn xhr.getResponseHeader( key );                                                        // 542\n\t\t\t\t},                                                                                           // 543\n\t\t\t\toverrideMimeType: function( type ) {                                                         // 544\n\t\t\t\t\treturn xhr.overrideMimeType( type );                                                        // 545\n\t\t\t\t},                                                                                           // 546\n\t\t\t\tabort: function() {                                                                          // 547\n\t\t\t\t\taborted = true;                                                                             // 548\n\t\t\t\t\ttry {                                                                                       // 549\n\t\t\t\t\t\txhr.abort();                                                                               // 550\n\t\t\t\t\t// IE 7 throws an error when trying to abort                                                // 551\n\t\t\t\t\t} catch( e ) {}                                                                             // 552\n\t\t\t\t\thandleResponse( null, \"abort\" );                                                            // 553\n\t\t\t\t},                                                                                           // 554\n\t\t\t\tsuccess: function( data, status ) {                                                          // 555\n\t\t\t\t\tsettings.success( data, status );                                                           // 556\n\t\t\t\t},                                                                                           // 557\n\t\t\t\terror: function( data, status ) {                                                            // 558\n\t\t\t\t\tsettings.error( data, status );                                                             // 559\n\t\t\t\t}                                                                                            // 560\n\t\t\t};                                                                                            // 561\n                                                                                                 // 562\n\t\thandleResponse = function( data, status ) {                                                    // 563\n\t\t\t$.each( xhrProps, function( i, key ) {                                                        // 564\n\t\t\t\ttry {                                                                                        // 565\n\t\t\t\t\tampXHR[ key ] = xhr[ key ];                                                                 // 566\n\t\t\t\t} catch( e ) {}                                                                              // 567\n\t\t\t});                                                                                           // 568\n\t\t\t// Playbook returns \"HTTP/1.1 200 OK\"                                                         // 569\n\t\t\t// TODO: something also returns \"OK\", what?                                                   // 570\n\t\t\tif ( /OK$/.test( ampXHR.statusText ) ) {                                                      // 571\n\t\t\t\tampXHR.statusText = \"success\";                                                               // 572\n\t\t\t}                                                                                             // 573\n\t\t\tif ( data === undefined ) {                                                                   // 574\n\t\t\t\t// TODO: add support for ajax errors with data                                               // 575\n\t\t\t\tdata = null;                                                                                 // 576\n\t\t\t}                                                                                             // 577\n\t\t\tif ( aborted ) {                                                                              // 578\n\t\t\t\tstatus = \"abort\";                                                                            // 579\n\t\t\t}                                                                                             // 580\n\t\t\tif ( /timeout|error|abort/.test( status ) ) {                                                 // 581\n\t\t\t\tampXHR.error( data, status );                                                                // 582\n\t\t\t} else {                                                                                      // 583\n\t\t\t\tampXHR.success( data, status );                                                              // 584\n\t\t\t}                                                                                             // 585\n\t\t\t// avoid handling a response multiple times                                                   // 586\n\t\t\t// this can happen if a request is aborted                                                    // 587\n\t\t\t// TODO: figure out if this breaks polling or multi-part responses                            // 588\n\t\t\thandleResponse = $.noop;                                                                      // 589\n\t\t};                                                                                             // 590\n                                                                                                 // 591\n\t\tamplify.publish( \"request.ajax.preprocess\",                                                    // 592\n\t\t\tdefnSettings, settings, ajaxSettings, ampXHR );                                               // 593\n                                                                                                 // 594\n\t\t$.extend( ajaxSettings, {                                                                      // 595\n\t\t\tisJSONP: function () {                                                                        // 596\n\t\t\t\treturn (/jsonp/gi).test(this.dataType);                                                      // 597\n\t\t\t},                                                                                            // 598\n\t\t\tcacheURL: function () {                                                                       // 599\n\t\t\t\tif (!this.isJSONP()) {                                                                       // 600\n\t\t\t\t\treturn this.url;                                                                            // 601\n\t\t\t\t}                                                                                            // 602\n                                                                                                 // 603\n\t\t\t\tvar callbackName = 'callback';                                                               // 604\n                                                                                                 // 605\n\t\t\t\t// possible for the callback function name to be overridden                                  // 606\n\t\t\t\tif (this.hasOwnProperty('jsonp')) {                                                          // 607\n\t\t\t\t\tif (this.jsonp !== false) {                                                                 // 608\n\t\t\t\t\t\tcallbackName = this.jsonp;                                                                 // 609\n\t\t\t\t\t} else {                                                                                    // 610\n\t\t\t\t\t\tif (this.hasOwnProperty('jsonpCallback')) {                                                // 611\n\t\t\t\t\t\t\tcallbackName = this.jsonpCallback;                                                        // 612\n\t\t\t\t\t\t}                                                                                          // 613\n\t\t\t\t\t}                                                                                           // 614\n\t\t\t\t}                                                                                            // 615\n                                                                                                 // 616\n\t\t\t\t// search and replace callback parameter in query string with empty string                   // 617\n\t\t\t\tvar callbackRegex = new RegExp('&?' + callbackName + '=[^&]*&?', 'gi');                      // 618\n\t\t\t\treturn this.url.replace(callbackRegex, '');                                                  // 619\n\t\t\t},                                                                                            // 620\n\t\t\tsuccess: function( data, status ) {                                                           // 621\n\t\t\t\thandleResponse( data, status );                                                              // 622\n\t\t\t},                                                                                            // 623\n\t\t\terror: function( _xhr, status ) {                                                             // 624\n\t\t\t\thandleResponse( null, status );                                                              // 625\n\t\t\t},                                                                                            // 626\n\t\t\tbeforeSend: function( _xhr, _ajaxSettings ) {                                                 // 627\n\t\t\t\txhr = _xhr;                                                                                  // 628\n\t\t\t\tajaxSettings = _ajaxSettings;                                                                // 629\n\t\t\t\tvar ret = defnSettings.beforeSend ?                                                          // 630\n\t\t\t\t\tdefnSettings.beforeSend.call( this, ampXHR, ajaxSettings ) : true;                          // 631\n\t\t\t\treturn ret && amplify.publish( \"request.before.ajax\",                                        // 632\n\t\t\t\t\tdefnSettings, settings, ajaxSettings, ampXHR );                                             // 633\n\t\t\t}                                                                                             // 634\n\t\t});                                                                                            // 635\n                                                                                                 // 636\n\t\t// cache all JSONP requests                                                                    // 637\n\t\tif (ajaxSettings.cache && ajaxSettings.isJSONP()) {                                            // 638\n\t\t\t$.extend(ajaxSettings, {                                                                      // 639\n\t\t\t\tcache: true                                                                                  // 640\n\t\t\t});                                                                                           // 641\n\t\t}                                                                                              // 642\n                                                                                                 // 643\n\t\t$.ajax( ajaxSettings );                                                                        // 644\n                                                                                                 // 645\n\t\trequest.abort = function() {                                                                   // 646\n\t\t\tampXHR.abort();                                                                               // 647\n\t\t\tabort.call( this );                                                                           // 648\n\t\t};                                                                                             // 649\n\t};                                                                                              // 650\n};                                                                                               // 651\n                                                                                                 // 652\n                                                                                                 // 653\n                                                                                                 // 654\namplify.subscribe( \"request.ajax.preprocess\", function( defnSettings, settings, ajaxSettings ) { // 655\n\tvar mappedKeys = [],                                                                            // 656\n\t\tdata = ajaxSettings.data;                                                                      // 657\n                                                                                                 // 658\n\tif ( typeof data === \"string\" ) {                                                               // 659\n\t\treturn;                                                                                        // 660\n\t}                                                                                               // 661\n                                                                                                 // 662\n\tdata = $.extend( true, {}, defnSettings.data, data );                                           // 663\n                                                                                                 // 664\n\tajaxSettings.url = ajaxSettings.url.replace( rurlData, function ( m, key ) {                    // 665\n\t\tif ( key in data ) {                                                                           // 666\n\t\t\tmappedKeys.push( key );                                                                       // 667\n\t\t\treturn data[ key ];                                                                           // 668\n\t\t}                                                                                              // 669\n\t});                                                                                             // 670\n                                                                                                 // 671\n\t// We delete the keys later so duplicates are still replaced                                    // 672\n\t$.each( mappedKeys, function ( i, key ) {                                                       // 673\n\t\tdelete data[ key ];                                                                            // 674\n\t});                                                                                             // 675\n                                                                                                 // 676\n\tajaxSettings.data = data;                                                                       // 677\n});                                                                                              // 678\n                                                                                                 // 679\n                                                                                                 // 680\n                                                                                                 // 681\namplify.subscribe( \"request.ajax.preprocess\", function( defnSettings, settings, ajaxSettings ) { // 682\n\tvar data = ajaxSettings.data,                                                                   // 683\n\t\tdataMap = defnSettings.dataMap;                                                                // 684\n                                                                                                 // 685\n\tif ( !dataMap || typeof data === \"string\" ) {                                                   // 686\n\t\treturn;                                                                                        // 687\n\t}                                                                                               // 688\n                                                                                                 // 689\n\tif ( $.isFunction( dataMap ) ) {                                                                // 690\n\t\tajaxSettings.data = dataMap( data );                                                           // 691\n\t} else {                                                                                        // 692\n\t\t$.each( defnSettings.dataMap, function( orig, replace ) {                                      // 693\n\t\t\tif ( orig in data ) {                                                                         // 694\n\t\t\t\tdata[ replace ] = data[ orig ];                                                              // 695\n\t\t\t\tdelete data[ orig ];                                                                         // 696\n\t\t\t}                                                                                             // 697\n\t\t});                                                                                            // 698\n\t\tajaxSettings.data = data;                                                                      // 699\n\t}                                                                                               // 700\n});                                                                                              // 701\n                                                                                                 // 702\n                                                                                                 // 703\n                                                                                                 // 704\nvar cache = amplify.request.cache = {                                                            // 705\n\t_key: function( resourceId, url, data ) {                                                       // 706\n\t\tdata = url + data;                                                                             // 707\n\t\tvar length = data.length,                                                                      // 708\n\t\t\ti = 0;                                                                                        // 709\n                                                                                                 // 710\n\t\t/*jshint bitwise:false*/                                                                       // 711\n\t\tfunction chunk() {                                                                             // 712\n\t\t\treturn data.charCodeAt( i++ ) << 24 |                                                         // 713\n\t\t\t\tdata.charCodeAt( i++ ) << 16 |                                                               // 714\n\t\t\t\tdata.charCodeAt( i++ ) << 8 |                                                                // 715\n\t\t\t\tdata.charCodeAt( i++ ) << 0;                                                                 // 716\n\t\t}                                                                                              // 717\n                                                                                                 // 718\n\t\tvar checksum = chunk();                                                                        // 719\n\t\twhile ( i < length ) {                                                                         // 720\n\t\t\tchecksum ^= chunk();                                                                          // 721\n\t\t}                                                                                              // 722\n\t\t/*jshint bitwise:true*/                                                                        // 723\n                                                                                                 // 724\n\t\treturn \"request-\" + resourceId + \"-\" + checksum;                                               // 725\n\t},                                                                                              // 726\n                                                                                                 // 727\n\t_default: (function() {                                                                         // 728\n\t\tvar memoryStore = {};                                                                          // 729\n\t\treturn function( resource, settings, ajaxSettings, ampXHR ) {                                  // 730\n\t\t\t// data is already converted to a string by the time we get here                              // 731\n\t\t\tvar cacheKey = cache._key( settings.resourceId,                                               // 732\n\t\t\t\t\tajaxSettings.cacheURL(), ajaxSettings.data ),                                               // 733\n\t\t\t\tduration = resource.cache;                                                                   // 734\n                                                                                                 // 735\n\t\t\tif ( cacheKey in memoryStore ) {                                                              // 736\n\t\t\t\tampXHR.success( memoryStore[ cacheKey ] );                                                   // 737\n\t\t\t\treturn false;                                                                                // 738\n\t\t\t}                                                                                             // 739\n\t\t\tvar success = ampXHR.success;                                                                 // 740\n\t\t\tampXHR.success = function( data ) {                                                           // 741\n\t\t\t\tmemoryStore[ cacheKey ] = data;                                                              // 742\n\t\t\t\tif ( typeof duration === \"number\" ) {                                                        // 743\n\t\t\t\t\tsetTimeout(function() {                                                                     // 744\n\t\t\t\t\t\tdelete memoryStore[ cacheKey ];                                                            // 745\n\t\t\t\t\t}, duration );                                                                              // 746\n\t\t\t\t}                                                                                            // 747\n\t\t\t\tsuccess.apply( this, arguments );                                                            // 748\n\t\t\t};                                                                                            // 749\n\t\t};                                                                                             // 750\n\t}())                                                                                            // 751\n};                                                                                               // 752\n                                                                                                 // 753\nif ( amplify.store ) {                                                                           // 754\n\t$.each( amplify.store.types, function( type ) {                                                 // 755\n\t\tcache[ type ] = function( resource, settings, ajaxSettings, ampXHR ) {                         // 756\n\t\t\tvar cacheKey = cache._key( settings.resourceId,                                               // 757\n\t\t\t\t\tajaxSettings.cacheURL(), ajaxSettings.data ),                                               // 758\n\t\t\t\tcached = amplify.store[ type ]( cacheKey );                                                  // 759\n                                                                                                 // 760\n\t\t\tif ( cached ) {                                                                               // 761\n\t\t\t\tajaxSettings.success( cached );                                                              // 762\n\t\t\t\treturn false;                                                                                // 763\n\t\t\t}                                                                                             // 764\n\t\t\tvar success = ampXHR.success;                                                                 // 765\n\t\t\tampXHR.success = function( data ) {                                                           // 766\n\t\t\t\tamplify.store[ type ]( cacheKey, data, { expires: resource.cache.expires } );                // 767\n\t\t\t\tsuccess.apply( this, arguments );                                                            // 768\n\t\t\t};                                                                                            // 769\n\t\t};                                                                                             // 770\n\t});                                                                                             // 771\n\tcache.persist = cache[ amplify.store.type ];                                                    // 772\n}                                                                                                // 773\n                                                                                                 // 774\namplify.subscribe( \"request.before.ajax\", function( resource ) {                                 // 775\n\tvar cacheType = resource.cache;                                                                 // 776\n\tif ( cacheType ) {                                                                              // 777\n\t\t// normalize between objects and strings/booleans/numbers                                      // 778\n\t\tcacheType = cacheType.type || cacheType;                                                       // 779\n\t\treturn cache[ cacheType in cache ? cacheType : \"_default\" ]                                    // 780\n\t\t\t.apply( this, arguments );                                                                    // 781\n\t}                                                                                               // 782\n});                                                                                              // 783\n                                                                                                 // 784\n                                                                                                 // 785\n                                                                                                 // 786\namplify.request.decoders = {                                                                     // 787\n\t// http://labs.omniti.com/labs/jsend                                                            // 788\n\tjsend: function( data, status, ampXHR, success, error ) {                                       // 789\n\t\tif ( data.status === \"success\" ) {                                                             // 790\n\t\t\tsuccess( data.data );                                                                         // 791\n\t\t} else if ( data.status === \"fail\" ) {                                                         // 792\n\t\t\terror( data.data, \"fail\" );                                                                   // 793\n\t\t} else if ( data.status === \"error\" ) {                                                        // 794\n\t\t\tdelete data.status;                                                                           // 795\n\t\t\terror( data, \"error\" );                                                                       // 796\n\t\t} else {                                                                                       // 797\n\t\t\terror( null, \"error\" );                                                                       // 798\n\t\t}                                                                                              // 799\n\t}                                                                                               // 800\n};                                                                                               // 801\n                                                                                                 // 802\namplify.subscribe( \"request.before.ajax\", function( resource, settings, ajaxSettings, ampXHR ) { // 803\n\tvar _success = ampXHR.success,                                                                  // 804\n\t\t_error = ampXHR.error,                                                                         // 805\n\t\tdecoder = $.isFunction( resource.decoder ) ?                                                   // 806\n\t\t\tresource.decoder :                                                                            // 807\n\t\t\tresource.decoder in amplify.request.decoders ?                                                // 808\n\t\t\t\tamplify.request.decoders[ resource.decoder ] :                                               // 809\n\t\t\t\tamplify.request.decoders._default;                                                           // 810\n                                                                                                 // 811\n\tif ( !decoder ) {                                                                               // 812\n\t\treturn;                                                                                        // 813\n\t}                                                                                               // 814\n                                                                                                 // 815\n\tfunction success( data, status ) {                                                              // 816\n\t\t_success( data, status );                                                                      // 817\n\t}                                                                                               // 818\n\tfunction error( data, status ) {                                                                // 819\n\t\t_error( data, status );                                                                        // 820\n\t}                                                                                               // 821\n\tampXHR.success = function( data, status ) {                                                     // 822\n\t\tdecoder( data, status, ampXHR, success, error );                                               // 823\n\t};                                                                                              // 824\n\tampXHR.error = function( data, status ) {                                                       // 825\n\t\tdecoder( data, status, ampXHR, success, error );                                               // 826\n\t};                                                                                              // 827\n});                                                                                              // 828\n                                                                                                 // 829\n}( amplify, jQuery ) );                                                                          // 830\n                                                                                                 // 831\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"amplify\");\n\n})();\n","servePath":"/packages/amplify.js"}]