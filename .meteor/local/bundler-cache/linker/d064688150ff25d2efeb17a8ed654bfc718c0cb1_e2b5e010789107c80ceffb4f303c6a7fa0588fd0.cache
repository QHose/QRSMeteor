[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar value, ReactiveDict;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reactive-dict\":{\"migration.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/migration.js                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nmodule.export({\n  ReactiveDict: () => ReactiveDict\n});\nlet ReactiveDict;\nmodule.watch(require(\"./reactive-dict\"), {\n  ReactiveDict(v) {\n    ReactiveDict = v;\n  }\n\n}, 0);\nReactiveDict._migratedDictData = {}; // name -> data\n\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) {\n    const data = ReactiveDict._migratedDictData[dictName];\n    delete ReactiveDict._migratedDictData[dictName];\n    return data;\n  }\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // On migration, assemble the data from all the dicts that have been\n  // registered.\n\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate) dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {\n      dicts: dataToMigrate\n    }];\n  });\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reactive-dict.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/reactive-dict.js                                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nmodule.export({\n  ReactiveDict: () => ReactiveDict\n});\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n} // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n\n\nclass ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency();\n    this.keyDeps = {}; // key -> Dependency\n\n    this.keyValueDeps = {}; // key -> Dependency\n  } // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n\n  set(keyOrObject, value) {\n    if (typeof keyOrObject === 'object' && value === undefined) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n\n      return;\n    } // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n\n\n    const key = keyOrObject;\n    value = stringify(value);\n\n    const keyExisted = _.has(this.keys, key);\n\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = value !== oldSerializedValue;\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    } // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n\n\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  setDefault(keyOrObject, value) {\n    if (typeof keyOrObject === 'object' && value === undefined) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n\n      return;\n    } // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n\n\n    const key = keyOrObject;\n\n    if (!_.has(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  get(key) {\n    this._ensureKey(key);\n\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    } // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n\n\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (!_.has(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (!this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n\n    if (_.has(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n\n    return EJSON.equals(oldValue, value);\n  }\n\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n\n    _.each(this.keys, (value, key) => {\n      ret[key] = parse(value);\n    });\n\n    return ret;\n  }\n\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n    this.allDeps.changed();\n\n    _.each(oldKeys, (value, key) => {\n      changed(this.keyDeps[key]);\n\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][value]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  delete(key) {\n    let didRemove = false;\n\n    if (_.has(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n\n      this.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  }\n\n  destroy() {\n    this.clear();\n\n    if (this.name && _.has(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    _.each(object, (value, key) => {\n      this.set(key, value);\n    });\n  }\n\n  _setDefaultObject(object) {\n    _.each(object, (value, key) => {\n      this.setDefault(key, value);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency();\n      this.keyValueDeps[key] = {};\n    }\n  } // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n\n\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/reactive-dict/migration.js\");\n\n/* Exports */\nPackage._define(\"reactive-dict\", exports, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["packages/reactive-dict/migration.js","packages/reactive-dict/reactive-dict.js"],"names":["module","export","ReactiveDict","watch","require","v","_migratedDictData","_dictsToMigrate","_loadMigratedDict","dictName","_","has","data","_registerDictForMigrate","dict","Error","Meteor","isClient","Package","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate","_getMigrationData","stringify","value","undefined","EJSON","parse","serialized","changed","constructor","dictData","keys","migratedData","_setObject","name","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","set","keyOrObject","key","keyExisted","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","each","clear","oldKeys","delete","didRemove","destroy","object"],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["import { ReactiveDict } from './reactive-dict';\n\nReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) {\n    const data = ReactiveDict._migratedDictData[dictName];\n    delete ReactiveDict._migratedDictData[dictName];\n    return data;\n  }\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n\nexport { ReactiveDict };\n","// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nexport class ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency;\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  set(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    value = stringify(value);\n\n    const keyExisted = _.has(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = (value !== oldSerializedValue);\n\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  setDefault(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    if (! _.has(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (! _.has(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n    if (_.has(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    _.each(this.keys, (value, key) => {\n      ret[key] = parse(value);\n    });\n    return ret;\n  }\n\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n\n    this.allDeps.changed();\n\n    _.each(oldKeys, (value, key) => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][value]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  delete(key) {\n    let didRemove = false;\n\n    if (_.has(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n  \n  destroy() {\n    this.clear();\n    if (this.name && _.has(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    _.each(object, (value, key) => {\n      this.set(key, value);\n    });\n  }\n\n  _setDefaultObject(object) {\n    _.each(object, (value, key) => {\n      this.setDefault(key, value);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency;\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}\n"]}}]