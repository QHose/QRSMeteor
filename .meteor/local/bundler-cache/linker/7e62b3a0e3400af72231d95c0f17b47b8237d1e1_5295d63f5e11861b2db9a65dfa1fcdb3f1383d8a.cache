[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar Hook = Package['callback-hook'].Hook;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Accounts, options, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-base\":{\"server_main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/server_main.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nconst module1 = module;\nmodule1.export({\n  AccountsServer: () => AccountsServer\n});\nlet AccountsServer;\nmodule1.watch(require(\"./accounts_server.js\"), {\n  AccountsServer(v) {\n    AccountsServer = v;\n  }\n\n}, 0);\nmodule1.watch(require(\"./accounts_rate_limit.js\"));\nmodule1.watch(require(\"./url_server.js\"));\n\n/**\n * @namespace Accounts\n * @summary The namespace for all server-side accounts-related methods.\n */\nAccounts = new AccountsServer(Meteor.server); // Users table. Don't use the normal autopublish, since we want to hide\n// some fields. Code to autopublish this is in accounts_server.js.\n// XXX Allow users to configure this collection name.\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n*/\n\nMeteor.users = Accounts.users;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_common.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/accounts_common.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  AccountsCommon: () => AccountsCommon\n});\n\nclass AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {}; // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n\n    this.connection = undefined;\n\n    this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n\n\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    }); // Callback exceptions are printed with Meteor._debug and ignored.\n\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  }\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n\n\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n\n\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  } // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   */\n\n\n  config(options) {\n    var self = this; // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n    } // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n\n\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    } // validate option keys\n\n\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\", \"ambiguousErrorMessages\", \"bcryptRounds\"];\n\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    }); // set values in Accounts._options\n\n\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n\n        self._options[key] = options[key];\n      }\n    });\n  }\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n\n\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n\n\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n\n\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (!Meteor.isClient) {\n      return;\n    } // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n    return (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;\n    return new Date() > new Date(when) - minLifetimeMs;\n  }\n\n}\n\nvar Ap = AccountsCommon.prototype; // Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\n\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\n\n\nMeteor.user = function () {\n  return Accounts.user();\n}; // how long (in days) until a login token expires\n\n\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // Expose for testing.\n\nAp.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS; // how long (in days) until reset password token expires\n\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires\n\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\n\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\n\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\n\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000; // A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\n\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100; // Expose for testing.\n\nAp.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n\nMeteor.startup(function () {\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n}); // Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\n\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n  this.message = description;\n});\nAp.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\n\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_rate_limit.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/accounts_rate_limit.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet AccountsCommon;\nmodule.watch(require(\"./accounts_common.js\"), {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  }\n\n}, 0);\nvar Ap = AccountsCommon.prototype;\nvar defaultRateLimiterRuleId; // Removes default rate limiting rule\n\nAp.removeDefaultRateLimit = function () {\n  const resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);\n  defaultRateLimiterRuleId = null;\n  return resp;\n}; // Add a default rule of limiting logins, creating new users and password reset\n// to 5 times every 10 seconds per connection.\n\n\nAp.addDefaultRateLimit = function () {\n  if (!defaultRateLimiterRuleId) {\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n      userId: null,\n      clientAddress: null,\n      type: 'method',\n      name: function (name) {\n        return _.contains(['login', 'createUser', 'resetPassword', 'forgotPassword'], name);\n      },\n      connectionId: function (connectionId) {\n        return true;\n      }\n    }, 5, 10000);\n  }\n};\n\nAp.addDefaultRateLimit();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_server.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/accounts_server.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  AccountsServer: () => AccountsServer\n});\nlet AccountsCommon;\nmodule.watch(require(\"./accounts_common.js\"), {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  }\n\n}, 0);\n\nvar crypto = Npm.require('crypto');\n\nclass AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n    this._server = server || Meteor.server; // Set up the server's methods, as if by calling Meteor.methods.\n\n    this._initServerMethods();\n\n    this._initAccountDataHooks(); // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n\n\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    this._initServerPublications(); // connectionId -> {connection, loginToken}\n\n\n    this._accountData = {}; // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1; // for the number described above.\n    // list of all registered handlers.\n\n    this._loginHandlers = [];\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n    this._validateLoginHook = new Hook({\n      bindEnvironment: false\n    });\n    this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n  } ///\n  /// CURRENT USER\n  ///\n  // @override of \"abstract\" non-implementation in accounts_common.js\n\n\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the infomation from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n\n    if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  } ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n\n\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n\n\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  } ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n\n\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n\n\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n}\n\n;\nvar Ap = AccountsServer.prototype; // Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\n\nfunction cloneAttemptWithConnection(connection, attempt) {\n  var clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n}\n\nAp._validateLogin = function (connection, attempt) {\n  this._validateLoginHook.each(function (callback) {\n    var ret;\n\n    try {\n      ret = callback(cloneAttemptWithConnection(connection, attempt));\n    } catch (e) {\n      attempt.allowed = false; // XXX this means the last thrown error overrides previous error\n      // messages. Maybe this is surprising to users and we should make\n      // overriding errors more explicit. (see\n      // https://github.com/meteor/meteor/issues/1960)\n\n      attempt.error = e;\n      return true;\n    }\n\n    if (!ret) {\n      attempt.allowed = false; // don't override a specific error provided by a previous\n      // validator or the initial attempt (eg \"incorrect password\").\n\n      if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    return true;\n  });\n};\n\nAp._successfulLogin = function (connection, attempt) {\n  this._onLoginHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._failedLogin = function (connection, attempt) {\n  this._onLoginFailureHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._successfulLogout = function (connection, userId) {\n  const user = userId && this.users.findOne(userId);\n\n  this._onLogoutHook.each(function (callback) {\n    callback({\n      user,\n      connection\n    });\n    return true;\n  });\n}; ///\n/// LOGIN METHODS\n///\n// Login methods return to the client an object containing these\n// fields when the user was logged in successfully:\n//\n//   id: userId\n//   token: *\n//   tokenExpires: *\n//\n// tokenExpires is optional and intends to provide a hint to the\n// client as to when the token will expire. If not provided, the\n// client will call Accounts._tokenExpiration, passing it the date\n// that it received the token.\n//\n// The login method will throw an error back to the client if the user\n// failed to log in.\n//\n//\n// Login handlers and service specific login methods such as\n// `createUser` internally return a `result` object containing these\n// fields:\n//\n//   type:\n//     optional string; the service name, overrides the handler\n//     default if present.\n//\n//   error:\n//     exception; if the user is not allowed to login, the reason why.\n//\n//   userId:\n//     string; the user id of the user attempting to login (if\n//     known), required for an allowed login.\n//\n//   options:\n//     optional object merged into the result returned by the login\n//     method; used by HAMK from SRP.\n//\n//   stampedLoginToken:\n//     optional object with `token` and `when` indicating the login\n//     token is already present in the database, returned by the\n//     \"resume\" login handler.\n//\n// For convenience, login methods can also throw an exception, which\n// is converted into an {error} result.  However, if the id of the\n// user attempting the login is known, a {userId, error} result should\n// be returned instead since the user id is not captured when an\n// exception is thrown.\n//\n// This internal `result` object is automatically converted into the\n// public {id, token, tokenExpires} object returned to the client.\n// Try a login method, converting thrown exceptions into an {error}\n// result.  The `type` argument is a default, inserted into the result\n// object if not explicitly returned.\n//\n\n\nvar tryLoginMethod = function (type, fn) {\n  var result;\n\n  try {\n    result = fn();\n  } catch (e) {\n    result = {\n      error: e\n    };\n  }\n\n  if (result && !result.type && type) result.type = type;\n  return result;\n}; // Log in a user on a connection.\n//\n// We use the method invocation to set the user id on the connection,\n// not the connection object directly. setUserId is tied to methods to\n// enforce clear ordering of method application (using wait methods on\n// the client, and a no setUserId after unblock restriction on the\n// server)\n//\n// The `stampedLoginToken` parameter is optional.  When present, it\n// indicates that the login token has already been inserted into the\n// database and doesn't need to be inserted again.  (It's used by the\n// \"resume\" login handler).\n\n\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {\n  var self = this;\n\n  if (!stampedLoginToken) {\n    stampedLoginToken = self._generateStampedLoginToken();\n\n    self._insertLoginToken(userId, stampedLoginToken);\n  } // This order (and the avoidance of yields) is important to make\n  // sure that when publish functions are rerun, they see a\n  // consistent view of the world: the userId is set and matches\n  // the login token on the connection (not that there is\n  // currently a public API for reading the login token on a\n  // connection).\n\n\n  Meteor._noYieldsAllowed(function () {\n    self._setLoginToken(userId, methodInvocation.connection, self._hashLoginToken(stampedLoginToken.token));\n  });\n\n  methodInvocation.setUserId(userId);\n  return {\n    id: userId,\n    token: stampedLoginToken.token,\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)\n  };\n}; // After a login method has completed, call the login hooks.  Note\n// that `attemptLogin` is called for *all* login attempts, even ones\n// which aren't successful (such as an invalid password, etc).\n//\n// If the login is allowed and isn't aborted by a validate login hook\n// callback, log in the user.\n//\n\n\nAp._attemptLogin = function (methodInvocation, methodName, methodArgs, result) {\n  if (!result) throw new Error(\"result is required\"); // XXX A programming error in a login handler can lead to this occuring, and\n  // then we don't call onLogin or onLoginFailure callbacks. Should\n  // tryLoginMethod catch this case and turn it into an error?\n\n  if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");\n  var user;\n  if (result.userId) user = this.users.findOne(result.userId);\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: !!(result.userId && !result.error),\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n  if (result.error) attempt.error = result.error;\n  if (user) attempt.user = user; // _validateLogin may mutate `attempt` by adding an error and changing allowed\n  // to false, but that's the only change it can make (and the user's callbacks\n  // only get a clone of `attempt`).\n\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  if (attempt.allowed) {\n    var ret = _.extend(this._loginUser(methodInvocation, result.userId, result.stampedLoginToken), result.options || {});\n\n    ret.type = attempt.type;\n\n    this._successfulLogin(methodInvocation.connection, attempt);\n\n    return ret;\n  } else {\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    throw attempt.error;\n  }\n}; // All service specific login methods should go through this function.\n// Ensure that thrown exceptions are caught and that login hook\n// callbacks are still called.\n//\n\n\nAp._loginMethod = function (methodInvocation, methodName, methodArgs, type, fn) {\n  return this._attemptLogin(methodInvocation, methodName, methodArgs, tryLoginMethod(type, fn));\n}; // Report a login attempt failed outside the context of a normal login\n// method. This is for use in the case where there is a multi-step login\n// procedure (eg SRP based password login). If a method early in the\n// chain fails, it should call this function to report a failure. There\n// is no corresponding method for a successful login; methods that can\n// succeed at logging a user in should always be actual login methods\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n\n\nAp._reportLoginFailure = function (methodInvocation, methodName, methodArgs, result) {\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: false,\n    error: result.error,\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n\n  if (result.userId) {\n    attempt.user = this.users.findOne(result.userId);\n  }\n\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  this._failedLogin(methodInvocation.connection, attempt); // _validateLogin may mutate attempt to set a new error message. Return\n  // the modified version.\n\n\n  return attempt;\n}; ///\n/// LOGIN HANDLERS\n///\n// The main entry point for auth packages to hook in to login.\n//\n// A login handler is a login method which can return `undefined` to\n// indicate that the login request is not handled by this handler.\n//\n// @param name {String} Optional.  The service name, used by default\n// if a specific service name isn't returned in the result.\n//\n// @param handler {Function} A function that receives an options object\n// (as passed as an argument to the `login` method) and returns one of:\n// - `undefined`, meaning don't handle;\n// - a login method result object\n\n\nAp.registerLoginHandler = function (name, handler) {\n  if (!handler) {\n    handler = name;\n    name = null;\n  }\n\n  this._loginHandlers.push({\n    name: name,\n    handler: handler\n  });\n}; // Checks a user's credentials against all the registered login\n// handlers, and returns a login token if the credentials are valid. It\n// is like the login method, except that it doesn't set the logged-in\n// user on the connection. Throws a Meteor.Error if logging in fails,\n// including the case where none of the login handlers handled the login\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n//\n// For example, if you want to login with a plaintext password, `options` could be\n//   { user: { username: <username> }, password: <password> }, or\n//   { user: { email: <email> }, password: <password> }.\n// Try all of the registered login handlers until one of them doesn't\n// return `undefined`, meaning it handled this call to `login`. Return\n// that return value.\n\n\nAp._runLoginHandlers = function (methodInvocation, options) {\n  for (var i = 0; i < this._loginHandlers.length; ++i) {\n    var handler = this._loginHandlers[i];\n    var result = tryLoginMethod(handler.name, function () {\n      return handler.handler.call(methodInvocation, options);\n    });\n\n    if (result) {\n      return result;\n    }\n\n    if (result !== undefined) {\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n    }\n  }\n\n  return {\n    type: null,\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")\n  };\n}; // Deletes the given loginToken from the database.\n//\n// For new-style hashed token, this will cause all connections\n// associated with the token to be closed.\n//\n// Any connections associated with old-style unhashed tokens will be\n// in the process of becoming associated with hashed tokens and then\n// they'll get closed.\n\n\nAp.destroyToken = function (userId, loginToken) {\n  this.users.update(userId, {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [{\n          hashedToken: loginToken\n        }, {\n          token: loginToken\n        }]\n      }\n    }\n  });\n};\n\nAp._initServerMethods = function () {\n  // The methods created in this function need to be created here so that\n  // this variable is available in their scope.\n  var accounts = this; // This object will be populated with methods and then passed to\n  // accounts._server.methods further below.\n\n  var methods = {}; // @returns {Object|null}\n  //   If successful, returns {token: reconnectToken, id: userId}\n  //   If unsuccessful (for example, if the user closed the oauth login popup),\n  //     throws an error describing the reason\n\n  methods.login = function (options) {\n    var self = this; // Login handlers should really also check whatever field they look at in\n    // options, but we don't enforce it.\n\n    check(options, Object);\n\n    var result = accounts._runLoginHandlers(self, options);\n\n    return accounts._attemptLogin(self, \"login\", arguments, result);\n  };\n\n  methods.logout = function () {\n    var token = accounts._getLoginToken(this.connection.id);\n\n    accounts._setLoginToken(this.userId, this.connection, null);\n\n    if (token && this.userId) accounts.destroyToken(this.userId, token);\n\n    accounts._successfulLogout(this.connection, this.userId);\n\n    this.setUserId(null);\n  }; // Delete all the current user's tokens and close all open connections logged\n  // in as this user. Returns a fresh new login token that this client can\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n  // immediately instead of using a delay.\n  //\n  // XXX COMPAT WITH 0.7.2\n  // This single `logoutOtherClients` method has been replaced with two\n  // methods, one that you call to get a new token, and another that you\n  // call to remove all tokens except your own. The new design allows\n  // clients to know when other clients have actually been logged\n  // out. (The `logoutOtherClients` method guarantees the caller that\n  // the other clients will be logged out at some point, but makes no\n  // guarantees about when.) This method is left in for backwards\n  // compatibility, especially since application code might be calling\n  // this method directly.\n  //\n  // @returns {Object} Object with token and tokenExpires keys.\n\n\n  methods.logoutOtherClients = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": true\n      }\n    });\n\n    if (user) {\n      // Save the current tokens in the database to be deleted in\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n      // caller's browser time to find the fresh token in localStorage. We save\n      // the tokens in the database in case we crash before actually deleting\n      // them.\n      var tokens = user.services.resume.loginTokens;\n\n      var newToken = accounts._generateStampedLoginToken();\n\n      var userId = self.userId;\n      accounts.users.update(userId, {\n        $set: {\n          \"services.resume.loginTokensToDelete\": tokens,\n          \"services.resume.haveLoginTokensToDelete\": true\n        },\n        $push: {\n          \"services.resume.loginTokens\": accounts._hashStampedToken(newToken)\n        }\n      });\n      Meteor.setTimeout(function () {\n        // The observe on Meteor.users will take care of closing the connections\n        // associated with `tokens`.\n        accounts._deleteSavedTokensForUser(userId, tokens);\n      }, accounts._noConnectionCloseDelayForTest ? 0 : CONNECTION_CLOSE_DELAY_MS); // We do not set the login token on this connection, but instead the\n      // observe closes the connection and the client will reconnect with the\n      // new token.\n\n      return {\n        token: newToken.token,\n        tokenExpires: accounts._tokenExpiration(newToken.when)\n      };\n    } else {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n  }; // Generates a new login token with the same expiration as the\n  // connection's current token and saves it to the database. Associates\n  // the connection with this new token and returns it. Throws an error\n  // if called on a connection that isn't logged in.\n  //\n  // @returns Object\n  //   If successful, returns { token: <new token>, id: <user id>,\n  //   tokenExpires: <expiration date> }.\n\n\n  methods.getNewToken = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": 1\n      }\n    });\n\n    if (!self.userId || !user) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    } // Be careful not to generate a new token that has a later\n    // expiration than the curren token. Otherwise, a bad guy with a\n    // stolen token could use this method to stop his stolen token from\n    // ever expiring.\n\n\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);\n\n    var currentStampedToken = _.find(user.services.resume.loginTokens, function (stampedToken) {\n      return stampedToken.hashedToken === currentHashedToken;\n    });\n\n    if (!currentStampedToken) {\n      // safety belt: this should never happen\n      throw new Meteor.Error(\"Invalid login token\");\n    }\n\n    var newStampedToken = accounts._generateStampedLoginToken();\n\n    newStampedToken.when = currentStampedToken.when;\n\n    accounts._insertLoginToken(self.userId, newStampedToken);\n\n    return accounts._loginUser(self, self.userId, newStampedToken);\n  }; // Removes all tokens except the token associated with the current\n  // connection. Throws an error if the connection is not logged\n  // in. Returns nothing on success.\n\n\n  methods.removeOtherTokens = function () {\n    var self = this;\n\n    if (!self.userId) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n\n    var currentToken = accounts._getLoginToken(self.connection.id);\n\n    accounts.users.update(self.userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          hashedToken: {\n            $ne: currentToken\n          }\n        }\n      }\n    });\n  }; // Allow a one-time configuration for a login service. Modifications\n  // to this collection are also allowed in insecure mode.\n\n\n  methods.configureLoginService = function (options) {\n    check(options, Match.ObjectIncluding({\n      service: String\n    })); // Don't let random users configure a service we haven't added yet (so\n    // that when we do later add it, it's set up with their configuration\n    // instead of ours).\n    // XXX if service configuration is oauth-specific then this code should\n    //     be in accounts-oauth; if it's not then the registry should be\n    //     in this package\n\n    if (!(accounts.oauth && _.contains(accounts.oauth.serviceNames(), options.service))) {\n      throw new Meteor.Error(403, \"Service unknown\");\n    }\n\n    var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n    if (ServiceConfiguration.configurations.findOne({\n      service: options.service\n    })) throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n    if (_.has(options, \"secret\") && usingOAuthEncryption()) options.secret = OAuthEncryption.seal(options.secret);\n    ServiceConfiguration.configurations.insert(options);\n  };\n\n  accounts._server.methods(methods);\n};\n\nAp._initAccountDataHooks = function () {\n  var accounts = this;\n\n  accounts._server.onConnection(function (connection) {\n    accounts._accountData[connection.id] = {\n      connection: connection\n    };\n    connection.onClose(function () {\n      accounts._removeTokenFromConnection(connection.id);\n\n      delete accounts._accountData[connection.id];\n    });\n  });\n};\n\nAp._initServerPublications = function () {\n  var accounts = this; // Publish all login service configuration fields other than secret.\n\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {\n    var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n    return ServiceConfiguration.configurations.find({}, {\n      fields: {\n        secret: 0\n      }\n    });\n  }, {\n    is_auto: true\n  }); // not techincally autopublish, but stops the warning.\n  // Publish the current user's record to the client.\n\n\n  accounts._server.publish(null, function () {\n    if (this.userId) {\n      return accounts.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          profile: 1,\n          username: 1,\n          emails: 1\n        }\n      });\n    } else {\n      return null;\n    }\n  },\n  /*suppress autopublish warning*/\n  {\n    is_auto: true\n  }); // Use Meteor.startup to give other packages a chance to call\n  // addAutopublishFields.\n\n\n  Package.autopublish && Meteor.startup(function () {\n    // ['profile', 'username'] -> {profile: 1, username: 1}\n    var toFieldSelector = function (fields) {\n      return _.object(_.map(fields, function (field) {\n        return [field, 1];\n      }));\n    };\n\n    accounts._server.publish(null, function () {\n      if (this.userId) {\n        return accounts.users.find({\n          _id: this.userId\n        }, {\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)\n        });\n      } else {\n        return null;\n      }\n    },\n    /*suppress autopublish warning*/\n    {\n      is_auto: true\n    }); // XXX this publish is neither dedup-able nor is it optimized by our special\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)\n    // run-time performance every time a user document is changed (eg someone\n    // logging in). If this is a problem, we can instead write a manual publish\n    // function which filters out fields based on 'this.userId'.\n\n\n    accounts._server.publish(null, function () {\n      var selector = this.userId ? {\n        _id: {\n          $ne: this.userId\n        }\n      } : {};\n      return accounts.users.find(selector, {\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)\n      });\n    },\n    /*suppress autopublish warning*/\n    {\n      is_auto: true\n    });\n  });\n}; // Add to the list of fields or subfields to be automatically\n// published if autopublish is on. Must be called from top-level\n// code (ie, before Meteor.startup hooks run).\n//\n// @param opts {Object} with:\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n\n\nAp.addAutopublishFields = function (opts) {\n  this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n\n  this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);\n}; ///\n/// ACCOUNT DATA\n///\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a\n// connection. Maybe there should be a public way to do that.\n\n\nAp._getAccountData = function (connectionId, field) {\n  var data = this._accountData[connectionId];\n  return data && data[field];\n};\n\nAp._setAccountData = function (connectionId, field, value) {\n  var data = this._accountData[connectionId]; // safety belt. shouldn't happen. accountData is set in onConnection,\n  // we don't have a connectionId until it is set.\n\n  if (!data) return;\n  if (value === undefined) delete data[field];else data[field] = value;\n}; ///\n/// RECONNECT TOKENS\n///\n/// support reconnecting using a meteor login token\n\n\nAp._hashLoginToken = function (loginToken) {\n  var hash = crypto.createHash('sha256');\n  hash.update(loginToken);\n  return hash.digest('base64');\n}; // {token, when} => {hashedToken, when}\n\n\nAp._hashStampedToken = function (stampedToken) {\n  return _.extend(_.omit(stampedToken, 'token'), {\n    hashedToken: this._hashLoginToken(stampedToken.token)\n  });\n}; // Using $addToSet avoids getting an index error if another client\n// logging in simultaneously has already inserted the new hashed\n// token.\n\n\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {\n  query = query ? _.clone(query) : {};\n  query._id = userId;\n  this.users.update(query, {\n    $addToSet: {\n      \"services.resume.loginTokens\": hashedToken\n    }\n  });\n}; // Exported for tests.\n\n\nAp._insertLoginToken = function (userId, stampedToken, query) {\n  this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);\n};\n\nAp._clearAllLoginTokens = function (userId) {\n  this.users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': []\n    }\n  });\n}; // test hook\n\n\nAp._getUserObserve = function (connectionId) {\n  return this._userObservesForConnections[connectionId];\n}; // Clean up this connection's association with the token: that is, stop\n// the observe that we started when we associated the connection with\n// this token.\n\n\nAp._removeTokenFromConnection = function (connectionId) {\n  if (_.has(this._userObservesForConnections, connectionId)) {\n    var observe = this._userObservesForConnections[connectionId];\n\n    if (typeof observe === 'number') {\n      // We're in the process of setting up an observe for this connection. We\n      // can't clean up that observe yet, but if we delete the placeholder for\n      // this connection, then the observe will get cleaned up as soon as it has\n      // been set up.\n      delete this._userObservesForConnections[connectionId];\n    } else {\n      delete this._userObservesForConnections[connectionId];\n      observe.stop();\n    }\n  }\n};\n\nAp._getLoginToken = function (connectionId) {\n  return this._getAccountData(connectionId, 'loginToken');\n}; // newToken is a hashed token.\n\n\nAp._setLoginToken = function (userId, connection, newToken) {\n  var self = this;\n\n  self._removeTokenFromConnection(connection.id);\n\n  self._setAccountData(connection.id, 'loginToken', newToken);\n\n  if (newToken) {\n    // Set up an observe for this token. If the token goes away, we need\n    // to close the connection.  We defer the observe because there's\n    // no need for it to be on the critical path for login; we just need\n    // to ensure that the connection will get closed at some point if\n    // the token gets deleted.\n    //\n    // Initially, we set the observe for this connection to a number; this\n    // signifies to other code (which might run while we yield) that we are in\n    // the process of setting up an observe for this connection. Once the\n    // observe is ready to go, we replace the number with the real observe\n    // handle (unless the placeholder has been deleted or replaced by a\n    // different placehold number, signifying that the connection was closed\n    // already -- in this case we just clean up the observe that we started).\n    var myObserveNumber = ++self._nextUserObserveNumber;\n    self._userObservesForConnections[connection.id] = myObserveNumber;\n    Meteor.defer(function () {\n      // If something else happened on this connection in the meantime (it got\n      // closed, or another call to _setLoginToken happened), just do\n      // nothing. We don't need to start an observe for an old connection or old\n      // token.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        return;\n      }\n\n      var foundMatchingUser; // Because we upgrade unhashed login tokens to hashed tokens at\n      // login time, sessions will only be logged in with a hashed\n      // token. Thus we only need to observe hashed tokens here.\n\n      var observe = self.users.find({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': newToken\n      }, {\n        fields: {\n          _id: 1\n        }\n      }).observeChanges({\n        added: function () {\n          foundMatchingUser = true;\n        },\n        removed: function () {\n          connection.close(); // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }\n      }); // If the user ran another login or logout command we were waiting for the\n      // defer or added to fire (ie, another call to _setLoginToken occurred),\n      // then we let the later one win (start an observe, etc) and just stop our\n      // observe now.\n      //\n      // Similarly, if the connection was already closed, then the onClose\n      // callback would have called _removeTokenFromConnection and there won't\n      // be an entry in _userObservesForConnections. We can stop the observe.\n\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        observe.stop();\n        return;\n      }\n\n      self._userObservesForConnections[connection.id] = observe;\n\n      if (!foundMatchingUser) {\n        // We've set up an observe on the user associated with `newToken`,\n        // so if the new token is removed from the database, we'll close\n        // the connection. But the token might have already been deleted\n        // before we set up the observe, which wouldn't have closed the\n        // connection because the observe wasn't running yet.\n        connection.close();\n      }\n    });\n  }\n};\n\nfunction setupDefaultLoginHandlers(accounts) {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n} // Login handler for resume tokens.\n\n\nfunction defaultResumeLoginHandler(accounts, options) {\n  if (!options.resume) return undefined;\n  check(options.resume, String);\n\n  var hashedToken = accounts._hashLoginToken(options.resume); // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n\n\n  var user = accounts.users.findOne({\n    \"services.resume.loginTokens.hashedToken\": hashedToken\n  });\n\n  if (!user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [{\n        \"services.resume.loginTokens.hashedToken\": hashedToken\n      }, {\n        \"services.resume.loginTokens.token\": options.resume\n      }]\n    });\n  }\n\n  if (!user) return {\n    error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n  }; // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n\n  var oldUnhashedStyleToken;\n\n  var token = _.find(user.services.resume.loginTokens, function (token) {\n    return token.hashedToken === hashedToken;\n  });\n\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = _.find(user.services.resume.loginTokens, function (token) {\n      return token.token === options.resume;\n    });\n    oldUnhashedStyleToken = true;\n  }\n\n  var tokenExpires = accounts._tokenExpiration(token.when);\n\n  if (new Date() >= tokenExpires) return {\n    userId: user._id,\n    error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n  }; // Update to a hashed token when an unhashed token is encountered.\n\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update({\n      _id: user._id,\n      \"services.resume.loginTokens.token\": options.resume\n    }, {\n      $addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }\n    }); // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          \"token\": options.resume\n        }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n} // (Also used by Meteor Accounts server and tests).\n//\n\n\nAp._generateStampedLoginToken = function () {\n  return {\n    token: Random.secret(),\n    when: new Date()\n  };\n}; ///\n/// TOKEN EXPIRATION\n///\n\n\nfunction expirePasswordToken(accounts, oldestValidDate, tokenFilter, userId) {\n  const userFilter = userId ? {\n    _id: userId\n  } : {};\n  const resetRangeOr = {\n    $or: [{\n      \"services.password.reset.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.password.reset.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  };\n  const expireFilter = {\n    $and: [tokenFilter, resetRangeOr]\n  };\n  accounts.users.update((0, _objectSpread2.default)({}, userFilter, expireFilter), {\n    $unset: {\n      \"services.password.reset\": \"\"\n    }\n  }, {\n    multi: true\n  });\n} // Deletes expired tokens from the database and closes all open connections\n// associated with these tokens.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\n\n\nAp._expireTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n  if (oldestValidDate && !userId || !oldestValidDate && userId) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n  var userFilter = userId ? {\n    _id: userId\n  } : {}; // Backwards compatible with older versions of meteor that stored login token\n  // timestamps as numbers.\n\n  this.users.update(_.extend(userFilter, {\n    $or: [{\n      \"services.resume.loginTokens.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.resume.loginTokens.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  }), {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [{\n          when: {\n            $lt: oldestValidDate\n          }\n        }, {\n          when: {\n            $lt: +oldestValidDate\n          }\n        }]\n      }\n    }\n  }, {\n    multi: true\n  }); // The observe on Meteor.users will take care of closing connections for\n  // expired tokens.\n}; // Deletes expired password reset tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\n\n\nAp._expirePasswordResetTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n  if (oldestValidDate && !userId || !oldestValidDate && userId) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n  var tokenFilter = {\n    $or: [{\n      \"services.password.reset.reason\": \"reset\"\n    }, {\n      \"services.password.reset.reason\": {\n        $exists: false\n      }\n    }]\n  };\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}; // Deletes expired password enroll tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\n\n\nAp._expirePasswordEnrollTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n  if (oldestValidDate && !userId || !oldestValidDate && userId) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n  var tokenFilter = {\n    \"services.password.reset.reason\": \"enroll\"\n  };\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}; // @override from accounts_common.js\n\n\nAp.config = function (options) {\n  // Call the overridden implementation of the method.\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments); // If the user set loginExpirationInDays to null, then we need to clear the\n  // timer that periodically expires tokens.\n\n  if (_.has(this._options, \"loginExpirationInDays\") && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);\n    this.expireTokenInterval = null;\n  }\n\n  return superResult;\n};\n\nfunction setExpireTokensInterval(accounts) {\n  accounts.expireTokenInterval = Meteor.setInterval(function () {\n    accounts._expireTokens();\n\n    accounts._expirePasswordResetTokens();\n\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n} ///\n/// OAuth Encryption Support\n///\n\n\nvar OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nfunction usingOAuthEncryption() {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n} // OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\n\n\nfunction pinEncryptedFieldsToUser(serviceData, userId) {\n  _.each(_.keys(serviceData), function (key) {\n    var value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n} // Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\n\nMeteor.startup(function () {\n  if (!usingOAuthEncryption()) {\n    return;\n  }\n\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: {\n        $exists: true\n      }\n    }, {\n      \"secret.algorithm\": {\n        $exists: false\n      }\n    }]\n  }).forEach(function (config) {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n}); // XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\n\nfunction defaultCreateUserHook(options, user) {\n  if (options.profile) user.profile = options.profile;\n  return user;\n} // Called by accounts-password\n\n\nAp.insertUserDoc = function (options, user) {\n  // - clone user document, to protect from modification\n  // - add createdAt timestamp\n  // - prepare an _id, so that you can modify other collections (eg\n  // create a first task for every new user)\n  //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might\n  // end up having modified some other collection\n  // inappropriately. The solution is probably to have onCreateUser\n  // accept two callbacks - one that gets called before inserting\n  // the user document (in which you can modify its contents), and\n  // one that gets called after (in which you should change other\n  // collections)\n  user = _.extend({\n    createdAt: new Date(),\n    _id: Random.id()\n  }, user);\n\n  if (user.services) {\n    _.each(user.services, function (serviceData) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n    });\n  }\n\n  var fullUser;\n\n  if (this._onCreateUserHook) {\n    fullUser = this._onCreateUserHook(options, user); // This is *not* part of the API. We need this because we can't isolate\n    // the global server environment between tests, meaning we can't test\n    // both having a create user hook set and not having one set.\n\n    if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);\n  } else {\n    fullUser = defaultCreateUserHook(options, user);\n  }\n\n  _.each(this._validateNewUserHooks, function (hook) {\n    if (!hook(fullUser)) throw new Meteor.Error(403, \"User validation failed\");\n  });\n\n  var userId;\n\n  try {\n    userId = this.users.insert(fullUser);\n  } catch (e) {\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e;\n    if (e.code !== 11000) throw e;\n    if (e.errmsg.indexOf('emails.address') !== -1) throw new Meteor.Error(403, \"Email already exists.\");\n    if (e.errmsg.indexOf('username') !== -1) throw new Meteor.Error(403, \"Username already exists.\"); // XXX better error reporting for services.facebook.id duplicate, etc\n\n    throw e;\n  }\n\n  return userId;\n}; // Helper function: returns false if email does not match company domain from\n// the configuration.\n\n\nAp._testEmailDomain = function (email) {\n  var domain = this._options.restrictCreationByEmailDomain;\n  return !domain || _.isFunction(domain) && domain(email) || _.isString(domain) && new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i').test(email);\n}; // Validate new user's email or Google/Facebook/GitHub account's email\n\n\nfunction defaultValidateNewUserHook(user) {\n  var self = this;\n  var domain = self._options.restrictCreationByEmailDomain;\n  if (!domain) return true;\n  var emailIsGood = false;\n\n  if (!_.isEmpty(user.emails)) {\n    emailIsGood = _.any(user.emails, function (email) {\n      return self._testEmailDomain(email.address);\n    });\n  } else if (!_.isEmpty(user.services)) {\n    // Find any email of any service and check it\n    emailIsGood = _.any(user.services, function (service) {\n      return service.email && self._testEmailDomain(service.email);\n    });\n  }\n\n  if (emailIsGood) return true;\n  if (_.isString(domain)) throw new Meteor.Error(403, \"@\" + domain + \" email required\");else throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n} ///\n/// MANAGING USER OBJECTS\n///\n// Updates or creates a user after we authenticate with a 3rd party.\n//\n// @param serviceName {String} Service name (eg, twitter).\n// @param serviceData {Object} Data to store in the user's record\n//        under services[serviceName]. Must include an \"id\" field\n//        which is a unique identifier for the user in the service.\n// @param options {Object, optional} Other options to pass to insertUserDoc\n//        (eg, profile)\n// @returns {Object} Object with token and id keys, like the result\n//        of the \"login\" method.\n//\n\n\nAp.updateOrCreateUserFromExternalService = function (serviceName, serviceData, options) {\n  options = _.clone(options || {});\n  if (serviceName === \"password\" || serviceName === \"resume\") throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n  if (!_.has(serviceData, 'id')) throw new Error(\"Service data for service \" + serviceName + \" must include id\"); // Look for a user with the appropriate service user id.\n\n  var selector = {};\n  var serviceIdKey = \"services.\" + serviceName + \".id\"; // XXX Temporary special case for Twitter. (Issue #629)\n  //   The serviceData.id will be a string representation of an integer.\n  //   We want it to match either a stored string or int representation.\n  //   This is to cater to earlier versions of Meteor storing twitter\n  //   user IDs in number form, and recent versions storing them as strings.\n  //   This can be removed once migration technology is in place, and twitter\n  //   users stored with integer IDs have been migrated to string IDs.\n\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n    selector[\"$or\"] = [{}, {}];\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n  } else {\n    selector[serviceIdKey] = serviceData.id;\n  }\n\n  var user = this.users.findOne(selector); // When creating a new user we pass through all options. When updating an\n  // existing user, by default we only process/pass through the serviceData\n  // (eg, so that we keep an unexpired access token and don't cache old email\n  // addresses in serviceData.email). The onExternalLogin hook can be used when\n  // creating or updating a user, to modify or pass through more options as\n  // needed.\n\n  var opts = user ? {} : options;\n\n  if (this._onExternalLoginHook) {\n    opts = this._onExternalLoginHook(options, user);\n  }\n\n  if (user) {\n    pinEncryptedFieldsToUser(serviceData, user._id);\n    var setAttrs = {};\n\n    _.each(serviceData, function (value, key) {\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;\n    }); // XXX Maybe we should re-use the selector above and notice if the update\n    //     touches nothing?\n\n\n    setAttrs = _.extend({}, setAttrs, opts);\n    this.users.update(user._id, {\n      $set: setAttrs\n    });\n    return {\n      type: serviceName,\n      userId: user._id\n    };\n  } else {\n    // Create a new user with the service data.\n    user = {\n      services: {}\n    };\n    user.services[serviceName] = serviceData;\n    return {\n      type: serviceName,\n      userId: this.insertUserDoc(opts, user)\n    };\n  }\n};\n\nfunction setupUsersCollection(users) {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: function (userId, user, fields, modifier) {\n      // make sure it is our record\n      if (user._id !== userId) return false; // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n\n      if (fields.length !== 1 || fields[0] !== 'profile') return false;\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n\n  }); /// DEFAULT INDEXES ON USERS\n\n  users._ensureIndex('username', {\n    unique: 1,\n    sparse: 1\n  });\n\n  users._ensureIndex('emails.address', {\n    unique: 1,\n    sparse: 1\n  });\n\n  users._ensureIndex('services.resume.loginTokens.hashedToken', {\n    unique: 1,\n    sparse: 1\n  });\n\n  users._ensureIndex('services.resume.loginTokens.token', {\n    unique: 1,\n    sparse: 1\n  }); // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n\n\n  users._ensureIndex('services.resume.haveLoginTokensToDelete', {\n    sparse: 1\n  }); // For expiring login tokens\n\n\n  users._ensureIndex(\"services.resume.loginTokens.when\", {\n    sparse: 1\n  }); // For expiring password tokens\n\n\n  users._ensureIndex('services.password.reset.when', {\n    sparse: 1\n  });\n} ///\n/// CLEAN UP FOR `logoutOtherClients`\n///\n\n\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {\n  if (tokensToDelete) {\n    this.users.update(userId, {\n      $unset: {\n        \"services.resume.haveLoginTokensToDelete\": 1,\n        \"services.resume.loginTokensToDelete\": 1\n      },\n      $pullAll: {\n        \"services.resume.loginTokens\": tokensToDelete\n      }\n    });\n  }\n};\n\nAp._deleteSavedTokensForAllUsersOnStartup = function () {\n  var self = this; // If we find users who have saved tokens to delete on startup, delete\n  // them now. It's possible that the server could have crashed and come\n  // back up before new tokens are found in localStorage, but this\n  // shouldn't happen very often. We shouldn't put a delay here because\n  // that would give a lot of power to an attacker with a stolen login\n  // token and the ability to crash the server.\n\n  Meteor.startup(function () {\n    self.users.find({\n      \"services.resume.haveLoginTokensToDelete\": true\n    }, {\n      \"services.resume.loginTokensToDelete\": 1\n    }).forEach(function (user) {\n      self._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete);\n    });\n  });\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"url_server.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/url_server.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet AccountsServer;\nmodule.watch(require(\"./accounts_server.js\"), {\n  AccountsServer(v) {\n    AccountsServer = v;\n  }\n\n}, 0);\n// XXX These should probably not actually be public?\nAccountsServer.prototype.urls = {\n  resetPassword: function (token) {\n    return Meteor.absoluteUrl('#/reset-password/' + token);\n  },\n  verifyEmail: function (token) {\n    return Meteor.absoluteUrl('#/verify-email/' + token);\n  },\n  enrollAccount: function (token) {\n    return Meteor.absoluteUrl('#/enroll-account/' + token);\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/accounts-base/server_main.js\");\n\n/* Exports */\nPackage._define(\"accounts-base\", exports, {\n  Accounts: Accounts\n});\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["packages/accounts-base/server_main.js","packages/accounts-base/accounts_common.js","packages/accounts-base/accounts_rate_limit.js","packages/accounts-base/accounts_server.js","packages/accounts-base/url_server.js"],"names":["module1","module","export","AccountsServer","watch","require","v","Accounts","Meteor","server","users","AccountsCommon","constructor","options","_options","connection","undefined","_initConnection","Mongo","Collection","_preventAutopublish","_onLoginHook","Hook","bindEnvironment","debugPrintExceptions","_onLoginFailureHook","_onLogoutHook","userId","Error","user","findOne","config","self","isServer","__meteor_runtime_config__","accountsConfigCalled","_debug","_","has","isClient","Package","OAuthEncryption","loadKey","oauthSecretKey","omit","VALID_KEYS","each","keys","key","contains","onLogin","func","register","onLoginFailure","onLogout","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","LOGIN_UNEXPIRING_TOKEN_DAYS","DEFAULT_LOGIN_EXPIRATION_DAYS","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","_tokenExpiration","when","Date","getTime","_tokenExpiresSoon","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","Ap","prototype","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","startup","ServiceConfiguration","loginServiceConfiguration","configurations","ConfigError","lceName","LoginCancelledError","makeErrorType","description","message","name","numericError","defaultRateLimiterRuleId","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","addDefaultRateLimit","addRule","clientAddress","type","connectionId","crypto","Npm","_server","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","currentInvocation","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","validateLoginAttempt","validateNewUser","push","onCreateUser","_onCreateUserHook","onExternalLogin","_onExternalLoginHook","cloneAttemptWithConnection","attempt","clonedAttempt","EJSON","clone","_validateLogin","callback","ret","e","allowed","error","_successfulLogin","_failedLogin","_successfulLogout","tryLoginMethod","fn","result","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","token","setUserId","id","tokenExpires","_attemptLogin","methodName","methodArgs","methodArguments","toArray","extend","_loginMethod","_reportLoginFailure","registerLoginHandler","handler","_runLoginHandlers","i","length","call","destroyToken","loginToken","update","$pull","$or","hashedToken","accounts","methods","login","check","Object","arguments","logout","_getLoginToken","logoutOtherClients","fields","tokens","services","resume","loginTokens","newToken","$set","$push","_hashStampedToken","setTimeout","_deleteSavedTokensForUser","_noConnectionCloseDelayForTest","getNewToken","currentHashedToken","currentStampedToken","find","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","Match","ObjectIncluding","service","String","oauth","serviceNames","usingOAuthEncryption","secret","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","is_auto","_id","profile","username","emails","autopublish","toFieldSelector","object","map","field","selector","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","_getAccountData","data","_setAccountData","value","hash","createHash","digest","_insertHashedLoginToken","query","$addToSet","_clearAllLoginTokens","_getUserObserve","observe","stop","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","defaultResumeLoginHandler","oldUnhashedStyleToken","Random","expirePasswordToken","oldestValidDate","tokenFilter","userFilter","resetRangeOr","$lt","expireFilter","$and","$unset","multi","_expireTokens","tokenLifetimeMs","_expirePasswordResetTokens","$exists","_expirePasswordEnrollTokens","superResult","expireTokenInterval","clearInterval","setInterval","keyIsLoaded","pinEncryptedFieldsToUser","serviceData","isSealed","open","forEach","defaultCreateUserHook","insertUserDoc","createdAt","fullUser","hook","code","errmsg","indexOf","_testEmailDomain","email","domain","restrictCreationByEmailDomain","isFunction","isString","RegExp","_escapeRegExp","test","emailIsGood","isEmpty","any","address","updateOrCreateUserFromExternalService","serviceName","serviceIdKey","isNaN","parseInt","setAttrs","allow","modifier","fetch","_ensureIndex","unique","sparse","tokensToDelete","$pullAll","loginTokensToDelete","urls","resetPassword","absoluteUrl","verifyEmail","enrollAccount"],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsServer} from \"./accounts_server.js\";\nimport \"./accounts_rate_limit.js\";\nimport \"./url_server.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all server-side accounts-related methods.\n */\nAccounts = new AccountsServer(Meteor.server);\n\n// Users table. Don't use the normal autopublish, since we want to hide\n// some fields. Code to autopublish this is in accounts_server.js.\n// XXX Allow users to configure this collection name.\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n*/\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the server version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsServer\n};\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\",\n                      \"ambiguousErrorMessages\", \"bcryptRounds\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      (this._options.loginExpirationInDays === null)\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (loginExpirationInDays\n        || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Expose for testing.\nAp.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n// Expose for testing.\nAp.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsCommon} from \"./accounts_common.js\";\n\nvar Ap = AccountsCommon.prototype;\nvar defaultRateLimiterRuleId;\n// Removes default rate limiting rule\nAp.removeDefaultRateLimit = function () {\n  const resp = DDPRateLimiter.removeRule(defaultRateLimiterRuleId);\n  defaultRateLimiterRuleId = null;\n  return resp;\n};\n\n// Add a default rule of limiting logins, creating new users and password reset\n// to 5 times every 10 seconds per connection.\nAp.addDefaultRateLimit = function () {\n  if (!defaultRateLimiterRuleId) {\n    defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n      userId: null,\n      clientAddress: null,\n      type: 'method',\n      name: function (name) {\n        return _.contains(['login', 'createUser', 'resetPassword',\n          'forgotPassword'], name);\n      },\n      connectionId: function (connectionId) {\n        return true;\n      }\n    }, 5, 10000);\n  }\n};\n\nAp.addDefaultRateLimit();\n","var crypto = Npm.require('crypto');\n\nimport {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the infomation from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n};\n\nvar Ap = AccountsServer.prototype;\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nfunction cloneAttemptWithConnection(connection, attempt) {\n  var clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n}\n\nAp._validateLogin = function (connection, attempt) {\n  this._validateLoginHook.each(function (callback) {\n    var ret;\n    try {\n      ret = callback(cloneAttemptWithConnection(connection, attempt));\n    }\n    catch (e) {\n      attempt.allowed = false;\n      // XXX this means the last thrown error overrides previous error\n      // messages. Maybe this is surprising to users and we should make\n      // overriding errors more explicit. (see\n      // https://github.com/meteor/meteor/issues/1960)\n      attempt.error = e;\n      return true;\n    }\n    if (! ret) {\n      attempt.allowed = false;\n      // don't override a specific error provided by a previous\n      // validator or the initial attempt (eg \"incorrect password\").\n      if (!attempt.error)\n        attempt.error = new Meteor.Error(403, \"Login forbidden\");\n    }\n    return true;\n  });\n};\n\n\nAp._successfulLogin = function (connection, attempt) {\n  this._onLoginHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._failedLogin = function (connection, attempt) {\n  this._onLoginFailureHook.each(function (callback) {\n    callback(cloneAttemptWithConnection(connection, attempt));\n    return true;\n  });\n};\n\nAp._successfulLogout = function (connection, userId) {\n  const user = userId && this.users.findOne(userId);\n  this._onLogoutHook.each(function (callback) {\n    callback({ user, connection });\n    return true;\n  });\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Login methods return to the client an object containing these\n// fields when the user was logged in successfully:\n//\n//   id: userId\n//   token: *\n//   tokenExpires: *\n//\n// tokenExpires is optional and intends to provide a hint to the\n// client as to when the token will expire. If not provided, the\n// client will call Accounts._tokenExpiration, passing it the date\n// that it received the token.\n//\n// The login method will throw an error back to the client if the user\n// failed to log in.\n//\n//\n// Login handlers and service specific login methods such as\n// `createUser` internally return a `result` object containing these\n// fields:\n//\n//   type:\n//     optional string; the service name, overrides the handler\n//     default if present.\n//\n//   error:\n//     exception; if the user is not allowed to login, the reason why.\n//\n//   userId:\n//     string; the user id of the user attempting to login (if\n//     known), required for an allowed login.\n//\n//   options:\n//     optional object merged into the result returned by the login\n//     method; used by HAMK from SRP.\n//\n//   stampedLoginToken:\n//     optional object with `token` and `when` indicating the login\n//     token is already present in the database, returned by the\n//     \"resume\" login handler.\n//\n// For convenience, login methods can also throw an exception, which\n// is converted into an {error} result.  However, if the id of the\n// user attempting the login is known, a {userId, error} result should\n// be returned instead since the user id is not captured when an\n// exception is thrown.\n//\n// This internal `result` object is automatically converted into the\n// public {id, token, tokenExpires} object returned to the client.\n\n\n// Try a login method, converting thrown exceptions into an {error}\n// result.  The `type` argument is a default, inserted into the result\n// object if not explicitly returned.\n//\nvar tryLoginMethod = function (type, fn) {\n  var result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\n\n// Log in a user on a connection.\n//\n// We use the method invocation to set the user id on the connection,\n// not the connection object directly. setUserId is tied to methods to\n// enforce clear ordering of method application (using wait methods on\n// the client, and a no setUserId after unblock restriction on the\n// server)\n//\n// The `stampedLoginToken` parameter is optional.  When present, it\n// indicates that the login token has already been inserted into the\n// database and doesn't need to be inserted again.  (It's used by the\n// \"resume\" login handler).\nAp._loginUser = function (methodInvocation, userId, stampedLoginToken) {\n  var self = this;\n\n  if (! stampedLoginToken) {\n    stampedLoginToken = self._generateStampedLoginToken();\n    self._insertLoginToken(userId, stampedLoginToken);\n  }\n\n  // This order (and the avoidance of yields) is important to make\n  // sure that when publish functions are rerun, they see a\n  // consistent view of the world: the userId is set and matches\n  // the login token on the connection (not that there is\n  // currently a public API for reading the login token on a\n  // connection).\n  Meteor._noYieldsAllowed(function () {\n    self._setLoginToken(\n      userId,\n      methodInvocation.connection,\n      self._hashLoginToken(stampedLoginToken.token)\n    );\n  });\n\n  methodInvocation.setUserId(userId);\n\n  return {\n    id: userId,\n    token: stampedLoginToken.token,\n    tokenExpires: self._tokenExpiration(stampedLoginToken.when)\n  };\n};\n\n\n// After a login method has completed, call the login hooks.  Note\n// that `attemptLogin` is called for *all* login attempts, even ones\n// which aren't successful (such as an invalid password, etc).\n//\n// If the login is allowed and isn't aborted by a validate login hook\n// callback, log in the user.\n//\nAp._attemptLogin = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  if (!result)\n    throw new Error(\"result is required\");\n\n  // XXX A programming error in a login handler can lead to this occuring, and\n  // then we don't call onLogin or onLoginFailure callbacks. Should\n  // tryLoginMethod catch this case and turn it into an error?\n  if (!result.userId && !result.error)\n    throw new Error(\"A login method must specify a userId or an error\");\n\n  var user;\n  if (result.userId)\n    user = this.users.findOne(result.userId);\n\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: !! (result.userId && !result.error),\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n  if (result.error)\n    attempt.error = result.error;\n  if (user)\n    attempt.user = user;\n\n  // _validateLogin may mutate `attempt` by adding an error and changing allowed\n  // to false, but that's the only change it can make (and the user's callbacks\n  // only get a clone of `attempt`).\n  this._validateLogin(methodInvocation.connection, attempt);\n\n  if (attempt.allowed) {\n    var ret = _.extend(\n      this._loginUser(\n        methodInvocation,\n        result.userId,\n        result.stampedLoginToken\n      ),\n      result.options || {}\n    );\n    ret.type = attempt.type;\n    this._successfulLogin(methodInvocation.connection, attempt);\n    return ret;\n  }\n  else {\n    this._failedLogin(methodInvocation.connection, attempt);\n    throw attempt.error;\n  }\n};\n\n\n// All service specific login methods should go through this function.\n// Ensure that thrown exceptions are caught and that login hook\n// callbacks are still called.\n//\nAp._loginMethod = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  type,\n  fn\n) {\n  return this._attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    tryLoginMethod(type, fn)\n  );\n};\n\n\n// Report a login attempt failed outside the context of a normal login\n// method. This is for use in the case where there is a multi-step login\n// procedure (eg SRP based password login). If a method early in the\n// chain fails, it should call this function to report a failure. There\n// is no corresponding method for a successful login; methods that can\n// succeed at logging a user in should always be actual login methods\n// (using either Accounts._loginMethod or Accounts.registerLoginHandler).\nAp._reportLoginFailure = function (\n  methodInvocation,\n  methodName,\n  methodArgs,\n  result\n) {\n  var attempt = {\n    type: result.type || \"unknown\",\n    allowed: false,\n    error: result.error,\n    methodName: methodName,\n    methodArguments: _.toArray(methodArgs)\n  };\n\n  if (result.userId) {\n    attempt.user = this.users.findOne(result.userId);\n  }\n\n  this._validateLogin(methodInvocation.connection, attempt);\n  this._failedLogin(methodInvocation.connection, attempt);\n\n  // _validateLogin may mutate attempt to set a new error message. Return\n  // the modified version.\n  return attempt;\n};\n\n\n///\n/// LOGIN HANDLERS\n///\n\n// The main entry point for auth packages to hook in to login.\n//\n// A login handler is a login method which can return `undefined` to\n// indicate that the login request is not handled by this handler.\n//\n// @param name {String} Optional.  The service name, used by default\n// if a specific service name isn't returned in the result.\n//\n// @param handler {Function} A function that receives an options object\n// (as passed as an argument to the `login` method) and returns one of:\n// - `undefined`, meaning don't handle;\n// - a login method result object\n\nAp.registerLoginHandler = function (name, handler) {\n  if (! handler) {\n    handler = name;\n    name = null;\n  }\n\n  this._loginHandlers.push({\n    name: name,\n    handler: handler\n  });\n};\n\n\n// Checks a user's credentials against all the registered login\n// handlers, and returns a login token if the credentials are valid. It\n// is like the login method, except that it doesn't set the logged-in\n// user on the connection. Throws a Meteor.Error if logging in fails,\n// including the case where none of the login handlers handled the login\n// request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n//\n// For example, if you want to login with a plaintext password, `options` could be\n//   { user: { username: <username> }, password: <password> }, or\n//   { user: { email: <email> }, password: <password> }.\n\n// Try all of the registered login handlers until one of them doesn't\n// return `undefined`, meaning it handled this call to `login`. Return\n// that return value.\nAp._runLoginHandlers = function (methodInvocation, options) {\n  for (var i = 0; i < this._loginHandlers.length; ++i) {\n    var handler = this._loginHandlers[i];\n\n    var result = tryLoginMethod(\n      handler.name,\n      function () {\n        return handler.handler.call(methodInvocation, options);\n      }\n    );\n\n    if (result) {\n      return result;\n    }\n\n    if (result !== undefined) {\n      throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n    }\n  }\n\n  return {\n    type: null,\n    error: new Meteor.Error(400, \"Unrecognized options for login request\")\n  };\n};\n\n// Deletes the given loginToken from the database.\n//\n// For new-style hashed token, this will cause all connections\n// associated with the token to be closed.\n//\n// Any connections associated with old-style unhashed tokens will be\n// in the process of becoming associated with hashed tokens and then\n// they'll get closed.\nAp.destroyToken = function (userId, loginToken) {\n  this.users.update(userId, {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { hashedToken: loginToken },\n          { token: loginToken }\n        ]\n      }\n    }\n  });\n};\n\nAp._initServerMethods = function () {\n  // The methods created in this function need to be created here so that\n  // this variable is available in their scope.\n  var accounts = this;\n\n  // This object will be populated with methods and then passed to\n  // accounts._server.methods further below.\n  var methods = {};\n\n  // @returns {Object|null}\n  //   If successful, returns {token: reconnectToken, id: userId}\n  //   If unsuccessful (for example, if the user closed the oauth login popup),\n  //     throws an error describing the reason\n  methods.login = function (options) {\n    var self = this;\n\n    // Login handlers should really also check whatever field they look at in\n    // options, but we don't enforce it.\n    check(options, Object);\n\n    var result = accounts._runLoginHandlers(self, options);\n\n    return accounts._attemptLogin(self, \"login\", arguments, result);\n  };\n\n  methods.logout = function () {\n    var token = accounts._getLoginToken(this.connection.id);\n    accounts._setLoginToken(this.userId, this.connection, null);\n    if (token && this.userId)\n      accounts.destroyToken(this.userId, token);\n    accounts._successfulLogout(this.connection, this.userId);\n    this.setUserId(null);\n  };\n\n  // Delete all the current user's tokens and close all open connections logged\n  // in as this user. Returns a fresh new login token that this client can\n  // use. Tests set Accounts._noConnectionCloseDelayForTest to delete tokens\n  // immediately instead of using a delay.\n  //\n  // XXX COMPAT WITH 0.7.2\n  // This single `logoutOtherClients` method has been replaced with two\n  // methods, one that you call to get a new token, and another that you\n  // call to remove all tokens except your own. The new design allows\n  // clients to know when other clients have actually been logged\n  // out. (The `logoutOtherClients` method guarantees the caller that\n  // the other clients will be logged out at some point, but makes no\n  // guarantees about when.) This method is left in for backwards\n  // compatibility, especially since application code might be calling\n  // this method directly.\n  //\n  // @returns {Object} Object with token and tokenExpires keys.\n  methods.logoutOtherClients = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: {\n        \"services.resume.loginTokens\": true\n      }\n    });\n    if (user) {\n      // Save the current tokens in the database to be deleted in\n      // CONNECTION_CLOSE_DELAY_MS ms. This gives other connections in the\n      // caller's browser time to find the fresh token in localStorage. We save\n      // the tokens in the database in case we crash before actually deleting\n      // them.\n      var tokens = user.services.resume.loginTokens;\n      var newToken = accounts._generateStampedLoginToken();\n      var userId = self.userId;\n      accounts.users.update(userId, {\n        $set: {\n          \"services.resume.loginTokensToDelete\": tokens,\n          \"services.resume.haveLoginTokensToDelete\": true\n        },\n        $push: { \"services.resume.loginTokens\": accounts._hashStampedToken(newToken) }\n      });\n      Meteor.setTimeout(function () {\n        // The observe on Meteor.users will take care of closing the connections\n        // associated with `tokens`.\n        accounts._deleteSavedTokensForUser(userId, tokens);\n      }, accounts._noConnectionCloseDelayForTest ? 0 :\n                        CONNECTION_CLOSE_DELAY_MS);\n      // We do not set the login token on this connection, but instead the\n      // observe closes the connection and the client will reconnect with the\n      // new token.\n      return {\n        token: newToken.token,\n        tokenExpires: accounts._tokenExpiration(newToken.when)\n      };\n    } else {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n  };\n\n  // Generates a new login token with the same expiration as the\n  // connection's current token and saves it to the database. Associates\n  // the connection with this new token and returns it. Throws an error\n  // if called on a connection that isn't logged in.\n  //\n  // @returns Object\n  //   If successful, returns { token: <new token>, id: <user id>,\n  //   tokenExpires: <expiration date> }.\n  methods.getNewToken = function () {\n    var self = this;\n    var user = accounts.users.findOne(self.userId, {\n      fields: { \"services.resume.loginTokens\": 1 }\n    });\n    if (! self.userId || ! user) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    // Be careful not to generate a new token that has a later\n    // expiration than the curren token. Otherwise, a bad guy with a\n    // stolen token could use this method to stop his stolen token from\n    // ever expiring.\n    var currentHashedToken = accounts._getLoginToken(self.connection.id);\n    var currentStampedToken = _.find(\n      user.services.resume.loginTokens,\n      function (stampedToken) {\n        return stampedToken.hashedToken === currentHashedToken;\n      }\n    );\n    if (! currentStampedToken) { // safety belt: this should never happen\n      throw new Meteor.Error(\"Invalid login token\");\n    }\n    var newStampedToken = accounts._generateStampedLoginToken();\n    newStampedToken.when = currentStampedToken.when;\n    accounts._insertLoginToken(self.userId, newStampedToken);\n    return accounts._loginUser(self, self.userId, newStampedToken);\n  };\n\n  // Removes all tokens except the token associated with the current\n  // connection. Throws an error if the connection is not logged\n  // in. Returns nothing on success.\n  methods.removeOtherTokens = function () {\n    var self = this;\n    if (! self.userId) {\n      throw new Meteor.Error(\"You are not logged in.\");\n    }\n    var currentToken = accounts._getLoginToken(self.connection.id);\n    accounts.users.update(self.userId, {\n      $pull: {\n        \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n      }\n    });\n  };\n\n  // Allow a one-time configuration for a login service. Modifications\n  // to this collection are also allowed in insecure mode.\n  methods.configureLoginService = function (options) {\n    check(options, Match.ObjectIncluding({service: String}));\n    // Don't let random users configure a service we haven't added yet (so\n    // that when we do later add it, it's set up with their configuration\n    // instead of ours).\n    // XXX if service configuration is oauth-specific then this code should\n    //     be in accounts-oauth; if it's not then the registry should be\n    //     in this package\n    if (!(accounts.oauth\n          && _.contains(accounts.oauth.serviceNames(), options.service))) {\n      throw new Meteor.Error(403, \"Service unknown\");\n    }\n\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    if (ServiceConfiguration.configurations.findOne({service: options.service}))\n      throw new Meteor.Error(403, \"Service \" + options.service + \" already configured\");\n\n    if (_.has(options, \"secret\") && usingOAuthEncryption())\n      options.secret = OAuthEncryption.seal(options.secret);\n\n    ServiceConfiguration.configurations.insert(options);\n  };\n\n  accounts._server.methods(methods);\n};\n\nAp._initAccountDataHooks = function () {\n  var accounts = this;\n\n  accounts._server.onConnection(function (connection) {\n    accounts._accountData[connection.id] = {\n      connection: connection\n    };\n\n    connection.onClose(function () {\n      accounts._removeTokenFromConnection(connection.id);\n      delete accounts._accountData[connection.id];\n    });\n  });\n};\n\nAp._initServerPublications = function () {\n  var accounts = this;\n\n  // Publish all login service configuration fields other than secret.\n  accounts._server.publish(\"meteor.loginServiceConfiguration\", function () {\n    var ServiceConfiguration =\n      Package['service-configuration'].ServiceConfiguration;\n    return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n  }, {is_auto: true}); // not techincally autopublish, but stops the warning.\n\n  // Publish the current user's record to the client.\n  accounts._server.publish(null, function () {\n    if (this.userId) {\n      return accounts.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          profile: 1,\n          username: 1,\n          emails: 1\n        }\n      });\n    } else {\n      return null;\n    }\n  }, /*suppress autopublish warning*/{is_auto: true});\n\n  // Use Meteor.startup to give other packages a chance to call\n  // addAutopublishFields.\n  Package.autopublish && Meteor.startup(function () {\n    // ['profile', 'username'] -> {profile: 1, username: 1}\n    var toFieldSelector = function (fields) {\n      return _.object(_.map(fields, function (field) {\n        return [field, 1];\n      }));\n    };\n\n    accounts._server.publish(null, function () {\n      if (this.userId) {\n        return accounts.users.find({\n          _id: this.userId\n        }, {\n          fields: toFieldSelector(accounts._autopublishFields.loggedInUser)\n        });\n      } else {\n        return null;\n      }\n    }, /*suppress autopublish warning*/{is_auto: true});\n\n    // XXX this publish is neither dedup-able nor is it optimized by our special\n    // treatment of queries on a specific _id. Therefore this will have O(n^2)\n    // run-time performance every time a user document is changed (eg someone\n    // logging in). If this is a problem, we can instead write a manual publish\n    // function which filters out fields based on 'this.userId'.\n    accounts._server.publish(null, function () {\n      var selector = this.userId ? {\n        _id: { $ne: this.userId }\n      } : {};\n\n      return accounts.users.find(selector, {\n        fields: toFieldSelector(accounts._autopublishFields.otherUsers)\n      });\n    }, /*suppress autopublish warning*/{is_auto: true});\n  });\n};\n\n// Add to the list of fields or subfields to be automatically\n// published if autopublish is on. Must be called from top-level\n// code (ie, before Meteor.startup hooks run).\n//\n// @param opts {Object} with:\n//   - forLoggedInUser {Array} Array of fields published to the logged-in user\n//   - forOtherUsers {Array} Array of fields published to users that aren't logged in\nAp.addAutopublishFields = function (opts) {\n  this._autopublishFields.loggedInUser.push.apply(\n    this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n  this._autopublishFields.otherUsers.push.apply(\n    this._autopublishFields.otherUsers, opts.forOtherUsers);\n};\n\n///\n/// ACCOUNT DATA\n///\n\n// HACK: This is used by 'meteor-accounts' to get the loginToken for a\n// connection. Maybe there should be a public way to do that.\nAp._getAccountData = function (connectionId, field) {\n  var data = this._accountData[connectionId];\n  return data && data[field];\n};\n\nAp._setAccountData = function (connectionId, field, value) {\n  var data = this._accountData[connectionId];\n\n  // safety belt. shouldn't happen. accountData is set in onConnection,\n  // we don't have a connectionId until it is set.\n  if (!data)\n    return;\n\n  if (value === undefined)\n    delete data[field];\n  else\n    data[field] = value;\n};\n\n\n///\n/// RECONNECT TOKENS\n///\n/// support reconnecting using a meteor login token\n\nAp._hashLoginToken = function (loginToken) {\n  var hash = crypto.createHash('sha256');\n  hash.update(loginToken);\n  return hash.digest('base64');\n};\n\n\n// {token, when} => {hashedToken, when}\nAp._hashStampedToken = function (stampedToken) {\n  return _.extend(_.omit(stampedToken, 'token'), {\n    hashedToken: this._hashLoginToken(stampedToken.token)\n  });\n};\n\n\n// Using $addToSet avoids getting an index error if another client\n// logging in simultaneously has already inserted the new hashed\n// token.\nAp._insertHashedLoginToken = function (userId, hashedToken, query) {\n  query = query ? _.clone(query) : {};\n  query._id = userId;\n  this.users.update(query, {\n    $addToSet: {\n      \"services.resume.loginTokens\": hashedToken\n    }\n  });\n};\n\n\n// Exported for tests.\nAp._insertLoginToken = function (userId, stampedToken, query) {\n  this._insertHashedLoginToken(\n    userId,\n    this._hashStampedToken(stampedToken),\n    query\n  );\n};\n\n\nAp._clearAllLoginTokens = function (userId) {\n  this.users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': []\n    }\n  });\n};\n\n// test hook\nAp._getUserObserve = function (connectionId) {\n  return this._userObservesForConnections[connectionId];\n};\n\n// Clean up this connection's association with the token: that is, stop\n// the observe that we started when we associated the connection with\n// this token.\nAp._removeTokenFromConnection = function (connectionId) {\n  if (_.has(this._userObservesForConnections, connectionId)) {\n    var observe = this._userObservesForConnections[connectionId];\n    if (typeof observe === 'number') {\n      // We're in the process of setting up an observe for this connection. We\n      // can't clean up that observe yet, but if we delete the placeholder for\n      // this connection, then the observe will get cleaned up as soon as it has\n      // been set up.\n      delete this._userObservesForConnections[connectionId];\n    } else {\n      delete this._userObservesForConnections[connectionId];\n      observe.stop();\n    }\n  }\n};\n\nAp._getLoginToken = function (connectionId) {\n  return this._getAccountData(connectionId, 'loginToken');\n};\n\n// newToken is a hashed token.\nAp._setLoginToken = function (userId, connection, newToken) {\n  var self = this;\n\n  self._removeTokenFromConnection(connection.id);\n  self._setAccountData(connection.id, 'loginToken', newToken);\n\n  if (newToken) {\n    // Set up an observe for this token. If the token goes away, we need\n    // to close the connection.  We defer the observe because there's\n    // no need for it to be on the critical path for login; we just need\n    // to ensure that the connection will get closed at some point if\n    // the token gets deleted.\n    //\n    // Initially, we set the observe for this connection to a number; this\n    // signifies to other code (which might run while we yield) that we are in\n    // the process of setting up an observe for this connection. Once the\n    // observe is ready to go, we replace the number with the real observe\n    // handle (unless the placeholder has been deleted or replaced by a\n    // different placehold number, signifying that the connection was closed\n    // already -- in this case we just clean up the observe that we started).\n    var myObserveNumber = ++self._nextUserObserveNumber;\n    self._userObservesForConnections[connection.id] = myObserveNumber;\n    Meteor.defer(function () {\n      // If something else happened on this connection in the meantime (it got\n      // closed, or another call to _setLoginToken happened), just do\n      // nothing. We don't need to start an observe for an old connection or old\n      // token.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        return;\n      }\n\n      var foundMatchingUser;\n      // Because we upgrade unhashed login tokens to hashed tokens at\n      // login time, sessions will only be logged in with a hashed\n      // token. Thus we only need to observe hashed tokens here.\n      var observe = self.users.find({\n        _id: userId,\n        'services.resume.loginTokens.hashedToken': newToken\n      }, { fields: { _id: 1 } }).observeChanges({\n        added: function () {\n          foundMatchingUser = true;\n        },\n        removed: function () {\n          connection.close();\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }\n      });\n\n      // If the user ran another login or logout command we were waiting for the\n      // defer or added to fire (ie, another call to _setLoginToken occurred),\n      // then we let the later one win (start an observe, etc) and just stop our\n      // observe now.\n      //\n      // Similarly, if the connection was already closed, then the onClose\n      // callback would have called _removeTokenFromConnection and there won't\n      // be an entry in _userObservesForConnections. We can stop the observe.\n      if (self._userObservesForConnections[connection.id] !== myObserveNumber) {\n        observe.stop();\n        return;\n      }\n\n      self._userObservesForConnections[connection.id] = observe;\n\n      if (! foundMatchingUser) {\n        // We've set up an observe on the user associated with `newToken`,\n        // so if the new token is removed from the database, we'll close\n        // the connection. But the token might have already been deleted\n        // before we set up the observe, which wouldn't have closed the\n        // connection because the observe wasn't running yet.\n        connection.close();\n      }\n    });\n  }\n};\n\nfunction setupDefaultLoginHandlers(accounts) {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}\n\n// Login handler for resume tokens.\nfunction defaultResumeLoginHandler(accounts, options) {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  var hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  var user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {\"services.resume.loginTokens.token\": options.resume}\n      ]\n    });\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  var oldUnhashedStyleToken;\n  var token = _.find(user.services.resume.loginTokens, function (token) {\n    return token.hashedToken === hashedToken;\n  });\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = _.find(user.services.resume.loginTokens, function (token) {\n      return token.token === options.resume;\n    });\n    oldUnhashedStyleToken = true;\n  }\n\n  var tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n}\n\n// (Also used by Meteor Accounts server and tests).\n//\nAp._generateStampedLoginToken = function () {\n  return {\n    token: Random.secret(),\n    when: new Date\n  };\n};\n\n///\n/// TOKEN EXPIRATION\n///\n\nfunction expirePasswordToken(accounts, oldestValidDate, tokenFilter, userId) {\n  const userFilter = userId ? {_id: userId} : {};\n  const resetRangeOr = {\n    $or: [\n      { \"services.password.reset.when\": { $lt: oldestValidDate } },\n      { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n    ]\n  };\n  const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n\n  accounts.users.update({...userFilter, ...expireFilter}, {\n    $unset: {\n      \"services.password.reset\": \"\"\n    }\n  }, { multi: true });\n}\n\n// Deletes expired tokens from the database and closes all open connections\n// associated with these tokens.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expireTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n  var userFilter = userId ? {_id: userId} : {};\n\n\n  // Backwards compatible with older versions of meteor that stored login token\n  // timestamps as numbers.\n  this.users.update(_.extend(userFilter, {\n    $or: [\n      { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n      { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n    ]\n  }), {\n    $pull: {\n      \"services.resume.loginTokens\": {\n        $or: [\n          { when: { $lt: oldestValidDate } },\n          { when: { $lt: +oldestValidDate } }\n        ]\n      }\n    }\n  }, { multi: true });\n  // The observe on Meteor.users will take care of closing connections for\n  // expired tokens.\n};\n\n// Deletes expired password reset tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expirePasswordResetTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n\n  var tokenFilter = {\n    $or: [\n      { \"services.password.reset.reason\": \"reset\"},\n      { \"services.password.reset.reason\": {$exists: false}}\n    ]\n  };\n\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}\n\n// Deletes expired password enroll tokens from the database.\n//\n// Exported for tests. Also, the arguments are only used by\n// tests. oldestValidDate is simulate expiring tokens without waiting\n// for them to actually expire. userId is used by tests to only expire\n// tokens for the test user.\nAp._expirePasswordEnrollTokens = function (oldestValidDate, userId) {\n  var tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n  // when calling from a test with extra arguments, you must specify both!\n  if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n    throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n  }\n\n  oldestValidDate = oldestValidDate ||\n    (new Date(new Date() - tokenLifetimeMs));\n\n  var tokenFilter = {\n    \"services.password.reset.reason\": \"enroll\"\n  };\n\n  expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n}\n\n// @override from accounts_common.js\nAp.config = function (options) {\n  // Call the overridden implementation of the method.\n  var superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n  // If the user set loginExpirationInDays to null, then we need to clear the\n  // timer that periodically expires tokens.\n  if (_.has(this._options, \"loginExpirationInDays\") &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n    Meteor.clearInterval(this.expireTokenInterval);\n    this.expireTokenInterval = null;\n  }\n\n  return superResult;\n};\n\nfunction setExpireTokensInterval(accounts) {\n  accounts.expireTokenInterval = Meteor.setInterval(function () {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}\n\n\n///\n/// OAuth Encryption Support\n///\n\nvar OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nfunction usingOAuthEncryption() {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}\n\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nfunction pinEncryptedFieldsToUser(serviceData, userId) {\n  _.each(_.keys(serviceData), function (key) {\n    var value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(function () {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(function (config) {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nfunction defaultCreateUserHook(options, user) {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n}\n\n// Called by accounts-password\nAp.insertUserDoc = function (options, user) {\n  // - clone user document, to protect from modification\n  // - add createdAt timestamp\n  // - prepare an _id, so that you can modify other collections (eg\n  // create a first task for every new user)\n  //\n  // XXX If the onCreateUser or validateNewUser hooks fail, we might\n  // end up having modified some other collection\n  // inappropriately. The solution is probably to have onCreateUser\n  // accept two callbacks - one that gets called before inserting\n  // the user document (in which you can modify its contents), and\n  // one that gets called after (in which you should change other\n  // collections)\n  user = _.extend({\n    createdAt: new Date(),\n    _id: Random.id()\n  }, user);\n\n  if (user.services) {\n    _.each(user.services, function (serviceData) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n    });\n  }\n\n  var fullUser;\n  if (this._onCreateUserHook) {\n    fullUser = this._onCreateUserHook(options, user);\n\n    // This is *not* part of the API. We need this because we can't isolate\n    // the global server environment between tests, meaning we can't test\n    // both having a create user hook set and not having one set.\n    if (fullUser === 'TEST DEFAULT HOOK')\n      fullUser = defaultCreateUserHook(options, user);\n  } else {\n    fullUser = defaultCreateUserHook(options, user);\n  }\n\n  _.each(this._validateNewUserHooks, function (hook) {\n    if (! hook(fullUser))\n      throw new Meteor.Error(403, \"User validation failed\");\n  });\n\n  var userId;\n  try {\n    userId = this.users.insert(fullUser);\n  } catch (e) {\n    // XXX string parsing sucks, maybe\n    // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n    if (e.name !== 'MongoError') throw e;\n    if (e.code !== 11000) throw e;\n    if (e.errmsg.indexOf('emails.address') !== -1)\n      throw new Meteor.Error(403, \"Email already exists.\");\n    if (e.errmsg.indexOf('username') !== -1)\n      throw new Meteor.Error(403, \"Username already exists.\");\n    // XXX better error reporting for services.facebook.id duplicate, etc\n    throw e;\n  }\n  return userId;\n};\n\n// Helper function: returns false if email does not match company domain from\n// the configuration.\nAp._testEmailDomain = function (email) {\n  var domain = this._options.restrictCreationByEmailDomain;\n  return !domain ||\n    (_.isFunction(domain) && domain(email)) ||\n    (_.isString(domain) &&\n      (new RegExp('@' + Meteor._escapeRegExp(domain) + '$', 'i')).test(email));\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  var self = this;\n  var domain = self._options.restrictCreationByEmailDomain;\n  if (!domain)\n    return true;\n\n  var emailIsGood = false;\n  if (!_.isEmpty(user.emails)) {\n    emailIsGood = _.any(user.emails, function (email) {\n      return self._testEmailDomain(email.address);\n    });\n  } else if (!_.isEmpty(user.services)) {\n    // Find any email of any service and check it\n    emailIsGood = _.any(user.services, function (service) {\n      return service.email && self._testEmailDomain(service.email);\n    });\n  }\n\n  if (emailIsGood)\n    return true;\n\n  if (_.isString(domain))\n    throw new Meteor.Error(403, \"@\" + domain + \" email required\");\n  else\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n}\n\n///\n/// MANAGING USER OBJECTS\n///\n\n// Updates or creates a user after we authenticate with a 3rd party.\n//\n// @param serviceName {String} Service name (eg, twitter).\n// @param serviceData {Object} Data to store in the user's record\n//        under services[serviceName]. Must include an \"id\" field\n//        which is a unique identifier for the user in the service.\n// @param options {Object, optional} Other options to pass to insertUserDoc\n//        (eg, profile)\n// @returns {Object} Object with token and id keys, like the result\n//        of the \"login\" method.\n//\nAp.updateOrCreateUserFromExternalService = function (\n  serviceName,\n  serviceData,\n  options\n) {\n  options = _.clone(options || {});\n\n  if (serviceName === \"password\" || serviceName === \"resume\")\n    throw new Error(\n      \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n  if (!_.has(serviceData, 'id'))\n    throw new Error(\n      \"Service data for service \" + serviceName + \" must include id\");\n\n  // Look for a user with the appropriate service user id.\n  var selector = {};\n  var serviceIdKey = \"services.\" + serviceName + \".id\";\n\n  // XXX Temporary special case for Twitter. (Issue #629)\n  //   The serviceData.id will be a string representation of an integer.\n  //   We want it to match either a stored string or int representation.\n  //   This is to cater to earlier versions of Meteor storing twitter\n  //   user IDs in number form, and recent versions storing them as strings.\n  //   This can be removed once migration technology is in place, and twitter\n  //   users stored with integer IDs have been migrated to string IDs.\n  if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n    selector[\"$or\"] = [{},{}];\n    selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n    selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n  } else {\n    selector[serviceIdKey] = serviceData.id;\n  }\n\n  var user = this.users.findOne(selector);\n\n  // When creating a new user we pass through all options. When updating an\n  // existing user, by default we only process/pass through the serviceData\n  // (eg, so that we keep an unexpired access token and don't cache old email\n  // addresses in serviceData.email). The onExternalLogin hook can be used when\n  // creating or updating a user, to modify or pass through more options as\n  // needed.\n  var opts = user ? {} : options;\n  if (this._onExternalLoginHook) {\n    opts = this._onExternalLoginHook(options, user);\n  }\n\n  if (user) {\n    pinEncryptedFieldsToUser(serviceData, user._id);\n\n    var setAttrs = {};\n    _.each(serviceData, function (value, key) {\n      setAttrs[\"services.\" + serviceName + \".\" + key] = value;\n    });\n\n    // XXX Maybe we should re-use the selector above and notice if the update\n    //     touches nothing?\n    setAttrs = _.extend({}, setAttrs, opts);\n    this.users.update(user._id, {\n      $set: setAttrs\n    });\n\n    return {\n      type: serviceName,\n      userId: user._id\n    };\n  } else {\n    // Create a new user with the service data.\n    user = {services: {}};\n    user.services[serviceName] = serviceData;\n    return {\n      type: serviceName,\n      userId: this.insertUserDoc(opts, user)\n    };\n  }\n};\n\nfunction setupUsersCollection(users) {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: function (userId, user, fields, modifier) {\n      // make sure it is our record\n      if (user._id !== userId)\n        return false;\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile')\n        return false;\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users._ensureIndex('username', {unique: 1, sparse: 1});\n  users._ensureIndex('emails.address', {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.hashedToken',\n                     {unique: 1, sparse: 1});\n  users._ensureIndex('services.resume.loginTokens.token',\n                     {unique: 1, sparse: 1});\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users._ensureIndex('services.resume.haveLoginTokensToDelete',\n                     { sparse: 1 });\n  // For expiring login tokens\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: 1 });\n  // For expiring password tokens\n  users._ensureIndex('services.password.reset.when', { sparse: 1 });\n}\n\n///\n/// CLEAN UP FOR `logoutOtherClients`\n///\n\nAp._deleteSavedTokensForUser = function (userId, tokensToDelete) {\n  if (tokensToDelete) {\n    this.users.update(userId, {\n      $unset: {\n        \"services.resume.haveLoginTokensToDelete\": 1,\n        \"services.resume.loginTokensToDelete\": 1\n      },\n      $pullAll: {\n        \"services.resume.loginTokens\": tokensToDelete\n      }\n    });\n  }\n};\n\nAp._deleteSavedTokensForAllUsersOnStartup = function () {\n  var self = this;\n\n  // If we find users who have saved tokens to delete on startup, delete\n  // them now. It's possible that the server could have crashed and come\n  // back up before new tokens are found in localStorage, but this\n  // shouldn't happen very often. We shouldn't put a delay here because\n  // that would give a lot of power to an attacker with a stolen login\n  // token and the ability to crash the server.\n  Meteor.startup(function () {\n    self.users.find({\n      \"services.resume.haveLoginTokensToDelete\": true\n    }, {\n      \"services.resume.loginTokensToDelete\": 1\n    }).forEach(function (user) {\n      self._deleteSavedTokensForUser(\n        user._id,\n        user.services.resume.loginTokensToDelete\n      );\n    });\n  });\n};\n","import {AccountsServer} from \"./accounts_server.js\";\n\n// XXX These should probably not actually be public?\n\nAccountsServer.prototype.urls = {\n  resetPassword: function (token) {\n    return Meteor.absoluteUrl('#/reset-password/' + token);\n  },\n\n  verifyEmail: function (token) {\n    return Meteor.absoluteUrl('#/verify-email/' + token);\n  },\n\n  enrollAccount: function (token) {\n    return Meteor.absoluteUrl('#/enroll-account/' + token);\n  }\n};\n"]}}]