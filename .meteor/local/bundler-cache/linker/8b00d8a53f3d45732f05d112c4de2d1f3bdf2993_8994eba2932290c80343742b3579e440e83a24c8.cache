[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar WebAppHashing;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"webapp-hashing\":{\"webapp-hashing.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/webapp-hashing/webapp-hashing.js                                                               //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nvar crypto = Npm.require(\"crypto\");\n\nWebAppHashing = {}; // Calculate a hash of all the client resources downloaded by the\n// browser, including the application HTML, runtime config, code, and\n// static files.\n//\n// This hash *must* change if any resources seen by the browser\n// change, and ideally *doesn't* change for any server-only changes\n// (but the second is a performance enhancement, not a hard\n// requirement).\n\nWebAppHashing.calculateClientHash = function (manifest, includeFilter, runtimeConfigOverride) {\n  var hash = crypto.createHash('sha1'); // Omit the old hashed client values in the new hash. These may be\n  // modified in the new boilerplate.\n\n  var runtimeCfg = _.omit(__meteor_runtime_config__, ['autoupdateVersion', 'autoupdateVersionRefreshable', 'autoupdateVersionCordova']);\n\n  if (runtimeConfigOverride) {\n    runtimeCfg = runtimeConfigOverride;\n  }\n\n  hash.update(JSON.stringify(runtimeCfg, 'utf8'));\n\n  _.each(manifest, function (resource) {\n    if ((!includeFilter || includeFilter(resource.type)) && (resource.where === 'client' || resource.where === 'internal')) {\n      hash.update(resource.path);\n      hash.update(resource.hash);\n    }\n  });\n\n  return hash.digest('hex');\n};\n\nWebAppHashing.calculateCordovaCompatibilityHash = function (platformVersion, pluginVersions) {\n  const hash = crypto.createHash('sha1');\n  hash.update(platformVersion); // Sort plugins first so iteration order doesn't affect the hash\n\n  const plugins = Object.keys(pluginVersions).sort();\n\n  for (let plugin of plugins) {\n    const version = pluginVersions[plugin];\n    hash.update(plugin);\n    hash.update(version);\n  }\n\n  return hash.digest('hex');\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/webapp-hashing/webapp-hashing.js\");\n\n/* Exports */\nPackage._define(\"webapp-hashing\", {\n  WebAppHashing: WebAppHashing\n});\n\n})();\n","servePath":"/packages/webapp-hashing.js","sourceMap":{"version":3,"sources":["packages/webapp-hashing/webapp-hashing.js"],"names":["crypto","Npm","require","WebAppHashing","calculateClientHash","manifest","includeFilter","runtimeConfigOverride","hash","createHash","runtimeCfg","_","omit","__meteor_runtime_config__","update","JSON","stringify","each","resource","type","where","path","digest","calculateCordovaCompatibilityHash","platformVersion","pluginVersions","plugins","Object","keys","sort","plugin","version"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,SAASC,IAAIC,OAAJ,CAAY,QAAZ,CAAb;;AAEAC,gBAAgB,EAAhB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,cAAcC,mBAAd,GACE,UAAUC,QAAV,EAAoBC,aAApB,EAAmCC,qBAAnC,EAA0D;AAC1D,MAAIC,OAAOR,OAAOS,UAAP,CAAkB,MAAlB,CAAX,CAD0D,CAG1D;AACA;;AACA,MAAIC,aAAaC,EAAEC,IAAF,CAAOC,yBAAP,EACf,CAAC,mBAAD,EAAsB,8BAAtB,EACC,0BADD,CADe,CAAjB;;AAIA,MAAIN,qBAAJ,EAA2B;AACzBG,iBAAaH,qBAAb;AACD;;AAEDC,OAAKM,MAAL,CAAYC,KAAKC,SAAL,CAAeN,UAAf,EAA2B,MAA3B,CAAZ;;AAEAC,IAAEM,IAAF,CAAOZ,QAAP,EAAiB,UAAUa,QAAV,EAAoB;AACjC,QAAI,CAAC,CAAEZ,aAAF,IAAmBA,cAAcY,SAASC,IAAvB,CAApB,MACCD,SAASE,KAAT,KAAmB,QAAnB,IAA+BF,SAASE,KAAT,KAAmB,UADnD,CAAJ,EACoE;AACpEZ,WAAKM,MAAL,CAAYI,SAASG,IAArB;AACAb,WAAKM,MAAL,CAAYI,SAASV,IAArB;AACD;AACF,GAND;;AAOA,SAAOA,KAAKc,MAAL,CAAY,KAAZ,CAAP;AACD,CAxBD;;AA0BAnB,cAAcoB,iCAAd,GACE,UAASC,eAAT,EAA0BC,cAA1B,EAA0C;AAC1C,QAAMjB,OAAOR,OAAOS,UAAP,CAAkB,MAAlB,CAAb;AAEAD,OAAKM,MAAL,CAAYU,eAAZ,EAH0C,CAK1C;;AACA,QAAME,UAAUC,OAAOC,IAAP,CAAYH,cAAZ,EAA4BI,IAA5B,EAAhB;;AACA,OAAK,IAAIC,MAAT,IAAmBJ,OAAnB,EAA4B;AAC1B,UAAMK,UAAUN,eAAeK,MAAf,CAAhB;AACAtB,SAAKM,MAAL,CAAYgB,MAAZ;AACAtB,SAAKM,MAAL,CAAYiB,OAAZ;AACD;;AAED,SAAOvB,KAAKc,MAAL,CAAY,KAAZ,CAAP;AACD,CAfD,C","file":"/packages/webapp-hashing.js","sourcesContent":["var crypto = Npm.require(\"crypto\");\n\nWebAppHashing = {};\n\n// Calculate a hash of all the client resources downloaded by the\n// browser, including the application HTML, runtime config, code, and\n// static files.\n//\n// This hash *must* change if any resources seen by the browser\n// change, and ideally *doesn't* change for any server-only changes\n// (but the second is a performance enhancement, not a hard\n// requirement).\n\nWebAppHashing.calculateClientHash =\n  function (manifest, includeFilter, runtimeConfigOverride) {\n  var hash = crypto.createHash('sha1');\n\n  // Omit the old hashed client values in the new hash. These may be\n  // modified in the new boilerplate.\n  var runtimeCfg = _.omit(__meteor_runtime_config__,\n    ['autoupdateVersion', 'autoupdateVersionRefreshable',\n     'autoupdateVersionCordova']);\n\n  if (runtimeConfigOverride) {\n    runtimeCfg = runtimeConfigOverride;\n  }\n\n  hash.update(JSON.stringify(runtimeCfg, 'utf8'));\n\n  _.each(manifest, function (resource) {\n      if ((! includeFilter || includeFilter(resource.type)) &&\n          (resource.where === 'client' || resource.where === 'internal')) {\n      hash.update(resource.path);\n      hash.update(resource.hash);\n    }\n  });\n  return hash.digest('hex');\n};\n\nWebAppHashing.calculateCordovaCompatibilityHash =\n  function(platformVersion, pluginVersions) {\n  const hash = crypto.createHash('sha1');\n\n  hash.update(platformVersion);\n\n  // Sort plugins first so iteration order doesn't affect the hash\n  const plugins = Object.keys(pluginVersions).sort();\n  for (let plugin of plugins) {\n    const version = pluginVersions[plugin];\n    hash.update(plugin);\n    hash.update(version);\n  }\n\n  return hash.digest('hex');\n};\n"]}}]