[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Random = Package.random.Random;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Google = Package['google-oauth'].Google;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-google\":{\"notice.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/accounts-google/notice.js                                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nif (Package['accounts-ui'] && !Package['service-configuration'] && !Package.hasOwnProperty('google-config-ui')) {\n  console.warn(\"Note: You're using accounts-ui and accounts-google,\\n\" + \"but didn't install the configuration UI for the Google\\n\" + \"OAuth. You can install it with:\\n\" + \"\\n\" + \"    meteor add google-config-ui\" + \"\\n\");\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"google.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/accounts-google/google.js                                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nAccounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  var loginWithGoogle = function (options, callback) {\n    // support a callback without options\n    if (!callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    if (Meteor.isCordova && Google.signIn) {\n      // After 20 April 2017, Google OAuth login will no longer work from\n      // a WebView, so Cordova apps must use Google Sign-In instead.\n      // https://github.com/meteor/meteor/issues/8253\n      Google.signIn(options, callback);\n      return;\n    } // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n\n\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = _.extend({}, options || {});\n      options.loginUrlParameters = _.extend({}, options.loginUrlParameters || {});\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n\n  Accounts.registerClientLoginFunction('google', loginWithGoogle);\n\n  Meteor.loginWithGoogle = function () {\n    return Accounts.applyLoginFunction('google', arguments);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: _.map( // publish access token since it can be used from the client (if\n    // transmitted over ssl or on\n    // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n    // refresh token probably shouldn't be sent down.\n    Google.whitelistedFields.concat(['accessToken', 'expiresAt']), // don't publish refresh token\n    function (subfield) {\n      return 'services.google.' + subfield;\n    }),\n    forOtherUsers: _.map( // even with autopublish, no legitimate web app should be\n    // publishing all users' emails\n    _.without(Google.whitelistedFields, 'email', 'verified_email'), function (subfield) {\n      return 'services.google.' + subfield;\n    })\n  });\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/accounts-google/notice.js\");\nrequire(\"/node_modules/meteor/accounts-google/google.js\");\n\n/* Exports */\nPackage._define(\"accounts-google\");\n\n})();\n","servePath":"/packages/accounts-google.js","sourceMap":{"version":3,"sources":["packages/accounts-google/notice.js","packages/accounts-google/google.js"],"names":["Package","hasOwnProperty","console","warn","Accounts","oauth","registerService","Meteor","isClient","loginWithGoogle","options","callback","isCordova","Google","signIn","_options","restrictCreationByEmailDomain","_","extend","loginUrlParameters","hd","credentialRequestCompleteCallback","credentialRequestCompleteHandler","requestCredential","registerClientLoginFunction","applyLoginFunction","arguments","addAutopublishFields","forLoggedInUser","map","whitelistedFields","concat","subfield","forOtherUsers","without"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,QAAQ,aAAR,KACG,CAACA,QAAQ,uBAAR,CADJ,IAEG,CAACA,QAAQC,cAAR,CAAuB,kBAAvB,CAFR,EAEoD;AAClDC,UAAQC,IAAR,CACE,0DACA,0DADA,GAEA,mCAFA,GAGA,IAHA,GAIA,iCAJA,GAKA,IANF;AAQD,C;;;;;;;;;;;ACXDC,SAASC,KAAT,CAAeC,eAAf,CAA+B,QAA/B;;AAEA,IAAIC,OAAOC,QAAX,EAAqB;AACnB,MAAMC,kBAAkB,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAClD;AACA,QAAI,CAAEA,QAAF,IAAc,OAAOD,OAAP,KAAmB,UAArC,EAAiD;AAC/CC,iBAAWD,OAAX;AACAA,gBAAU,IAAV;AACD;;AAED,QAAIH,OAAOK,SAAP,IACAC,OAAOC,MADX,EACmB;AACjB;AACA;AACA;AACAD,aAAOC,MAAP,CAAcJ,OAAd,EAAuBC,QAAvB;AACA;AACD,KAdiD,CAgBlD;AACA;AACA;AACA;AACA;;;AACA,QAAI,OAAOP,SAASW,QAAT,CAAkBC,6BAAzB,KAA2D,QAA/D,EAAyE;AACvEN,gBAAUO,EAAEC,MAAF,CAAS,EAAT,EAAaR,WAAW,EAAxB,CAAV;AACAA,cAAQS,kBAAR,GAA6BF,EAAEC,MAAF,CAAS,EAAT,EAAaR,QAAQS,kBAAR,IAA8B,EAA3C,CAA7B;AACAT,cAAQS,kBAAR,CAA2BC,EAA3B,GAAgChB,SAASW,QAAT,CAAkBC,6BAAlD;AACD;;AACD,QAAIK,oCAAoCjB,SAASC,KAAT,CAAeiB,gCAAf,CAAgDX,QAAhD,CAAxC;AACAE,WAAOU,iBAAP,CAAyBb,OAAzB,EAAkCW,iCAAlC;AACD,GA5BD;;AA6BAjB,WAASoB,2BAAT,CAAqC,QAArC,EAA+Cf,eAA/C;;AACAF,SAAOE,eAAP,GAAyB,YAAY;AACnC,WAAOL,SAASqB,kBAAT,CAA4B,QAA5B,EAAsCC,SAAtC,CAAP;AACD,GAFD;AAGD,CAlCD,MAkCO;AACLtB,WAASuB,oBAAT,CAA8B;AAC5BC,qBAAiBX,EAAEY,GAAF,EACf;AACA;AACA;AACA;AACAhB,WAAOiB,iBAAP,CAAyBC,MAAzB,CAAgC,CAAC,aAAD,EAAgB,WAAhB,CAAhC,CALe,EAKgD;AAC/D,cAAUC,QAAV,EAAoB;AAAE,aAAO,qBAAqBA,QAA5B;AAAuC,KAN9C,CADW;AAS5BC,mBAAehB,EAAEY,GAAF,EACb;AACA;AACAZ,MAAEiB,OAAF,CAAUrB,OAAOiB,iBAAjB,EAAoC,OAApC,EAA6C,gBAA7C,CAHa,EAIb,UAAUE,QAAV,EAAoB;AAAE,aAAO,qBAAqBA,QAA5B;AAAuC,KAJhD;AATa,GAA9B;AAeD,C","file":"/packages/accounts-google.js","sourcesContent":["if (Package['accounts-ui']\n    && !Package['service-configuration']\n    && !Package.hasOwnProperty('google-config-ui')) {\n  console.warn(\n    \"Note: You're using accounts-ui and accounts-google,\\n\" +\n    \"but didn't install the configuration UI for the Google\\n\" +\n    \"OAuth. You can install it with:\\n\" +\n    \"\\n\" +\n    \"    meteor add google-config-ui\" +\n    \"\\n\"\n  );\n}\n","Accounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  const loginWithGoogle = function(options, callback) {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    if (Meteor.isCordova &&\n        Google.signIn) {\n      // After 20 April 2017, Google OAuth login will no longer work from\n      // a WebView, so Cordova apps must use Google Sign-In instead.\n      // https://github.com/meteor/meteor/issues/8253\n      Google.signIn(options, callback);\n      return;\n    }\n\n    // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = _.extend({}, options || {});\n      options.loginUrlParameters = _.extend({}, options.loginUrlParameters || {});\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('google', loginWithGoogle);\n  Meteor.loginWithGoogle = function () {\n    return Accounts.applyLoginFunction('google', arguments);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: _.map(\n      // publish access token since it can be used from the client (if\n      // transmitted over ssl or on\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n      // refresh token probably shouldn't be sent down.\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']), // don't publish refresh token\n      function (subfield) { return 'services.google.' + subfield; }),\n\n    forOtherUsers: _.map(\n      // even with autopublish, no legitimate web app should be\n      // publishing all users' emails\n      _.without(Google.whitelistedFields, 'email', 'verified_email'),\n      function (subfield) { return 'services.google.' + subfield; })\n  });\n}\n"]}}]