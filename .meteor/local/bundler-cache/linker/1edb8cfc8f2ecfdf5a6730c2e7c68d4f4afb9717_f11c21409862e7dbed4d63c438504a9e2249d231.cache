[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar _ = Package.underscore._;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n/* Package-scope variables */\nvar Github;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/github-oauth/github_server.js                                                          //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\nGithub = {};\n\nOAuth.registerService('github', 2, null, function(query) {\n\n  var accessToken = getAccessToken(query);\n  var identity = getIdentity(accessToken);\n  var emails = getEmails(accessToken);\n  var primaryEmail = _.findWhere(emails, {primary: true});\n\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: OAuth.sealSecret(accessToken),\n      email: identity.email || (primaryEmail && primaryEmail.email) || '',\n      username: identity.login,\n      emails: emails\n    },\n    options: {profile: {name: identity.name}}\n  };\n});\n\n// http://developer.github.com/v3/#user-agent-required\nvar userAgent = \"Meteor\";\nif (Meteor.release)\n  userAgent += \"/\" + Meteor.release;\n\nvar getAccessToken = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://github.com/login/oauth/access_token\", {\n        headers: {\n          Accept: 'application/json',\n          \"User-Agent\": userAgent\n        },\n        params: {\n          code: query.code,\n          client_id: config.clientId,\n          client_secret: OAuth.openSecret(config.secret),\n          redirect_uri: OAuth._redirectUri('github', config),\n          state: query.state\n        }\n      });\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Github. \" + err.message),\n                   {response: err.response});\n  }\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with GitHub. \" + response.data.error);\n  } else {\n    return response.data.access_token;\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://api.github.com/user\", {\n        headers: {\"User-Agent\": userAgent}, // http://developer.github.com/v3/#user-agent-required\n        params: {access_token: accessToken}\n      }).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Github. \" + err.message),\n                   {response: err.response});\n  }\n};\n\nvar getEmails = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://api.github.com/user/emails\", {\n        headers: {\"User-Agent\": userAgent}, // http://developer.github.com/v3/#user-agent-required\n        params: {access_token: accessToken}\n      }).data;\n  } catch (err) {\n    return [];\n  }\n};\n\nGithub.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"github-oauth\", {\n  Github: Github\n});\n\n})();\n","servePath":"/packages/github-oauth.js"}]