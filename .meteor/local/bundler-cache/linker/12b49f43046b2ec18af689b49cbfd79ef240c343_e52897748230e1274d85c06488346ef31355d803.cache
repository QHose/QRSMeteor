[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\n\n/* Package-scope variables */\nvar JsonRoutes, RestMiddleware;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/simple_json-routes/json-routes.js                                                       //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n/* global JsonRoutes:true */\n\nvar Fiber = Npm.require('fibers');\nvar connect = Npm.require('connect');\nvar connectRoute = Npm.require('connect-route');\n\nJsonRoutes = {};\n\nWebApp.connectHandlers.use(connect.urlencoded({limit: '50mb'})); //Override default request size\nWebApp.connectHandlers.use(connect.json({limit: '50mb'})); //Override default request size\nWebApp.connectHandlers.use(connect.query());\n\n// Handler for adding middleware before an endpoint (JsonRoutes.middleWare\n// is just for legacy reasons). Also serves as a namespace for middleware\n// packages to declare their middleware functions.\nJsonRoutes.Middleware = JsonRoutes.middleWare = connect();\nWebApp.connectHandlers.use(JsonRoutes.Middleware);\n\n// List of all defined JSON API endpoints\nJsonRoutes.routes = [];\n\n// Save reference to router for later\nvar connectRouter;\n\n// Register as a middleware\nWebApp.connectHandlers.use(Meteor.bindEnvironment(connectRoute(function (router) {\n  connectRouter = router;\n})));\n\n// Error middleware must be added last, to catch errors from prior middleware.\n// That's why we cache them and then add after startup.\nvar errorMiddlewares = [];\nJsonRoutes.ErrorMiddleware = {\n  use: function () {\n    errorMiddlewares.push(arguments);\n  },\n};\n\nMeteor.startup(function () {\n  _.each(errorMiddlewares, function (errorMiddleware) {\n    errorMiddleware = _.map(errorMiddleware, function (maybeFn) {\n      if (_.isFunction(maybeFn)) {\n        // A connect error middleware needs exactly 4 arguments because they use fn.length === 4 to\n        // decide if something is an error middleware.\n        return function (a, b, c, d) {\n          Meteor.bindEnvironment(maybeFn)(a, b, c, d);\n        }\n      }\n\n      return maybeFn;\n    });\n\n    WebApp.connectHandlers.use.apply(WebApp.connectHandlers, errorMiddleware);\n  });\n\n  errorMiddlewares = [];\n});\n\nJsonRoutes.add = function (method, path, handler) {\n  // Make sure path starts with a slash\n  if (path[0] !== '/') {\n    path = '/' + path;\n  }\n\n  // Add to list of known endpoints\n  JsonRoutes.routes.push({\n    method: method,\n    path: path,\n  });\n\n  connectRouter[method.toLowerCase()](path, function (req, res, next) {\n    // Set headers on response\n    setHeaders(res, responseHeaders);\n    Fiber(function () {\n      try {\n        handler(req, res, next);\n      } catch (error) {\n        next(error);\n      }\n    }).run();\n  });\n};\n\nvar responseHeaders = {\n  'Cache-Control': 'no-store',\n  Pragma: 'no-cache',\n};\n\nJsonRoutes.setResponseHeaders = function (headers) {\n  responseHeaders = headers;\n};\n\n/**\n * Sets the response headers, status code, and body, and ends it.\n * The JSON response will be pretty printed if NODE_ENV is `development`.\n *\n * @param {Object} res Response object\n * @param {Object} [options]\n * @param {Number} [options.code] HTTP status code. Default is 200.\n * @param {Object} [options.headers] Dictionary of headers.\n * @param {Object|Array|null|undefined} [options.data] The object to\n *   stringify as the response. If `null`, the response will be \"null\".\n *   If `undefined`, there will be no response body.\n */\nJsonRoutes.sendResult = function (res, options) {\n  options = options || {};\n\n  // We've already set global headers on response, but if they\n  // pass in more here, we set those.\n  if (options.headers) setHeaders(res, options.headers);\n\n  // Set status code on response\n  res.statusCode = options.code || 200;\n\n  // Set response body\n  writeJsonToBody(res, options.data);\n\n  // Send the response\n  res.end();\n};\n\nfunction setHeaders(res, headers) {\n  _.each(headers, function (value, key) {\n    res.setHeader(key, value);\n  });\n}\n\nfunction writeJsonToBody(res, json) {\n  if (json !== undefined) {\n    var shouldPrettyPrint = (process.env.NODE_ENV === 'development');\n    var spacer = shouldPrettyPrint ? 2 : null;\n    res.setHeader('Content-type', 'application/json');\n    res.write(JSON.stringify(json, null, spacer));\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/simple_json-routes/middleware.js                                                        //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n/* global RestMiddleware:true */\n\nRestMiddleware = {};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"simple:json-routes\", {\n  JsonRoutes: JsonRoutes,\n  RestMiddleware: RestMiddleware\n});\n\n})();\n","servePath":"/packages/simple_json-routes.js"}]