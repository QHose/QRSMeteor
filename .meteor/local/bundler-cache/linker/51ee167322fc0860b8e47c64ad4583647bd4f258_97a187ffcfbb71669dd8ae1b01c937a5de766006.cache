[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Template = Package['templating-runtime'].Template;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar _ = Package.underscore._;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar BlazeLayout;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n// packages/kadira_blaze-layout/lib/client/namespace.js                           //\n//                                                                                //\n////////////////////////////////////////////////////////////////////////////////////\n                                                                                  //\nBlazeLayout = {};\n////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n// packages/kadira_blaze-layout/lib/client/layout.js                              //\n//                                                                                //\n////////////////////////////////////////////////////////////////////////////////////\n                                                                                  //\nvar currentLayoutName = null;\nvar currentLayout = null;\nvar currentRegions = new ReactiveDict();\nvar currentData;\nvar _isReady = false;\n\nBlazeLayout.setRoot = function(root) {\n  BlazeLayout._root = root;\n};\n\nBlazeLayout.render = function render(layout, regions) {\n  regions = regions || {};\n  Meteor.startup(function() {\n    // To make sure dom is loaded before we do rendering layout.\n    // Related to issue #25\n    if(!_isReady) {\n      Meteor.defer(function() {\n        _isReady = true;\n        BlazeLayout._render(layout, regions)\n      });\n    } else {\n      BlazeLayout._render(layout, regions);\n    }\n  });\n};\n\nBlazeLayout.reset = function reset() {\n  var layout = currentLayout;\n  if(layout) {\n    if(layout._domrange) {\n      // if it's rendered let's remove it right away\n      Blaze.remove(layout);\n    } else {\n      // if not let's remove it when it rendered\n      layout.onViewReady(function() {\n        Blaze.remove(layout);\n      });\n    }\n\n    currentLayout = null;\n    currentLayoutName = null;\n    currentRegions = new ReactiveDict();\n  }\n};\n\nBlazeLayout._regionsToData = function _regionsToData(regions, data) {\n  data = data || {};\n  _.each(regions, function(value, key) {\n    currentRegions.set(key, value);\n    data[key] = BlazeLayout._buildRegionGetter(key);\n  });\n\n  return data;\n};\n\nBlazeLayout._updateRegions = function _updateRegions(regions) {\n  var needsRerender = false;\n  // unset removed regions from the exiting data\n  _.each(currentData, function(value, key) {\n    if(regions[key] === undefined) {\n      currentRegions.set(key, undefined);\n      delete currentData[key];\n    }\n  });\n\n  _.each(regions, function(value, key) {\n    // if this key does not yet exist then blaze\n    // has no idea about this key and it won't get the value of this key\n    // so, we need to force a re-render\n    if(currentData && currentData[key] === undefined) {\n      needsRerender = true;\n      // and, add the data function for this new key\n      currentData[key] = BlazeLayout._buildRegionGetter(key);\n    }\n    currentRegions.set(key, value);\n  });\n\n  // force re-render if we need to\n  if(currentLayout && needsRerender) {\n    currentLayout.dataVar.dep.changed();\n  }\n};\n\nBlazeLayout._getRootDomNode = function _getRootDomNode() {\n  var root = BlazeLayout._root\n  if(!root) {\n    root = Blaze._DOMBackend.parseHTML('<div id=\"__blaze-root\"></div>')[0];\n    document.body.appendChild(root);\n    BlazeLayout.setRoot(root);\n  } else if (typeof root === 'string') {\n    root = Blaze._DOMBackend.findBySelector(root, document)[0];\n  } else if (root.jquery) {\n    root = root[0];\n  }\n\n  if(!root) {\n    throw new Error(\"Root element does not exist\");\n  }\n\n  return root;\n};\n\nBlazeLayout._buildRegionGetter = function _buildRegionGetter(key) {\n  return function() {\n    return currentRegions.get(key);\n  };\n};\n\nBlazeLayout._getTemplate = function (layout, rootDomNode) {\n  if (Blaze._getTemplate) {\n    // if Meteor 1.2, see https://github.com/meteor/meteor/pull/4036\n    // using Blaze._getTemplate instead of directly accessing Template allows\n    // packages like Blaze Components to hook into the process\n    return Blaze._getTemplate(layout, function () {\n      var view = Blaze.getView(rootDomNode);\n      // find the closest view with a template instance\n      while (view && !view._templateInstance) {\n        view = view.originalParentView || view.parentView;\n      }\n      // return found template instance, or null\n      return (view && view._templateInstance) || null;\n    });\n  }\n  else {\n    return Template[layout];\n  }\n};\n\nBlazeLayout._render = function _render(layout, regions) {\n  var rootDomNode = BlazeLayout._getRootDomNode();\n  if(currentLayoutName != layout) {\n    // remove old view\n    BlazeLayout.reset();\n    currentData = BlazeLayout._regionsToData(regions);\n\n    currentLayout = Blaze._TemplateWith(currentData, function() {\n      var template = BlazeLayout._getTemplate(layout, rootDomNode);\n\n      // 'layout' should be null (to render nothing) or an existing template name\n      if (layout !== null && !template)\n        console.log('BlazeLayout warning: unknown template \"' + layout + '\"');\n\n      return Spacebars.include(template);\n    });\n\n    Blaze.render(currentLayout, rootDomNode, null, Blaze.getView(rootDomNode));\n    currentLayoutName = layout;\n  } else {\n    BlazeLayout._updateRegions(regions);\n  }\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"kadira:blaze-layout\", {\n  BlazeLayout: BlazeLayout\n});\n\n})();\n","servePath":"/packages/kadira_blaze-layout.js"}]