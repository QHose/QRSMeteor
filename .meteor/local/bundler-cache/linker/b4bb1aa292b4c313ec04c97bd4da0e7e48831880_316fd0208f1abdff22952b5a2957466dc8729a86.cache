[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Retry;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"retry\":{\"retry.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/retry/retry.js                                                             //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nmodule.export({\n  Retry: function () {\n    return Retry;\n  }\n});\n\nvar Retry =\n/*#__PURE__*/\nfunction () {\n  function Retry() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$baseTimeout = _ref.baseTimeout,\n        baseTimeout = _ref$baseTimeout === void 0 ? 1000 : _ref$baseTimeout,\n        _ref$exponent = _ref.exponent,\n        exponent = _ref$exponent === void 0 ? 2.2 : _ref$exponent,\n        _ref$maxTimeout = _ref.maxTimeout,\n        maxTimeout = _ref$maxTimeout === void 0 ? 5 * 60 * 1000 : _ref$maxTimeout,\n        _ref$minTimeout = _ref.minTimeout,\n        minTimeout = _ref$minTimeout === void 0 ? 10 : _ref$minTimeout,\n        _ref$minCount = _ref.minCount,\n        minCount = _ref$minCount === void 0 ? 2 : _ref$minCount,\n        _ref$fuzz = _ref.fuzz,\n        fuzz = _ref$fuzz === void 0 ? 0.5 : _ref$fuzz;\n\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  } // Reset a pending retry, if any.\n\n\n  var _proto = Retry.prototype;\n\n  _proto.clear = function () {\n    function clear() {\n      if (this.retryTimer) {\n        clearTimeout(this.retryTimer);\n      }\n\n      this.retryTimer = null;\n    }\n\n    return clear;\n  }(); // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n\n\n  _proto._timeout = function () {\n    function _timeout(count) {\n      if (count < this.minCount) {\n        return this.minTimeout;\n      } // fuzz the timeout randomly, to avoid reconnect storms when a\n      // server goes down.\n\n\n      var timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)) * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));\n      return timeout;\n    }\n\n    return _timeout;\n  }(); // Call `fn` after a delay, based on the `count` of which retry this is.\n\n\n  _proto.retryLater = function () {\n    function retryLater(count, fn) {\n      var timeout = this._timeout(count);\n\n      if (this.retryTimer) clearTimeout(this.retryTimer);\n      this.retryTimer = Meteor.setTimeout(fn, timeout);\n      return timeout;\n    }\n\n    return retryLater;\n  }();\n\n  return Retry;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/retry/retry.js\");\n\n/* Exports */\nPackage._define(\"retry\", exports, {\n  Retry: Retry\n});\n\n})();\n","servePath":"/packages/retry.js","sourceMap":{"version":3,"sources":["packages/retry/retry.js"],"names":["module","export","Retry","baseTimeout","exponent","maxTimeout","minTimeout","minCount","fuzz","retryTimer","clear","clearTimeout","_timeout","count","timeout","Math","min","pow","Random","fraction","retryLater","fn","Meteor","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,SAAM;AAAA,WAAIA,KAAJ;AAAA;AAAP,CAAd;;IAUaA,K;;;AACX,mBASQ;AAAA,mFAAJ,EAAI;AAAA,gCARNC,WAQM;AAAA,QARNA,WAQM,iCARQ,IAQR;AAAA,6BAPNC,QAOM;AAAA,QAPNA,QAOM,8BAPK,GAOL;AAAA,+BAJNC,UAIM;AAAA,QAJNA,UAIM,gCAJO,IAAI,EAAJ,GAAS,IAIhB;AAAA,+BAHNC,UAGM;AAAA,QAHNA,UAGM,gCAHO,EAGP;AAAA,6BAFNC,QAEM;AAAA,QAFNA,QAEM,8BAFK,CAEL;AAAA,yBADNC,IACM;AAAA,QADNA,IACM,0BADC,GACD;;AACN,SAAKL,WAAL,GAAmBA,WAAnB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD,G,CAED;;;;;SACAC,K;qBAAQ;AACN,UAAI,KAAKD,UAAT,EAAqB;AACnBE,qBAAa,KAAKF,UAAlB;AACD;;AACD,WAAKA,UAAL,GAAkB,IAAlB;AACD;;;OAED;AACA;;;SACAG,Q;sBAASC,K,EAAO;AACd,UAAIA,QAAQ,KAAKN,QAAjB,EAA2B;AACzB,eAAO,KAAKD,UAAZ;AACD,OAHa,CAKd;AACA;;;AACA,UAAIQ,UAAUC,KAAKC,GAAL,CACZ,KAAKX,UADO,EAEZ,KAAKF,WAAL,GAAmBY,KAAKE,GAAL,CAAS,KAAKb,QAAd,EAAwBS,KAAxB,CAFP,KAIZK,OAAOC,QAAP,KAAoB,KAAKX,IAAzB,IAAiC,IAAI,KAAKA,IAAL,GAAY,CAAjD,CAJY,CAAd;AAOA,aAAOM,OAAP;AACD;;;OAED;;;SACAM,U;wBAAWP,K,EAAOQ,E,EAAI;AACpB,UAAIP,UAAU,KAAKF,QAAL,CAAcC,KAAd,CAAd;;AACA,UAAI,KAAKJ,UAAT,EACEE,aAAa,KAAKF,UAAlB;AACF,WAAKA,UAAL,GAAkBa,OAAOC,UAAP,CAAkBF,EAAlB,EAAsBP,OAAtB,CAAlB;AACA,aAAOA,OAAP;AACD","file":"/packages/retry.js","sourcesContent":["// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n\nexport class Retry {\n  constructor({\n    baseTimeout = 1000,\n    exponent = 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout = 5 * 60 * 1000,\n    minTimeout = 10,\n    minCount = 2,\n    fuzz = 0.5,\n  } = {}) {\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  }\n\n  // Reset a pending retry, if any.\n  clear() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n    this.retryTimer = null;\n  }\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout(count) {\n    if (count < this.minCount) {\n      return this.minTimeout;\n    }\n\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    var timeout = Math.min(\n      this.maxTimeout,\n      this.baseTimeout * Math.pow(this.exponent, count)\n    ) * (\n      Random.fraction() * this.fuzz + (1 - this.fuzz / 2)\n    );\n\n    return timeout;\n  }\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater(count, fn) {\n    var timeout = this._timeout(count);\n    if (this.retryTimer)\n      clearTimeout(this.retryTimer);\n    this.retryTimer = Meteor.setTimeout(fn, timeout);\n    return timeout;\n  }\n}\n"]}}]