[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Log = Package.logging.Log;\nvar _ = Package.underscore._;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Boilerplate = Package['boilerplate-generator'].Boilerplate;\nvar WebAppHashing = Package['webapp-hashing'].WebAppHashing;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar memoizedBoilerplate, exports, WebApp, WebAppInternals, main;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"webapp\":{\"webapp_server.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/webapp/webapp_server.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nconst module1 = module;\nmodule1.export({\n  WebApp: () => WebApp,\n  WebAppInternals: () => WebAppInternals\n});\nlet assert;\nmodule1.watch(require(\"assert\"), {\n  default(v) {\n    assert = v;\n  }\n\n}, 0);\nlet readFile;\nmodule1.watch(require(\"fs\"), {\n  readFile(v) {\n    readFile = v;\n  }\n\n}, 1);\nlet createServer;\nmodule1.watch(require(\"http\"), {\n  createServer(v) {\n    createServer = v;\n  }\n\n}, 2);\nlet pathJoin, pathDirname;\nmodule1.watch(require(\"path\"), {\n  join(v) {\n    pathJoin = v;\n  },\n\n  dirname(v) {\n    pathDirname = v;\n  }\n\n}, 3);\nlet parseUrl;\nmodule1.watch(require(\"url\"), {\n  parse(v) {\n    parseUrl = v;\n  }\n\n}, 4);\nlet createHash;\nmodule1.watch(require(\"crypto\"), {\n  createHash(v) {\n    createHash = v;\n  }\n\n}, 5);\nlet connect;\nmodule1.watch(require(\"./connect.js\"), {\n  connect(v) {\n    connect = v;\n  }\n\n}, 6);\nlet compress;\nmodule1.watch(require(\"compression\"), {\n  default(v) {\n    compress = v;\n  }\n\n}, 7);\nlet cookieParser;\nmodule1.watch(require(\"cookie-parser\"), {\n  default(v) {\n    cookieParser = v;\n  }\n\n}, 8);\nlet query;\nmodule1.watch(require(\"qs-middleware\"), {\n  default(v) {\n    query = v;\n  }\n\n}, 9);\nlet parseRequest;\nmodule1.watch(require(\"parseurl\"), {\n  default(v) {\n    parseRequest = v;\n  }\n\n}, 10);\nlet basicAuth;\nmodule1.watch(require(\"basic-auth-connect\"), {\n  default(v) {\n    basicAuth = v;\n  }\n\n}, 11);\nlet lookupUserAgent;\nmodule1.watch(require(\"useragent\"), {\n  lookup(v) {\n    lookupUserAgent = v;\n  }\n\n}, 12);\nlet send;\nmodule1.watch(require(\"send\"), {\n  default(v) {\n    send = v;\n  }\n\n}, 13);\nlet removeExistingSocketFile, registerSocketFileCleanup;\nmodule1.watch(require(\"./socket_file.js\"), {\n  removeExistingSocketFile(v) {\n    removeExistingSocketFile = v;\n  },\n\n  registerSocketFileCleanup(v) {\n    registerSocketFileCleanup = v;\n  }\n\n}, 14);\nvar SHORT_SOCKET_TIMEOUT = 5 * 1000;\nvar LONG_SOCKET_TIMEOUT = 120 * 1000;\nconst WebApp = {};\nconst WebAppInternals = {};\n// backwards compat to 2.0 of connect\nconnect.basicAuth = basicAuth;\nWebAppInternals.NpmModules = {\n  connect: {\n    version: Npm.require('connect/package.json').version,\n    module: connect\n  }\n};\nWebApp.defaultArch = 'web.browser'; // XXX maps archs to manifests\n\nWebApp.clientPrograms = {}; // XXX maps archs to program path on filesystem\n\nvar archPath = {};\n\nvar bundledJsCssUrlRewriteHook = function (url) {\n  var bundledPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n  return bundledPrefix + url;\n};\n\nvar sha1 = function (contents) {\n  var hash = createHash('sha1');\n  hash.update(contents);\n  return hash.digest('hex');\n};\n\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(readFile)(filename, 'utf8');\n}; // #BrowserIdentification\n//\n// We have multiple places that want to identify the browser: the\n// unsupported browser page, the appcache package, and, eventually\n// delivering browser polyfills only as needed.\n//\n// To avoid detecting the browser in multiple places ad-hoc, we create a\n// Meteor \"browser\" object. It uses but does not expose the npm\n// useragent module (we could choose a different mechanism to identify\n// the browser in the future if we wanted to).  The browser object\n// contains\n//\n// * `name`: the name of the browser in camel case\n// * `major`, `minor`, `patch`: integers describing the browser version\n//\n// Also here is an early version of a Meteor `request` object, intended\n// to be a high-level description of the request without exposing\n// details of connect's low-level `req`.  Currently it contains:\n//\n// * `browser`: browser identification object described above\n// * `url`: parsed url, including parsed query params\n//\n// As a temporary hack there is a `categorizeRequest` function on WebApp which\n// converts a connect `req` to a Meteor `request`. This can go away once smart\n// packages such as appcache are being passed a `request` object directly when\n// they serve content.\n//\n// This allows `request` to be used uniformly: it is passed to the html\n// attributes hook, and the appcache package can use it when deciding\n// whether to generate a 404 for the manifest.\n//\n// Real routing / server side rendering will probably refactor this\n// heavily.\n// e.g. \"Mobile Safari\" => \"mobileSafari\"\n\n\nvar camelCase = function (name) {\n  var parts = name.split(' ');\n  parts[0] = parts[0].toLowerCase();\n\n  for (var i = 1; i < parts.length; ++i) {\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);\n  }\n\n  return parts.join('');\n};\n\nvar identifyBrowser = function (userAgentString) {\n  var userAgent = lookupUserAgent(userAgentString);\n  return {\n    name: camelCase(userAgent.family),\n    major: +userAgent.major,\n    minor: +userAgent.minor,\n    patch: +userAgent.patch\n  };\n}; // XXX Refactor as part of implementing real routing.\n\n\nWebAppInternals.identifyBrowser = identifyBrowser;\n\nWebApp.categorizeRequest = function (req) {\n  return _.extend({\n    browser: identifyBrowser(req.headers['user-agent']),\n    url: parseUrl(req.url, true)\n  }, _.pick(req, 'dynamicHead', 'dynamicBody', 'headers', 'cookies'));\n}; // HTML attribute hooks: functions to be called to determine any attributes to\n// be added to the '<html>' tag. Each function is passed a 'request' object (see\n// #BrowserIdentification) and should return null or object.\n\n\nvar htmlAttributeHooks = [];\n\nvar getHtmlAttributes = function (request) {\n  var combinedAttributes = {};\n\n  _.each(htmlAttributeHooks || [], function (hook) {\n    var attributes = hook(request);\n    if (attributes === null) return;\n    if (typeof attributes !== 'object') throw Error(\"HTML attribute hook must return null or object\");\n\n    _.extend(combinedAttributes, attributes);\n  });\n\n  return combinedAttributes;\n};\n\nWebApp.addHtmlAttributeHook = function (hook) {\n  htmlAttributeHooks.push(hook);\n}; // Serve app HTML for this URL?\n\n\nvar appUrl = function (url) {\n  if (url === '/favicon.ico' || url === '/robots.txt') return false; // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n\n  if (url === '/app.manifest') return false; // Avoid serving app HTML for declared routes such as /sockjs/.\n\n  if (RoutePolicy.classify(url)) return false; // we currently return app HTML on all URLs by default\n\n  return true;\n}; // We need to calculate the client hash after all packages have loaded\n// to give them a chance to populate __meteor_runtime_config__.\n//\n// Calculating the hash during startup means that packages can only\n// populate __meteor_runtime_config__ during load, not during startup.\n//\n// Calculating instead it at the beginning of main after all startup\n// hooks had run would allow packages to also populate\n// __meteor_runtime_config__ during startup, but that's too late for\n// autoupdate because it needs to have the client hash at startup to\n// insert the auto update version itself into\n// __meteor_runtime_config__ to get it to the client.\n//\n// An alternative would be to give autoupdate a \"post-start,\n// pre-listen\" hook to allow it to insert the auto update version at\n// the right moment.\n\n\nMeteor.startup(function () {\n  var calculateClientHash = WebAppHashing.calculateClientHash;\n\n  WebApp.clientHash = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);\n  };\n\n  WebApp.calculateClientHashRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {\n      return name === \"css\";\n    });\n  };\n\n  WebApp.calculateClientHashNonRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {\n      return name !== \"css\";\n    });\n  };\n\n  WebApp.calculateClientHashCordova = function () {\n    var archName = 'web.cordova';\n    if (!WebApp.clientPrograms[archName]) return 'none';\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };\n}); // When we have a request pending, we want the socket timeout to be long, to\n// give ourselves a while to serve it, and to allow sockjs long polls to\n// complete.  On the other hand, we want to close idle sockets relatively\n// quickly, so that we can shut down relatively promptly but cleanly, without\n// cutting off anyone's response.\n\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);\n  req.setTimeout(LONG_SOCKET_TIMEOUT); // Insert our new finish listener to run BEFORE the existing one which removes\n  // the response from the socket.\n\n  var finishListeners = res.listeners('finish'); // XXX Apparently in Node 0.12 this event was called 'prefinish'.\n  // https://github.com/joyent/node/commit/7c9b6070\n  // But it has switched back to 'finish' in Node v4:\n  // https://github.com/nodejs/node/pull/1411\n\n  res.removeAllListeners('finish');\n  res.on('finish', function () {\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);\n  });\n\n  _.each(finishListeners, function (l) {\n    res.on('finish', l);\n  });\n}; // Will be updated by main before we listen.\n// Map from client arch to boilerplate object.\n// Boilerplate object has:\n//   - func: XXX\n//   - baseData: XXX\n\n\nvar boilerplateByArch = {}; // Register a callback function that can selectively modify boilerplate\n// data given arguments (request, data, arch). The key should be a unique\n// identifier, to prevent accumulating duplicate callbacks from the same\n// call site over time. Callbacks will be called in the order they were\n// registered. A callback should return false if it did not make any\n// changes affecting the boilerplate. Passing null deletes the callback.\n// Any previous callback registered for this key will be returned.\n\nconst boilerplateDataCallbacks = Object.create(null);\n\nWebAppInternals.registerBoilerplateDataCallback = function (key, callback) {\n  const previousCallback = boilerplateDataCallbacks[key];\n\n  if (typeof callback === \"function\") {\n    boilerplateDataCallbacks[key] = callback;\n  } else {\n    assert.strictEqual(callback, null);\n    delete boilerplateDataCallbacks[key];\n  } // Return the previous callback in case the new callback needs to call\n  // it; for example, when the new callback is a wrapper for the old.\n\n\n  return previousCallback || null;\n}; // Given a request (as returned from `categorizeRequest`), return the\n// boilerplate HTML to serve for that request.\n//\n// If a previous connect middleware has rendered content for the head or body,\n// returns the boilerplate with that content patched in otherwise\n// memoizes on HTML attributes (used by, eg, appcache) and whether inline\n// scripts are currently allowed.\n// XXX so far this function is always called with arch === 'web.browser'\n\n\nfunction getBoilerplate(request, arch) {\n  return getBoilerplateAsync(request, arch).await();\n}\n\nfunction getBoilerplateAsync(request, arch) {\n  const boilerplate = boilerplateByArch[arch];\n  const data = Object.assign({}, boilerplate.baseData, {\n    htmlAttributes: getHtmlAttributes(request)\n  }, _.pick(request, \"dynamicHead\", \"dynamicBody\"));\n  let madeChanges = false;\n  let promise = Promise.resolve();\n  Object.keys(boilerplateDataCallbacks).forEach(key => {\n    promise = promise.then(() => {\n      const callback = boilerplateDataCallbacks[key];\n      return callback(request, data, arch);\n    }).then(result => {\n      // Callbacks should return false if they did not make any changes.\n      if (result !== false) {\n        madeChanges = true;\n      }\n    });\n  });\n  return promise.then(() => ({\n    stream: boilerplate.toHTMLStream(data),\n    statusCode: data.statusCode,\n    headers: data.headers\n  }));\n}\n\nWebAppInternals.generateBoilerplateInstance = function (arch, manifest, additionalOptions) {\n  additionalOptions = additionalOptions || {};\n\n  var runtimeConfig = _.extend(_.clone(__meteor_runtime_config__), additionalOptions.runtimeConfigOverrides || {});\n\n  return new Boilerplate(arch, manifest, _.extend({\n    pathMapper: function (itemPath) {\n      return pathJoin(archPath[arch], itemPath);\n    },\n    baseDataExtension: {\n      additionalStaticJs: _.map(additionalStaticJs || [], function (contents, pathname) {\n        return {\n          pathname: pathname,\n          contents: contents\n        };\n      }),\n      // Convert to a JSON string, then get rid of most weird characters, then\n      // wrap in double quotes. (The outermost JSON.stringify really ought to\n      // just be \"wrap in double quotes\" but we use it to be safe.) This might\n      // end up inside a <script> tag so we need to be careful to not include\n      // \"</script>\", but normal {{spacebars}} escaping escapes too much! See\n      // https://github.com/meteor/meteor/issues/3730\n      meteorRuntimeConfig: JSON.stringify(encodeURIComponent(JSON.stringify(runtimeConfig))),\n      rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',\n      bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook,\n      inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),\n      inline: additionalOptions.inline\n    }\n  }, additionalOptions));\n}; // A mapping from url path to \"info\". Where \"info\" has the following fields:\n// - type: the type of file to be served\n// - cacheable: optionally, whether the file should be cached or not\n// - sourceMapUrl: optionally, the url of the source map\n//\n// Info also contains one of the following:\n// - content: the stringified content that should be served at this path\n// - absolutePath: the absolute path on disk to the file\n\n\nvar staticFiles; // Serve static files from the manifest or added with\n// `addStaticJs`. Exported for tests.\n\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {\n  if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {\n    next();\n    return;\n  }\n\n  var pathname = parseRequest(req).pathname;\n\n  try {\n    pathname = decodeURIComponent(pathname);\n  } catch (e) {\n    next();\n    return;\n  }\n\n  var serveStaticJs = function (s) {\n    res.writeHead(200, {\n      'Content-type': 'application/javascript; charset=UTF-8'\n    });\n    res.write(s);\n    res.end();\n  };\n\n  if (pathname === \"/meteor_runtime_config.js\" && !WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(\"__meteor_runtime_config__ = \" + JSON.stringify(__meteor_runtime_config__) + \";\");\n    return;\n  } else if (_.has(additionalStaticJs, pathname) && !WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(additionalStaticJs[pathname]);\n    return;\n  }\n\n  if (!_.has(staticFiles, pathname)) {\n    next();\n    return;\n  } // We don't need to call pause because, unlike 'static', once we call into\n  // 'send' and yield to the event loop, we never call another handler with\n  // 'next'.\n\n\n  var info = staticFiles[pathname]; // Cacheable files are files that should never change. Typically\n  // named by their hash (eg meteor bundled js and css files).\n  // We cache them ~forever (1yr).\n\n  var maxAge = info.cacheable ? 1000 * 60 * 60 * 24 * 365 : 0; // Set the X-SourceMap header, which current Chrome, FireFox, and Safari\n  // understand.  (The SourceMap header is slightly more spec-correct but FF\n  // doesn't understand it.)\n  //\n  // You may also need to enable source maps in Chrome: open dev tools, click\n  // the gear in the bottom right corner, and select \"enable source maps\".\n\n  if (info.sourceMapUrl) {\n    res.setHeader('X-SourceMap', __meteor_runtime_config__.ROOT_URL_PATH_PREFIX + info.sourceMapUrl);\n  }\n\n  if (info.type === \"js\" || info.type === \"dynamic js\") {\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");\n  } else if (info.type === \"css\") {\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");\n  } else if (info.type === \"json\") {\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n  }\n\n  if (info.hash) {\n    res.setHeader('ETag', '\"' + info.hash + '\"');\n  }\n\n  if (info.content) {\n    res.write(info.content);\n    res.end();\n  } else {\n    send(req, info.absolutePath, {\n      maxage: maxAge,\n      dotfiles: 'allow',\n      // if we specified a dotfile in the manifest, serve it\n      lastModified: false // don't set last-modified based on the file date\n\n    }).on('error', function (err) {\n      Log.error(\"Error serving static file \" + err);\n      res.writeHead(500);\n      res.end();\n    }).on('directory', function () {\n      Log.error(\"Unexpected directory \" + info.absolutePath);\n      res.writeHead(500);\n      res.end();\n    }).pipe(res);\n  }\n};\n\nvar getUrlPrefixForArch = function (arch) {\n  // XXX we rely on the fact that arch names don't contain slashes\n  // in that case we would need to uri escape it\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url\n  // to Meteor internals.\n  return arch === WebApp.defaultArch ? '' : '/' + '__' + arch.replace(/^web\\./, '');\n}; // Parse the passed in port value. Return the port as-is if it's a String\n// (e.g. a Windows Server style named pipe), otherwise return the port as an\n// integer.\n//\n// DEPRECATED: Direct use of this function is not recommended; it is no\n// longer used internally, and will be removed in a future release.\n\n\nWebAppInternals.parsePort = port => {\n  let parsedPort = parseInt(port);\n\n  if (Number.isNaN(parsedPort)) {\n    parsedPort = port;\n  }\n\n  return parsedPort;\n};\n\nfunction runWebAppServer() {\n  var shuttingDown = false;\n  var syncQueue = new Meteor._SynchronousQueue();\n\n  var getItemPathname = function (itemUrl) {\n    return decodeURIComponent(parseUrl(itemUrl).pathname);\n  };\n\n  WebAppInternals.reloadClientPrograms = function () {\n    syncQueue.runTask(function () {\n      staticFiles = {};\n\n      var generateClientProgram = function (clientPath, arch) {\n        // read the control for the client we'll be serving up\n        var clientJsonPath = pathJoin(__meteor_bootstrap__.serverDir, clientPath);\n        var clientDir = pathDirname(clientJsonPath);\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));\n        if (clientJson.format !== \"web-program-pre1\") throw new Error(\"Unsupported format for client assets: \" + JSON.stringify(clientJson.format));\n        if (!clientJsonPath || !clientDir || !clientJson) throw new Error(\"Client config file not parsed.\");\n        var urlPrefix = getUrlPrefixForArch(arch);\n        var manifest = clientJson.manifest;\n\n        _.each(manifest, function (item) {\n          if (item.url && item.where === \"client\") {\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {\n              absolutePath: pathJoin(clientDir, item.path),\n              cacheable: item.cacheable,\n              hash: item.hash,\n              // Link from source to its map\n              sourceMapUrl: item.sourceMapUrl,\n              type: item.type\n            };\n\n            if (item.sourceMap) {\n              // Serve the source map too, under the specified URL. We assume all\n              // source maps are cacheable.\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {\n                absolutePath: pathJoin(clientDir, item.sourceMap),\n                cacheable: true\n              };\n            }\n          }\n        });\n\n        var program = {\n          format: \"web-program-pre1\",\n          manifest: manifest,\n          version: process.env.AUTOUPDATE_VERSION || WebAppHashing.calculateClientHash(manifest, null, _.pick(__meteor_runtime_config__, \"PUBLIC_SETTINGS\")),\n          cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions,\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS\n        };\n        WebApp.clientPrograms[arch] = program; // Expose program details as a string reachable via the following\n        // URL.\n\n        const manifestUrlPrefix = \"/__\" + arch.replace(/^web\\./, \"\");\n        const manifestUrl = manifestUrlPrefix + getItemPathname(\"/manifest.json\");\n        staticFiles[manifestUrl] = {\n          content: JSON.stringify(program),\n          cacheable: false,\n          hash: program.version,\n          type: \"json\"\n        };\n      };\n\n      try {\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;\n\n        _.each(clientPaths, function (clientPath, arch) {\n          archPath[arch] = pathDirname(clientPath);\n          generateClientProgram(clientPath, arch);\n        }); // Exported for tests.\n\n\n        WebAppInternals.staticFiles = staticFiles;\n      } catch (e) {\n        Log.error(\"Error reloading the client program: \" + e.stack);\n        process.exit(1);\n      }\n    });\n  };\n\n  WebAppInternals.generateBoilerplate = function () {\n    // This boilerplate will be served to the mobile devices when used with\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by\n    // the device's server, it is important to set the DDP url to the actual\n    // Meteor server accepting DDP connections and not the device's file server.\n    var defaultOptionsForArch = {\n      'web.cordova': {\n        runtimeConfigOverrides: {\n          // XXX We use absoluteUrl() here so that we serve https://\n          // URLs to cordova clients if force-ssl is in use. If we were\n          // to use __meteor_runtime_config__.ROOT_URL instead of\n          // absoluteUrl(), then Cordova clients would immediately get a\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to\n          // http://example.meteor.com. This breaks the app, because\n          // force-ssl doesn't serve CORS headers on 302\n          // redirects. (Plus it's undesirable to have clients\n          // connecting to http://example.meteor.com when force-ssl is\n          // in use.)\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL || Meteor.absoluteUrl(),\n          ROOT_URL: process.env.MOBILE_ROOT_URL || Meteor.absoluteUrl()\n        }\n      }\n    };\n    syncQueue.runTask(function () {\n      _.each(WebApp.clientPrograms, function (program, archName) {\n        boilerplateByArch[archName] = WebAppInternals.generateBoilerplateInstance(archName, program.manifest, defaultOptionsForArch[archName]);\n      }); // Clear the memoized boilerplate cache.\n\n\n      memoizedBoilerplate = {}; // Configure CSS injection for the default arch\n      // XXX implement the CSS injection for all archs?\n\n      var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css; // Rewrite all CSS files (which are written directly to <style> tags)\n      // by autoupdate_client to use the CDN prefix/etc\n\n      var allCss = _.map(cssFiles, function (cssFile) {\n        return {\n          url: bundledJsCssUrlRewriteHook(cssFile.url)\n        };\n      });\n\n      WebAppInternals.refreshableAssets = {\n        allCss\n      };\n    });\n  };\n\n  WebAppInternals.reloadClientPrograms(); // webserver\n\n  var app = connect(); // Packages and apps can add handlers that run before any other Meteor\n  // handlers via WebApp.rawConnectHandlers.\n\n  var rawConnectHandlers = connect();\n  app.use(rawConnectHandlers); // Auto-compress any json, javascript, or text.\n\n  app.use(compress()); // parse cookies into an object\n\n  app.use(cookieParser()); // We're not a proxy; reject (without crashing) attempts to treat us like\n  // one. (See #1212.)\n\n  app.use(function (req, res, next) {\n    if (RoutePolicy.isValidUrl(req.url)) {\n      next();\n      return;\n    }\n\n    res.writeHead(400);\n    res.write(\"Not a proxy\");\n    res.end();\n  }); // Strip off the path prefix, if it exists.\n\n  app.use(function (request, response, next) {\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n\n    var url = Npm.require('url').parse(request.url);\n\n    var pathname = url.pathname; // check if the path in the url starts with the path prefix (and the part\n    // after the path prefix must start with a / if it exists.)\n\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix && (pathname.length == pathPrefix.length || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);\n      next();\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {\n      next();\n    } else if (pathPrefix) {\n      response.writeHead(404);\n      response.write(\"Unknown path\");\n      response.end();\n    } else {\n      next();\n    }\n  }); // Parse the query string into res.query. Used by oauth_server, but it's\n  // generally pretty handy..\n\n  app.use(query()); // Serve static files from the manifest.\n  // This is inspired by the 'static' middleware.\n\n  app.use(function (req, res, next) {\n    WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);\n  }); // Core Meteor packages like dynamic-import can add handlers before\n  // other handlers added by package and application code.\n\n  app.use(WebAppInternals.meteorInternalHandlers = connect()); // Packages and apps can add handlers to this via WebApp.connectHandlers.\n  // They are inserted before our default handler.\n\n  var packageAndAppHandlers = connect();\n  app.use(packageAndAppHandlers);\n  var suppressConnectErrors = false; // connect knows it is an error handler because it has 4 arguments instead of\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden\n  // inside packageAndAppHandlers.)\n\n  app.use(function (err, req, res, next) {\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {\n      next(err);\n      return;\n    }\n\n    res.writeHead(err.status, {\n      'Content-Type': 'text/plain'\n    });\n    res.end(\"An error message\");\n  });\n  app.use(function (req, res, next) {\n    if (!appUrl(req.url)) {\n      return next();\n    } else {\n      var headers = {\n        'Content-Type': 'text/html; charset=utf-8'\n      };\n\n      if (shuttingDown) {\n        headers['Connection'] = 'Close';\n      }\n\n      var request = WebApp.categorizeRequest(req);\n\n      if (request.url.query && request.url.query['meteor_css_resource']) {\n        // In this case, we're requesting a CSS resource in the meteor-specific\n        // way, but we don't have it.  Serve a static css file that indicates that\n        // we didn't have it, so we can detect that and refresh.  Make sure\n        // that any proxies or CDNs don't cache this error!  (Normally proxies\n        // or CDNs are smart enough not to cache error pages, but in order to\n        // make this hack work, we need to return the CSS file as a 200, which\n        // would otherwise be cached.)\n        headers['Content-Type'] = 'text/css; charset=utf-8';\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(200, headers);\n        res.write(\".meteor-css-not-found-error { width: 0px;}\");\n        res.end();\n        return;\n      }\n\n      if (request.url.query && request.url.query['meteor_js_resource']) {\n        // Similarly, we're requesting a JS resource that we don't have.\n        // Serve an uncached 404. (We can't use the same hack we use for CSS,\n        // because actually acting on that hack requires us to have the JS\n        // already!)\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return;\n      }\n\n      if (request.url.query && request.url.query['meteor_dont_serve_index']) {\n        // When downloading files during a Cordova hot code push, we need\n        // to detect if a file is not available instead of inadvertently\n        // downloading the default index page.\n        // So similar to the situation above, we serve an uncached 404.\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return;\n      } // /packages/asdfsad ... /__cordova/dafsdf.js\n\n\n      var pathname = parseRequest(req).pathname;\n      var archKey = pathname.split('/')[1];\n      var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');\n\n      if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {\n        archKey = WebApp.defaultArch;\n      } else {\n        archKey = archKeyCleaned;\n      }\n\n      return getBoilerplateAsync(request, archKey).then(({\n        stream,\n        statusCode,\n        headers: newHeaders\n      }) => {\n        if (!statusCode) {\n          statusCode = res.statusCode ? res.statusCode : 200;\n        }\n\n        if (newHeaders) {\n          Object.assign(headers, newHeaders);\n        }\n\n        res.writeHead(statusCode, headers);\n        stream.pipe(res, {\n          // End the response when the stream ends.\n          end: true\n        });\n      }).catch(error => {\n        Log.error(\"Error running template: \" + error.stack);\n        res.writeHead(500, headers);\n        res.end();\n      });\n    }\n  }); // Return 404 by default, if no other handlers serve this URL.\n\n  app.use(function (req, res) {\n    res.writeHead(404);\n    res.end();\n  });\n  var httpServer = createServer(app);\n  var onListeningCallbacks = []; // After 5 seconds w/o data on a socket, kill it.  On the other hand, if\n  // there's an outstanding request, give it a higher timeout instead (to avoid\n  // killing long-polling requests)\n\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT); // Do this here, and then also in livedata/stream_server.js, because\n  // stream_server.js kills all the current request handlers when installing its\n  // own.\n\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback); // If the client gave us a bad request, tell it instead of just closing the\n  // socket. This lets load balancers in front of us differentiate between \"a\n  // server is randomly closing sockets for no reason\" and \"client sent a bad\n  // request\".\n  //\n  // This will only work on Node 6; Node 4 destroys the socket before calling\n  // this event. See https://github.com/nodejs/node/pull/4557/ for details.\n\n  httpServer.on('clientError', (err, socket) => {\n    // Pre-Node-6, do nothing.\n    if (socket.destroyed) {\n      return;\n    }\n\n    if (err.message === 'Parse Error') {\n      socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n    } else {\n      // For other errors, use the default behavior as if we had no clientError\n      // handler.\n      socket.destroy(err);\n    }\n  }); // start up app\n\n  _.extend(WebApp, {\n    connectHandlers: packageAndAppHandlers,\n    rawConnectHandlers: rawConnectHandlers,\n    httpServer: httpServer,\n    connectApp: app,\n    // For testing.\n    suppressConnectErrors: function () {\n      suppressConnectErrors = true;\n    },\n    onListening: function (f) {\n      if (onListeningCallbacks) onListeningCallbacks.push(f);else f();\n    }\n  }); // Let the rest of the packages (and Meteor.startup hooks) insert connect\n  // middlewares and update __meteor_runtime_config__, then keep going to set up\n  // actually serving HTML.\n\n\n  exports.main = argv => {\n    WebAppInternals.generateBoilerplate();\n\n    const startHttpServer = listenOptions => {\n      httpServer.listen(listenOptions, Meteor.bindEnvironment(() => {\n        if (process.env.METEOR_PRINT_ON_LISTEN) {\n          console.log(\"LISTENING\");\n        }\n\n        const callbacks = onListeningCallbacks;\n        onListeningCallbacks = null;\n        callbacks.forEach(callback => {\n          callback();\n        });\n      }, e => {\n        console.error(\"Error listening:\", e);\n        console.error(e && e.stack);\n      }));\n    };\n\n    let localPort = process.env.PORT || 0;\n    const unixSocketPath = process.env.UNIX_SOCKET_PATH;\n\n    if (unixSocketPath) {\n      // Start the HTTP server using a socket file.\n      removeExistingSocketFile(unixSocketPath);\n      startHttpServer({\n        path: unixSocketPath\n      });\n      registerSocketFileCleanup(unixSocketPath);\n    } else {\n      localPort = isNaN(Number(localPort)) ? localPort : Number(localPort);\n\n      if (/\\\\\\\\?.+\\\\pipe\\\\?.+/.test(localPort)) {\n        // Start the HTTP server using Windows Server style named pipe.\n        startHttpServer({\n          path: localPort\n        });\n      } else if (typeof localPort === \"number\") {\n        // Start the HTTP server using TCP.\n        startHttpServer({\n          port: localPort,\n          host: process.env.BIND_IP || \"0.0.0.0\"\n        });\n      } else {\n        throw new Error(\"Invalid PORT specified\");\n      }\n    }\n\n    return \"DAEMON\";\n  };\n}\n\nrunWebAppServer();\nvar inlineScriptsAllowed = true;\n\nWebAppInternals.inlineScriptsAllowed = function () {\n  return inlineScriptsAllowed;\n};\n\nWebAppInternals.setInlineScriptsAllowed = function (value) {\n  inlineScriptsAllowed = value;\n  WebAppInternals.generateBoilerplate();\n};\n\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {\n  bundledJsCssUrlRewriteHook = hookFn;\n  WebAppInternals.generateBoilerplate();\n};\n\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {\n  var self = this;\n  self.setBundledJsCssUrlRewriteHook(function (url) {\n    return prefix + url;\n  });\n}; // Packages can call `WebAppInternals.addStaticJs` to specify static\n// JavaScript to be included in the app. This static JS will be inlined,\n// unless inline scripts have been disabled, in which case it will be\n// served under `/<sha1 of contents>`.\n\n\nvar additionalStaticJs = {};\n\nWebAppInternals.addStaticJs = function (contents) {\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;\n}; // Exported for tests\n\n\nWebAppInternals.getBoilerplate = getBoilerplate;\nWebAppInternals.additionalStaticJs = additionalStaticJs;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connect.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/webapp/connect.js                                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  connect: () => connect\n});\nlet npmConnect;\nmodule.watch(require(\"connect\"), {\n  default(v) {\n    npmConnect = v;\n  }\n\n}, 0);\n\nfunction connect(...connectArgs) {\n  const handlers = npmConnect.apply(this, connectArgs);\n  const originalUse = handlers.use; // Wrap the handlers.use method so that any provided handler functions\n  // alway run in a Fiber.\n\n  handlers.use = function use(...useArgs) {\n    const {\n      stack\n    } = this;\n    const originalLength = stack.length;\n    const result = originalUse.apply(this, useArgs); // If we just added anything to the stack, wrap each new entry.handle\n    // with a function that calls Promise.asyncApply to ensure the\n    // original handler runs in a Fiber.\n\n    for (let i = originalLength; i < stack.length; ++i) {\n      const entry = stack[i];\n      const originalHandle = entry.handle;\n\n      if (originalHandle.length >= 4) {\n        // If the original handle had four (or more) parameters, the\n        // wrapper must also have four parameters, since connect uses\n        // handle.length to dermine whether to pass the error as the first\n        // argument to the handle function.\n        entry.handle = function handle(err, req, res, next) {\n          return Promise.asyncApply(originalHandle, this, arguments);\n        };\n      } else {\n        entry.handle = function handle(req, res, next) {\n          return Promise.asyncApply(originalHandle, this, arguments);\n        };\n      }\n    }\n\n    return result;\n  };\n\n  return handlers;\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"socket_file.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/webapp/socket_file.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  removeExistingSocketFile: () => removeExistingSocketFile,\n  registerSocketFileCleanup: () => registerSocketFileCleanup\n});\nlet statSync, unlinkSync, existsSync;\nmodule.watch(require(\"fs\"), {\n  statSync(v) {\n    statSync = v;\n  },\n\n  unlinkSync(v) {\n    unlinkSync = v;\n  },\n\n  existsSync(v) {\n    existsSync = v;\n  }\n\n}, 0);\n\nconst removeExistingSocketFile = socketPath => {\n  try {\n    if (statSync(socketPath).isSocket()) {\n      // Since a new socket file will be created, remove the existing\n      // file.\n      unlinkSync(socketPath);\n    } else {\n      throw new Error(`An existing file was found at \"${socketPath}\" and it is not ` + 'a socket file. Please confirm PORT is pointing to valid and ' + 'un-used socket file path.');\n    }\n  } catch (error) {\n    // If there is no existing socket file to cleanup, great, we'll\n    // continue normally. If the caught exception represents any other\n    // issue, re-throw.\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n};\n\nconst registerSocketFileCleanup = (socketPath, eventEmitter = process) => {\n  ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(signal => {\n    eventEmitter.on(signal, Meteor.bindEnvironment(() => {\n      if (existsSync(socketPath)) {\n        unlinkSync(socketPath);\n      }\n    }));\n  });\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"connect\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/connect/package.json                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"connect\";\nexports.version = \"3.6.5\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/connect/index.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!\n * connect\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('connect:dispatcher');\nvar EventEmitter = require('events').EventEmitter;\nvar finalhandler = require('finalhandler');\nvar http = require('http');\nvar merge = require('utils-merge');\nvar parseUrl = require('parseurl');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = createServer;\n\n/**\n * Module variables.\n * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Create a new connect server.\n *\n * @return {function}\n * @public\n */\n\nfunction createServer() {\n  function app(req, res, next){ app.handle(req, res, next); }\n  merge(app, proto);\n  merge(app, EventEmitter.prototype);\n  app.route = '/';\n  app.stack = [];\n  return app;\n}\n\n/**\n * Utilize the given middleware `handle` to the given `route`,\n * defaulting to _/_. This \"route\" is the mount-point for the\n * middleware, when given a value other than _/_ the middleware\n * is only effective when that segment is present in the request's\n * pathname.\n *\n * For example if we were to mount a function at _/admin_, it would\n * be invoked on _/admin_, and _/admin/settings_, however it would\n * not be invoked for _/_, or _/posts_.\n *\n * @param {String|Function|Server} route, callback or server\n * @param {Function|Server} callback or server\n * @return {Server} for chaining\n * @public\n */\n\nproto.use = function use(route, fn) {\n  var handle = fn;\n  var path = route;\n\n  // default route to '/'\n  if (typeof route !== 'string') {\n    handle = route;\n    path = '/';\n  }\n\n  // wrap sub-apps\n  if (typeof handle.handle === 'function') {\n    var server = handle;\n    server.route = path;\n    handle = function (req, res, next) {\n      server.handle(req, res, next);\n    };\n  }\n\n  // wrap vanilla http.Servers\n  if (handle instanceof http.Server) {\n    handle = handle.listeners('request')[0];\n  }\n\n  // strip trailing slash\n  if (path[path.length - 1] === '/') {\n    path = path.slice(0, -1);\n  }\n\n  // add the middleware\n  debug('use %s %s', path || '/', handle.name || 'anonymous');\n  this.stack.push({ route: path, handle: handle });\n\n  return this;\n};\n\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @private\n */\n\nproto.handle = function handle(req, res, out) {\n  var index = 0;\n  var protohost = getProtohost(req.url) || '';\n  var removed = '';\n  var slashAdded = false;\n  var stack = this.stack;\n\n  // final function handler\n  var done = out || finalhandler(req, res, {\n    env: env,\n    onerror: logerror\n  });\n\n  // store the original URL\n  req.originalUrl = req.originalUrl || req.url;\n\n  function next(err) {\n    if (slashAdded) {\n      req.url = req.url.substr(1);\n      slashAdded = false;\n    }\n\n    if (removed.length !== 0) {\n      req.url = protohost + removed + req.url.substr(protohost.length);\n      removed = '';\n    }\n\n    // next callback\n    var layer = stack[index++];\n\n    // all done\n    if (!layer) {\n      defer(done, err);\n      return;\n    }\n\n    // route data\n    var path = parseUrl(req).pathname || '/';\n    var route = layer.route;\n\n    // skip this layer if the route doesn't match\n    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {\n      return next(err);\n    }\n\n    // skip if route match does not border \"/\", \".\", or end\n    var c = path[route.length];\n    if (c !== undefined && '/' !== c && '.' !== c) {\n      return next(err);\n    }\n\n    // trim off the part of the url that matches the route\n    if (route.length !== 0 && route !== '/') {\n      removed = route;\n      req.url = protohost + req.url.substr(protohost.length + removed.length);\n\n      // ensure leading slash\n      if (!protohost && req.url[0] !== '/') {\n        req.url = '/' + req.url;\n        slashAdded = true;\n      }\n    }\n\n    // call the layer handle\n    call(layer.handle, route, err, req, res, next);\n  }\n\n  next();\n};\n\n/**\n * Listen for connections.\n *\n * This method takes the same arguments\n * as node's `http.Server#listen()`.\n *\n * HTTP and HTTPS:\n *\n * If you run your application both as HTTP\n * and HTTPS you may wrap them individually,\n * since your Connect \"server\" is really just\n * a JavaScript `Function`.\n *\n *      var connect = require('connect')\n *        , http = require('http')\n *        , https = require('https');\n *\n *      var app = connect();\n *\n *      http.createServer(app).listen(80);\n *      https.createServer(options, app).listen(443);\n *\n * @return {http.Server}\n * @api public\n */\n\nproto.listen = function listen() {\n  var server = http.createServer(this);\n  return server.listen.apply(server, arguments);\n};\n\n/**\n * Invoke a route handle.\n * @private\n */\n\nfunction call(handle, route, err, req, res, next) {\n  var arity = handle.length;\n  var error = err;\n  var hasError = Boolean(err);\n\n  debug('%s %s : %s', handle.name || '<anonymous>', route, req.originalUrl);\n\n  try {\n    if (hasError && arity === 4) {\n      // error-handling middleware\n      handle(err, req, res, next);\n      return;\n    } else if (!hasError && arity < 4) {\n      // request-handling middleware\n      handle(req, res, next);\n      return;\n    }\n  } catch (e) {\n    // replace the error\n    error = e;\n  }\n\n  // continue\n  next(error);\n}\n\n/**\n * Log error using console.error.\n *\n * @param {Error} err\n * @private\n */\n\nfunction logerror(err) {\n  if (env !== 'test') console.error(err.stack || err.toString());\n}\n\n/**\n * Get get protocol + host for a URL.\n *\n * @param {string} url\n * @private\n */\n\nfunction getProtohost(url) {\n  if (url.length === 0 || url[0] === '/') {\n    return undefined;\n  }\n\n  var searchIndex = url.indexOf('?');\n  var pathLength = searchIndex !== -1\n    ? searchIndex\n    : url.length;\n  var fqdnIndex = url.substr(0, pathLength).indexOf('://');\n\n  return fqdnIndex !== -1\n    ? url.substr(0, url.indexOf('/', 3 + fqdnIndex))\n    : undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"compression\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/compression/package.json                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"compression\";\nexports.version = \"1.7.1\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/compression/index.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!\n * compression\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts')\nvar Buffer = require('safe-buffer').Buffer\nvar bytes = require('bytes')\nvar compressible = require('compressible')\nvar debug = require('debug')('compression')\nvar onHeaders = require('on-headers')\nvar vary = require('vary')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = compression\nmodule.exports.filter = shouldCompress\n\n/**\n * Module variables.\n * @private\n */\n\nvar cacheControlNoTransformRegExp = /(?:^|,)\\s*?no-transform\\s*?(?:,|$)/\n\n/**\n * Compress response data with gzip / deflate.\n *\n * @param {Object} [options]\n * @return {Function} middleware\n * @public\n */\n\nfunction compression (options) {\n  var opts = options || {}\n\n  // options\n  var filter = opts.filter || shouldCompress\n  var threshold = bytes.parse(opts.threshold)\n\n  if (threshold == null) {\n    threshold = 1024\n  }\n\n  return function compression (req, res, next) {\n    var ended = false\n    var length\n    var listeners = []\n    var stream\n\n    var _end = res.end\n    var _on = res.on\n    var _write = res.write\n\n    // flush\n    res.flush = function flush () {\n      if (stream) {\n        stream.flush()\n      }\n    }\n\n    // proxy\n\n    res.write = function write (chunk, encoding) {\n      if (ended) {\n        return false\n      }\n\n      if (!this._header) {\n        this._implicitHeader()\n      }\n\n      return stream\n        ? stream.write(Buffer.from(chunk, encoding))\n        : _write.call(this, chunk, encoding)\n    }\n\n    res.end = function end (chunk, encoding) {\n      if (ended) {\n        return false\n      }\n\n      if (!this._header) {\n        // estimate the length\n        if (!this.getHeader('Content-Length')) {\n          length = chunkLength(chunk, encoding)\n        }\n\n        this._implicitHeader()\n      }\n\n      if (!stream) {\n        return _end.call(this, chunk, encoding)\n      }\n\n      // mark ended\n      ended = true\n\n      // write Buffer for Node.js 0.8\n      return chunk\n        ? stream.end(Buffer.from(chunk, encoding))\n        : stream.end()\n    }\n\n    res.on = function on (type, listener) {\n      if (!listeners || type !== 'drain') {\n        return _on.call(this, type, listener)\n      }\n\n      if (stream) {\n        return stream.on(type, listener)\n      }\n\n      // buffer listeners for future stream\n      listeners.push([type, listener])\n\n      return this\n    }\n\n    function nocompress (msg) {\n      debug('no compression: %s', msg)\n      addListeners(res, _on, listeners)\n      listeners = null\n    }\n\n    onHeaders(res, function onResponseHeaders () {\n      // determine if request is filtered\n      if (!filter(req, res)) {\n        nocompress('filtered')\n        return\n      }\n\n      // determine if the entity should be transformed\n      if (!shouldTransform(req, res)) {\n        nocompress('no transform')\n        return\n      }\n\n      // vary\n      vary(res, 'Accept-Encoding')\n\n      // content-length below threshold\n      if (Number(res.getHeader('Content-Length')) < threshold || length < threshold) {\n        nocompress('size below threshold')\n        return\n      }\n\n      var encoding = res.getHeader('Content-Encoding') || 'identity'\n\n      // already encoded\n      if (encoding !== 'identity') {\n        nocompress('already encoded')\n        return\n      }\n\n      // head\n      if (req.method === 'HEAD') {\n        nocompress('HEAD request')\n        return\n      }\n\n      // compression method\n      var accept = accepts(req)\n      var method = accept.encoding(['gzip', 'deflate', 'identity'])\n\n      // we really don't prefer deflate\n      if (method === 'deflate' && accept.encoding(['gzip'])) {\n        method = accept.encoding(['gzip', 'identity'])\n      }\n\n      // negotiation failed\n      if (!method || method === 'identity') {\n        nocompress('not acceptable')\n        return\n      }\n\n      // compression stream\n      debug('%s compression', method)\n      stream = method === 'gzip'\n        ? zlib.createGzip(opts)\n        : zlib.createDeflate(opts)\n\n      // add buffered listeners to stream\n      addListeners(stream, stream.on, listeners)\n\n      // header fields\n      res.setHeader('Content-Encoding', method)\n      res.removeHeader('Content-Length')\n\n      // compression\n      stream.on('data', function onStreamData (chunk) {\n        if (_write.call(res, chunk) === false) {\n          stream.pause()\n        }\n      })\n\n      stream.on('end', function onStreamEnd () {\n        _end.call(res)\n      })\n\n      _on.call(res, 'drain', function onResponseDrain () {\n        stream.resume()\n      })\n    })\n\n    next()\n  }\n}\n\n/**\n * Add bufferred listeners to stream\n * @private\n */\n\nfunction addListeners (stream, on, listeners) {\n  for (var i = 0; i < listeners.length; i++) {\n    on.apply(stream, listeners[i])\n  }\n}\n\n/**\n * Get the length of a given chunk\n */\n\nfunction chunkLength (chunk, encoding) {\n  if (!chunk) {\n    return 0\n  }\n\n  return !Buffer.isBuffer(chunk)\n    ? Buffer.byteLength(chunk, encoding)\n    : chunk.length\n}\n\n/**\n * Default filter function.\n * @private\n */\n\nfunction shouldCompress (req, res) {\n  var type = res.getHeader('Content-Type')\n\n  if (type === undefined || !compressible(type)) {\n    debug('%s not compressible', type)\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determine if the entity should be transformed.\n * @private\n */\n\nfunction shouldTransform (req, res) {\n  var cacheControl = res.getHeader('Cache-Control')\n\n  // Don't compress for Cache-Control: no-transform\n  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4\n  return !cacheControl ||\n    !cacheControlNoTransformRegExp.test(cacheControl)\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"cookie-parser\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/cookie-parser/package.json                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"cookie-parser\";\nexports.version = \"1.4.3\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/cookie-parser/index.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!\n * cookie-parser\n * Copyright(c) 2014 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar cookie = require('cookie');\nvar signature = require('cookie-signature');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = cookieParser;\nmodule.exports.JSONCookie = JSONCookie;\nmodule.exports.JSONCookies = JSONCookies;\nmodule.exports.signedCookie = signedCookie;\nmodule.exports.signedCookies = signedCookies;\n\n/**\n * Parse Cookie header and populate `req.cookies`\n * with an object keyed by the cookie names.\n *\n * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).\n * @param {Object} [options]\n * @return {Function}\n * @public\n */\n\nfunction cookieParser(secret, options) {\n  return function cookieParser(req, res, next) {\n    if (req.cookies) {\n      return next();\n    }\n\n    var cookies = req.headers.cookie;\n    var secrets = !secret || Array.isArray(secret)\n      ? (secret || [])\n      : [secret];\n\n    req.secret = secrets[0];\n    req.cookies = Object.create(null);\n    req.signedCookies = Object.create(null);\n\n    // no cookies\n    if (!cookies) {\n      return next();\n    }\n\n    req.cookies = cookie.parse(cookies, options);\n\n    // parse signed cookies\n    if (secrets.length !== 0) {\n      req.signedCookies = signedCookies(req.cookies, secrets);\n      req.signedCookies = JSONCookies(req.signedCookies);\n    }\n\n    // parse JSON cookies\n    req.cookies = JSONCookies(req.cookies);\n\n    next();\n  };\n}\n\n/**\n * Parse JSON cookie string.\n *\n * @param {String} str\n * @return {Object} Parsed object or undefined if not json cookie\n * @public\n */\n\nfunction JSONCookie(str) {\n  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(str.slice(2));\n  } catch (err) {\n    return undefined;\n  }\n}\n\n/**\n * Parse JSON cookies.\n *\n * @param {Object} obj\n * @return {Object}\n * @public\n */\n\nfunction JSONCookies(obj) {\n  var cookies = Object.keys(obj);\n  var key;\n  var val;\n\n  for (var i = 0; i < cookies.length; i++) {\n    key = cookies[i];\n    val = JSONCookie(obj[key]);\n\n    if (val) {\n      obj[key] = val;\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Parse a signed cookie string, return the decoded value.\n *\n * @param {String} str signed cookie string\n * @param {string|array} secret\n * @return {String} decoded value\n * @public\n */\n\nfunction signedCookie(str, secret) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n\n  if (str.substr(0, 2) !== 's:') {\n    return str;\n  }\n\n  var secrets = !secret || Array.isArray(secret)\n    ? (secret || [])\n    : [secret];\n\n  for (var i = 0; i < secrets.length; i++) {\n    var val = signature.unsign(str.slice(2), secrets[i]);\n\n    if (val !== false) {\n      return val;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Parse signed cookies, returning an object containing the decoded key/value\n * pairs, while removing the signed key from obj.\n *\n * @param {Object} obj\n * @param {string|array} secret\n * @return {Object}\n * @public\n */\n\nfunction signedCookies(obj, secret) {\n  var cookies = Object.keys(obj);\n  var dec;\n  var key;\n  var ret = Object.create(null);\n  var val;\n\n  for (var i = 0; i < cookies.length; i++) {\n    key = cookies[i];\n    val = obj[key];\n    dec = signedCookie(val, secret);\n\n    if (val !== dec) {\n      ret[key] = dec;\n      delete obj[key];\n    }\n  }\n\n  return ret;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"qs-middleware\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/qs-middleware/package.json                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"qs-middleware\";\nexports.version = \"1.0.3\";\nexports.main = \"./lib/qs-middleware.js\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"qs-middleware.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/qs-middleware/lib/qs-middleware.js                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n'use strict';\n\nvar url = require('url');\nvar qs = require('qs');\n\nmodule.exports = qsMiddleware;\n\nfunction qsMiddleware(options) {\n\treturn function (request, response, next) {\n\t\trequest.query = qs.parse(url.parse(request.url).query, options);\n\t\tnext();\n\t};\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"parseurl\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/parseurl/package.json                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"parseurl\";\nexports.version = \"1.3.2\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/parseurl/index.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!\n * parseurl\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar url = require('url')\nvar parse = url.parse\nvar Url = url.Url\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = parseurl\nmodule.exports.original = originalurl\n\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction parseurl (req) {\n  var url = req.url\n\n  if (url === undefined) {\n    // URL is undefined\n    return undefined\n  }\n\n  var parsed = req._parsedUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return (req._parsedUrl = parsed)\n};\n\n/**\n * Parse the `req` original url with fallback and memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction originalurl (req) {\n  var url = req.originalUrl\n\n  if (typeof url !== 'string') {\n    // Fallback\n    return parseurl(req)\n  }\n\n  var parsed = req._parsedOriginalUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return (req._parsedOriginalUrl = parsed)\n};\n\n/**\n * Parse the `str` url with fast-path short-cut.\n *\n * @param {string} str\n * @return {Object}\n * @private\n */\n\nfunction fastparse (str) {\n  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {\n    return parse(str)\n  }\n\n  var pathname = str\n  var query = null\n  var search = null\n\n  // This takes the regexp from https://github.com/joyent/node/pull/7878\n  // Which is /^(\\/[^?#\\s]*)(\\?[^#\\s]*)?$/\n  // And unrolls it into a for loop\n  for (var i = 1; i < str.length; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x3f: /* ?  */\n        if (search === null) {\n          pathname = str.substring(0, i)\n          query = str.substring(i + 1)\n          search = str.substring(i)\n        }\n        break\n      case 0x09: /* \\t */\n      case 0x0a: /* \\n */\n      case 0x0c: /* \\f */\n      case 0x0d: /* \\r */\n      case 0x20: /*    */\n      case 0x23: /* #  */\n      case 0xa0:\n      case 0xfeff:\n        return parse(str)\n    }\n  }\n\n  var url = Url !== undefined\n    ? new Url()\n    : {}\n  url.path = str\n  url.href = str\n  url.pathname = pathname\n  url.query = query\n  url.search = search\n\n  return url\n}\n\n/**\n * Determine if parsed is still fresh for url.\n *\n * @param {string} url\n * @param {object} parsedUrl\n * @return {boolean}\n * @private\n */\n\nfunction fresh (url, parsedUrl) {\n  return typeof parsedUrl === 'object' &&\n    parsedUrl !== null &&\n    (Url === undefined || parsedUrl instanceof Url) &&\n    parsedUrl._raw === url\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"basic-auth-connect\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/basic-auth-connect/package.json                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"basic-auth-connect\";\nexports.version = \"1.0.0\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/basic-auth-connect/index.js                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar http = require('http');\n\n/*!\n * Connect - basicAuth\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Basic Auth:\n *\n * Status: Deprecated. No bug reports or pull requests are welcomed\n * for this middleware. However, this middleware will not be removed.\n * Instead, you should use [basic-auth](https://github.com/visionmedia/node-basic-auth).\n *\n * Enfore basic authentication by providing a `callback(user, pass)`,\n * which must return `true` in order to gain access. Alternatively an async\n * method is provided as well, invoking `callback(user, pass, callback)`. Populates\n * `req.user`. The final alternative is simply passing username / password\n * strings.\n *\n *  Simple username and password\n *\n *     connect(connect.basicAuth('username', 'password'));\n *\n *  Callback verification\n *\n *     connect()\n *       .use(connect.basicAuth(function(user, pass){\n *         return 'tj' == user && 'wahoo' == pass;\n *       }))\n *\n *  Async callback verification, accepting `fn(err, user)`.\n *\n *     connect()\n *       .use(connect.basicAuth(function(user, pass, fn){\n *         User.authenticate({ user: user, pass: pass }, fn);\n *       }))\n *\n * @param {Function|String} callback or username\n * @param {String} realm\n * @api public\n */\n\nmodule.exports = function basicAuth(callback, realm) {\n  var username, password;\n\n  // user / pass strings\n  if ('string' == typeof callback) {\n    username = callback;\n    password = realm;\n    if ('string' != typeof password) throw new Error('password argument required');\n    realm = arguments[2];\n    callback = function(user, pass){\n      return user == username && pass == password;\n    }\n  }\n\n  realm = realm || 'Authorization Required';\n\n  return function(req, res, next) {\n    var authorization = req.headers.authorization;\n\n    if (req.user) return next();\n    if (!authorization) return unauthorized(res, realm);\n\n    var parts = authorization.split(' ');\n\n    if (parts.length !== 2) return next(error(400));\n\n    var scheme = parts[0]\n      , credentials = new Buffer(parts[1], 'base64').toString()\n      , index = credentials.indexOf(':');\n\n    if ('Basic' != scheme || index < 0) return next(error(400));\n\n    var user = credentials.slice(0, index)\n      , pass = credentials.slice(index + 1);\n\n    // async\n    if (callback.length >= 3) {\n      callback(user, pass, function(err, user){\n        if (err || !user)  return unauthorized(res, realm);\n        req.user = req.remoteUser = user;\n        next();\n      });\n    // sync\n    } else {\n      if (callback(user, pass)) {\n        req.user = req.remoteUser = user;\n        next();\n      } else {\n        unauthorized(res, realm);\n      }\n    }\n  }\n};\n\n/**\n * Respond with 401 \"Unauthorized\".\n *\n * @param {ServerResponse} res\n * @param {String} realm\n * @api private\n */\n\nfunction unauthorized(res, realm) {\n  res.statusCode = 401;\n  res.setHeader('WWW-Authenticate', 'Basic realm=\"' + realm + '\"');\n  res.end('Unauthorized');\n};\n\n/**\n * Generate an `Error` from the given status `code`\n * and optional `msg`.\n *\n * @param {Number} code\n * @param {String} msg\n * @return {Error}\n * @api private\n */\n\nfunction error(code, msg){\n  var err = new Error(msg || http.STATUS_CODES[code]);\n  err.status = code;\n  return err;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"useragent\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/useragent/package.json                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"useragent\";\nexports.version = \"2.2.1\";\nexports.main = \"./index.js\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/useragent/index.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n'use strict';\n\n/**\n * This is where all the magic comes from, specially crafted for `useragent`.\n */\nvar regexps = require('./lib/regexps');\n\n/**\n * Reduce references by storing the lookups.\n */\n// OperatingSystem parsers:\nvar osparsers = regexps.os\n  , osparserslength = osparsers.length;\n\n// UserAgent parsers:\nvar agentparsers = regexps.browser\n  , agentparserslength = agentparsers.length;\n\n// Device parsers:\nvar deviceparsers = regexps.device\n  , deviceparserslength = deviceparsers.length;\n\n/**\n * The representation of a parsed user agent.\n *\n * @constructor\n * @param {String} family The name of the browser\n * @param {String} major Major version of the browser\n * @param {String} minor Minor version of the browser\n * @param {String} patch Patch version of the browser\n * @param {String} source The actual user agent string\n * @api public\n */\nfunction Agent(family, major, minor, patch, source) {\n  this.family = family || 'Other';\n  this.major = major || '0';\n  this.minor = minor || '0';\n  this.patch = patch || '0';\n  this.source = source || '';\n}\n\n/**\n * OnDemand parsing of the Operating System.\n *\n * @type {OperatingSystem}\n * @api public\n */\nObject.defineProperty(Agent.prototype, 'os', {\n  get: function lazyparse() {\n    var userAgent = this.source\n      , length = osparserslength\n      , parsers = osparsers\n      , i = 0\n      , parser\n      , res;\n\n    for (; i < length; i++) {\n      if (res = parsers[i][0].exec(userAgent)) {\n        parser = parsers[i];\n\n        if (parser[1]) res[1] = parser[1].replace('$1', res[1]);\n        break;\n      }\n    }\n\n    return Object.defineProperty(this, 'os', {\n        value: !parser || !res\n          ? new OperatingSystem()\n          : new OperatingSystem(\n                res[1]\n              , parser[2] || res[2]\n              , parser[3] || res[3]\n              , parser[4] || res[4]\n            )\n    }).os;\n  },\n\n  /**\n   * Bypass the OnDemand parsing and set an OperatingSystem instance.\n   *\n   * @param {OperatingSystem} os\n   * @api public\n   */\n  set: function set(os) {\n    if (!(os instanceof OperatingSystem)) return false;\n\n    return Object.defineProperty(this, 'os', {\n      value: os\n    }).os;\n  }\n});\n\n/**\n * OnDemand parsing of the Device type.\n *\n * @type {Device}\n * @api public\n */\nObject.defineProperty(Agent.prototype, 'device', {\n  get: function lazyparse() {\n    var userAgent = this.source\n      , length = deviceparserslength\n      , parsers = deviceparsers\n      , i = 0\n      , parser\n      , res;\n\n    for (; i < length; i++) {\n      if (res = parsers[i][0].exec(userAgent)) {\n        parser = parsers[i];\n\n        if (parser[1]) res[1] = parser[1].replace('$1', res[1]);\n        break;\n      }\n    }\n\n    return Object.defineProperty(this, 'device', {\n        value: !parser || !res\n          ? new Device()\n          : new Device(\n                res[1]\n              , parser[2] || res[2]\n              , parser[3] || res[3]\n              , parser[4] || res[4]\n            )\n    }).device;\n  },\n\n  /**\n   * Bypass the OnDemand parsing and set an Device instance.\n   *\n   * @param {Device} device\n   * @api public\n   */\n  set: function set(device) {\n    if (!(device instanceof Device)) return false;\n\n    return Object.defineProperty(this, 'device', {\n      value: device\n    }).device;\n  }\n});\n/*** Generates a string output of the parsed user agent.\n *\n * @returns {String}\n * @api public\n */\nAgent.prototype.toAgent = function toAgent() {\n  var output = this.family\n    , version = this.toVersion();\n\n  if (version) output += ' '+ version;\n  return output;\n};\n\n/**\n * Generates a string output of the parser user agent and operating system.\n *\n * @returns {String}  \"UserAgent 0.0.0 / OS\"\n * @api public\n */\nAgent.prototype.toString = function toString() {\n  var agent = this.toAgent()\n    , os = this.os !== 'Other' ? this.os : false;\n\n  return agent + (os ? ' / ' + os : '');\n};\n\n/**\n * Outputs a compiled veersion number of the user agent.\n *\n * @returns {String}\n * @api public\n */\nAgent.prototype.toVersion = function toVersion() {\n  var version = '';\n\n  if (this.major) {\n    version += this.major;\n\n    if (this.minor) {\n     version += '.' + this.minor;\n\n     // Special case here, the patch can also be Alpha, Beta etc so we need\n     // to check if it's a string or not.\n     if (this.patch) {\n      version += (isNaN(+this.patch) ? ' ' : '.') + this.patch;\n     }\n    }\n  }\n\n  return version;\n};\n\n/**\n * Outputs a JSON string of the Agent.\n *\n * @returns {String}\n * @api public\n */\nAgent.prototype.toJSON = function toJSON() {\n  return {\n      family: this.family\n    , major: this.major\n    , minor: this.minor\n    , patch: this.patch\n    , device: this.device\n    , os: this.os\n  };\n};\n\n/**\n * The representation of a parsed Operating System.\n *\n * @constructor\n * @param {String} family The name of the os\n * @param {String} major Major version of the os\n * @param {String} minor Minor version of the os\n * @param {String} patch Patch version of the os\n * @api public\n */\nfunction OperatingSystem(family, major, minor, patch) {\n  this.family = family || 'Other';\n  this.major = major || '0';\n  this.minor = minor || '0';\n  this.patch = patch || '0';\n}\n\n/**\n * Generates a stringified version of the Operating System.\n *\n * @returns {String} \"Operating System 0.0.0\"\n * @api public\n */\nOperatingSystem.prototype.toString = function toString() {\n  var output = this.family\n    , version = this.toVersion();\n\n  if (version) output += ' '+ version;\n  return output;\n};\n\n/**\n * Generates the version of the Operating System.\n *\n * @returns {String}\n * @api public\n */\nOperatingSystem.prototype.toVersion = function toVersion() {\n  var version = '';\n\n  if (this.major) {\n    version += this.major;\n\n    if (this.minor) {\n     version += '.' + this.minor;\n\n     // Special case here, the patch can also be Alpha, Beta etc so we need\n     // to check if it's a string or not.\n     if (this.patch) {\n      version += (isNaN(+this.patch) ? ' ' : '.') + this.patch;\n     }\n    }\n  }\n\n  return version;\n};\n\n/**\n * Outputs a JSON string of the OS, values are defaulted to undefined so they\n * are not outputed in the stringify.\n *\n * @returns {String}\n * @api public\n */\nOperatingSystem.prototype.toJSON = function toJSON(){\n  return {\n      family: this.family\n    , major: this.major || undefined\n    , minor: this.minor || undefined\n    , patch: this.patch || undefined\n  };\n};\n\n/**\n * The representation of a parsed Device.\n *\n * @constructor\n * @param {String} family The name of the device\n * @param {String} major Major version of the device\n * @param {String} minor Minor version of the device\n * @param {String} patch Patch version of the device\n * @api public\n */\nfunction Device(family, major, minor, patch) {\n  this.family = family || 'Other';\n  this.major = major || '0';\n  this.minor = minor || '0';\n  this.patch = patch || '0';\n}\n\n/**\n * Generates a stringified version of the Device.\n *\n * @returns {String} \"Device 0.0.0\"\n * @api public\n */\nDevice.prototype.toString = function toString() {\n  var output = this.family\n    , version = this.toVersion();\n\n  if (version) output += ' '+ version;\n  return output;\n};\n\n/**\n * Generates the version of the Device.\n *\n * @returns {String}\n * @api public\n */\nDevice.prototype.toVersion = function toVersion() {\n  var version = '';\n\n  if (this.major) {\n    version += this.major;\n\n    if (this.minor) {\n     version += '.' + this.minor;\n\n     // Special case here, the patch can also be Alpha, Beta etc so we need\n     // to check if it's a string or not.\n     if (this.patch) {\n      version += (isNaN(+this.patch) ? ' ' : '.') + this.patch;\n     }\n    }\n  }\n\n  return version;\n};\n\n/**\n * Outputs a JSON string of the Device, values are defaulted to undefined so they\n * are not outputed in the stringify.\n *\n * @returns {String}\n * @api public\n */\nDevice.prototype.toJSON = function toJSON() {\n  return {\n      family: this.family\n    , major: this.major || undefined\n    , minor: this.minor || undefined\n    , patch: this.patch || undefined\n  };\n};\n\n/**\n * Small nifty thick that allows us to download a fresh set regexs from t3h\n * Int3rNetz when we want to. We will be using the compiled version by default\n * but users can opt-in for updates.\n *\n * @param {Boolean} refresh Refresh the dataset from the remote\n * @api public\n */\nmodule.exports = function updater() {\n  try {\n    require('./lib/update').update(function updating(err, results) {\n      if (err) {\n        console.log('[useragent] Failed to update the parsed due to an error:');\n        console.log('[useragent] '+ (err.message ? err.message : err));\n        return;\n      }\n\n      regexps = results;\n\n      // OperatingSystem parsers:\n      osparsers = regexps.os;\n      osparserslength = osparsers.length;\n\n      // UserAgent parsers:\n      agentparsers = regexps.browser;\n      agentparserslength = agentparsers.length;\n\n      // Device parsers:\n      deviceparsers = regexps.device;\n      deviceparserslength = deviceparsers.length;\n    });\n  } catch (e) {\n    console.error('[useragent] If you want to use automatic updating, please add:');\n    console.error('[useragent]   - request (npm install request --save)');\n    console.error('[useragent]   - yamlparser (npm install yamlparser --save)');\n    console.error('[useragent] To your own package.json');\n  }\n};\n\n// Override the exports with our newly set module.exports\nexports = module.exports;\n\n/**\n * Nao that we have setup all the different classes and configured it we can\n * actually start assembling and exposing everything.\n */\nexports.Device = Device;\nexports.OperatingSystem = OperatingSystem;\nexports.Agent = Agent;\n\n/**\n * Check if the userAgent is something we want to parse with regexp's.\n *\n * @param {String} userAgent The userAgent.\n * @returns {Boolean}\n */\nfunction isSafe(userAgent) {\n  var consecutive = 0\n    , code = 0;\n\n  for (var i = 0; i < userAgent.length; i++) {\n    code = userAgent.charCodeAt(i);\n    // numbers between 0 and 9, letters between a and z\n    if ((code >= 48 && code <= 57) || (code >= 97 && code <= 122)) {\n      consecutive++;\n    } else {\n      consecutive = 0;\n    }\n\n    if (consecutive >= 100) {\n      return false;\n    }\n  }\n\n  return true\n}\n\n\n/**\n * Parses the user agent string with the generated parsers from the\n * ua-parser project on google code.\n *\n * @param {String} userAgent The user agent string\n * @param {String} jsAgent Optional UA from js to detect chrome frame\n * @returns {Agent}\n * @api public\n */\nexports.parse = function parse(userAgent, jsAgent) {\n  if (!userAgent || !isSafe(userAgent)) return new Agent();\n\n  var length = agentparserslength\n    , parsers = agentparsers\n    , i = 0\n    , parser\n    , res;\n\n  for (; i < length; i++) {\n    if (res = parsers[i][0].exec(userAgent)) {\n      parser = parsers[i];\n\n      if (parser[1]) res[1] = parser[1].replace('$1', res[1]);\n      if (!jsAgent) return new Agent(\n          res[1]\n        , parser[2] || res[2]\n        , parser[3] || res[3]\n        , parser[4] || res[4]\n        , userAgent\n      );\n\n      break;\n    }\n  }\n\n  // Return early if we didn't find an match, but might still be able to parse\n  // the os and device, so make sure we supply it with the source\n  if (!parser || !res) return new Agent('', '', '', '', userAgent);\n\n  // Detect Chrome Frame, but make sure it's enabled! So we need to check for\n  // the Chrome/ so we know that it's actually using Chrome under the hood.\n  if (jsAgent && ~jsAgent.indexOf('Chrome/') && ~userAgent.indexOf('chromeframe')) {\n    res[1] = 'Chrome Frame (IE '+ res[1] +'.'+ res[2] +')';\n\n    // Run the JavaScripted userAgent string through the parser again so we can\n    // update the version numbers;\n    parser = parse(jsAgent);\n    parser[2] = parser.major;\n    parser[3] = parser.minor;\n    parser[4] = parser.patch;\n  }\n\n  return new Agent(\n      res[1]\n    , parser[2] || res[2]\n    , parser[3] || res[3]\n    , parser[4] || res[4]\n    , userAgent\n  );\n};\n\n/**\n * If you are doing a lot of lookups you might want to cache the results of the\n * parsed user agent string instead, in memory.\n *\n * @TODO We probably want to create 2 dictionary's here 1 for the Agent\n * instances and one for the userAgent instance mapping so we can re-use simular\n * Agent instance and lower our memory consumption.\n *\n * @param {String} userAgent The user agent string\n * @param {String} jsAgent Optional UA from js to detect chrome frame\n * @api public\n */\nvar LRU = require('lru-cache')(5000);\nexports.lookup = function lookup(userAgent, jsAgent) {\n  var key = (userAgent || '')+(jsAgent || '')\n    , cached = LRU.get(key);\n\n  if (cached) return cached;\n  LRU.set(key, (cached = exports.parse(userAgent, jsAgent)));\n\n  return cached;\n};\n\n/**\n * Does a more inaccurate but more common check for useragents identification.\n * The version detection is from the jQuery.com library and is licensed under\n * MIT.\n *\n * @param {String} useragent The user agent\n * @returns {Object} matches\n * @api public\n */\nexports.is = function is(useragent) {\n  var ua = (useragent || '').toLowerCase()\n    , details = {\n        chrome: false\n      , firefox: false\n      , ie: false\n      , mobile_safari: false\n      , mozilla: false\n      , opera: false\n      , safari: false\n      , webkit: false\n      , android: false\n      , version: (ua.match(exports.is.versionRE) || [0, \"0\"])[1]\n    };\n\n  if (~ua.indexOf('webkit')) {\n    details.webkit = true;\n\n    if (~ua.indexOf('android')){\n      details.android = true;\n    }\n\n    if (~ua.indexOf('chrome')) {\n      details.chrome = true;\n    } else if (~ua.indexOf('safari')) {\n      details.safari = true;\n\n      if (~ua.indexOf('mobile') && ~ua.indexOf('apple')) {\n        details.mobile_safari = true;\n      }\n    }\n  } else if (~ua.indexOf('opera')) {\n    details.opera = true;\n  } else if (~ua.indexOf('trident') || ~ua.indexOf('msie')) {\n    details.ie = true;\n  } else if (~ua.indexOf('mozilla') && !~ua.indexOf('compatible')) {\n    details.mozilla = true;\n\n    if (~ua.indexOf('firefox')) details.firefox = true;\n  }\n\n\n  return details;\n};\n\n/**\n * Parses out the version numbers.\n *\n * @type {RegExp}\n * @api private\n */\nexports.is.versionRE = /.+(?:rv|it|ra|ie)[\\/: ]([\\d.]+)/;\n\n/**\n * Transform a JSON object back to a valid userAgent string\n *\n * @param {Object} details\n * @returns {Agent}\n */\nexports.fromJSON = function fromJSON(details) {\n  if (typeof details === 'string') details = JSON.parse(details);\n\n  var agent = new Agent(details.family, details.major, details.minor, details.patch)\n    , os = details.os;\n\n  // The device family was added in v2.0\n  if ('device' in details) {\n    agent.device = new Device(details.device.family);\n  } else {\n    agent.device = new Device();\n  }\n\n  if ('os' in details && os) {\n    // In v1.1.0 we only parsed out the Operating System name, not the full\n    // version which we added in v2.0. To provide backwards compatible we should\n    // we should set the details.os as family\n    if (typeof os === 'string') {\n      agent.os = new OperatingSystem(os);\n    } else {\n      agent.os = new OperatingSystem(os.family, os.major, os.minor, os.patch);\n    }\n  }\n\n  return agent;\n};\n\n/**\n * Library version.\n *\n * @type {String}\n * @api public\n */\nexports.version = require('./package.json').version;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"send\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/send/package.json                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"send\";\nexports.version = \"0.16.1\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/send/index.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!\n * send\n * Copyright(c) 2012 TJ Holowaychuk\n * Copyright(c) 2014-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar debug = require('debug')('send')\nvar deprecate = require('depd')('send')\nvar destroy = require('destroy')\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\nvar etag = require('etag')\nvar fresh = require('fresh')\nvar fs = require('fs')\nvar mime = require('mime')\nvar ms = require('ms')\nvar onFinished = require('on-finished')\nvar parseRange = require('range-parser')\nvar path = require('path')\nvar statuses = require('statuses')\nvar Stream = require('stream')\nvar util = require('util')\n\n/**\n * Path function references.\n * @private\n */\n\nvar extname = path.extname\nvar join = path.join\nvar normalize = path.normalize\nvar resolve = path.resolve\nvar sep = path.sep\n\n/**\n * Regular expression for identifying a bytes Range header.\n * @private\n */\n\nvar BYTES_RANGE_REGEXP = /^ *bytes=/\n\n/**\n * Maximum value allowed for the max age.\n * @private\n */\n\nvar MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000 // 1 year\n\n/**\n * Regular expression to match a path with a directory up component.\n * @private\n */\n\nvar UP_PATH_REGEXP = /(?:^|[\\\\/])\\.\\.(?:[\\\\/]|$)/\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = send\nmodule.exports.mime = mime\n\n/**\n * Return a `SendStream` for `req` and `path`.\n *\n * @param {object} req\n * @param {string} path\n * @param {object} [options]\n * @return {SendStream}\n * @public\n */\n\nfunction send (req, path, options) {\n  return new SendStream(req, path, options)\n}\n\n/**\n * Initialize a `SendStream` with the given `path`.\n *\n * @param {Request} req\n * @param {String} path\n * @param {object} [options]\n * @private\n */\n\nfunction SendStream (req, path, options) {\n  Stream.call(this)\n\n  var opts = options || {}\n\n  this.options = opts\n  this.path = path\n  this.req = req\n\n  this._acceptRanges = opts.acceptRanges !== undefined\n    ? Boolean(opts.acceptRanges)\n    : true\n\n  this._cacheControl = opts.cacheControl !== undefined\n    ? Boolean(opts.cacheControl)\n    : true\n\n  this._etag = opts.etag !== undefined\n    ? Boolean(opts.etag)\n    : true\n\n  this._dotfiles = opts.dotfiles !== undefined\n    ? opts.dotfiles\n    : 'ignore'\n\n  if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {\n    throw new TypeError('dotfiles option must be \"allow\", \"deny\", or \"ignore\"')\n  }\n\n  this._hidden = Boolean(opts.hidden)\n\n  if (opts.hidden !== undefined) {\n    deprecate('hidden: use dotfiles: \\'' + (this._hidden ? 'allow' : 'ignore') + '\\' instead')\n  }\n\n  // legacy support\n  if (opts.dotfiles === undefined) {\n    this._dotfiles = undefined\n  }\n\n  this._extensions = opts.extensions !== undefined\n    ? normalizeList(opts.extensions, 'extensions option')\n    : []\n\n  this._immutable = opts.immutable !== undefined\n    ? Boolean(opts.immutable)\n    : false\n\n  this._index = opts.index !== undefined\n    ? normalizeList(opts.index, 'index option')\n    : ['index.html']\n\n  this._lastModified = opts.lastModified !== undefined\n    ? Boolean(opts.lastModified)\n    : true\n\n  this._maxage = opts.maxAge || opts.maxage\n  this._maxage = typeof this._maxage === 'string'\n    ? ms(this._maxage)\n    : Number(this._maxage)\n  this._maxage = !isNaN(this._maxage)\n    ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)\n    : 0\n\n  this._root = opts.root\n    ? resolve(opts.root)\n    : null\n\n  if (!this._root && opts.from) {\n    this.from(opts.from)\n  }\n}\n\n/**\n * Inherits from `Stream`.\n */\n\nutil.inherits(SendStream, Stream)\n\n/**\n * Enable or disable etag generation.\n *\n * @param {Boolean} val\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.etag = deprecate.function(function etag (val) {\n  this._etag = Boolean(val)\n  debug('etag %s', this._etag)\n  return this\n}, 'send.etag: pass etag as option')\n\n/**\n * Enable or disable \"hidden\" (dot) files.\n *\n * @param {Boolean} path\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.hidden = deprecate.function(function hidden (val) {\n  this._hidden = Boolean(val)\n  this._dotfiles = undefined\n  debug('hidden %s', this._hidden)\n  return this\n}, 'send.hidden: use dotfiles option')\n\n/**\n * Set index `paths`, set to a falsy\n * value to disable index support.\n *\n * @param {String|Boolean|Array} paths\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.index = deprecate.function(function index (paths) {\n  var index = !paths ? [] : normalizeList(paths, 'paths argument')\n  debug('index %o', paths)\n  this._index = index\n  return this\n}, 'send.index: pass index as option')\n\n/**\n * Set root `path`.\n *\n * @param {String} path\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.root = function root (path) {\n  this._root = resolve(String(path))\n  debug('root %s', this._root)\n  return this\n}\n\nSendStream.prototype.from = deprecate.function(SendStream.prototype.root,\n  'send.from: pass root as option')\n\nSendStream.prototype.root = deprecate.function(SendStream.prototype.root,\n  'send.root: pass root as option')\n\n/**\n * Set max-age to `maxAge`.\n *\n * @param {Number} maxAge\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.maxage = deprecate.function(function maxage (maxAge) {\n  this._maxage = typeof maxAge === 'string'\n    ? ms(maxAge)\n    : Number(maxAge)\n  this._maxage = !isNaN(this._maxage)\n    ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)\n    : 0\n  debug('max-age %d', this._maxage)\n  return this\n}, 'send.maxage: pass maxAge as option')\n\n/**\n * Emit error with `status`.\n *\n * @param {number} status\n * @param {Error} [err]\n * @private\n */\n\nSendStream.prototype.error = function error (status, err) {\n  // emit if listeners instead of responding\n  if (hasListeners(this, 'error')) {\n    return this.emit('error', createError(status, err, {\n      expose: false\n    }))\n  }\n\n  var res = this.res\n  var msg = statuses[status] || String(status)\n  var doc = createHtmlDocument('Error', escapeHtml(msg))\n\n  // clear existing headers\n  clearHeaders(res)\n\n  // add error headers\n  if (err && err.headers) {\n    setHeaders(res, err.headers)\n  }\n\n  // send basic response\n  res.statusCode = status\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', Buffer.byteLength(doc))\n  res.setHeader('Content-Security-Policy', \"default-src 'self'\")\n  res.setHeader('X-Content-Type-Options', 'nosniff')\n  res.end(doc)\n}\n\n/**\n * Check if the pathname ends with \"/\".\n *\n * @return {boolean}\n * @private\n */\n\nSendStream.prototype.hasTrailingSlash = function hasTrailingSlash () {\n  return this.path[this.path.length - 1] === '/'\n}\n\n/**\n * Check if this is a conditional GET request.\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isConditionalGET = function isConditionalGET () {\n  return this.req.headers['if-match'] ||\n    this.req.headers['if-unmodified-since'] ||\n    this.req.headers['if-none-match'] ||\n    this.req.headers['if-modified-since']\n}\n\n/**\n * Check if the request preconditions failed.\n *\n * @return {boolean}\n * @private\n */\n\nSendStream.prototype.isPreconditionFailure = function isPreconditionFailure () {\n  var req = this.req\n  var res = this.res\n\n  // if-match\n  var match = req.headers['if-match']\n  if (match) {\n    var etag = res.getHeader('ETag')\n    return !etag || (match !== '*' && parseTokenList(match).every(function (match) {\n      return match !== etag && match !== 'W/' + etag && 'W/' + match !== etag\n    }))\n  }\n\n  // if-unmodified-since\n  var unmodifiedSince = parseHttpDate(req.headers['if-unmodified-since'])\n  if (!isNaN(unmodifiedSince)) {\n    var lastModified = parseHttpDate(res.getHeader('Last-Modified'))\n    return isNaN(lastModified) || lastModified > unmodifiedSince\n  }\n\n  return false\n}\n\n/**\n * Strip content-* header fields.\n *\n * @private\n */\n\nSendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields () {\n  var res = this.res\n  var headers = getHeaderNames(res)\n\n  for (var i = 0; i < headers.length; i++) {\n    var header = headers[i]\n    if (header.substr(0, 8) === 'content-' && header !== 'content-location') {\n      res.removeHeader(header)\n    }\n  }\n}\n\n/**\n * Respond with 304 not modified.\n *\n * @api private\n */\n\nSendStream.prototype.notModified = function notModified () {\n  var res = this.res\n  debug('not modified')\n  this.removeContentHeaderFields()\n  res.statusCode = 304\n  res.end()\n}\n\n/**\n * Raise error that headers already sent.\n *\n * @api private\n */\n\nSendStream.prototype.headersAlreadySent = function headersAlreadySent () {\n  var err = new Error('Can\\'t set headers after they are sent.')\n  debug('headers already sent')\n  this.error(500, err)\n}\n\n/**\n * Check if the request is cacheable, aka\n * responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isCachable = function isCachable () {\n  var statusCode = this.res.statusCode\n  return (statusCode >= 200 && statusCode < 300) ||\n    statusCode === 304\n}\n\n/**\n * Handle stat() error.\n *\n * @param {Error} error\n * @private\n */\n\nSendStream.prototype.onStatError = function onStatError (error) {\n  switch (error.code) {\n    case 'ENAMETOOLONG':\n    case 'ENOENT':\n    case 'ENOTDIR':\n      this.error(404, error)\n      break\n    default:\n      this.error(500, error)\n      break\n  }\n}\n\n/**\n * Check if the cache is fresh.\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isFresh = function isFresh () {\n  return fresh(this.req.headers, {\n    'etag': this.res.getHeader('ETag'),\n    'last-modified': this.res.getHeader('Last-Modified')\n  })\n}\n\n/**\n * Check if the range is fresh.\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isRangeFresh = function isRangeFresh () {\n  var ifRange = this.req.headers['if-range']\n\n  if (!ifRange) {\n    return true\n  }\n\n  // if-range as etag\n  if (ifRange.indexOf('\"') !== -1) {\n    var etag = this.res.getHeader('ETag')\n    return Boolean(etag && ifRange.indexOf(etag) !== -1)\n  }\n\n  // if-range as modified date\n  var lastModified = this.res.getHeader('Last-Modified')\n  return parseHttpDate(lastModified) <= parseHttpDate(ifRange)\n}\n\n/**\n * Redirect to path.\n *\n * @param {string} path\n * @private\n */\n\nSendStream.prototype.redirect = function redirect (path) {\n  var res = this.res\n\n  if (hasListeners(this, 'directory')) {\n    this.emit('directory', res, path)\n    return\n  }\n\n  if (this.hasTrailingSlash()) {\n    this.error(403)\n    return\n  }\n\n  var loc = encodeUrl(collapseLeadingSlashes(this.path + '/'))\n  var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href=\"' + escapeHtml(loc) + '\">' +\n    escapeHtml(loc) + '</a>')\n\n  // redirect\n  res.statusCode = 301\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', Buffer.byteLength(doc))\n  res.setHeader('Content-Security-Policy', \"default-src 'self'\")\n  res.setHeader('X-Content-Type-Options', 'nosniff')\n  res.setHeader('Location', loc)\n  res.end(doc)\n}\n\n/**\n * Pipe to `res.\n *\n * @param {Stream} res\n * @return {Stream} res\n * @api public\n */\n\nSendStream.prototype.pipe = function pipe (res) {\n  // root path\n  var root = this._root\n\n  // references\n  this.res = res\n\n  // decode the path\n  var path = decode(this.path)\n  if (path === -1) {\n    this.error(400)\n    return res\n  }\n\n  // null byte(s)\n  if (~path.indexOf('\\0')) {\n    this.error(400)\n    return res\n  }\n\n  var parts\n  if (root !== null) {\n    // normalize\n    if (path) {\n      path = normalize('.' + sep + path)\n    }\n\n    // malicious path\n    if (UP_PATH_REGEXP.test(path)) {\n      debug('malicious path \"%s\"', path)\n      this.error(403)\n      return res\n    }\n\n    // explode path parts\n    parts = path.split(sep)\n\n    // join / normalize from optional root dir\n    path = normalize(join(root, path))\n    root = normalize(root + sep)\n  } else {\n    // \"..\" is malicious without \"root\"\n    if (UP_PATH_REGEXP.test(path)) {\n      debug('malicious path \"%s\"', path)\n      this.error(403)\n      return res\n    }\n\n    // explode path parts\n    parts = normalize(path).split(sep)\n\n    // resolve the path\n    path = resolve(path)\n  }\n\n  // dotfile handling\n  if (containsDotFile(parts)) {\n    var access = this._dotfiles\n\n    // legacy support\n    if (access === undefined) {\n      access = parts[parts.length - 1][0] === '.'\n        ? (this._hidden ? 'allow' : 'ignore')\n        : 'allow'\n    }\n\n    debug('%s dotfile \"%s\"', access, path)\n    switch (access) {\n      case 'allow':\n        break\n      case 'deny':\n        this.error(403)\n        return res\n      case 'ignore':\n      default:\n        this.error(404)\n        return res\n    }\n  }\n\n  // index file support\n  if (this._index.length && this.hasTrailingSlash()) {\n    this.sendIndex(path)\n    return res\n  }\n\n  this.sendFile(path)\n  return res\n}\n\n/**\n * Transfer `path`.\n *\n * @param {String} path\n * @api public\n */\n\nSendStream.prototype.send = function send (path, stat) {\n  var len = stat.size\n  var options = this.options\n  var opts = {}\n  var res = this.res\n  var req = this.req\n  var ranges = req.headers.range\n  var offset = options.start || 0\n\n  if (headersSent(res)) {\n    // impossible to send now\n    this.headersAlreadySent()\n    return\n  }\n\n  debug('pipe \"%s\"', path)\n\n  // set header fields\n  this.setHeader(path, stat)\n\n  // set content-type\n  this.type(path)\n\n  // conditional GET support\n  if (this.isConditionalGET()) {\n    if (this.isPreconditionFailure()) {\n      this.error(412)\n      return\n    }\n\n    if (this.isCachable() && this.isFresh()) {\n      this.notModified()\n      return\n    }\n  }\n\n  // adjust len to start/end options\n  len = Math.max(0, len - offset)\n  if (options.end !== undefined) {\n    var bytes = options.end - offset + 1\n    if (len > bytes) len = bytes\n  }\n\n  // Range support\n  if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {\n    // parse\n    ranges = parseRange(len, ranges, {\n      combine: true\n    })\n\n    // If-Range support\n    if (!this.isRangeFresh()) {\n      debug('range stale')\n      ranges = -2\n    }\n\n    // unsatisfiable\n    if (ranges === -1) {\n      debug('range unsatisfiable')\n\n      // Content-Range\n      res.setHeader('Content-Range', contentRange('bytes', len))\n\n      // 416 Requested Range Not Satisfiable\n      return this.error(416, {\n        headers: {'Content-Range': res.getHeader('Content-Range')}\n      })\n    }\n\n    // valid (syntactically invalid/multiple ranges are treated as a regular response)\n    if (ranges !== -2 && ranges.length === 1) {\n      debug('range %j', ranges)\n\n      // Content-Range\n      res.statusCode = 206\n      res.setHeader('Content-Range', contentRange('bytes', len, ranges[0]))\n\n      // adjust for requested range\n      offset += ranges[0].start\n      len = ranges[0].end - ranges[0].start + 1\n    }\n  }\n\n  // clone options\n  for (var prop in options) {\n    opts[prop] = options[prop]\n  }\n\n  // set read options\n  opts.start = offset\n  opts.end = Math.max(offset, offset + len - 1)\n\n  // content-length\n  res.setHeader('Content-Length', len)\n\n  // HEAD support\n  if (req.method === 'HEAD') {\n    res.end()\n    return\n  }\n\n  this.stream(path, opts)\n}\n\n/**\n * Transfer file for `path`.\n *\n * @param {String} path\n * @api private\n */\nSendStream.prototype.sendFile = function sendFile (path) {\n  var i = 0\n  var self = this\n\n  debug('stat \"%s\"', path)\n  fs.stat(path, function onstat (err, stat) {\n    if (err && err.code === 'ENOENT' && !extname(path) && path[path.length - 1] !== sep) {\n      // not found, check extensions\n      return next(err)\n    }\n    if (err) return self.onStatError(err)\n    if (stat.isDirectory()) return self.redirect(path)\n    self.emit('file', path, stat)\n    self.send(path, stat)\n  })\n\n  function next (err) {\n    if (self._extensions.length <= i) {\n      return err\n        ? self.onStatError(err)\n        : self.error(404)\n    }\n\n    var p = path + '.' + self._extensions[i++]\n\n    debug('stat \"%s\"', p)\n    fs.stat(p, function (err, stat) {\n      if (err) return next(err)\n      if (stat.isDirectory()) return next()\n      self.emit('file', p, stat)\n      self.send(p, stat)\n    })\n  }\n}\n\n/**\n * Transfer index for `path`.\n *\n * @param {String} path\n * @api private\n */\nSendStream.prototype.sendIndex = function sendIndex (path) {\n  var i = -1\n  var self = this\n\n  function next (err) {\n    if (++i >= self._index.length) {\n      if (err) return self.onStatError(err)\n      return self.error(404)\n    }\n\n    var p = join(path, self._index[i])\n\n    debug('stat \"%s\"', p)\n    fs.stat(p, function (err, stat) {\n      if (err) return next(err)\n      if (stat.isDirectory()) return next()\n      self.emit('file', p, stat)\n      self.send(p, stat)\n    })\n  }\n\n  next()\n}\n\n/**\n * Stream `path` to the response.\n *\n * @param {String} path\n * @param {Object} options\n * @api private\n */\n\nSendStream.prototype.stream = function stream (path, options) {\n  // TODO: this is all lame, refactor meeee\n  var finished = false\n  var self = this\n  var res = this.res\n\n  // pipe\n  var stream = fs.createReadStream(path, options)\n  this.emit('stream', stream)\n  stream.pipe(res)\n\n  // response finished, done with the fd\n  onFinished(res, function onfinished () {\n    finished = true\n    destroy(stream)\n  })\n\n  // error handling code-smell\n  stream.on('error', function onerror (err) {\n    // request already finished\n    if (finished) return\n\n    // clean up stream\n    finished = true\n    destroy(stream)\n\n    // error\n    self.onStatError(err)\n  })\n\n  // end\n  stream.on('end', function onend () {\n    self.emit('end')\n  })\n}\n\n/**\n * Set content-type based on `path`\n * if it hasn't been explicitly set.\n *\n * @param {String} path\n * @api private\n */\n\nSendStream.prototype.type = function type (path) {\n  var res = this.res\n\n  if (res.getHeader('Content-Type')) return\n\n  var type = mime.lookup(path)\n\n  if (!type) {\n    debug('no content-type')\n    return\n  }\n\n  var charset = mime.charsets.lookup(type)\n\n  debug('content-type %s', type)\n  res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''))\n}\n\n/**\n * Set response header fields, most\n * fields may be pre-defined.\n *\n * @param {String} path\n * @param {Object} stat\n * @api private\n */\n\nSendStream.prototype.setHeader = function setHeader (path, stat) {\n  var res = this.res\n\n  this.emit('headers', res, path, stat)\n\n  if (this._acceptRanges && !res.getHeader('Accept-Ranges')) {\n    debug('accept ranges')\n    res.setHeader('Accept-Ranges', 'bytes')\n  }\n\n  if (this._cacheControl && !res.getHeader('Cache-Control')) {\n    var cacheControl = 'public, max-age=' + Math.floor(this._maxage / 1000)\n\n    if (this._immutable) {\n      cacheControl += ', immutable'\n    }\n\n    debug('cache-control %s', cacheControl)\n    res.setHeader('Cache-Control', cacheControl)\n  }\n\n  if (this._lastModified && !res.getHeader('Last-Modified')) {\n    var modified = stat.mtime.toUTCString()\n    debug('modified %s', modified)\n    res.setHeader('Last-Modified', modified)\n  }\n\n  if (this._etag && !res.getHeader('ETag')) {\n    var val = etag(stat)\n    debug('etag %s', val)\n    res.setHeader('ETag', val)\n  }\n}\n\n/**\n * Clear all headers from a response.\n *\n * @param {object} res\n * @private\n */\n\nfunction clearHeaders (res) {\n  var headers = getHeaderNames(res)\n\n  for (var i = 0; i < headers.length; i++) {\n    res.removeHeader(headers[i])\n  }\n}\n\n/**\n * Collapse all leading slashes into a single slash\n *\n * @param {string} str\n * @private\n */\nfunction collapseLeadingSlashes (str) {\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] !== '/') {\n      break\n    }\n  }\n\n  return i > 1\n    ? '/' + str.substr(i)\n    : str\n}\n\n/**\n * Determine if path parts contain a dotfile.\n *\n * @api private\n */\n\nfunction containsDotFile (parts) {\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i]\n    if (part.length > 1 && part[0] === '.') {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Create a Content-Range header.\n *\n * @param {string} type\n * @param {number} size\n * @param {array} [range]\n */\n\nfunction contentRange (type, size, range) {\n  return type + ' ' + (range ? range.start + '-' + range.end : '*') + '/' + size\n}\n\n/**\n * Create a minimal HTML document.\n *\n * @param {string} title\n * @param {string} body\n * @private\n */\n\nfunction createHtmlDocument (title, body) {\n  return '<!DOCTYPE html>\\n' +\n    '<html lang=\"en\">\\n' +\n    '<head>\\n' +\n    '<meta charset=\"utf-8\">\\n' +\n    '<title>' + title + '</title>\\n' +\n    '</head>\\n' +\n    '<body>\\n' +\n    '<pre>' + body + '</pre>\\n' +\n    '</body>\\n' +\n    '<html>\\n'\n}\n\n/**\n * decodeURIComponent.\n *\n * Allows V8 to only deoptimize this fn instead of all\n * of send().\n *\n * @param {String} path\n * @api private\n */\n\nfunction decode (path) {\n  try {\n    return decodeURIComponent(path)\n  } catch (err) {\n    return -1\n  }\n}\n\n/**\n * Get the header names on a respnse.\n *\n * @param {object} res\n * @returns {array[string]}\n * @private\n */\n\nfunction getHeaderNames (res) {\n  return typeof res.getHeaderNames !== 'function'\n    ? Object.keys(res._headers || {})\n    : res.getHeaderNames()\n}\n\n/**\n * Determine if emitter has listeners of a given type.\n *\n * The way to do this check is done three different ways in Node.js >= 0.8\n * so this consolidates them into a minimal set using instance methods.\n *\n * @param {EventEmitter} emitter\n * @param {string} type\n * @returns {boolean}\n * @private\n */\n\nfunction hasListeners (emitter, type) {\n  var count = typeof emitter.listenerCount !== 'function'\n    ? emitter.listeners(type).length\n    : emitter.listenerCount(type)\n\n  return count > 0\n}\n\n/**\n * Determine if the response headers have been sent.\n *\n * @param {object} res\n * @returns {boolean}\n * @private\n */\n\nfunction headersSent (res) {\n  return typeof res.headersSent !== 'boolean'\n    ? Boolean(res._header)\n    : res.headersSent\n}\n\n/**\n * Normalize the index option into an array.\n *\n * @param {boolean|string|array} val\n * @param {string} name\n * @private\n */\n\nfunction normalizeList (val, name) {\n  var list = [].concat(val || [])\n\n  for (var i = 0; i < list.length; i++) {\n    if (typeof list[i] !== 'string') {\n      throw new TypeError(name + ' must be array of strings or false')\n    }\n  }\n\n  return list\n}\n\n/**\n * Parse an HTTP Date into a number.\n *\n * @param {string} date\n * @private\n */\n\nfunction parseHttpDate (date) {\n  var timestamp = date && Date.parse(date)\n\n  return typeof timestamp === 'number'\n    ? timestamp\n    : NaN\n}\n\n/**\n * Parse a HTTP token list.\n *\n * @param {string} str\n * @private\n */\n\nfunction parseTokenList (str) {\n  var end = 0\n  var list = []\n  var start = 0\n\n  // gather tokens\n  for (var i = 0, len = str.length; i < len; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x20: /*   */\n        if (start === end) {\n          start = end = i + 1\n        }\n        break\n      case 0x2c: /* , */\n        list.push(str.substring(start, end))\n        start = end = i + 1\n        break\n      default:\n        end = i + 1\n        break\n    }\n  }\n\n  // final token\n  list.push(str.substring(start, end))\n\n  return list\n}\n\n/**\n * Set an object of headers on a response.\n *\n * @param {object} res\n * @param {object} headers\n * @private\n */\n\nfunction setHeaders (res, headers) {\n  var keys = Object.keys(headers)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i]\n    res.setHeader(key, headers[key])\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/webapp/webapp_server.js\");\n\n/* Exports */\nPackage._define(\"webapp\", exports, {\n  WebApp: WebApp,\n  WebAppInternals: WebAppInternals,\n  main: main\n});\n\n})();\n","servePath":"/packages/webapp.js","sourceMap":{"version":3,"sources":["packages/webapp/webapp_server.js","packages/webapp/connect.js","packages/webapp/socket_file.js"],"names":["module1","module","export","WebApp","WebAppInternals","assert","watch","require","default","v","readFile","createServer","pathJoin","pathDirname","join","dirname","parseUrl","parse","createHash","connect","compress","cookieParser","query","parseRequest","basicAuth","lookupUserAgent","lookup","send","removeExistingSocketFile","registerSocketFileCleanup","SHORT_SOCKET_TIMEOUT","LONG_SOCKET_TIMEOUT","NpmModules","version","Npm","defaultArch","clientPrograms","archPath","bundledJsCssUrlRewriteHook","url","bundledPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","sha1","contents","hash","update","digest","readUtf8FileSync","filename","Meteor","wrapAsync","camelCase","name","parts","split","toLowerCase","i","length","charAt","toUpperCase","substr","identifyBrowser","userAgentString","userAgent","family","major","minor","patch","categorizeRequest","req","_","extend","browser","headers","pick","htmlAttributeHooks","getHtmlAttributes","request","combinedAttributes","each","hook","attributes","Error","addHtmlAttributeHook","push","appUrl","RoutePolicy","classify","startup","calculateClientHash","WebAppHashing","clientHash","archName","manifest","calculateClientHashRefreshable","calculateClientHashNonRefreshable","calculateClientHashCordova","_timeoutAdjustmentRequestCallback","res","setTimeout","finishListeners","listeners","removeAllListeners","on","l","boilerplateByArch","boilerplateDataCallbacks","Object","create","registerBoilerplateDataCallback","key","callback","previousCallback","strictEqual","getBoilerplate","arch","getBoilerplateAsync","await","boilerplate","data","assign","baseData","htmlAttributes","madeChanges","promise","Promise","resolve","keys","forEach","then","result","stream","toHTMLStream","statusCode","generateBoilerplateInstance","additionalOptions","runtimeConfig","clone","runtimeConfigOverrides","Boilerplate","pathMapper","itemPath","baseDataExtension","additionalStaticJs","map","pathname","meteorRuntimeConfig","JSON","stringify","encodeURIComponent","rootUrlPathPrefix","inlineScriptsAllowed","inline","staticFiles","staticFilesMiddleware","next","method","decodeURIComponent","e","serveStaticJs","s","writeHead","write","end","has","info","maxAge","cacheable","sourceMapUrl","setHeader","type","content","absolutePath","maxage","dotfiles","lastModified","err","Log","error","pipe","getUrlPrefixForArch","replace","parsePort","port","parsedPort","parseInt","Number","isNaN","runWebAppServer","shuttingDown","syncQueue","_SynchronousQueue","getItemPathname","itemUrl","reloadClientPrograms","runTask","generateClientProgram","clientPath","clientJsonPath","__meteor_bootstrap__","serverDir","clientDir","clientJson","format","urlPrefix","item","where","path","sourceMap","program","process","env","AUTOUPDATE_VERSION","cordovaCompatibilityVersions","PUBLIC_SETTINGS","manifestUrlPrefix","manifestUrl","clientPaths","configJson","stack","exit","generateBoilerplate","defaultOptionsForArch","DDP_DEFAULT_CONNECTION_URL","MOBILE_DDP_URL","absoluteUrl","ROOT_URL","MOBILE_ROOT_URL","memoizedBoilerplate","cssFiles","css","allCss","cssFile","refreshableAssets","app","rawConnectHandlers","use","isValidUrl","response","pathPrefix","substring","meteorInternalHandlers","packageAndAppHandlers","suppressConnectErrors","status","archKey","archKeyCleaned","test","newHeaders","catch","httpServer","onListeningCallbacks","socket","destroyed","message","destroy","connectHandlers","connectApp","onListening","f","exports","main","argv","startHttpServer","listenOptions","listen","bindEnvironment","METEOR_PRINT_ON_LISTEN","console","log","callbacks","localPort","PORT","unixSocketPath","UNIX_SOCKET_PATH","host","BIND_IP","setInlineScriptsAllowed","value","setBundledJsCssUrlRewriteHook","hookFn","setBundledJsCssPrefix","prefix","self","addStaticJs","npmConnect","connectArgs","handlers","apply","originalUse","useArgs","originalLength","entry","originalHandle","handle","asyncApply","arguments","statSync","unlinkSync","existsSync","socketPath","isSocket","code","eventEmitter","signal"],"mappings":"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","file":"/packages/webapp.js","sourcesContent":["import assert from \"assert\";\nimport { readFile } from \"fs\";\nimport { createServer } from \"http\";\nimport {\n  join as pathJoin,\n  dirname as pathDirname,\n} from \"path\";\nimport { parse as parseUrl } from \"url\";\nimport { createHash } from \"crypto\";\nimport { connect } from \"./connect.js\";\nimport compress from \"compression\";\nimport cookieParser from \"cookie-parser\";\nimport query from \"qs-middleware\";\nimport parseRequest from \"parseurl\";\nimport basicAuth from \"basic-auth-connect\";\nimport { lookup as lookupUserAgent } from \"useragent\";\nimport send from \"send\";\nimport {\n  removeExistingSocketFile,\n  registerSocketFileCleanup,\n} from './socket_file.js';\n\nvar SHORT_SOCKET_TIMEOUT = 5*1000;\nvar LONG_SOCKET_TIMEOUT = 120*1000;\n\nexport const WebApp = {};\nexport const WebAppInternals = {};\n\n// backwards compat to 2.0 of connect\nconnect.basicAuth = basicAuth;\n\nWebAppInternals.NpmModules = {\n  connect: {\n    version: Npm.require('connect/package.json').version,\n    module: connect,\n  }\n};\n\nWebApp.defaultArch = 'web.browser';\n\n// XXX maps archs to manifests\nWebApp.clientPrograms = {};\n\n// XXX maps archs to program path on filesystem\nvar archPath = {};\n\nvar bundledJsCssUrlRewriteHook = function (url) {\n  var bundledPrefix =\n     __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n  return bundledPrefix + url;\n};\n\nvar sha1 = function (contents) {\n  var hash = createHash('sha1');\n  hash.update(contents);\n  return hash.digest('hex');\n};\n\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(readFile)(filename, 'utf8');\n};\n\n// #BrowserIdentification\n//\n// We have multiple places that want to identify the browser: the\n// unsupported browser page, the appcache package, and, eventually\n// delivering browser polyfills only as needed.\n//\n// To avoid detecting the browser in multiple places ad-hoc, we create a\n// Meteor \"browser\" object. It uses but does not expose the npm\n// useragent module (we could choose a different mechanism to identify\n// the browser in the future if we wanted to).  The browser object\n// contains\n//\n// * `name`: the name of the browser in camel case\n// * `major`, `minor`, `patch`: integers describing the browser version\n//\n// Also here is an early version of a Meteor `request` object, intended\n// to be a high-level description of the request without exposing\n// details of connect's low-level `req`.  Currently it contains:\n//\n// * `browser`: browser identification object described above\n// * `url`: parsed url, including parsed query params\n//\n// As a temporary hack there is a `categorizeRequest` function on WebApp which\n// converts a connect `req` to a Meteor `request`. This can go away once smart\n// packages such as appcache are being passed a `request` object directly when\n// they serve content.\n//\n// This allows `request` to be used uniformly: it is passed to the html\n// attributes hook, and the appcache package can use it when deciding\n// whether to generate a 404 for the manifest.\n//\n// Real routing / server side rendering will probably refactor this\n// heavily.\n\n\n// e.g. \"Mobile Safari\" => \"mobileSafari\"\nvar camelCase = function (name) {\n  var parts = name.split(' ');\n  parts[0] = parts[0].toLowerCase();\n  for (var i = 1;  i < parts.length;  ++i) {\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);\n  }\n  return parts.join('');\n};\n\nvar identifyBrowser = function (userAgentString) {\n  var userAgent = lookupUserAgent(userAgentString);\n  return {\n    name: camelCase(userAgent.family),\n    major: +userAgent.major,\n    minor: +userAgent.minor,\n    patch: +userAgent.patch\n  };\n};\n\n// XXX Refactor as part of implementing real routing.\nWebAppInternals.identifyBrowser = identifyBrowser;\n\nWebApp.categorizeRequest = function (req) {\n  return _.extend({\n    browser: identifyBrowser(req.headers['user-agent']),\n    url: parseUrl(req.url, true)\n  }, _.pick(req, 'dynamicHead', 'dynamicBody', 'headers', 'cookies'));\n};\n\n// HTML attribute hooks: functions to be called to determine any attributes to\n// be added to the '<html>' tag. Each function is passed a 'request' object (see\n// #BrowserIdentification) and should return null or object.\nvar htmlAttributeHooks = [];\nvar getHtmlAttributes = function (request) {\n  var combinedAttributes  = {};\n  _.each(htmlAttributeHooks || [], function (hook) {\n    var attributes = hook(request);\n    if (attributes === null)\n      return;\n    if (typeof attributes !== 'object')\n      throw Error(\"HTML attribute hook must return null or object\");\n    _.extend(combinedAttributes, attributes);\n  });\n  return combinedAttributes;\n};\nWebApp.addHtmlAttributeHook = function (hook) {\n  htmlAttributeHooks.push(hook);\n};\n\n// Serve app HTML for this URL?\nvar appUrl = function (url) {\n  if (url === '/favicon.ico' || url === '/robots.txt')\n    return false;\n\n  // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n  if (url === '/app.manifest')\n    return false;\n\n  // Avoid serving app HTML for declared routes such as /sockjs/.\n  if (RoutePolicy.classify(url))\n    return false;\n\n  // we currently return app HTML on all URLs by default\n  return true;\n};\n\n\n// We need to calculate the client hash after all packages have loaded\n// to give them a chance to populate __meteor_runtime_config__.\n//\n// Calculating the hash during startup means that packages can only\n// populate __meteor_runtime_config__ during load, not during startup.\n//\n// Calculating instead it at the beginning of main after all startup\n// hooks had run would allow packages to also populate\n// __meteor_runtime_config__ during startup, but that's too late for\n// autoupdate because it needs to have the client hash at startup to\n// insert the auto update version itself into\n// __meteor_runtime_config__ to get it to the client.\n//\n// An alternative would be to give autoupdate a \"post-start,\n// pre-listen\" hook to allow it to insert the auto update version at\n// the right moment.\n\nMeteor.startup(function () {\n  var calculateClientHash = WebAppHashing.calculateClientHash;\n  WebApp.clientHash = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);\n  };\n\n  WebApp.calculateClientHashRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name === \"css\";\n      });\n  };\n  WebApp.calculateClientHashNonRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name !== \"css\";\n      });\n  };\n  WebApp.calculateClientHashCordova = function () {\n    var archName = 'web.cordova';\n    if (! WebApp.clientPrograms[archName])\n      return 'none';\n\n    return calculateClientHash(\n      WebApp.clientPrograms[archName].manifest, null, _.pick(\n        __meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };\n});\n\n\n\n// When we have a request pending, we want the socket timeout to be long, to\n// give ourselves a while to serve it, and to allow sockjs long polls to\n// complete.  On the other hand, we want to close idle sockets relatively\n// quickly, so that we can shut down relatively promptly but cleanly, without\n// cutting off anyone's response.\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);\n  req.setTimeout(LONG_SOCKET_TIMEOUT);\n  // Insert our new finish listener to run BEFORE the existing one which removes\n  // the response from the socket.\n  var finishListeners = res.listeners('finish');\n  // XXX Apparently in Node 0.12 this event was called 'prefinish'.\n  // https://github.com/joyent/node/commit/7c9b6070\n  // But it has switched back to 'finish' in Node v4:\n  // https://github.com/nodejs/node/pull/1411\n  res.removeAllListeners('finish');\n  res.on('finish', function () {\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);\n  });\n  _.each(finishListeners, function (l) { res.on('finish', l); });\n};\n\n\n// Will be updated by main before we listen.\n// Map from client arch to boilerplate object.\n// Boilerplate object has:\n//   - func: XXX\n//   - baseData: XXX\nvar boilerplateByArch = {};\n\n// Register a callback function that can selectively modify boilerplate\n// data given arguments (request, data, arch). The key should be a unique\n// identifier, to prevent accumulating duplicate callbacks from the same\n// call site over time. Callbacks will be called in the order they were\n// registered. A callback should return false if it did not make any\n// changes affecting the boilerplate. Passing null deletes the callback.\n// Any previous callback registered for this key will be returned.\nconst boilerplateDataCallbacks = Object.create(null);\nWebAppInternals.registerBoilerplateDataCallback = function (key, callback) {\n  const previousCallback = boilerplateDataCallbacks[key];\n\n  if (typeof callback === \"function\") {\n    boilerplateDataCallbacks[key] = callback;\n  } else {\n    assert.strictEqual(callback, null);\n    delete boilerplateDataCallbacks[key];\n  }\n\n  // Return the previous callback in case the new callback needs to call\n  // it; for example, when the new callback is a wrapper for the old.\n  return previousCallback || null;\n};\n\n// Given a request (as returned from `categorizeRequest`), return the\n// boilerplate HTML to serve for that request.\n//\n// If a previous connect middleware has rendered content for the head or body,\n// returns the boilerplate with that content patched in otherwise\n// memoizes on HTML attributes (used by, eg, appcache) and whether inline\n// scripts are currently allowed.\n// XXX so far this function is always called with arch === 'web.browser'\nfunction getBoilerplate(request, arch) {\n  return getBoilerplateAsync(request, arch).await();\n}\n\nfunction getBoilerplateAsync(request, arch) {\n  const boilerplate = boilerplateByArch[arch];\n  const data = Object.assign({}, boilerplate.baseData, {\n    htmlAttributes: getHtmlAttributes(request),\n  }, _.pick(request, \"dynamicHead\", \"dynamicBody\"));\n\n  let madeChanges = false;\n  let promise = Promise.resolve();\n\n  Object.keys(boilerplateDataCallbacks).forEach(key => {\n    promise = promise.then(() => {\n      const callback = boilerplateDataCallbacks[key];\n      return callback(request, data, arch);\n    }).then(result => {\n      // Callbacks should return false if they did not make any changes.\n      if (result !== false) {\n        madeChanges = true;\n      }\n    });\n  });\n\n  return promise.then(() => ({\n    stream: boilerplate.toHTMLStream(data),\n    statusCode: data.statusCode,\n    headers: data.headers,\n  }));\n}\n\nWebAppInternals.generateBoilerplateInstance = function (arch,\n                                                        manifest,\n                                                        additionalOptions) {\n  additionalOptions = additionalOptions || {};\n\n  var runtimeConfig = _.extend(\n    _.clone(__meteor_runtime_config__),\n    additionalOptions.runtimeConfigOverrides || {}\n  );\n  return new Boilerplate(arch, manifest,\n    _.extend({\n      pathMapper: function (itemPath) {\n        return pathJoin(archPath[arch], itemPath); },\n      baseDataExtension: {\n        additionalStaticJs: _.map(\n          additionalStaticJs || [],\n          function (contents, pathname) {\n            return {\n              pathname: pathname,\n              contents: contents\n            };\n          }\n        ),\n        // Convert to a JSON string, then get rid of most weird characters, then\n        // wrap in double quotes. (The outermost JSON.stringify really ought to\n        // just be \"wrap in double quotes\" but we use it to be safe.) This might\n        // end up inside a <script> tag so we need to be careful to not include\n        // \"</script>\", but normal {{spacebars}} escaping escapes too much! See\n        // https://github.com/meteor/meteor/issues/3730\n        meteorRuntimeConfig: JSON.stringify(\n          encodeURIComponent(JSON.stringify(runtimeConfig))),\n        rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',\n        bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook,\n        inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),\n        inline: additionalOptions.inline\n      }\n    }, additionalOptions)\n  );\n};\n\n// A mapping from url path to \"info\". Where \"info\" has the following fields:\n// - type: the type of file to be served\n// - cacheable: optionally, whether the file should be cached or not\n// - sourceMapUrl: optionally, the url of the source map\n//\n// Info also contains one of the following:\n// - content: the stringified content that should be served at this path\n// - absolutePath: the absolute path on disk to the file\n\nvar staticFiles;\n\n// Serve static files from the manifest or added with\n// `addStaticJs`. Exported for tests.\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {\n  if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {\n    next();\n    return;\n  }\n  var pathname = parseRequest(req).pathname;\n  try {\n    pathname = decodeURIComponent(pathname);\n  } catch (e) {\n    next();\n    return;\n  }\n\n  var serveStaticJs = function (s) {\n    res.writeHead(200, {\n      'Content-type': 'application/javascript; charset=UTF-8'\n    });\n    res.write(s);\n    res.end();\n  };\n\n  if (pathname === \"/meteor_runtime_config.js\" &&\n      ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(\"__meteor_runtime_config__ = \" +\n                  JSON.stringify(__meteor_runtime_config__) + \";\");\n    return;\n  } else if (_.has(additionalStaticJs, pathname) &&\n              ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(additionalStaticJs[pathname]);\n    return;\n  }\n\n  if (!_.has(staticFiles, pathname)) {\n    next();\n    return;\n  }\n\n  // We don't need to call pause because, unlike 'static', once we call into\n  // 'send' and yield to the event loop, we never call another handler with\n  // 'next'.\n\n  var info = staticFiles[pathname];\n\n  // Cacheable files are files that should never change. Typically\n  // named by their hash (eg meteor bundled js and css files).\n  // We cache them ~forever (1yr).\n  var maxAge = info.cacheable\n        ? 1000 * 60 * 60 * 24 * 365\n        : 0;\n\n  // Set the X-SourceMap header, which current Chrome, FireFox, and Safari\n  // understand.  (The SourceMap header is slightly more spec-correct but FF\n  // doesn't understand it.)\n  //\n  // You may also need to enable source maps in Chrome: open dev tools, click\n  // the gear in the bottom right corner, and select \"enable source maps\".\n  if (info.sourceMapUrl) {\n    res.setHeader('X-SourceMap',\n                  __meteor_runtime_config__.ROOT_URL_PATH_PREFIX +\n                  info.sourceMapUrl);\n  }\n\n  if (info.type === \"js\" ||\n      info.type === \"dynamic js\") {\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");\n  } else if (info.type === \"css\") {\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");\n  } else if (info.type === \"json\") {\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n  }\n\n  if (info.hash) {\n    res.setHeader('ETag', '\"' + info.hash + '\"');\n  }\n\n  if (info.content) {\n    res.write(info.content);\n    res.end();\n  } else {\n    send(req, info.absolutePath, {\n        maxage: maxAge,\n        dotfiles: 'allow', // if we specified a dotfile in the manifest, serve it\n        lastModified: false // don't set last-modified based on the file date\n      }).on('error', function (err) {\n        Log.error(\"Error serving static file \" + err);\n        res.writeHead(500);\n        res.end();\n      })\n      .on('directory', function () {\n        Log.error(\"Unexpected directory \" + info.absolutePath);\n        res.writeHead(500);\n        res.end();\n      })\n      .pipe(res);\n  }\n};\n\nvar getUrlPrefixForArch = function (arch) {\n  // XXX we rely on the fact that arch names don't contain slashes\n  // in that case we would need to uri escape it\n\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url\n  // to Meteor internals.\n  return arch === WebApp.defaultArch ?\n    '' : '/' + '__' + arch.replace(/^web\\./, '');\n};\n\n// Parse the passed in port value. Return the port as-is if it's a String\n// (e.g. a Windows Server style named pipe), otherwise return the port as an\n// integer.\n//\n// DEPRECATED: Direct use of this function is not recommended; it is no\n// longer used internally, and will be removed in a future release.\nWebAppInternals.parsePort = port => {\n  let parsedPort = parseInt(port);\n  if (Number.isNaN(parsedPort)) {\n    parsedPort = port;\n  }\n  return parsedPort;\n}\n\nfunction runWebAppServer() {\n  var shuttingDown = false;\n  var syncQueue = new Meteor._SynchronousQueue();\n\n  var getItemPathname = function (itemUrl) {\n    return decodeURIComponent(parseUrl(itemUrl).pathname);\n  };\n\n  WebAppInternals.reloadClientPrograms = function () {\n    syncQueue.runTask(function() {\n      staticFiles = {};\n      var generateClientProgram = function (clientPath, arch) {\n        // read the control for the client we'll be serving up\n        var clientJsonPath = pathJoin(__meteor_bootstrap__.serverDir,\n                                   clientPath);\n        var clientDir = pathDirname(clientJsonPath);\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));\n        if (clientJson.format !== \"web-program-pre1\")\n          throw new Error(\"Unsupported format for client assets: \" +\n                          JSON.stringify(clientJson.format));\n\n        if (! clientJsonPath || ! clientDir || ! clientJson)\n          throw new Error(\"Client config file not parsed.\");\n\n        var urlPrefix = getUrlPrefixForArch(arch);\n\n        var manifest = clientJson.manifest;\n        _.each(manifest, function (item) {\n          if (item.url && item.where === \"client\") {\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {\n              absolutePath: pathJoin(clientDir, item.path),\n              cacheable: item.cacheable,\n              hash: item.hash,\n              // Link from source to its map\n              sourceMapUrl: item.sourceMapUrl,\n              type: item.type\n            };\n\n            if (item.sourceMap) {\n              // Serve the source map too, under the specified URL. We assume all\n              // source maps are cacheable.\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {\n                absolutePath: pathJoin(clientDir, item.sourceMap),\n                cacheable: true\n              };\n            }\n          }\n        });\n\n        var program = {\n          format: \"web-program-pre1\",\n          manifest: manifest,\n          version: process.env.AUTOUPDATE_VERSION ||\n            WebAppHashing.calculateClientHash(\n              manifest,\n              null,\n              _.pick(__meteor_runtime_config__, \"PUBLIC_SETTINGS\")\n            ),\n          cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions,\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS\n        };\n\n        WebApp.clientPrograms[arch] = program;\n\n        // Expose program details as a string reachable via the following\n        // URL.\n        const manifestUrlPrefix = \"/__\" + arch.replace(/^web\\./, \"\");\n        const manifestUrl = manifestUrlPrefix +\n          getItemPathname(\"/manifest.json\");\n\n        staticFiles[manifestUrl] = {\n          content: JSON.stringify(program),\n          cacheable: false,\n          hash: program.version,\n          type: \"json\"\n        };\n      };\n\n      try {\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;\n        _.each(clientPaths, function (clientPath, arch) {\n          archPath[arch] = pathDirname(clientPath);\n          generateClientProgram(clientPath, arch);\n        });\n\n        // Exported for tests.\n        WebAppInternals.staticFiles = staticFiles;\n      } catch (e) {\n        Log.error(\"Error reloading the client program: \" + e.stack);\n        process.exit(1);\n      }\n    });\n  };\n\n  WebAppInternals.generateBoilerplate = function () {\n    // This boilerplate will be served to the mobile devices when used with\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by\n    // the device's server, it is important to set the DDP url to the actual\n    // Meteor server accepting DDP connections and not the device's file server.\n    var defaultOptionsForArch = {\n      'web.cordova': {\n        runtimeConfigOverrides: {\n          // XXX We use absoluteUrl() here so that we serve https://\n          // URLs to cordova clients if force-ssl is in use. If we were\n          // to use __meteor_runtime_config__.ROOT_URL instead of\n          // absoluteUrl(), then Cordova clients would immediately get a\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to\n          // http://example.meteor.com. This breaks the app, because\n          // force-ssl doesn't serve CORS headers on 302\n          // redirects. (Plus it's undesirable to have clients\n          // connecting to http://example.meteor.com when force-ssl is\n          // in use.)\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL ||\n            Meteor.absoluteUrl(),\n          ROOT_URL: process.env.MOBILE_ROOT_URL ||\n            Meteor.absoluteUrl()\n        }\n      }\n    };\n\n    syncQueue.runTask(function() {\n      _.each(WebApp.clientPrograms, function (program, archName) {\n        boilerplateByArch[archName] =\n          WebAppInternals.generateBoilerplateInstance(\n            archName, program.manifest,\n            defaultOptionsForArch[archName]);\n      });\n\n      // Clear the memoized boilerplate cache.\n      memoizedBoilerplate = {};\n\n      // Configure CSS injection for the default arch\n      // XXX implement the CSS injection for all archs?\n      var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css;\n      // Rewrite all CSS files (which are written directly to <style> tags)\n      // by autoupdate_client to use the CDN prefix/etc\n      var allCss = _.map(cssFiles, function(cssFile) {\n        return { url: bundledJsCssUrlRewriteHook(cssFile.url) };\n      });\n      WebAppInternals.refreshableAssets = { allCss };\n    });\n  };\n\n  WebAppInternals.reloadClientPrograms();\n\n  // webserver\n  var app = connect();\n\n  // Packages and apps can add handlers that run before any other Meteor\n  // handlers via WebApp.rawConnectHandlers.\n  var rawConnectHandlers = connect();\n  app.use(rawConnectHandlers);\n\n  // Auto-compress any json, javascript, or text.\n  app.use(compress());\n\n  // parse cookies into an object\n  app.use(cookieParser());\n\n  // We're not a proxy; reject (without crashing) attempts to treat us like\n  // one. (See #1212.)\n  app.use(function(req, res, next) {\n    if (RoutePolicy.isValidUrl(req.url)) {\n      next();\n      return;\n    }\n    res.writeHead(400);\n    res.write(\"Not a proxy\");\n    res.end();\n  });\n\n  // Strip off the path prefix, if it exists.\n  app.use(function (request, response, next) {\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    var url = Npm.require('url').parse(request.url);\n    var pathname = url.pathname;\n    // check if the path in the url starts with the path prefix (and the part\n    // after the path prefix must start with a / if it exists.)\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix &&\n       (pathname.length == pathPrefix.length\n        || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);\n      next();\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {\n      next();\n    } else if (pathPrefix) {\n      response.writeHead(404);\n      response.write(\"Unknown path\");\n      response.end();\n    } else {\n      next();\n    }\n  });\n\n  // Parse the query string into res.query. Used by oauth_server, but it's\n  // generally pretty handy..\n  app.use(query());\n\n  // Serve static files from the manifest.\n  // This is inspired by the 'static' middleware.\n  app.use(function (req, res, next) {\n    WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);\n  });\n\n  // Core Meteor packages like dynamic-import can add handlers before\n  // other handlers added by package and application code.\n  app.use(WebAppInternals.meteorInternalHandlers = connect());\n\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.\n  // They are inserted before our default handler.\n  var packageAndAppHandlers = connect();\n  app.use(packageAndAppHandlers);\n\n  var suppressConnectErrors = false;\n  // connect knows it is an error handler because it has 4 arguments instead of\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden\n  // inside packageAndAppHandlers.)\n  app.use(function (err, req, res, next) {\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {\n      next(err);\n      return;\n    }\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });\n    res.end(\"An error message\");\n  });\n\n  app.use(function (req, res, next) {\n    if (! appUrl(req.url)) {\n      return next();\n\n    } else {\n      var headers = {\n        'Content-Type': 'text/html; charset=utf-8'\n      };\n\n      if (shuttingDown) {\n        headers['Connection'] = 'Close';\n      }\n\n      var request = WebApp.categorizeRequest(req);\n\n      if (request.url.query && request.url.query['meteor_css_resource']) {\n        // In this case, we're requesting a CSS resource in the meteor-specific\n        // way, but we don't have it.  Serve a static css file that indicates that\n        // we didn't have it, so we can detect that and refresh.  Make sure\n        // that any proxies or CDNs don't cache this error!  (Normally proxies\n        // or CDNs are smart enough not to cache error pages, but in order to\n        // make this hack work, we need to return the CSS file as a 200, which\n        // would otherwise be cached.)\n        headers['Content-Type'] = 'text/css; charset=utf-8';\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(200, headers);\n        res.write(\".meteor-css-not-found-error { width: 0px;}\");\n        res.end();\n        return;\n      }\n\n      if (request.url.query && request.url.query['meteor_js_resource']) {\n        // Similarly, we're requesting a JS resource that we don't have.\n        // Serve an uncached 404. (We can't use the same hack we use for CSS,\n        // because actually acting on that hack requires us to have the JS\n        // already!)\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return;\n      }\n\n      if (request.url.query && request.url.query['meteor_dont_serve_index']) {\n        // When downloading files during a Cordova hot code push, we need\n        // to detect if a file is not available instead of inadvertently\n        // downloading the default index page.\n        // So similar to the situation above, we serve an uncached 404.\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return;\n      }\n\n      // /packages/asdfsad ... /__cordova/dafsdf.js\n      var pathname = parseRequest(req).pathname;\n      var archKey = pathname.split('/')[1];\n      var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');\n\n      if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {\n        archKey = WebApp.defaultArch;\n      } else {\n        archKey = archKeyCleaned;\n      }\n\n      return getBoilerplateAsync(\n        request,\n        archKey\n      ).then(({ stream,  statusCode, headers: newHeaders }) => {\n        if (!statusCode) {\n          statusCode = res.statusCode ? res.statusCode : 200;\n        }\n\n        if (newHeaders) {\n          Object.assign(headers, newHeaders);\n        }\n\n        res.writeHead(statusCode, headers);\n\n        stream.pipe(res, {\n          // End the response when the stream ends.\n          end: true,\n        });\n\n      }).catch(error => {\n        Log.error(\"Error running template: \" + error.stack);\n        res.writeHead(500, headers);\n        res.end();\n      });\n    }\n  });\n\n  // Return 404 by default, if no other handlers serve this URL.\n  app.use(function (req, res) {\n    res.writeHead(404);\n    res.end();\n  });\n\n\n  var httpServer = createServer(app);\n  var onListeningCallbacks = [];\n\n  // After 5 seconds w/o data on a socket, kill it.  On the other hand, if\n  // there's an outstanding request, give it a higher timeout instead (to avoid\n  // killing long-polling requests)\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT);\n\n  // Do this here, and then also in livedata/stream_server.js, because\n  // stream_server.js kills all the current request handlers when installing its\n  // own.\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // If the client gave us a bad request, tell it instead of just closing the\n  // socket. This lets load balancers in front of us differentiate between \"a\n  // server is randomly closing sockets for no reason\" and \"client sent a bad\n  // request\".\n  //\n  // This will only work on Node 6; Node 4 destroys the socket before calling\n  // this event. See https://github.com/nodejs/node/pull/4557/ for details.\n  httpServer.on('clientError', (err, socket) => {\n    // Pre-Node-6, do nothing.\n    if (socket.destroyed) {\n      return;\n    }\n\n    if (err.message === 'Parse Error') {\n      socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n    } else {\n      // For other errors, use the default behavior as if we had no clientError\n      // handler.\n      socket.destroy(err);\n    }\n  });\n\n  // start up app\n  _.extend(WebApp, {\n    connectHandlers: packageAndAppHandlers,\n    rawConnectHandlers: rawConnectHandlers,\n    httpServer: httpServer,\n    connectApp: app,\n    // For testing.\n    suppressConnectErrors: function () {\n      suppressConnectErrors = true;\n    },\n    onListening: function (f) {\n      if (onListeningCallbacks)\n        onListeningCallbacks.push(f);\n      else\n        f();\n    }\n  });\n\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect\n  // middlewares and update __meteor_runtime_config__, then keep going to set up\n  // actually serving HTML.\n  exports.main = argv => {\n    WebAppInternals.generateBoilerplate();\n\n    const startHttpServer = listenOptions => {\n      httpServer.listen(listenOptions, Meteor.bindEnvironment(() => {\n        if (process.env.METEOR_PRINT_ON_LISTEN) {\n          console.log(\"LISTENING\");\n        }\n        const callbacks = onListeningCallbacks;\n        onListeningCallbacks = null;\n        callbacks.forEach(callback => { callback(); });\n      }, e => {\n        console.error(\"Error listening:\", e);\n        console.error(e && e.stack);\n      }));\n    };\n\n    let localPort = process.env.PORT || 0;\n    const unixSocketPath = process.env.UNIX_SOCKET_PATH;\n\n    if (unixSocketPath) {\n      // Start the HTTP server using a socket file.\n      removeExistingSocketFile(unixSocketPath);\n      startHttpServer({ path: unixSocketPath });\n      registerSocketFileCleanup(unixSocketPath);\n    } else {\n      localPort = isNaN(Number(localPort)) ? localPort : Number(localPort);\n      if (/\\\\\\\\?.+\\\\pipe\\\\?.+/.test(localPort)) {\n        // Start the HTTP server using Windows Server style named pipe.\n        startHttpServer({ path: localPort });\n      } else if (typeof localPort === \"number\") {\n        // Start the HTTP server using TCP.\n        startHttpServer({\n          port: localPort,\n          host: process.env.BIND_IP || \"0.0.0.0\"\n        });\n      } else {\n        throw new Error(\"Invalid PORT specified\");\n      }\n    }\n\n    return \"DAEMON\";\n  };\n}\n\n\nrunWebAppServer();\n\n\nvar inlineScriptsAllowed = true;\n\nWebAppInternals.inlineScriptsAllowed = function () {\n  return inlineScriptsAllowed;\n};\n\nWebAppInternals.setInlineScriptsAllowed = function (value) {\n  inlineScriptsAllowed = value;\n  WebAppInternals.generateBoilerplate();\n};\n\n\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {\n  bundledJsCssUrlRewriteHook = hookFn;\n  WebAppInternals.generateBoilerplate();\n};\n\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {\n  var self = this;\n  self.setBundledJsCssUrlRewriteHook(\n    function (url) {\n      return prefix + url;\n  });\n};\n\n// Packages can call `WebAppInternals.addStaticJs` to specify static\n// JavaScript to be included in the app. This static JS will be inlined,\n// unless inline scripts have been disabled, in which case it will be\n// served under `/<sha1 of contents>`.\nvar additionalStaticJs = {};\nWebAppInternals.addStaticJs = function (contents) {\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;\n};\n\n// Exported for tests\nWebAppInternals.getBoilerplate = getBoilerplate;\nWebAppInternals.additionalStaticJs = additionalStaticJs;\n","import npmConnect from \"connect\";\n\nexport function connect(...connectArgs) {\n  const handlers = npmConnect.apply(this, connectArgs);\n  const originalUse = handlers.use;\n\n  // Wrap the handlers.use method so that any provided handler functions\n  // alway run in a Fiber.\n  handlers.use = function use(...useArgs) {\n    const { stack } = this;\n    const originalLength = stack.length;\n    const result = originalUse.apply(this, useArgs);\n\n    // If we just added anything to the stack, wrap each new entry.handle\n    // with a function that calls Promise.asyncApply to ensure the\n    // original handler runs in a Fiber.\n    for (let i = originalLength; i < stack.length; ++i) {\n      const entry = stack[i];\n      const originalHandle = entry.handle;\n\n      if (originalHandle.length >= 4) {\n        // If the original handle had four (or more) parameters, the\n        // wrapper must also have four parameters, since connect uses\n        // handle.length to dermine whether to pass the error as the first\n        // argument to the handle function.\n        entry.handle = function handle(err, req, res, next) {\n          return Promise.asyncApply(originalHandle, this, arguments);\n        };\n      } else {\n        entry.handle = function handle(req, res, next) {\n          return Promise.asyncApply(originalHandle, this, arguments);\n        };\n      }\n    }\n\n    return result;\n  };\n\n  return handlers;\n}\n","import { statSync, unlinkSync, existsSync } from 'fs';\n\n// Since a new socket file will be created when the HTTP server\n// starts up, if found remove the existing file.\n//\n// WARNING:\n// This will remove the configured socket file without warning. If\n// the configured socket file is already in use by another application,\n// it will still be removed. Node does not provide a reliable way to\n// differentiate between a socket file that is already in use by\n// another application or a stale socket file that has been\n// left over after a SIGKILL. Since we have no reliable way to\n// differentiate between these two scenarios, the best course of\n// action during startup is to remove any existing socket file. This\n// is not the safest course of action as removing the existing socket\n// file could impact an application using it, but this approach helps\n// ensure the HTTP server can startup without manual\n// intervention (e.g. asking for the verification and cleanup of socket\n// files before allowing the HTTP server to be started).\n//\n// The above being said, as long as the socket file path is\n// configured carefully when the application is deployed (and extra\n// care is taken to make sure the configured path is unique and doesn't\n// conflict with another socket file path), then there should not be\n// any issues with this approach.\nexport const removeExistingSocketFile = (socketPath) => {\n  try {\n    if (statSync(socketPath).isSocket()) {\n      // Since a new socket file will be created, remove the existing\n      // file.\n      unlinkSync(socketPath);\n    } else {\n      throw new Error(\n        `An existing file was found at \"${socketPath}\" and it is not ` +\n        'a socket file. Please confirm PORT is pointing to valid and ' +\n        'un-used socket file path.'\n      );\n    }\n  } catch (error) {\n    // If there is no existing socket file to cleanup, great, we'll\n    // continue normally. If the caught exception represents any other\n    // issue, re-throw.\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n};\n\n// Remove the socket file when done to avoid leaving behind a stale one.\n// Note - a stale socket file is still left behind if the running node\n// process is killed via signal 9 - SIGKILL.\nexport const registerSocketFileCleanup =\n  (socketPath, eventEmitter = process) => {\n    ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(signal => {\n      eventEmitter.on(signal, Meteor.bindEnvironment(() => {\n        if (existsSync(socketPath)) {\n          unlinkSync(socketPath);\n        }\n      }));\n    });\n  };\n"]}}]