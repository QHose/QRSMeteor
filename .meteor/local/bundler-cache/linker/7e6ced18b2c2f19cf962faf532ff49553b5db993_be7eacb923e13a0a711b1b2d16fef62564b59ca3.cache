[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Template;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/templating-runtime/templating.js                                                                    //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n\n// Packages and apps add templates on to this object.\n\n/**\n * @summary The class for defining templates\n * @class\n * @instanceName Template.myTemplate\n */\nTemplate = Blaze.Template;\n\nvar RESERVED_TEMPLATE_NAMES = \"__proto__ name\".split(\" \");\n\n// Check for duplicate template names and illegal names that won't work.\nTemplate.__checkName = function (name) {\n  // Some names can't be used for Templates. These include:\n  //  - Properties Blaze sets on the Template object.\n  //  - Properties that some browsers don't let the code to set.\n  //    These are specified in RESERVED_TEMPLATE_NAMES.\n  if (name in Template || _.contains(RESERVED_TEMPLATE_NAMES, name)) {\n    if ((Template[name] instanceof Template) && name !== \"body\")\n      throw new Error(\"There are multiple templates named '\" + name + \"'. Each template needs a unique name.\");\n    throw new Error(\"This template name is reserved: \" + name);\n  }\n};\n\n// XXX COMPAT WITH 0.8.3\nTemplate.__define__ = function (name, renderFunc) {\n  Template.__checkName(name);\n  Template[name] = new Template(\"Template.\" + name, renderFunc);\n  // Exempt packages built pre-0.9.0 from warnings about using old\n  // helper syntax, because we can.  It's not very useful to get a\n  // warning about someone else's code (like a package on Atmosphere),\n  // and this should at least put a bit of a dent in number of warnings\n  // that come from packages that haven't been updated lately.\n  Template[name]._NOWARN_OLDSTYLE_HELPERS = true;\n};\n\n// Define a template `Template.body` that renders its\n// `contentRenderFuncs`.  `<body>` tags (of which there may be\n// multiple) will have their contents added to it.\n\n/**\n * @summary The [template object](#templates_api) representing your `<body>`\n * tag.\n * @locus Client\n */\nTemplate.body = new Template('body', function () {\n  var view = this;\n  return _.map(Template.body.contentRenderFuncs, function (func) {\n    return func.apply(view);\n  });\n});\nTemplate.body.contentRenderFuncs = []; // array of Blaze.Views\nTemplate.body.view = null;\n\nTemplate.body.addContent = function (renderFunc) {\n  Template.body.contentRenderFuncs.push(renderFunc);\n};\n\n// This function does not use `this` and so it may be called\n// as `Meteor.startup(Template.body.renderIntoDocument)`.\nTemplate.body.renderToDocument = function () {\n  // Only do it once.\n  if (Template.body.view)\n    return;\n\n  var view = Blaze.render(Template.body, document.body);\n  Template.body.view = view;\n};\n\n// XXX COMPAT WITH 0.9.0\nUI.body = Template.body;\n\n// XXX COMPAT WITH 0.9.0\n// (<body> tags in packages built with 0.9.0)\nTemplate.__body__ = Template.body;\nTemplate.__body__.__contentParts = Template.body.contentViews;\nTemplate.__body__.__instantiate = Template.body.renderToDocument;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/templating-runtime/template.dynamic.js                                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n\nTemplate.__checkName(\"__dynamic\");\nTemplate[\"__dynamic\"] = new Template(\"Template.__dynamic\", (function() {\n  var view = this;\n  return [ Blaze.View(\"lookup:checkContext\", function() {\n    return Spacebars.mustache(view.lookup(\"checkContext\"));\n  }), \"\\n  \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"dataContextPresent\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"__dynamicWithDataContext\"), function() {\n      return Blaze._InOuterTemplateScope(view, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateContentBlock);\n        });\n      });\n    }), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \\n    \", Blaze._TemplateWith(function() {\n      return {\n        template: Spacebars.call(view.lookup(\"template\")),\n        data: Spacebars.call(view.lookup(\"..\"))\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"__dynamicWithDataContext\"), function() {\n        return Blaze._InOuterTemplateScope(view, function() {\n          return Spacebars.include(function() {\n            return Spacebars.call(view.templateContentBlock);\n          });\n        });\n      });\n    }), \"\\n  \" ];\n  }) ];\n}));\n\nTemplate.__checkName(\"__dynamicWithDataContext\");\nTemplate[\"__dynamicWithDataContext\"] = new Template(\"Template.__dynamicWithDataContext\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.dataMustache(view.lookup(\"chooseTemplate\"), view.lookup(\"template\"));\n  }, function() {\n    return [ \"\\n    \\n    \", Blaze._TemplateWith(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"data\"));\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"..\"), function() {\n        return Blaze._InOuterTemplateScope(view, function() {\n          return Spacebars.include(function() {\n            return Spacebars.call(view.templateContentBlock);\n          });\n        });\n      });\n    }), \"\\n  \" ];\n  });\n}));\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/templating-runtime/dynamic.js                                                                       //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar Template = Blaze.Template;\n\n/**\n * @isTemplate true\n * @memberOf Template\n * @function dynamic\n * @summary Choose a template to include dynamically, by name.\n * @locus Templates\n * @param {String} template The name of the template to include.\n * @param {Object} [data] Optional. The data context in which to include the\n * template.\n */\n\nTemplate.__dynamicWithDataContext.helpers({\n  chooseTemplate: function (name) {\n    return Blaze._getTemplate(name, function () {\n      return Template.instance();\n    });\n  }\n});\n\nTemplate.__dynamic.helpers({\n  dataContextPresent: function () {\n    return _.has(this, \"data\");\n  },\n  checkContext: function () {\n    if (! _.has(this, \"template\")) {\n      throw new Error(\"Must specify name in the 'template' argument \" +\n                      \"to {{> Template.dynamic}}.\");\n    }\n\n    _.each(this, function (v, k) {\n      if (k !== \"template\" && k !== \"data\") {\n        throw new Error(\"Invalid argument to {{> Template.dynamic}}: \" +\n                        k);\n      }\n    });\n  }\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"templating-runtime\", {\n  Template: Template\n});\n\n})();\n","servePath":"/packages/templating-runtime.js"}]