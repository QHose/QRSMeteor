[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Router = Package['iron:router'].Router;\nvar RouteController = Package['iron:router'].RouteController;\nvar _ = Package.underscore._;\nvar AccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nvar Iron = Package['iron:core'].Iron;\nvar Accounts = Package['accounts-base'].Accounts;\nvar T9n = Package['softwarerero:accounts-t9n'].T9n;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_iron-routing/lib/core.js                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global\n  AccountsTemplates: false\n*/\n'use strict';\n\n// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n  name: Match.Optional(String),\n  path: Match.Optional(String),\n  template: Match.Optional(String),\n  layoutTemplate: Match.Optional(String),\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n/*\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n    name:           String (optional). A unique route\"s name to be passed to iron-router\n    path:           String (optional). A unique route\"s path to be passed to iron-router\n    template:       String (optional). The name of the template to be rendered\n    layoutTemplate: String (optional). The name of the layout to be used\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAccountsTemplates.ROUTE_DEFAULT = {\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"},\n};\n\n\n// Current configuration values\n// Redirects\nAccountsTemplates.options.homeRoutePath = \"/\";\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds\n\n// Known routes used to filter out previous path for redirects...\nAccountsTemplates.knownRoutes = [];\n\n// Configured routes\nAccountsTemplates.routes = {};\n\nAccountsTemplates.configureRoute = function(route, options) {\n  check(route, String);\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));\n  options = _.clone(options);\n  // Route Configuration can be done only before initialization\n  if (this._initialized) {\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n  }\n  // Only allowed routes can be configured\n  if (!(route in this.ROUTE_DEFAULT)) {\n    throw new Error(\"Unknown Route!\");\n  }\n  // Allow route configuration only once\n  if (route in this.routes) {\n    throw new Error(\"Route already configured!\");\n  }\n\n  // Possibly adds a initial / to the provided path\n  if (options && options.path && options.path[0] !== \"/\") {\n    options.path = \"/\" + options.path;\n  }\n  // Updates the current configuration\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n\n  this.routes[route] = options;\n  // Known routes are used to filter out previous path for redirects...\n  AccountsTemplates.knownRoutes.push(options.path);\n\n  if (Meteor.isServer){\n    // Configures \"reset password\" email link\n    if (route === \"resetPwd\"){\n      var resetPwdPath = options.path.substr(1);\n      Accounts.urls.resetPassword = function(token){\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n      };\n    }\n    // Configures \"enroll account\" email link\n    if (route === \"enrollAccount\"){\n      var enrollAccountPath = options.path.substr(1);\n      Accounts.urls.enrollAccount = function(token){\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n      };\n    }\n    // Configures \"verify email\" email link\n    if (route === \"verifyEmail\"){\n      var verifyEmailPath = options.path.substr(1);\n      Accounts.urls.verifyEmail = function(token){\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n      };\n    }\n  }\n\n  if (route === \"ensureSignedIn\") {\n    return;\n  }\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n  }\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n  }\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n  }\n\n  // Determines the default layout to be used in case no specific one is specified for single routes\n  var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;\n\n  var name = options.name; // Default provided...\n  var path = options.path; // Default provided...\n  var template = options.template || \"fullPageAtForm\";\n  var layoutTemplate = options.layoutTemplate || defaultLayout;\n  var additionalOptions = _.omit(options, [\n    \"layoutTemplate\", \"name\", \"path\", \"redirect\", \"template\"\n  ]);\n\n  // Possibly adds token parameter\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){\n    path += \"/:paramToken\";\n    if (route === \"verifyEmail\") {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onRun: function() {\n          AccountsTemplates.setState(route);\n          AccountsTemplates.setDisabled(true);\n          var token = this.params.paramToken;\n          Accounts.verifyEmail(token, function(error){\n            AccountsTemplates.setDisabled(false);\n            AccountsTemplates.submitCallback(error, route, function(){\n              AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n            });\n          });\n\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n        },\n      }));\n    }\n    else {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onBeforeAction: function() {\n          AccountsTemplates.paramToken = this.params.paramToken;\n          AccountsTemplates.setState(route);\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n          AccountsTemplates.paramToken = null;\n        }\n      }));\n    }\n  }\n  else {\n    Router.route(path, _.extend(additionalOptions, {\n      name: name,\n      template: template,\n      layoutTemplate: layoutTemplate,\n      onBeforeAction: function() {\n        var redirect = false;\n        if (route === 'changePwd') {\n          if (!Meteor.loggingIn() && !Meteor.userId()) {\n            redirect = true;\n          }\n        }\n        else if (Meteor.userId()) {\n          redirect = true;\n        }\n        if (redirect) {\n          AccountsTemplates.postSubmitRedirect(route);\n          this.stop();\n        }\n        else {\n          AccountsTemplates.setState(route);\n          this.next();\n        }\n      },\n      onStop: function() {\n        AccountsTemplates.clearState();\n      }\n    }));\n  }\n};\n\n\nAccountsTemplates.getRouteName = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].name;\n  }\n  return null;\n};\n\nAccountsTemplates.getRoutePath = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].path;\n  }\n  return \"#\";\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_iron-routing/lib/server.js                                                            //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global\n  Iron: false\n*/\n'use strict';\n\n\n// Fake server-side IR plugin to allow for shared routing files\nIron.Router.plugins.ensureSignedIn = function (router, options) {};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"useraccounts:iron-routing\");\n\n})();\n","servePath":"/packages/useraccounts_iron-routing.js"}]