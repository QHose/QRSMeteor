[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar EJSON = Package.ejson.EJSON;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar DDPCommon;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ddp-common\":{\"namespace.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-common/namespace.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * @namespace DDPCommon\n * @summary Namespace for DDPCommon-related methods/classes. Shared between \n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation\n * of a ddp client for both client AND server; and the ddp server is the\n * implementation of the livedata server and stream server. Common \n * functionality shared between both can be shared under this namespace\n */\nDDPCommon = {};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"heartbeat.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-common/heartbeat.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Heartbeat options:\n//   heartbeatInterval: interval to send pings, in milliseconds.\n//   heartbeatTimeout: timeout to close the connection if a reply isn't\n//     received, in milliseconds.\n//   sendPing: function to call to send a ping on the connection.\n//   onTimeout: function to call to close the connection.\nDDPCommon.Heartbeat = class Heartbeat {\n  constructor(options) {\n    this.heartbeatInterval = options.heartbeatInterval;\n    this.heartbeatTimeout = options.heartbeatTimeout;\n    this._sendPing = options.sendPing;\n    this._onTimeout = options.onTimeout;\n    this._seenPacket = false;\n    this._heartbeatIntervalHandle = null;\n    this._heartbeatTimeoutHandle = null;\n  }\n\n  stop() {\n    this._clearHeartbeatIntervalTimer();\n\n    this._clearHeartbeatTimeoutTimer();\n  }\n\n  start() {\n    this.stop();\n\n    this._startHeartbeatIntervalTimer();\n  }\n\n  _startHeartbeatIntervalTimer() {\n    this._heartbeatIntervalHandle = Meteor.setInterval(() => this._heartbeatIntervalFired(), this.heartbeatInterval);\n  }\n\n  _startHeartbeatTimeoutTimer() {\n    this._heartbeatTimeoutHandle = Meteor.setTimeout(() => this._heartbeatTimeoutFired(), this.heartbeatTimeout);\n  }\n\n  _clearHeartbeatIntervalTimer() {\n    if (this._heartbeatIntervalHandle) {\n      Meteor.clearInterval(this._heartbeatIntervalHandle);\n      this._heartbeatIntervalHandle = null;\n    }\n  }\n\n  _clearHeartbeatTimeoutTimer() {\n    if (this._heartbeatTimeoutHandle) {\n      Meteor.clearTimeout(this._heartbeatTimeoutHandle);\n      this._heartbeatTimeoutHandle = null;\n    }\n  } // The heartbeat interval timer is fired when we should send a ping.\n\n\n  _heartbeatIntervalFired() {\n    // don't send ping if we've seen a packet since we last checked,\n    // *or* if we have already sent a ping and are awaiting a timeout.\n    // That shouldn't happen, but it's possible if\n    // `this.heartbeatInterval` is smaller than\n    // `this.heartbeatTimeout`.\n    if (!this._seenPacket && !this._heartbeatTimeoutHandle) {\n      this._sendPing(); // Set up timeout, in case a pong doesn't arrive in time.\n\n\n      this._startHeartbeatTimeoutTimer();\n    }\n\n    this._seenPacket = false;\n  } // The heartbeat timeout timer is fired when we sent a ping, but we\n  // timed out waiting for the pong.\n\n\n  _heartbeatTimeoutFired() {\n    this._heartbeatTimeoutHandle = null;\n\n    this._onTimeout();\n  }\n\n  messageReceived() {\n    // Tell periodic checkin that we have seen a packet, and thus it\n    // does not need to send a ping this cycle.\n    this._seenPacket = true; // If we were waiting for a pong, we got it.\n\n    if (this._heartbeatTimeoutHandle) {\n      this._clearHeartbeatTimeoutTimer();\n    }\n  }\n\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-common/utils.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n\"use strict\";\n\nmodule.export({\n  hasOwn: () => hasOwn,\n  slice: () => slice,\n  keys: () => keys,\n  isEmpty: () => isEmpty,\n  last: () => last\n});\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst slice = Array.prototype.slice;\n\nfunction keys(obj) {\n  return Object.keys(Object(obj));\n}\n\nfunction isEmpty(obj) {\n  if (obj == null) {\n    return true;\n  }\n\n  if (Array.isArray(obj) || typeof obj === \"string\") {\n    return obj.length === 0;\n  }\n\n  for (const key in obj) {\n    if (hasOwn.call(obj, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction last(array, n, guard) {\n  if (array == null) {\n    return;\n  }\n\n  if (n == null || guard) {\n    return array[array.length - 1];\n  }\n\n  return slice.call(array, Math.max(array.length - n, 0));\n}\n\nDDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1'];\n\nDDPCommon.parseDDP = function (stringMessage) {\n  try {\n    var msg = JSON.parse(stringMessage);\n  } catch (e) {\n    Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);\n\n    return null;\n  } // DDP messages must be objects.\n\n\n  if (msg === null || typeof msg !== 'object') {\n    Meteor._debug(\"Discarding non-object DDP message\", stringMessage);\n\n    return null;\n  } // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.\n  // switch between \"cleared\" rep of unsetting fields and \"undefined\"\n  // rep of same\n\n\n  if (hasOwn.call(msg, 'cleared')) {\n    if (!hasOwn.call(msg, 'fields')) {\n      msg.fields = {};\n    }\n\n    msg.cleared.forEach(clearKey => {\n      msg.fields[clearKey] = undefined;\n    });\n    delete msg.cleared;\n  }\n\n  ['fields', 'params', 'result'].forEach(field => {\n    if (hasOwn.call(msg, field)) {\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\n    }\n  });\n  return msg;\n};\n\nDDPCommon.stringifyDDP = function (msg) {\n  const copy = EJSON.clone(msg); // swizzle 'changed' messages from 'fields undefined' rep to 'fields\n  // and cleared' rep\n\n  if (hasOwn.call(msg, 'fields')) {\n    const cleared = [];\n    Object.keys(msg.fields).forEach(key => {\n      const value = msg.fields[key];\n\n      if (typeof value === \"undefined\") {\n        cleared.push(key);\n        delete copy.fields[key];\n      }\n    });\n\n    if (!isEmpty(cleared)) {\n      copy.cleared = cleared;\n    }\n\n    if (isEmpty(copy.fields)) {\n      delete copy.fields;\n    }\n  } // adjust types to basic\n\n\n  ['fields', 'params', 'result'].forEach(field => {\n    if (hasOwn.call(copy, field)) {\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\n    }\n  });\n\n  if (msg.id && typeof msg.id !== 'string') {\n    throw new Error(\"Message id is not a string\");\n  }\n\n  return JSON.stringify(copy);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"method_invocation.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-common/method_invocation.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Instance name is this because it is usually referred to as this inside a\n// method definition\n\n/**\n * @summary The state for a single invocation of a method, referenced by this\n * inside a method definition.\n * @param {Object} options\n * @instanceName this\n * @showInstanceName true\n */\nDDPCommon.MethodInvocation = class MethodInvocation {\n  constructor(options) {\n    // true if we're running not the actual method, but a stub (that is,\n    // if we're on a client (which may be a browser, or in the future a\n    // server connecting to another server) and presently running a\n    // simulation of a server-side method for latency compensation\n    // purposes). not currently true except in a client such as a browser,\n    // since there's usually no point in running stubs unless you have a\n    // zero-latency connection to the user.\n\n    /**\n     * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\n     * @locus Anywhere\n     * @name  isSimulation\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     * @type {Boolean}\n     */\n    this.isSimulation = options.isSimulation; // call this function to allow other method invocations (from the\n    // same client) to continue running without waiting for this one to\n    // complete.\n\n    this._unblock = options.unblock || function () {};\n\n    this._calledUnblock = false; // current user id\n\n    /**\n     * @summary The id of the user that made this method call, or `null` if no user was logged in.\n     * @locus Anywhere\n     * @name  userId\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n\n    this.userId = options.userId; // sets current user id in all appropriate server contexts and\n    // reruns subscriptions\n\n    this._setUserId = options.setUserId || function () {}; // On the server, the connection this method call came in on.\n\n    /**\n     * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.\n     * @locus Server\n     * @name  connection\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n\n\n    this.connection = options.connection; // The seed for randomStream value generation\n\n    this.randomSeed = options.randomSeed; // This is set by RandomStream.get; and holds the random stream state\n\n    this.randomStream = null;\n  }\n  /**\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n\n\n  unblock() {\n    this._calledUnblock = true;\n\n    this._unblock();\n  }\n  /**\n   * @summary Set the logged in user.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */\n\n\n  setUserId(userId) {\n    if (this._calledUnblock) {\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");\n    }\n\n    this.userId = userId;\n\n    this._setUserId(userId);\n  }\n\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"random_stream.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-common/random_stream.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// RandomStream allows for generation of pseudo-random values, from a seed.\n//\n// We use this for consistent 'random' numbers across the client and server.\n// We want to generate probably-unique IDs on the client, and we ideally want\n// the server to generate the same IDs when it executes the method.\n//\n// For generated values to be the same, we must seed ourselves the same way,\n// and we must keep track of the current state of our pseudo-random generators.\n// We call this state the scope. By default, we use the current DDP method\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.\n// If a randomSeed is provided it will be used to seed our random sequences.\n// In this way, client and server method calls will generate the same values.\n//\n// We expose multiple named streams; each stream is independent\n// and is seeded differently (but predictably from the name).\n// By using multiple streams, we support reordering of requests,\n// as long as they occur on different streams.\n//\n// @param options {Optional Object}\n//   seed: Array or value - Seed value(s) for the generator.\n//                          If an array, will be used as-is\n//                          If a value, will be converted to a single-value array\n//                          If omitted, a random array will be used as the seed.\nDDPCommon.RandomStream = class RandomStream {\n  constructor(options) {\n    this.seed = [].concat(options.seed || randomToken());\n    this.sequences = Object.create(null);\n  } // Get a random sequence with the specified name, creating it if does not exist.\n  // New sequences are seeded with the seed concatenated with the name.\n  // By passing a seed into Random.create, we use the Alea generator.\n\n\n  _sequence(name) {\n    var self = this;\n    var sequence = self.sequences[name] || null;\n\n    if (sequence === null) {\n      var sequenceSeed = self.seed.concat(name);\n\n      for (var i = 0; i < sequenceSeed.length; i++) {\n        if (typeof sequenceSeed[i] === \"function\") {\n          sequenceSeed[i] = sequenceSeed[i]();\n        }\n      }\n\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);\n    }\n\n    return sequence;\n  }\n\n}; // Returns a random string of sufficient length for a random seed.\n// This is a placeholder function; a similar function is planned\n// for Random itself; when that is added we should remove this function,\n// and call Random's randomToken instead.\n\nfunction randomToken() {\n  return Random.hexString(20);\n}\n\n; // Returns the random stream with the specified name, in the specified\n// scope. If a scope is passed, then we use that to seed a (not\n// cryptographically secure) PRNG using the fast Alea algorithm.  If\n// scope is null (or otherwise falsey) then we use a generated seed.\n//\n// However, scope will normally be the current DDP method invocation,\n// so we'll use the stream with the specified name, and we should get\n// consistent values on the client and server sides of a method call.\n\nDDPCommon.RandomStream.get = function (scope, name) {\n  if (!name) {\n    name = \"default\";\n  }\n\n  if (!scope) {\n    // There was no scope passed in; the sequence won't actually be\n    // reproducible. but make it fast (and not cryptographically\n    // secure) anyways, so that the behavior is similar to what you'd\n    // get by passing in a scope.\n    return Random.insecure;\n  }\n\n  var randomStream = scope.randomStream;\n\n  if (!randomStream) {\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({\n      seed: scope.randomSeed\n    });\n  }\n\n  return randomStream._sequence(name);\n}; // Creates a randomSeed for passing to a method call.\n// Note that we take enclosing as an argument,\n// though we expect it to be DDP._CurrentMethodInvocation.get()\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant\n// invocation may not be the one currently in scope.\n// If enclosing is null, we'll use Random and values won't be repeatable.\n\n\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);\n  return stream.hexString(20);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/ddp-common/namespace.js\");\nrequire(\"/node_modules/meteor/ddp-common/heartbeat.js\");\nrequire(\"/node_modules/meteor/ddp-common/utils.js\");\nrequire(\"/node_modules/meteor/ddp-common/method_invocation.js\");\nrequire(\"/node_modules/meteor/ddp-common/random_stream.js\");\n\n/* Exports */\nPackage._define(\"ddp-common\", {\n  DDPCommon: DDPCommon\n});\n\n})();\n","servePath":"/packages/ddp-common.js","sourceMap":{"version":3,"sources":["packages/ddp-common/namespace.js","packages/ddp-common/heartbeat.js","packages/ddp-common/utils.js","packages/ddp-common/method_invocation.js","packages/ddp-common/random_stream.js"],"names":["DDPCommon","Heartbeat","constructor","options","heartbeatInterval","heartbeatTimeout","_sendPing","sendPing","_onTimeout","onTimeout","_seenPacket","_heartbeatIntervalHandle","_heartbeatTimeoutHandle","stop","_clearHeartbeatIntervalTimer","_clearHeartbeatTimeoutTimer","start","_startHeartbeatIntervalTimer","Meteor","setInterval","_heartbeatIntervalFired","_startHeartbeatTimeoutTimer","setTimeout","_heartbeatTimeoutFired","clearInterval","clearTimeout","messageReceived","module","export","hasOwn","slice","keys","isEmpty","last","Object","prototype","hasOwnProperty","Array","obj","isArray","length","key","call","array","n","guard","Math","max","SUPPORTED_DDP_VERSIONS","parseDDP","stringMessage","msg","JSON","parse","e","_debug","fields","cleared","forEach","clearKey","undefined","field","EJSON","_adjustTypesFromJSONValue","stringifyDDP","copy","clone","value","push","_adjustTypesToJSONValue","id","Error","stringify","MethodInvocation","isSimulation","_unblock","unblock","_calledUnblock","userId","_setUserId","setUserId","connection","randomSeed","randomStream","RandomStream","seed","concat","randomToken","sequences","create","_sequence","name","self","sequence","sequenceSeed","i","Random","createWithSeeds","apply","hexString","get","scope","insecure","makeRpcSeed","enclosing","methodName","stream"],"mappings":"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","file":"/packages/ddp-common.js","sourcesContent":["/**\n * @namespace DDPCommon\n * @summary Namespace for DDPCommon-related methods/classes. Shared between \n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation\n * of a ddp client for both client AND server; and the ddp server is the\n * implementation of the livedata server and stream server. Common \n * functionality shared between both can be shared under this namespace\n */\nDDPCommon = {};\n","// Heartbeat options:\n//   heartbeatInterval: interval to send pings, in milliseconds.\n//   heartbeatTimeout: timeout to close the connection if a reply isn't\n//     received, in milliseconds.\n//   sendPing: function to call to send a ping on the connection.\n//   onTimeout: function to call to close the connection.\n\nDDPCommon.Heartbeat = class Heartbeat {\n  constructor(options) {\n    this.heartbeatInterval = options.heartbeatInterval;\n    this.heartbeatTimeout = options.heartbeatTimeout;\n    this._sendPing = options.sendPing;\n    this._onTimeout = options.onTimeout;\n    this._seenPacket = false;\n\n    this._heartbeatIntervalHandle = null;\n    this._heartbeatTimeoutHandle = null;\n  }\n\n  stop() {\n    this._clearHeartbeatIntervalTimer();\n    this._clearHeartbeatTimeoutTimer();\n  }\n\n  start() {\n    this.stop();\n    this._startHeartbeatIntervalTimer();\n  }\n\n  _startHeartbeatIntervalTimer() {\n    this._heartbeatIntervalHandle = Meteor.setInterval(\n      () => this._heartbeatIntervalFired(),\n      this.heartbeatInterval\n    );\n  }\n\n  _startHeartbeatTimeoutTimer() {\n    this._heartbeatTimeoutHandle = Meteor.setTimeout(\n      () => this._heartbeatTimeoutFired(),\n      this.heartbeatTimeout\n    );\n  }\n\n  _clearHeartbeatIntervalTimer() {\n    if (this._heartbeatIntervalHandle) {\n      Meteor.clearInterval(this._heartbeatIntervalHandle);\n      this._heartbeatIntervalHandle = null;\n    }\n  }\n\n  _clearHeartbeatTimeoutTimer() {\n    if (this._heartbeatTimeoutHandle) {\n      Meteor.clearTimeout(this._heartbeatTimeoutHandle);\n      this._heartbeatTimeoutHandle = null;\n    }\n  }\n\n  // The heartbeat interval timer is fired when we should send a ping.\n  _heartbeatIntervalFired() {\n    // don't send ping if we've seen a packet since we last checked,\n    // *or* if we have already sent a ping and are awaiting a timeout.\n    // That shouldn't happen, but it's possible if\n    // `this.heartbeatInterval` is smaller than\n    // `this.heartbeatTimeout`.\n    if (! this._seenPacket && ! this._heartbeatTimeoutHandle) {\n      this._sendPing();\n      // Set up timeout, in case a pong doesn't arrive in time.\n      this._startHeartbeatTimeoutTimer();\n    }\n    this._seenPacket = false;\n  }\n\n  // The heartbeat timeout timer is fired when we sent a ping, but we\n  // timed out waiting for the pong.\n  _heartbeatTimeoutFired() {\n    this._heartbeatTimeoutHandle = null;\n    this._onTimeout();\n  }\n\n  messageReceived() {\n    // Tell periodic checkin that we have seen a packet, and thus it\n    // does not need to send a ping this cycle.\n    this._seenPacket = true;\n    // If we were waiting for a pong, we got it.\n    if (this._heartbeatTimeoutHandle) {\n      this._clearHeartbeatTimeoutTimer();\n    }\n  }\n};\n","\"use strict\";\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\nexport const slice = Array.prototype.slice;\n\nexport function keys(obj) {\n  return Object.keys(Object(obj));\n}\n\nexport function isEmpty(obj) {\n  if (obj == null) {\n    return true;\n  }\n\n  if (Array.isArray(obj) ||\n      typeof obj === \"string\") {\n    return obj.length === 0;\n  }\n\n  for (const key in obj) {\n    if (hasOwn.call(obj, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function last(array, n, guard) {\n  if (array == null) {\n    return;\n  }\n\n  if ((n == null) || guard) {\n    return array[array.length - 1];\n  }\n\n  return slice.call(array, Math.max(array.length - n, 0));\n}\n\nDDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];\n\nDDPCommon.parseDDP = function (stringMessage) {\n  try {\n    var msg = JSON.parse(stringMessage);\n  } catch (e) {\n    Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);\n    return null;\n  }\n  // DDP messages must be objects.\n  if (msg === null || typeof msg !== 'object') {\n    Meteor._debug(\"Discarding non-object DDP message\", stringMessage);\n    return null;\n  }\n\n  // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.\n\n  // switch between \"cleared\" rep of unsetting fields and \"undefined\"\n  // rep of same\n  if (hasOwn.call(msg, 'cleared')) {\n    if (! hasOwn.call(msg, 'fields')) {\n      msg.fields = {};\n    }\n    msg.cleared.forEach(clearKey => {\n      msg.fields[clearKey] = undefined;\n    });\n    delete msg.cleared;\n  }\n\n  ['fields', 'params', 'result'].forEach(field => {\n    if (hasOwn.call(msg, field)) {\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\n    }\n  });\n\n  return msg;\n};\n\nDDPCommon.stringifyDDP = function (msg) {\n  const copy = EJSON.clone(msg);\n\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields\n  // and cleared' rep\n  if (hasOwn.call(msg, 'fields')) {\n    const cleared = [];\n\n    Object.keys(msg.fields).forEach(key => {\n      const value = msg.fields[key];\n\n      if (typeof value === \"undefined\") {\n        cleared.push(key);\n        delete copy.fields[key];\n      }\n    });\n\n    if (! isEmpty(cleared)) {\n      copy.cleared = cleared;\n    }\n\n    if (isEmpty(copy.fields)) {\n      delete copy.fields;\n    }\n  }\n\n  // adjust types to basic\n  ['fields', 'params', 'result'].forEach(field => {\n    if (hasOwn.call(copy, field)) {\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\n    }\n  });\n\n  if (msg.id && typeof msg.id !== 'string') {\n    throw new Error(\"Message id is not a string\");\n  }\n\n  return JSON.stringify(copy);\n};\n","// Instance name is this because it is usually referred to as this inside a\n// method definition\n/**\n * @summary The state for a single invocation of a method, referenced by this\n * inside a method definition.\n * @param {Object} options\n * @instanceName this\n * @showInstanceName true\n */\nDDPCommon.MethodInvocation = class MethodInvocation {\n  constructor(options) {\n    // true if we're running not the actual method, but a stub (that is,\n    // if we're on a client (which may be a browser, or in the future a\n    // server connecting to another server) and presently running a\n    // simulation of a server-side method for latency compensation\n    // purposes). not currently true except in a client such as a browser,\n    // since there's usually no point in running stubs unless you have a\n    // zero-latency connection to the user.\n\n    /**\n     * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\n     * @locus Anywhere\n     * @name  isSimulation\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     * @type {Boolean}\n     */\n    this.isSimulation = options.isSimulation;\n\n    // call this function to allow other method invocations (from the\n    // same client) to continue running without waiting for this one to\n    // complete.\n    this._unblock = options.unblock || function () {};\n    this._calledUnblock = false;\n\n    // current user id\n\n    /**\n     * @summary The id of the user that made this method call, or `null` if no user was logged in.\n     * @locus Anywhere\n     * @name  userId\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n    this.userId = options.userId;\n\n    // sets current user id in all appropriate server contexts and\n    // reruns subscriptions\n    this._setUserId = options.setUserId || function () {};\n\n    // On the server, the connection this method call came in on.\n\n    /**\n     * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.\n     * @locus Server\n     * @name  connection\n     * @memberOf DDPCommon.MethodInvocation\n     * @instance\n     */\n    this.connection = options.connection;\n\n    // The seed for randomStream value generation\n    this.randomSeed = options.randomSeed;\n\n    // This is set by RandomStream.get; and holds the random stream state\n    this.randomStream = null;\n  }\n\n  /**\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   */\n  unblock() {\n    this._calledUnblock = true;\n    this._unblock();\n  }\n\n  /**\n   * @summary Set the logged in user.\n   * @locus Server\n   * @memberOf DDPCommon.MethodInvocation\n   * @instance\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */\n  setUserId(userId) {\n    if (this._calledUnblock) {\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");\n    }\n    this.userId = userId;\n    this._setUserId(userId);\n  }\n};\n","// RandomStream allows for generation of pseudo-random values, from a seed.\n//\n// We use this for consistent 'random' numbers across the client and server.\n// We want to generate probably-unique IDs on the client, and we ideally want\n// the server to generate the same IDs when it executes the method.\n//\n// For generated values to be the same, we must seed ourselves the same way,\n// and we must keep track of the current state of our pseudo-random generators.\n// We call this state the scope. By default, we use the current DDP method\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.\n// If a randomSeed is provided it will be used to seed our random sequences.\n// In this way, client and server method calls will generate the same values.\n//\n// We expose multiple named streams; each stream is independent\n// and is seeded differently (but predictably from the name).\n// By using multiple streams, we support reordering of requests,\n// as long as they occur on different streams.\n//\n// @param options {Optional Object}\n//   seed: Array or value - Seed value(s) for the generator.\n//                          If an array, will be used as-is\n//                          If a value, will be converted to a single-value array\n//                          If omitted, a random array will be used as the seed.\nDDPCommon.RandomStream = class RandomStream {\n  constructor(options) {\n    this.seed = [].concat(options.seed || randomToken());\n    this.sequences = Object.create(null);\n  }\n\n  // Get a random sequence with the specified name, creating it if does not exist.\n  // New sequences are seeded with the seed concatenated with the name.\n  // By passing a seed into Random.create, we use the Alea generator.\n  _sequence(name) {\n    var self = this;\n\n    var sequence = self.sequences[name] || null;\n    if (sequence === null) {\n      var sequenceSeed = self.seed.concat(name);\n      for (var i = 0; i < sequenceSeed.length; i++) {\n        if (typeof sequenceSeed[i] === \"function\") {\n          sequenceSeed[i] = sequenceSeed[i]();\n        }\n      }\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);\n    }\n    return sequence;\n  }\n};\n\n// Returns a random string of sufficient length for a random seed.\n// This is a placeholder function; a similar function is planned\n// for Random itself; when that is added we should remove this function,\n// and call Random's randomToken instead.\nfunction randomToken() {\n  return Random.hexString(20);\n};\n\n// Returns the random stream with the specified name, in the specified\n// scope. If a scope is passed, then we use that to seed a (not\n// cryptographically secure) PRNG using the fast Alea algorithm.  If\n// scope is null (or otherwise falsey) then we use a generated seed.\n//\n// However, scope will normally be the current DDP method invocation,\n// so we'll use the stream with the specified name, and we should get\n// consistent values on the client and server sides of a method call.\nDDPCommon.RandomStream.get = function (scope, name) {\n  if (!name) {\n    name = \"default\";\n  }\n  if (!scope) {\n    // There was no scope passed in; the sequence won't actually be\n    // reproducible. but make it fast (and not cryptographically\n    // secure) anyways, so that the behavior is similar to what you'd\n    // get by passing in a scope.\n    return Random.insecure;\n  }\n  var randomStream = scope.randomStream;\n  if (!randomStream) {\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({\n      seed: scope.randomSeed\n    });\n  }\n  return randomStream._sequence(name);\n};\n\n// Creates a randomSeed for passing to a method call.\n// Note that we take enclosing as an argument,\n// though we expect it to be DDP._CurrentMethodInvocation.get()\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant\n// invocation may not be the one currently in scope.\n// If enclosing is null, we'll use Random and values won't be repeatable.\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);\n  return stream.hexString(20);\n};\n"]}}]