[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar _ = Package.underscore._;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Twitter = Package['twitter-oauth'].Twitter;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-twitter\":{\"notice.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-twitter/notice.js                                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nif (Package['accounts-ui'] && !Package['service-configuration'] && !Package.hasOwnProperty('twitter-config-ui')) {\n  console.warn(\"Note: You're using accounts-ui and accounts-twitter,\\n\" + \"but didn't install the configuration UI for Twitter\\n\" + \"OAuth. You can install it with:\\n\" + \"\\n\" + \"    meteor add twitter-config-ui\" + \"\\n\");\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"twitter.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/accounts-twitter/twitter.js                                                                            //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nAccounts.oauth.registerService('twitter');\n\nif (Meteor.isClient) {\n  const loginWithTwitter = function (options, callback) {\n    // support a callback without options\n    if (!callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Twitter.requestCredential(options, credentialRequestCompleteCallback);\n  };\n\n  Accounts.registerClientLoginFunction('twitter', loginWithTwitter);\n\n  Meteor.loginWithTwitter = function () {\n    return Accounts.applyLoginFunction('twitter', arguments);\n  };\n} else {\n  var autopublishedFields = _.map( // don't send access token. https://dev.twitter.com/discussions/5025\n  Twitter.whitelistedFields.concat(['id', 'screenName']), function (subfield) {\n    return 'services.twitter.' + subfield;\n  });\n\n  Accounts.addAutopublishFields({\n    forLoggedInUser: autopublishedFields,\n    forOtherUsers: autopublishedFields\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/accounts-twitter/notice.js\");\nrequire(\"/node_modules/meteor/accounts-twitter/twitter.js\");\n\n/* Exports */\nPackage._define(\"accounts-twitter\");\n\n})();\n","servePath":"/packages/accounts-twitter.js","sourceMap":{"version":3,"sources":["packages/accounts-twitter/notice.js","packages/accounts-twitter/twitter.js"],"names":["Package","hasOwnProperty","console","warn","Accounts","oauth","registerService","Meteor","isClient","loginWithTwitter","options","callback","credentialRequestCompleteCallback","credentialRequestCompleteHandler","Twitter","requestCredential","registerClientLoginFunction","applyLoginFunction","arguments","autopublishedFields","_","map","whitelistedFields","concat","subfield","addAutopublishFields","forLoggedInUser","forOtherUsers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,QAAQ,aAAR,KACG,CAACA,QAAQ,uBAAR,CADJ,IAEG,CAACA,QAAQC,cAAR,CAAuB,mBAAvB,CAFR,EAEqD;AACnDC,UAAQC,IAAR,CACE,2DACA,uDADA,GAEA,mCAFA,GAGA,IAHA,GAIA,kCAJA,GAKA,IANF;AAQD,C;;;;;;;;;;;ACXDC,SAASC,KAAT,CAAeC,eAAf,CAA+B,SAA/B;;AAEA,IAAIC,OAAOC,QAAX,EAAqB;AACnB,QAAMC,mBAAmB,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACnD;AACA,QAAI,CAAEA,QAAF,IAAc,OAAOD,OAAP,KAAmB,UAArC,EAAiD;AAC/CC,iBAAWD,OAAX;AACAA,gBAAU,IAAV;AACD;;AAED,QAAIE,oCAAoCR,SAASC,KAAT,CAAeQ,gCAAf,CAAgDF,QAAhD,CAAxC;AACAG,YAAQC,iBAAR,CAA0BL,OAA1B,EAAmCE,iCAAnC;AACD,GATD;;AAUAR,WAASY,2BAAT,CAAqC,SAArC,EAAgDP,gBAAhD;;AACAF,SAAOE,gBAAP,GAA0B,YAAY;AACpC,WAAOL,SAASa,kBAAT,CAA4B,SAA5B,EAAuCC,SAAvC,CAAP;AACD,GAFD;AAGD,CAfD,MAeO;AACL,MAAIC,sBAAsBC,EAAEC,GAAF,EACxB;AACAP,UAAQQ,iBAAR,CAA0BC,MAA1B,CAAiC,CAAC,IAAD,EAAO,YAAP,CAAjC,CAFwB,EAGxB,UAAUC,QAAV,EAAoB;AAAE,WAAO,sBAAsBA,QAA7B;AAAwC,GAHtC,CAA1B;;AAKApB,WAASqB,oBAAT,CAA8B;AAC5BC,qBAAiBP,mBADW;AAE5BQ,mBAAeR;AAFa,GAA9B;AAID,C","file":"/packages/accounts-twitter.js","sourcesContent":["if (Package['accounts-ui']\n    && !Package['service-configuration']\n    && !Package.hasOwnProperty('twitter-config-ui')) {\n  console.warn(\n    \"Note: You're using accounts-ui and accounts-twitter,\\n\" +\n    \"but didn't install the configuration UI for Twitter\\n\" +\n    \"OAuth. You can install it with:\\n\" +\n    \"\\n\" +\n    \"    meteor add twitter-config-ui\" +\n    \"\\n\"\n  );\n}\n","Accounts.oauth.registerService('twitter');\n\nif (Meteor.isClient) {\n  const loginWithTwitter = function(options, callback) {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Twitter.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('twitter', loginWithTwitter);\n  Meteor.loginWithTwitter = function () {\n    return Accounts.applyLoginFunction('twitter', arguments);\n  };\n} else {\n  var autopublishedFields = _.map(\n    // don't send access token. https://dev.twitter.com/discussions/5025\n    Twitter.whitelistedFields.concat(['id', 'screenName']),\n    function (subfield) { return 'services.twitter.' + subfield; });\n\n  Accounts.addAutopublishFields({\n    forLoggedInUser: autopublishedFields,\n    forOtherUsers: autopublishedFields\n  });\n}\n"]}}]