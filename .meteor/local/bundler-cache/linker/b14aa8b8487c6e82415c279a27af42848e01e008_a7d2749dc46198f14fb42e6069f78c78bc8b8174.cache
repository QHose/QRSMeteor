[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar Iron;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/iron_core/lib/version_conflict_error.js                                             //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nif (Package['cmather:iron-core']) {\n  throw new Error(\"\\n\\n\\\n    Sorry! The cmather:iron-{x} packages were migrated to the new package system with the wrong name, and you have duplicate copies.\\n\\\n    You can see which cmather:iron-{x} packages have been installed by using this command:\\n\\n\\\n    > meteor list\\n\\n\\\n    Can you remove any installed cmather:iron-{x} packages like this:\\\n    \\n\\n\\\n    > meteor remove cmather:iron-core\\n\\\n    > meteor remove cmather:iron-router\\n\\\n    > meteor remove cmather:iron-dynamic-template\\n\\\n    > meteor remove cmather:iron-dynamic-layout\\n\\\n    \\n\\\n    The new packages are named iron:{x}. For example:\\n\\n\\\n    > meteor add iron:router\\n\\n\\\n    Sorry for the hassle, but thank you!\\\n    \\n\\n\\\n  \");\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/iron_core/lib/iron_core.js                                                          //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nIron = {};\nIron.utils = {};\n\n/**\n * Assert that the given condition is truthy and throw an error if not.\n */\n\nIron.utils.assert = function (condition, msg) {\n  if (!condition)\n    throw new Error(msg);\n};\n\n/**\n * Print a warning message to the console if the console is defined.\n */\nIron.utils.warn = function (condition, msg) {\n  if (!condition)\n    console && console.warn && console.warn(msg);\n};\n\n/**\n * Given a target object and a property name, if the value of that property is\n * undefined, set a default value and return it. If the value is already\n * defined, return the existing value.\n */\nIron.utils.defaultValue = function (target, prop, value) {\n  if (typeof target[prop] === 'undefined') {\n    target[prop] = value;\n    return value;\n  } else {\n    return target[prop]\n  }\n};\n\n/**\n * Make one constructor function inherit from another. Optionally provide\n * prototype properties for the child.\n *\n * @param {Function} Child The child constructor function.\n * @param {Function} Parent The parent constructor function.\n * @param {Object} [props] Prototype properties to add to the child\n */\nIron.utils.inherits = function (Child, Parent, props) {\n  Iron.utils.assert(typeof Child !== \"undefined\", \"Child is undefined in inherits function\");\n  Iron.utils.assert(typeof Parent !== \"undefined\", \"Parent is undefined in inherits function\");\n\n  // copy static fields\n  for (var key in Parent) {\n    if (_.has(Parent, key))\n      Child[key] = EJSON.clone(Parent[key]);\n  }\n\n  var Middle = function () {\n    this.constructor = Child;\n  };\n\n  // hook up the proto chain\n  Middle.prototype = Parent.prototype;\n  Child.prototype = new Middle;\n  Child.__super__ = Parent.prototype;\n\n  // copy over the prototype props\n  if (_.isObject(props))\n    _.extend(Child.prototype, props);\n\n  return Child;\n};\n\n/**\n * Create a new constructor function that inherits from Parent and copy in the\n * provided prototype properties.\n *\n * @param {Function} Parent The parent constructor function.\n * @param {Object} [props] Prototype properties to add to the child\n */\nIron.utils.extend = function (Parent, props) {\n  props = props || {};\n\n  var ctor = function () {\n    // automatically call the parent constructor if a new one\n    // isn't provided.\n    var constructor;\n    if (_.has(props, 'constructor'))\n      constructor = props.constructor\n    else\n      constructor = ctor.__super__.constructor;\n\n    constructor.apply(this, arguments);\n  };\n\n  return Iron.utils.inherits(ctor, Parent, props);\n};\n\n/**\n * Either window in the browser or global in NodeJS.\n */\nIron.utils.global = (function () {\n  return Meteor.isClient ? window : global;\n})();\n\n/**\n * Ensure a given namespace exists and assign it to the given value or\n * return the existing value.\n */\nIron.utils.namespace = function (namespace, value) {\n  var global = Iron.utils.global;\n  var parts;\n  var part;\n  var name;\n  var ptr;\n\n  Iron.utils.assert(typeof namespace === 'string', \"namespace must be a string\");\n\n  parts = namespace.split('.');\n  name = parts.pop();\n  ptr = global;\n\n  for (var i = 0; i < parts.length; i++) {\n    part = parts[i];\n    ptr = ptr[part] = ptr[part] || {};\n  }\n\n  if (arguments.length === 2) {\n    ptr[name] = value;\n    return value;\n  } else {\n    return ptr[name];\n  }\n};\n\n/**\n * Returns the resolved value at the given namespace or the value itself if it's\n * not a string.\n *\n * Example:\n *\n * var Iron = {};\n * Iron.foo = {};\n *\n * var baz = Iron.foo.baz = {};\n * Iron.utils.resolve(\"Iron.foo.baz\") === baz\n */\nIron.utils.resolve = function (nameOrValue) {\n  var global = Iron.utils.global;\n  var parts;\n  var ptr;\n\n  if (typeof nameOrValue === 'string') {\n    parts = nameOrValue.split('.');\n    ptr = global;\n    for (var i = 0; i < parts.length; i++) {\n      ptr = ptr[parts[i]];\n      if (!ptr)\n        return undefined;\n    }\n  } else {\n    ptr = nameOrValue;\n  }\n\n  // final position of ptr should be the resolved value\n  return ptr;\n};\n\n/**\n * Capitalize a string.\n */\nIron.utils.capitalize = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1, str.length);\n};\n\n/**\n * Convert a string to class case.\n */\nIron.utils.classCase = function (str) {\n  var re = /_|-|\\.|\\//;\n\n  if (!str)\n    return '';\n\n  return _.map(str.split(re), function (word) {\n    return Iron.utils.capitalize(word);\n  }).join('');\n};\n\n/**\n * Convert a string to camel case.\n */\nIron.utils.camelCase = function (str) {\n  var output = Iron.utils.classCase(str);\n  output = output.charAt(0).toLowerCase() + output.slice(1, output.length);\n  return output;\n};\n\n/**\n * deprecatation notice to the user which can be a string or object\n * of the form:\n *\n * {\n *  name: 'somePropertyOrMethod',\n *  where: 'RouteController',\n *  instead: 'someOtherPropertyOrMethod',\n *  message: ':name is deprecated. Please use :instead instead'\n * }\n */\nIron.utils.notifyDeprecated = function (info) {\n  var name;\n  var instead;\n  var message;\n  var where;\n  var defaultMessage = \"[:where] ':name' is deprecated. Please use ':instead' instead.\";\n\n  if (_.isObject(info)) {\n    name = info.name;\n    instead = info.instead;\n    message = info.message || defaultMessage;\n    where = info.where || 'IronRouter';\n  } else {\n    message = info;\n    name = '';\n    instead = '';\n    where = '';\n  }\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(\n      '<deprecated> ' +\n      message\n      .replace(':name', name)\n      .replace(':instead', instead)\n      .replace(':where', where) +\n      ' ' +\n      (new Error).stack\n    );\n  }\n};\n\nIron.utils.withDeprecatedNotice = function (info, fn, thisArg) {\n  return function () {\n    Utils.notifyDeprecated(info);\n    return fn && fn.apply(thisArg || this, arguments);\n  };\n};\n\n// so we can do this:\n//   getController: function () {\n//    ...\n//   }.deprecate({...})\nFunction.prototype.deprecate = function (info) {\n  var fn = this;\n  return Iron.utils.withDeprecatedNotice(info, fn);\n};\n\n/**\n * Returns a function that can be used to log debug messages for a given\n * package.\n */\nIron.utils.debug = function (package) {\n  Iron.utils.assert(typeof package === 'string', \"debug requires a package name\");\n\n  return function debug (/* args */) {\n    if (console && console.log && Iron.debug === true) {\n      var msg = _.toArray(arguments).join(' ');\n      console.log(\"%c<\" + package + \"> %c\" + msg, \"color: #999;\", \"color: #000;\");\n    }\n  };\n};\n\n/*\n * Meteor's version of this function is broke.\n */\nIron.utils.get = function (obj /*, arguments */) {\n  for (var i = 1; i < arguments.length; i++) {\n    if (!obj || !(arguments[i] in obj))\n      return undefined;\n    obj = obj[arguments[i]];\n  }\n  return obj;\n};\n\n// make sure Iron ends up in the global namespace\nIron.utils.global.Iron = Iron;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"iron:core\", {\n  Iron: Iron\n});\n\n})();\n","servePath":"/packages/iron_core.js"}]