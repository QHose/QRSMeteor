[{"type":"js","data":"/* Imports for global scope */\n\nServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nfaker = Package['practicalmeteor:faker'].faker;\nJsonRoutes = Package['simple:json-routes'].JsonRoutes;\nRestMiddleware = Package['simple:json-routes'].RestMiddleware;\nAccountsGuest = Package['artwells:accounts-guest'].AccountsGuest;\nBlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\nReactiveTable = Package['aslagle:reactive-table'].ReactiveTable;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nECMAScript = Package.ecmascript.ECMAScript;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nActiveRoute = Package['zimme:active-route'].ActiveRoute;\nRoles = Package['alanning:roles'].Roles;\n_ = Package.underscore._;\nAccounts = Package['accounts-base'].Accounts;\nGoogle = Package['google-oauth'].Google;\nFacebook = Package['facebook-oauth'].Facebook;\nTwitter = Package['twitter-oauth'].Twitter;\nGithub = Package['github-oauth'].Github;\nAccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nT9n = Package['softwarerero:accounts-t9n'].T9n;\nHTML = Package.htmljs.HTML;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"yogiben.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// lib/yogiben.js                                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// import { Customers } from '/imports/api/customers';\n// AdminConfig = {\n//     collections: {\n//         Customers: {\n//             collectionObject: Customers,\n//         }\n//     },\n//     userSchema: new SimpleSchema({\n//         'profile.gender': {\n//             type: String,\n//             allowedValues: ['male', 'female']\n//         }\n//     })\n// };\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"imports\":{\"api\":{\"server\":{\"QPSFunctions.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QPSFunctions.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst module1 = module;\nmodule1.export({\n  createVirtualProxies: () => createVirtualProxies,\n  getVirtualProxies: () => getVirtualProxies,\n  logoutUser: () => logoutUser,\n  getRedirectURL: () => getRedirectURL\n});\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Customers, dummyCustomers, dummyCustomer;\nmodule1.watch(require(\"/imports/api/customers\"), {\n  Customers(v) {\n    Customers = v;\n  },\n\n  dummyCustomers(v) {\n    dummyCustomers = v;\n  },\n\n  dummyCustomer(v) {\n    dummyCustomer = v;\n  }\n\n}, 1);\nlet REST_Log;\nmodule1.watch(require(\"/imports/api/APILogs\"), {\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 2);\nlet gitHubLinks;\nmodule1.watch(require(\"/imports/ui/UIHelpers\"), {\n  gitHubLinks(v) {\n    gitHubLinks = v;\n  }\n\n}, 3);\nlet senseConfig, authHeaders, qliksrv, configCerticates, validateJSON;\nmodule1.watch(require(\"/imports/api/config.js\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  },\n\n  qrsSrv(v) {\n    qliksrv = v;\n  },\n\n  configCerticates(v) {\n    configCerticates = v;\n  },\n\n  validateJSON(v) {\n    validateJSON = v;\n  }\n\n}, 4);\nlet lodash;\nmodule1.watch(require(\"lodash\"), {\n  default(v) {\n    lodash = v;\n  }\n\n}, 5);\n\nvar fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nvar os = require(\"os\");\n\nvar ip = require(\"ip\"); // const token = require(\"./token\");\n\n\nconst {\n  v4: uuidv4\n} = require(\"uuid\"); //\n// ─── IMPORT CONFIG FOR QLIK SENSE QRS ───────────────────────────────────────────\n//\n\n\n_ = lodash; //\n// ─── CREATE VIRTUAL PROXIES ─────────────────────────────────────────────────────\n//\n// http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Virtual-Proxy-Create.htm\n\nfunction createVirtualProxies() {\n  return Promise.asyncApply(() => {\n    console.log(\"------------------------------------\");\n    console.log(\"CREATE VIRTUAL PROXIES\");\n    console.log(\"------------------------------------\");\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, \"proxy\", \"import\", \"virtualProxySettings.json\");\n\n    try {\n      // READ THE PROXY FILE\n      var proxySettings = Promise.await(fs.readJson(file));\n\n      try {\n        validateJSON(proxySettings);\n      } catch (err) {\n        throw new Error(\"Cant read the virtual proxy definitions file: virtualProxySettings.json in your automation folder\");\n      } //FOR EACH PROXY FOUND IN THE INPUTFILE (vpToCreate), CREATE IT IN SENSE. We also put the current ip/host in the list of sense since in most cases this tool runs on the same machine as sense.\n\n\n      for (var vpToCreate of proxySettings) {\n        if (vpToCreate.websocketCrossOriginWhiteList) {\n          vpToCreate.websocketCrossOriginWhiteList.push(Meteor.settings.public.qlikSenseHost);\n          vpToCreate.websocketCrossOriginWhiteList.push(ip.address());\n          vpToCreate.websocketCrossOriginWhiteList.push(os.hostname());\n        }\n\n        var existingProxies = getVirtualProxies(); // CHECK IF VIRT. PROXY ALREADY EXISTS IN SENSE\n\n        var found = existingProxies.some(function (existingVP) {\n          return existingVP.prefix === vpToCreate.prefix;\n        });\n\n        if (!found) {\n          var virtualProxy = createVirtualProxy(vpToCreate); // THE VIRTUAL PROXY HAS BEEN CREATED, NOW LINK IT TO THE CENTRAL PROXY\n\n          linkVirtualProxyToProxy(virtualProxy);\n        } else {\n          console.log(\"Virtual proxy \" + vpToCreate.prefix + \" already existed. We do not update existing ones.\");\n        }\n      }\n    } catch (err) {\n      console.error(err);\n      throw new Error(\"unable to create virtual proxies\", err);\n    }\n\n    function createVirtualProxy(virtualProxy) {\n      // get id of local node so we can link the virtual proxy to a load balancing node\n      virtualProxy.loadBalancingServerNodes = [{\n        id: getServerNodeConfiguration().id\n      }];\n\n      try {\n        check(virtualProxy, Object);\n        console.log(\"------CREATE VIRTUAL PROXY: \", virtualProxy.prefix);\n        var request = qliksrv + \"/qrs/virtualproxyconfig/\";\n        response = HTTP.call(\"POST\", request, {\n          params: {\n            xrfkey: senseConfig.xrfkey\n          },\n          npmRequestOptions: configCerticates,\n          data: virtualProxy\n        });\n        return response.data;\n      } catch (err) {\n        console.error(\"create virtual proxy failed\", err);\n      } // }\n\n    }\n  });\n}\n\n// http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Virtual-Proxy-Link.htm\nfunction linkVirtualProxyToProxy(virtualProxy) {\n  // console.log('linkVirtualProxyToProxy', virtualProxy.id);\n  // GET ID OF PROXY ON THIS HOST\n  var proxyId = getProxyId(); // GET THE CONFIG OF THE PROXY (WHICH CONTAINS VIRTUAL PROXIES)\n\n  var proxyConfig = getProxyServiceConfiguration(proxyId); // ADD THE NEW VIRTUAL PROXY TO THE EXISTING PROXY LIST\n\n  proxyConfig.settings.virtualProxies.push(virtualProxy);\n\n  try {\n    check(Meteor.settings.public.qlikSensePort, Number);\n    check(Meteor.settings.public.qlikSensePortSecure, Number);\n    check(Meteor.settings.broker.qlikSense.proxyAllowHTTP, Boolean);\n  } catch (error) {\n    console.error(\"settings file incomplete, your are missing the qliksenseport, qlikSensePortSecure or proxyAllowHTTP\");\n  } //UPDATE SOME PROXY SETTINGS\n\n\n  console.log(\"UPDATE SOME PROXY SETTINGS...\");\n  proxyConfig.settings.unencryptedListenPort = Meteor.settings.public.qlikSensePort; //HTTP\n\n  proxyConfig.settings.listenPort = Meteor.settings.public.qlikSensePortSecure; //HTTPS\n\n  proxyConfig.settings.allowHttp = Meteor.settings.broker.qlikSense.proxyAllowHTTP; //OVERWRITE THE SETTINGS WITH THE COMPLETE UPDATED OBJECT.\n\n  updateProxy(proxyId, proxyConfig);\n}\n\nfunction updateProxy(proxyId, proxyConfig) {\n  try {\n    check(proxyId, String);\n    check(proxyConfig, Object); // console.log('proxyConfig', proxyConfig.settings.virtualProxies)\n\n    var request = qliksrv + \"/qrs/proxyservice/\" + proxyId;\n    response = HTTP.call(\"PUT\", request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates,\n      data: proxyConfig\n    });\n  } catch (err) {\n    console.error(\"update proxy failed\", err);\n  }\n}\n\nfunction getProxyId() {\n  try {\n    var request = qliksrv + \"/qrs/proxyservice/?xrfkey=\" + senseConfig.xrfkey;\n    response = HTTP.call(\"GET\", request, {\n      npmRequestOptions: configCerticates\n    });\n    return response.data[0].id;\n  } catch (err) {\n    console.error(\"get proxyId failed\", err);\n  }\n}\n\nfunction getProxyServiceConfiguration(proxyId) {\n  try {\n    check(proxyId, String);\n    var request = qliksrv + \"/qrs/proxyservice/\" + proxyId + \"?xrfkey=\" + senseConfig.xrfkey;\n    response = HTTP.call(\"GET\", request, {\n      npmRequestOptions: configCerticates\n    }); //SAVE RPOXY CONFIG TO THE EXPORT FOLDER\n\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, \"proxy\", \"export\", \"proxyServiceConfiguration.json\");\n    fs.outputFile(file, JSON.stringify(response.data, null, 2), \"utf-8\");\n    return response.data;\n  } catch (err) {\n    console.error(\"create virtual proxy failed\", err);\n  }\n}\n\nfunction getVirtualProxies() {\n  // console.log('--------------------------GET VIRTUAL PROXIES');//\n  try {\n    var request = qliksrv + \"/qrs/virtualproxyconfig/\";\n    response = HTTP.call(\"GET\", request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates\n    });\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, \"proxy\", \"export\", \"virtualProxyServiceConfiguration.json\"); // SAVE PROXY FILE TO DISK\n\n    fs.outputFile(file, JSON.stringify(response.data, null, 2), \"utf-8\");\n    return response.data;\n  } catch (err) {\n    console.error(\"create virtual proxy failed\", err);\n  }\n}\n\n// function getCentralProxy() {\n//     console.log('getCentralProxy: GET /qrs/ServerNodeConfiguration?filter=isCentral')\n// }\nfunction getServerNodeConfiguration() {\n  try {\n    var request = qliksrv + \"/qrs/servernodeconfiguration/local?xrfkey=\" + senseConfig.xrfkey;\n    response = HTTP.call(\"GET\", request, {\n      npmRequestOptions: configCerticates\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"create virtual proxy failed\", err);\n  }\n} //\n// ─── METEOR METHODS ─────────────────────────────────────────────────────────────\n//\n\n\nMeteor.methods({\n  currentlyLoggedInUser() {\n    // console.log(\"Meteor will now look which user is currently logged in, and request a ticket for this ID, and add his group memberships.\");\n    var call = {};\n    call.action = \"STEP 3: Server received request to create ticket\";\n    call.request = \"Meteor server received a incoming method call from the browser. The meteor server will now look which user is currently logged in, and create a ticket for this ID, and add his group memberships.\";\n    REST_Log(call, Meteor.userId()); // first find the customers that have a logged in users (mongo returns a complete document)\n\n    var customer = Customers.findOne({\n      generationUserId: Meteor.userId(),\n      \"users.currentlyLoggedIn\": true\n    }); // console.log('In our local database we can find the customer with the currentlyLoggedIn set to true for user: ' + loggedInUser + ', the customer which contains the user that the user selected with the dropdown: ', customer);\n    // now we have the document, we can look in the array of users, to find the one that is logged in.\n\n    var user;\n\n    if (!customer) {\n      // if no user is selected, just insert john as a dummy\n      // const error = 'You have not selected a user you want to simulate the Single Sign on with. For demo purposes we now selected John for you. You can also select your own user in step 4 of the SaaS demo';\n      var response = {}; // console.log('dummyCustomer :', dummyCustomer);\n\n      response.user = dummyCustomer.user;\n      response.customer = dummyCustomer; // throw new Meteor.Warning('No user', error);\n    } else {\n      var user = _.find(customer.users, {\n        currentlyLoggedIn: true\n      });\n\n      var response = {};\n      response.user = user;\n      response.customer = customer;\n    } // console.log('the response is: ', response);\n\n\n    return response;\n  },\n\n  getRedirectUrl(proxyRestUri, targetId, loggedInUser) {\n    var response = Meteor.call(\"currentlyLoggedInUser\");\n    var customer = response.customer;\n    var user = response.user;\n    console.log(\"UserID currently logged in in the demo platform: \" + loggedInUser + \". Meteor server side thinks the meteor.userId is \" + Meteor.userId() + \". We use this as the UDC name\"); // Create a paspoort (ticket) request: user directory, user identity and attributes\n\n    var passport = {\n      UserDirectory: Meteor.userId(),\n      // Specify a dummy value to ensure userID's are unique E.g. \"Dummy\", or in my case, I use the logged in user, so each user who uses the demo can logout only his users, or the name of the customer domain if you need a Virtual proxy per customer\n      UserId: user.name,\n      // the current user that we are going to login with\n      Attributes: [{\n        group: customer.name.toUpperCase()\n      }, // attributes supply the group membership from the source system to Qlik Sense\n      {\n        group: user.country.toUpperCase()\n      }, {\n        group: user.group.toUpperCase()\n      }]\n    };\n    console.log('Request ticket for this user passport\": ', passport); // logging only\n\n    var call = {};\n    call.action = \"STEP 4: User and group information received from customer database, now we can request a ticket\";\n    call.url = gitHubLinks.createpassport;\n    call.request = 'Request ticket for this user and his groups (an array of values which you can use in the security rules): \": ' + JSON.stringify(passport);\n    REST_Log(call, Meteor.userId());\n    return getRedirectURL(passport, proxyRestUri, targetId, Meteor.userId());\n  },\n\n  getTicketNumber(userProperties, virtualProxy) {\n    // only get a ticket number for a SPECIFIC virtual proxy\n    console.log('getTicketNumber using properties:');\n    console.log('virtualProxy', virtualProxy);\n    console.log('userProperties', userProperties);\n\n    try {\n      check(userProperties.group, String);\n      check(virtualProxy, String);\n      check(Meteor.userId(), String);\n    } catch (err) {\n      throw new Meteor.Error(\"Failed to login into Qlik Sense via a ticket\", \"We could not request a ticket because the userId or groups (technical, generic) or virtual proxy, or UDC (your Meteor userId, are you not yet logged into Meteor?) are not provided\");\n    }\n\n    var passport = {\n      UserDirectory: Meteor.userId(),\n      // Specify a dummy value to ensure userID's are unique E.g. \"Dummy\", or in my case, I use the logged in user, so each user who uses the demo can logout only his users, or the name of the customer domain if you need a Virtual proxy per customer\n      UserId: Meteor.userId(),\n      // the current user that we are going to login with\n      Attributes: [{\n        group: \"slideGenerator\"\n      }, // attributes supply the group membership from the source system to Qlik Sense\n      {\n        group: userProperties.group\n      }, {\n        group: \"ITALY\"\n      }]\n    }; //get the ticket number and return it to the client\n\n    return Meteor.call(\"requestTicketWithPassport\", virtualProxy, passport);\n  },\n\n  //only for demo purposes! never supply groups from the client...\n  requestTicketWithPassport(virtualProxy, passport) {\n    console.log('getTicketNumber passport', passport); // var rootCas = require(\"ssl-root-cas\").create();//\n    // default for all https requests\n    // (whether using https directly, request, or another module)\n    // require(\"https\").globalAgent.options.ca = rootCas;\n    // http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/ProxyServiceAPI/Content/ProxyServiceAPI/ProxyServiceAPI-ProxyServiceAPI-Authentication-Ticket-Add.htm\n\n    var proxyGetTicketURI = \"https://\" + senseConfig.SenseServerInternalLanIP + \":\" + Meteor.settings.private.proxyPort + \"/qps/\" + virtualProxy + \"/ticket\"; // \"proxyRestUri\": \"https://ip-172-31-22-22.eu-central-1.compute.internal:4243/qps/meteor/\",\n    // console.log('proxyGetTicketURI', proxyGetTicketURI)\n\n    try {\n      var response = HTTP.call(\"POST\", proxyGetTicketURI, {\n        npmRequestOptions: configCerticates,\n        headers: authHeaders,\n        params: {\n          xrfkey: senseConfig.xrfkey\n        },\n        data: passport // the user and group info for which we want to create a ticket\n\n      });\n    } catch (err) {\n      console.error(\"REST call to request a ticket failed. PLEASE EXPORT AND IMPORT CERTIFICATES FROM QMC FOR THE CORRECT HOSTNAME\", err);\n      throw new Meteor.Error(\"Request ticket failed\", err.message);\n    }\n\n    return response.data.Ticket;\n  },\n\n  //https://qlik.dev/authenticate/jwt/create-signed-tokens-for-jwt-authorization\n  getJWTToken(passport) {\n    console.log(\"get JWT with passport\", passport);\n\n    try {\n      const uuid = uuidv4();\n      const sub = `sub_${uuid}`;\n      const name = passport.UserId;\n      const email = `${uuid}@demo.anon`;\n      const groups = passport.Groups;\n      const genT = token.generate(sub, name, email, groups);\n      console.log(\"🚀 ~ file: QPSFunctions.js:423 ~ getJWTToken ~ genT:\", genT);\n      return genT;\n    } catch (err) {\n      console.error(\"unable to generate JWT token, did you supply the correct public.pem and private.pem in the dir: \" + Meteor.settings.private.certificatesDirectory, err);\n      throw new Meteor.Error(\"generate jwt token failed\", err.message);\n    }\n  },\n\n  resetLoggedInUser() {\n    // console.log(\"***Method resetLoggedInUsers\");\n    // console.log('call the QPS logout api, to invalidate the session cookie for each user in our local database');\n    // reset the local database. set all users to not logged in. We need this code because we do a simulation of the login and not a real end user login.\n    Customers.find({\n      generationUserId: Meteor.userId()\n    }).forEach(function (customer) {\n      var updatedUsers = _.map(customer.users, function (user) {\n        if (user) {\n          user.currentlyLoggedIn = false;\n        } // and just logout everybody in the user list\n\n\n        logoutUser(Meteor.userId(), user.name);\n        return user;\n      });\n\n      Customers.update(customer._id, {\n        $set: {\n          users: updatedUsers\n        }\n      });\n    }); // logoutUser(Meteor.userId(), Meteor.userId()); //logout the user for the slide generator\n  },\n\n  logoutPresentationUser(UDC, name) {\n    console.log(\"logoutPresentationUser(UDC, name)\", UDC, name);\n    logoutUser(UDC, name, Meteor.settings.public.slideGenerator.virtualProxy);\n  },\n\n  logoutVirtualProxyClientUsageUser(UDC, name) {\n    console.log(\"logout virtual proxy client usuage User(UDC, name)\", UDC, name);\n    logoutUser(UDC, name, Meteor.settings.public.virtualProxyClientUsage);\n  },\n\n  simulateUserLogin(name) {\n    check(name, String);\n    Meteor.call(\"resetLoggedInUser\"); // console.log('*** Reset all logged in user done, now write in our local database the name for the current simulated user: generationUserId: ' + Meteor.userId() + ' & users.name:' + name);\n\n    var query = [{\n      generationUserId: Meteor.userId(),\n      \"users.name\": name\n    }, {\n      $set: {\n        \"users.$.currentlyLoggedIn\": true\n      }\n    }];\n    Customers.update({\n      generationUserId: Meteor.userId(),\n      \"users.name\": name\n    }, {\n      $set: {\n        \"users.$.currentlyLoggedIn\": true\n      }\n    }, {}, function (error, numberAffectedDocuments) {\n      if (numberAffectedDocuments === 0) {\n        // if nothing is updated, insert some dummy customers\n        // console.log('simulateUserLogin numberAffectedDocuments: ', numberAffectedDocuments);\n        // name does not yet exist in the customers created by the current demo user. So insert our dummy customers.numberAffectedDocuments\n        insertDummyCustomers(Meteor.userId());\n        Customers.update({\n          generationUserId: Meteor.userId(),\n          \"users.name\": name\n        }, {\n          $set: {\n            \"users.$.currentlyLoggedIn\": true\n          }\n        });\n      }\n    });\n  }\n\n});\nMeteor.methods({\n  resetPasswordOrCreateUser(user) {\n    try {\n      // console.log('reset the password of the user before logging him in');\n      check(user.email, String);\n      check(user.password, String);\n    } catch (err) {\n      throw new Meteor.Error(\"Missing Qlik.com user data\", \"The user misses important information from its Qlik.com account\");\n    }\n\n    const userExists = Accounts.findUserByEmail(user.email);\n    var userId = {};\n\n    if (userExists) {\n      // console.log('########### found user, now reset his password: ', userExists);\n      userId = userExists._id;\n      Accounts.setPassword(userId, user.password);\n    } else {\n      userId = Accounts.createUser(user);\n      Roles.addUsersToRoles(userId, [\"untrusted\"], \"GLOBAL\"); // https://github.com/alanning/meteor-roles\n    }\n\n    return userId;\n  }\n\n});\n\nfunction insertDummyCustomers(generationUserId) {\n  // console.log('insertDummyCustomers called for generationUserId: ', generationUserId);\n  _.each(dummyCustomers, function (customer) {\n    customer.generationUserId = generationUserId;\n    Customers.insert(customer);\n  });\n} //Each proxy has its own session cookie, so you have to logout the users per proxy used.\n\n\nfunction logoutUser(UDC, name, proxy) {\n  if (!proxy) {\n    proxy = senseConfig.virtualProxyClientUsage;\n  } // use use the proxy for the dummy users from step 4\n  // console.log('******** QPS Functions: logout the current: ' + name + ' on proxy: ' + proxy);\n\n\n  if (name) {\n    // //console.log('Make QPS-logout call, We authenticate to Sense using the options (including a certificate) object in the HTTPs call: '); //, configCerticates);\n    // //console.log('Meteor tries to logout the user on this URL: https://' + senseConfig.SenseServerInternalLanIP + ':4243/qps/' + senseConfig.virtualProxyClientUsage + '/user/' + senseConfig.UDC + '/' + name);\n    try {\n      const call = {};\n      call.action = \"Logout user: \" + name;\n      call.url = gitHubLinks.logoutUser;\n      call.request = \"https://\" + senseConfig.SenseServerInternalLanIP + \":4243/qps/\" + proxy + \"/user/\" + UDC + \"/\" + name + \"?xrfkey=\" + senseConfig.xrfkey;\n      call.response = HTTP.call(\"DELETE\", call.request, {\n        npmRequestOptions: configCerticates\n      });\n      REST_Log(call, UDC); // the UDC is the by definition the userId of meteor in our approach...\n      // console.log('The HTTP REQUEST to Sense QPS API:', call.request);\n      // console.log('The HTTP RESPONSE from Sense QPS API: ', call.response);\n    } catch (err) {\n      console.error(err);\n      throw new Meteor.Error(\"Logout user failed\", err.message);\n    }\n  }\n}\n\nfunction getRedirectURL(passport, proxyRestUri, targetId, generationUserId) {\n  try {\n    check(passport, Object);\n    check(proxyRestUri, String);\n    check(targetId, String);\n    check(generationUserId, String);\n  } catch (error) {\n    throw new Meteor.error(\"Request ticket failed\", \"You did not specify a pasport, proxyUri, targetId  or generationUserID\", error);\n  } // console.log('entered server side requestTicket module for user and passport', passport, proxyRestUri);\n  // see https://help.qlik.com/en-US/sense-developer/3.0/Subsystems/ProxyServiceAPI/Content/ProxyServiceAPI/ProxyServiceAPI-ProxyServiceAPI-Authentication-Ticket-Add.htm\n\n\n  var ticketRequestBody = passport;\n  ticketRequestBody.TargetId = targetId; // console.log('The passport for requesting a ticket: ', passport);\n\n  try {\n    var call = {};\n    call.action = \"STEP 5: Request ticket at endpoint received from Sense\";\n    call.request = proxyRestUri + \"ticket\"; // we use the proxy rest uri which we got from the redirect from the proxy (the first bounce)\n\n    call.url = gitHubLinks.requestTicket;\n    call.response = HTTP.call(\"POST\", call.request, {\n      npmRequestOptions: configCerticates,\n      headers: authHeaders,\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      data: passport // the user and group info for which we want to create a ticket\n\n    });\n    REST_Log(call, generationUserId);\n  } catch (err) {\n    console.error(\"REST call to request a ticket failed\", err);\n    throw new Meteor.Error(\"Request ticket failed via getRedirectURL\", err.message);\n  }\n\n  console.log(\"The HTTP REQUEST to Sense QPS API:\", call.request);\n  console.log(\"The HTTP RESPONSE from Sense QPS API: \", call.response);\n  var ticketResponse = call.response.data;\n  call.action = \"STEP 6: Use response from our ticket request to create redirect url\";\n  call.request = \"Use the redirect url we got back and the ticket string to make a redirect url for the client. Format: \" + ticketResponse.TargetUri + \"?QlikTicket=\" + ticketResponse.Ticket + \". JSON received: \" + ticketResponse; // REST_Log(call);\n  // Build redirect URL for the client including the ticket\n\n  if (ticketResponse.TargetUri.indexOf(\"?\") > 0) {\n    redirectURI = ticketResponse.TargetUri + \"&QlikTicket=\" + ticketResponse.Ticket;\n  } else {\n    redirectURI = ticketResponse.TargetUri + \"?QlikTicket=\" + ticketResponse.Ticket;\n  }\n\n  if (!redirectURI) {\n    if (Meteor.settings.public.useSSL) {\n      redirectURI = \"https://\" + senseConfig.host + \":\" + senseConfig.qlikSensePortSecure + \"/\" + senseConfig.virtualProxyClientUsage + \"/\" + hub;\n    } else {\n      redirectURI = \"http://\" + senseConfig.host + \":\" + senseConfig.port + \"/\" + senseConfig.virtualProxyClientUsage + \"/\" + hub;\n    }\n  }\n\n  console.log(\"Meteor server side created this redirect url: \", redirectURI);\n  return redirectURI;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QRSAPI.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QRSAPI.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst module1 = module;\nmodule1.export({\n  myQRS: () => myQRS\n});\nlet Meteor;\nmodule1.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet http;\nmodule1.watch(require(\"meteor/meteor\"), {\n  http(v) {\n    http = v;\n  }\n\n}, 1);\nlet configCerticates, senseConfig, authHeaders, qrsSrv;\nmodule1.watch(require(\"/imports/api/config\"), {\n  configCerticates(v) {\n    configCerticates = v;\n  },\n\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  },\n\n  qrsSrv(v) {\n    qrsSrv = v;\n  }\n\n}, 2);\n\nvar myQRS = function myQRSMain() {\n  this.get = function get(path, params = {}, data = {}) {\n    var endpoint = checkPath(path);\n    console.log('QRS module received GET request for endpoint', endpoint); // copy the params to one object\n\n    var newParams = Object.assign({\n      xrfkey: senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.get(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: {}\n      });\n\n      try {\n        console.log('QRS GET result: response.data length: ', response.data.length);\n        return response.data;\n      } catch (error) {\n        console.log('------------------------------------');\n        console.error('We did not get any data back from Qlik Sense (empty array). If you do not expect this, make sure you check the udc, username in the settings file.');\n        console.log('------------------------------------');\n      }\n    } catch (err) {\n      var error = 'QRS HTTP GET FAILED FOR ' + endpoint;\n      console.error(err);\n      throw new Meteor.Error(500, 'This node server can not connect to Qlik Sense. Sometimes you have to wait 10 minutes after restarting... ' + error);\n    }\n  };\n\n  this.post = function post(path, params = {}, data = {}) {\n    var endpoint = checkPath(path); // copy the params to one object\n\n    var newParams = Object.assign({\n      'xrfkey': senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.post(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: data\n      });\n      return response.data;\n    } catch (err) {\n      console.error('HTTP POST FAILED FOR ' + endpoint, err);\n    }\n  };\n\n  this.del = function del(path, params = {}, data = {}) {\n    var endpoint = checkPath(path);\n    console.log('endpoint', endpoint);\n    console.log('data', data); // copy the params to one object.\n\n    var newParams = Object.assign({\n      xrfkey: senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.del(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: data\n      }); // console.log('response', response)\n\n      return response.data;\n    } catch (err) {\n      console.error('QRS HTTP DEL FAILED FOR ' + endpoint, err);\n    }\n  };\n\n  this.put = function put(path, params = {}, data = {}) {\n    var endpoint = checkPath(path); // copy the params to one object\n\n    var newParams = Object.assign({\n      'xrfkey': senseConfig.xrfkey\n    }, params);\n\n    try {\n      var response = HTTP.put(endpoint, {\n        npmRequestOptions: configCerticates,\n        params: newParams,\n        data: data\n      });\n      return response.data;\n    } catch (err) {\n      console.error('HTTP PUT FAILED FOR ' + endpoint, err);\n    }\n  };\n};\n\nfunction checkPath(path) {\n  console.log('checkPath: path', path);\n  console.log('checkPath: qrsSrv', qrsSrv);\n\n  try {\n    check(path, String);\n    check(qrsSrv, String);\n  } catch (err) {\n    throw Error(\"QRS module can not use an empty server: \" + qrsSrv + \" or path: \" + path + \" for the QRS API, settings.json correct?\");\n  }\n\n  return qrsSrv + path;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QRSFunctionsApp.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QRSFunctionsApp.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  uploadAndPublishTemplateApps: () => uploadAndPublishTemplateApps,\n  generateStreamAndApp: () => generateStreamAndApp,\n  setAppIDs: () => setAppIDs,\n  createAppConnections: () => createAppConnections,\n  createAppConnection: () => createAppConnection,\n  copyApp: () => copyApp,\n  getApps: () => getApps,\n  deleteApp: () => deleteApp,\n  publishApp: () => publishApp,\n  importApp: () => importApp\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet http;\nmodule.watch(require(\"meteor/meteor\"), {\n  http(v) {\n    http = v;\n  }\n\n}, 1);\nlet Apps, TemplateApps, GeneratedResources;\nmodule.watch(require(\"/imports/api/apps\"), {\n  Apps(v) {\n    Apps = v;\n  },\n\n  TemplateApps(v) {\n    TemplateApps = v;\n  },\n\n  GeneratedResources(v) {\n    GeneratedResources = v;\n  }\n\n}, 2);\nlet QSStream;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsStream\"), {\n  \"*\"(v) {\n    QSStream = v;\n  }\n\n}, 3);\nlet gitHubLinks;\nmodule.watch(require(\"/imports/ui/UIHelpers\"), {\n  gitHubLinks(v) {\n    gitHubLinks = v;\n  }\n\n}, 4);\nlet Streams;\nmodule.watch(require(\"/imports/api/streams\"), {\n  Streams(v) {\n    Streams = v;\n  }\n\n}, 5);\nlet Customers;\nmodule.watch(require(\"/imports/api/customers\"), {\n  Customers(v) {\n    Customers = v;\n  }\n\n}, 6);\nlet createVirtualProxies;\nmodule.watch(require(\"/imports/api/server/QPSFunctions\"), {\n  createVirtualProxies(v) {\n    createVirtualProxies = v;\n  }\n\n}, 7);\n\nlet qlikHDRServer, senseConfig, enigmaServerConfig, qrsSrv, qrs, configCerticates, _slideGeneratorAppId;\n\nmodule.watch(require(\"/imports/api/config.js\"), {\n  qlikHDRServer(v) {\n    qlikHDRServer = v;\n  },\n\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  enigmaServerConfig(v) {\n    enigmaServerConfig = v;\n  },\n\n  qrsSrv(v) {\n    qrsSrv = v;\n  },\n\n  qrs(v) {\n    qrs = v;\n  },\n\n  configCerticates(v) {\n    configCerticates = v;\n  },\n\n  _slideGeneratorAppId(v) {\n    _slideGeneratorAppId = v;\n  }\n\n}, 8);\nlet APILogs, REST_Log;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  APILogs(v) {\n    APILogs = v;\n  },\n\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 9);\nlet lodash;\nmodule.watch(require(\"lodash\"), {\n  default(v) {\n    lodash = v;\n  }\n\n}, 10);\n_ = lodash; //\n// ─── INSTALL NPM MODULES ────────────────────────────────────────────────────────\n//\n\nconst path = require('path');\n\nconst fs = require('fs-extra');\n\nconst enigma = require('enigma.js');\n\nvar promise = require('bluebird');\n\nvar request = require('request');\n\nvar sanitize = require(\"sanitize-filename\"); //\n// ─── UPLOAD APPS FOR THE INITIAL SETUP OF QLIK SENSE ─────────────────────────\n//\n// UPLOAD TEMPLATES APPS FROM FOLDER, AND PUBLISH INTO THE TEMPLATES STREAM\n\n\nfunction uploadAndPublishTemplateApps() {\n  return Promise.asyncApply(() => {\n    console.log('------------------------------------');\n    console.log('uploadAndPublishTemplateApps');\n    console.log('------------------------------------');\n    var newFolder = path.join(Meteor.settings.broker.automationBaseFolder, 'apps');\n    console.log('uploadAndPublishTemplateApps: Read all files in the template apps folder \"' + newFolder + '\" and upload them to Qlik Sense.'); //GET THE ID OF THE IMPORTANT STREAMS (streams that QRSMeteor needs)\n\n    var everyOneStreamId = QSStream.getStreamByName(Meteor.settings.broker.qlikSense.EveryoneAppStreamName).id;\n    var templateStreamId = QSStream.getStreamByName(Meteor.settings.public.TemplateAppStreamName).id;\n    var APIAppsStreamID = QSStream.getStreamByName(Meteor.settings.broker.qlikSense.APIAppStreamName).id;\n\n    try {\n      check(newFolder, String);\n      check(everyOneStreamId, String);\n      check(templateStreamId, String);\n      check(APIAppsStreamID, String);\n    } catch (err) {\n      console.error('You did not specify the templateAppsFrom, everyone, api apps or template stream name in the settings.json file?');\n      throw new Meteor.Error('Missing Settings', 'You did not specify the everone, api apps or template stream name in the settings.json file?');\n    } // LOAD ALL SENSE APPS IN FOLDER\n\n\n    var appsInFolder = Promise.await(fs.readdir(newFolder)); // FOR EACH APP FOUND: PUBLISH IT    \n\n    return Promise.await(Promise.all(appsInFolder.map(QVF => Promise.asyncApply(() => {\n      try {\n        //GET THE NAME OF THE APP AND CREATE A FILEPATH\n        var appName = QVF.substr(0, QVF.indexOf('.'));\n        var filePath = path.join(newFolder, QVF); //ONLY UPLOAD APPS IF THEY DO NOT ALREADY EXIST\n\n        if (!getApps(appName).length) {\n          //UPLOAD THE APP, GET THE APP ID BACK\n          var appId = Promise.await(uploadApp(filePath, appName)); //BASED ON THE APP WE WANT TO PUBLISH IT INTO A DIFFERENT STREAM                      \n\n          if (appName === 'SSBI') {\n            //should be published in the everyone stream\n            _SSBIApp = appId; // for the client side HTML/IFrames etc.                                \n\n            publishApp(appId, appName, everyOneStreamId);\n          } else if (appName === 'Sales') {\n            //THIS ONE NEEDS TO BE COPIED AND PUBLISHED INTO 2 STREAMS: AS TEMPLATE AND FOR THE EVERYONE STREAM.\n            publishApp(appId, appName, everyOneStreamId);\n            var copiedAppId = copyApp(appId, appName);\n            publishApp(copiedAppId, appName, templateStreamId);\n          } else if (appName === 'Slide generator') {\n            _slideGeneratorAppId = appId, publishApp(appId, appName, APIAppsStreamID);\n          } else {\n            //Insert into template apps stream\n            publishApp(appId, appName, templateStreamId);\n          }\n        } else {\n          console.log('App ' + appName + ' already exists in Qlik Sense');\n        }\n\n        ;\n      } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('Unable to upload the app to Qlik Sense. ', err);\n      }\n    }))));\n  });\n}\n\nfunction generateStreamAndApp(customers, generationUserId) {\n  return Promise.asyncApply(() => {\n    console.log('METHOD called: generateStreamAndApp for the template apps as stored in the database of the fictive OEM');\n\n    try {\n      var templateApps = checkTemplateAppExists(generationUserId); //is a template app selected, and does the guid still exist in Sense? if yes, return the valid templates\n\n      checkCustomersAreSelected(customers); //have we selected a  customer to do the generation for?\n\n      console.log('------------------------------------');\n      console.log('start generation for ', customers);\n      console.log('------------------------------------');\n\n      for (const customer of customers) {\n        for (const templateApp of templateApps) {\n          Promise.await(generateAppForTemplate(templateApp, customer, generationUserId));\n        }\n      }\n\n      ;\n    } catch (error) {\n      console.error(error);\n    }\n  });\n}\n\n;\n\nfunction setAppIDs(params) {\n  console.log('------------------------------------');\n  console.log('SET APP IDs');\n  console.log('------------------------------------');\n\n  try {\n    console.log('check if all settings.json parameters are set...');\n    check(Meteor.settings.public.slideGenerator, {\n      name: String,\n      stream: String,\n      selectionSheet: String,\n      dataObject: String,\n      slideObject: String,\n      virtualProxy: String\n    });\n    check(Meteor.settings.public.SSBI, {\n      name: String,\n      stream: String,\n      sheetId: String,\n      appId: String\n    });\n  } catch (err) {\n    console.error('Missing parameters in your settings.json file for the SSBI or slidegenerator...', err);\n  }\n\n  try {\n    var slideGeneratorApps = getApps(Meteor.settings.public.slideGenerator.name, Meteor.settings.public.slideGenerator.stream);\n    var SSBIApps = getApps(Meteor.settings.public.SSBI.name, Meteor.settings.public.SSBI.stream);\n\n    if (slideGeneratorApps.length > 1) {\n      throw new Error('Can not automatically set the app ID for the slide generator. You have not one but you have multiple slide generator apps under the name ' + Meteor.settings.public.slideGenerator.name + ' in the stream ' + Meteor.settings.public.slideGenerator.stream);\n    }\n\n    if (SSBIApps.length > 1) {\n      throw new Error('Can not automatically set the app ID for the Self Service BI app. You have not one but you have multiple Self Service apps under the name ' + Meteor.settings.public.SSBI.name + ' in the stream ' + Meteor.settings.public.SSBI.stream);\n    }\n\n    senseConfig.SSBIApp = SSBIApps[0].id; //\n\n    console.log('The SSBI app id has been set to ', senseConfig.SSBIApp);\n    senseConfig.slideGeneratorAppId = slideGeneratorApps[0].id;\n    console.log('The slide generator app id has been set to ', senseConfig.slideGeneratorAppId);\n    console.log('------------------------------------');\n    console.log('YOU HAVE SUCCESFULLY STARTED QRSMETEOR, WE ARE CONNECTED TO QLIK SENSE');\n    console.log('------------------------------------');\n  } catch (err) {\n    console.error(err);\n    throw new Meteor.Error('The slideGenerator or Self Service BI app can not be found in Qlik sense, or you did not have all parameters set as defined in the the settings.json example file.', err);\n  }\n}\n\nfunction generateAppForTemplate(templateApp, customer, generationUserId) {\n  return Promise.asyncApply(() => {\n    console.log('--------------------------GENERATE APPS FOR TEMPLATE'); // console.log(templateApp);\n    // console.log('############## START CREATING THE TEMPLATE ' + templateApp.name + ' FOR THIS CUSTOMER: ' + customer.name + ' FOR generationUserId: ' + generationUserId);\n\n    const call = {};\n    call.action = 'Start of generation of app ' + templateApp.name + ' for ' + customer.name;\n    call.createdBy = generationUserId;\n    call.request = 'Start creating app ' + templateApp.name + ' for customer ' + customer.name;\n    REST_Log(call, generationUserId);\n\n    try {\n      var streamId = checkStreamStatus(customer, generationUserId); //create a stream for the customer if it not already exists \n\n      var customerDataFolder = Promise.await(createDirectory(customer.name)); //for data like XLS/qvd specific for a customer\n\n      if (Meteor.settings.broker.createDataConnectionPerCustomer) {\n        Promise.await(createAppConnection('folder', customer.name, customerDataFolder));\n      }\n\n      var newAppId = copyApp(templateApp.id, templateApp.name, generationUserId);\n      var result = reloadAppAndReplaceScriptviaEngine(newAppId, templateApp.name, streamId, customer, customerDataFolder, '', generationUserId);\n      var publishedAppId = publishApp(newAppId, templateApp.name, streamId, customer.name, generationUserId); //logging only\n\n      const call = {};\n      call.action = 'Finished generation for ' + customer.name;\n      call.request = templateApp.name + ' has been created and reloaded with data from the ' + customer.name + ' database';\n      REST_Log(call, generationUserId);\n      console.log('############## FINISHED CREATING THE TEMPLATE ' + templateApp.name + ' FOR THIS CUSTOMER: ' + customer.name);\n      GeneratedResources.insert({\n        'generationUserId': generationUserId,\n        'customer': customer.name,\n        'streamId': streamId,\n        'appId': newAppId\n      });\n    } catch (err) {\n      console.error('Failed to generate...', err);\n      throw new Meteor.Error('Generation failed', 'The server has an internal error, please check the server command logs');\n    }\n\n    return;\n  });\n}\n\n; //Example to demo that you can also use the Engine API to get all the apps, or reload an app, set the script etc.\n//source based on loic's work: https://github.com/pouc/qlik-elastic/blob/master/app.js\n\nfunction reloadAppAndReplaceScriptviaEngine(appId, newAppName, streamId, customer, customerDataFolder, scriptReplace, generationUserId) {\n  return Promise.asyncApply(() => {\n    console.log('--------------------------REPLACE SCRIPT AND RELOAD APP'); //set the app ID to be used in the enigma connection to the engine API\n\n    var config = Object.assign({}, enigmaServerConfig);\n    config.appId = appId;\n\n    try {\n      process.on('unhandledRejection', up => {//ignore \n      });\n      check(appId, String);\n      check(customer.name, String);\n      check(customerDataFolder, String);\n      check(generationUserId, String); //connect to the engine\n\n      var qix = Promise.await(enigma.getService('qix', config));\n      var call = {};\n      call.action = 'Connect to Qlik Sense';\n      call.request = 'Connect to Engine API (using Enigma.js) using an appId: ' + appId;\n      call.url = gitHubLinks.replaceAndReloadApp;\n      REST_Log(call, generationUserId);\n      /* try {\n          //create folder connection \n          console.log('create folder connection, if you see a warning below that means the connection already existed.');\n          var qConnectionId = await qix.createConnection({\n              \"qName\": customer.name,\n              \"qType\": \"folder\",\n              \"qConnectionString\": customerDataFolder\n          })\n          var call = {};\n          call.action = 'Create data/folder connection';\n          call.url = '';\n          call.request = 'Link to a folder on the server where users can put files/QVD, or create a REST/ODBC/OLEDB... database connection.';\n          call.response = 'created folder connection: ' + qConnectionId;\n          console.log('created folder connection: ', qConnectionId);\n      } catch (error) {\n          console.info('No issue, existing customer so his data folder connection already exists', error);\n      } */\n      //get the script\n\n      var script = Promise.await(qix.getScript());\n      var call = {};\n      call.action = 'Get data load script';\n      call.url = gitHubLinks.getScript;\n      call.request = 'We extracted the following load script from the app';\n      call.response = script;\n      REST_Log(call, generationUserId); //set the new script\n\n      var call = {};\n      call.response = Promise.await(qix.setScript(replaceScript(script))); //we now just include the old script in this app\n\n      call.action = 'Insert customer specific data load script for its database';\n      call.url = gitHubLinks.setScript;\n      call.request = 'The script of the app has been replaced with a customer specific one. Normally you would replace the database connection for each customer. Or you can insert a customer specific script to enable customization per customer. ';\n      REST_Log(call, generationUserId); //reload the app\n\n      var call = {};\n      call.response = Promise.await(qix.doReload());\n      call.action = 'Reload the app';\n      call.url = gitHubLinks.reloadApp;\n      call.request = 'Has the app been reloaded with customer specific data?';\n      REST_Log(call, generationUserId); //save the app\n\n      var call = {};\n      call.action = 'Save app';\n      call.url = gitHubLinks.saveApp;\n      call.request = 'App with GUID ' + appId + ' has been saved to disk';\n      REST_Log(call, generationUserId);\n      Promise.await(qix.doSave());\n      REST_Log(call, generationUserId);\n      process.on('unhandledRejection', up => {\n        throw up;\n      });\n    } catch (error) {\n      console.error('error in reloadAppAndReplaceScriptviaEngine via Enigma.JS, did you used the correct schema definition in the settings.json file?', error);\n    }\n\n    function replaceScript(script) {\n      //var scriptMarker = '§dummyDatabaseString§';\n      // if you want to replace the database connection per customer use the script below.\n      //return doc.setScript(script.replace(scriptMarker, scriptReplace)).then(function (result) {\n      //you can also change the sense database connection: https://github.com/mindspank/qsocks/blob/master/examples/App/create-dataconnection.js\n      return script;\n    }\n  });\n}\n\nfunction createAppConnections() {\n  return Promise.asyncApply(() => {\n    console.log('------------------------------------');\n    console.log('create app connections');\n    console.log('------------------------------------'); //create the default demo import folder where all the csv and qvf files are...\n\n    var senseDemoMaterials = path.join(Meteor.absolutePath, 'Sense Demo materials');\n    console.log('senseDemoMaterials', senseDemoMaterials);\n    Promise.await(createAppConnection('folder', 'Import demo', senseDemoMaterials));\n\n    for (let c of Meteor.settings.broker.dataConnections) {\n      Promise.await(createAppConnection(c.type, c.name, c.connectionString));\n    }\n  });\n}\n\nfunction createAppConnection(type, name, path) {\n  return Promise.asyncApply(() => {\n    //set the app ID to be used in the enigma connection to the engine API\n    var config = Object.assign({}, enigmaServerConfig);\n    config.appId = getApps('sales', 'Everyone')[0].id;\n    console.log('createAppConnection: ' + type + ' ' + name + ' ' + path + ' using the sales app in the everyone stream to create the connection: ' + config.appId);\n\n    try {\n      check(type, String);\n      check(path, String);\n      check(name, String);\n      check(config.appId, String);\n    } catch (error) {\n      console.error('Missing parameters to create a data connection', error);\n    }\n\n    try {\n      //connect to the engine\n      var qix = Promise.await(enigma.getService('qix', config)); //create folder connection \n\n      console.log('create folder connection, if you see a warning below that means the connection already existed.');\n      var qConnectionId = Promise.await(qix.createConnection({\n        \"qName\": name,\n        \"qType\": type,\n        \"qConnectionString\": path\n      }));\n      console.log('created folder connection: ', qConnectionId);\n    } catch (error) {\n      console.error('Failed to create data connection', error);\n    }\n  });\n}\n\nfunction deleteDirectoryAndDataConnection(customerName) {\n  console.log('deleteDirectoryAndDataConnection'); //@TODO a bit dangerous, so better to do by hand. Make sure you can't delete root folder... \n  // https://stackoverflow.com/questions/18052762/remove-directory-which-is-not-empty\n}\n\nfunction createDirectory(customerName) {\n  return Promise.asyncApply(() => {\n    console.log('createDirectory ', customerName);\n\n    try {\n      check(customerName, String);\n      var filename = sanitize(customerName);\n      const dir = path.join(Meteor.settings.broker.customerDataDir, customerName);\n      console.log('Meteor.settings.broker.customerDataDir', dir);\n      Promise.await(fs.ensureDir(dir));\n      return dir;\n    } catch (error) {\n      throw new Meteor.Error('Failed to create directory for ', customerName);\n    }\n  });\n}\n\nfunction checkCustomersAreSelected(customers) {\n  if (!customers.length) {\n    // = 0\n    throw new Meteor.Error('No customers', 'user has not specified at least one customer for which an app can be generated');\n  }\n}\n\n; // CHECK IF SELECTED TEMPLATE APP EXISTS IN QLIK SENSE\n//These are the apps that the OEM partner has in his database, but do they still exists on the qliks sense side?\n\nfunction checkTemplateAppExists(generationUserId) {\n  console.log('------------------------------------');\n  console.log('checkTemplateAppExists for userID ', generationUserId);\n  console.log('------------------------------------');\n  var templateApps = TemplateApps.find({\n    'generationUserId': Meteor.userId()\n  }).fetch();\n  return templateApps; // console.log('templateApps found: ', templateApps)\n  // if (templateApps.length === 0) { //user has not specified a template\n  //     throw new Meteor.Error('No Template', 'user has not specified a template for which apps can be generated');\n  // }\n  // currentAppsInSense = getApps();\n  // if (!currentAppsInSense) {\n  //     throw new Meteor.Error('No apps have been received from Qlik Sense. Therefore you have selected a Qlik Sense App: ' + templateApp.name + ' with guid: ' + templateApp.id + ' which does not exist in Sense anymore. Have you deleted the template in Sense?');\n  // }\n  // _.each(templateApps, function(templateApp) {\n  //     console.log('templateApp in MongoDB: ', templateApp)\n  //     var templateFound = _.some(currentAppsInSense, ['id', templateApp.id]);\n  //     if (!templateFound) {\n  //         console.log('------------------------------------');\n  //         console.log('!! template app exists in mongoDB but not in Qlik Sense');\n  //         console.log('------------------------------------');\n  //         throw new Meteor.Error('You have selected a Qlik Sense App: ' + templateApp.name + ' with guid: ' + templateApp.id + ' which does not exist in Sense anymore. Have you deleted the template in Sense?');\n  //     } else {\n  //         console.log('checkTemplateAppExists: True, template guid exist: ', templateApp.id);\n  //     }\n  // })\n  // return templateApps;\n}\n\n; //\n// ─── UPLOAD APP ─────────────────────────────────────────────────────────────────\n//\n\nfunction uploadApp(filePath, appName) {\n  return Promise.asyncApply(() => {\n    console.log('Upload app: ' + appName + ' from path: ' + filePath + ' via header authentication server: ' + qlikHDRServer);\n    return Promise.await(new Promise(function (resolve, reject) {\n      var formData = {\n        my_file: fs.createReadStream(filePath)\n      };\n\n      try {\n        request.post({\n          url: qlikHDRServer + '/qrs/app/upload?name=' + appName + '&xrfkey=' + senseConfig.xrfkey,\n          headers: {\n            'Content-Type': 'application/vnd.qlik.sense.app',\n            'hdr-usr': senseConfig.headerValue,\n            'X-Qlik-xrfkey': senseConfig.xrfkey\n          },\n          formData: formData\n        }, function (error, res, body) {\n          if (!error) {\n            var appId = JSON.parse(body).id;\n            console.log('Uploaded \"' + appName + '.qvf\" to Qlik Sense and got appID: ' + appId);\n            resolve(appId);\n          } else {\n            console.error(\"Failed to upload app\" + appName, error);\n            reject(error);\n          }\n        });\n      } catch (error) {\n        console.error('failed to upload app', error);\n      }\n    }));\n  });\n} //\n// ─── COPYAPP ────────────────────────────────────────────────────────────────────\n//\n\n\nfunction copyApp(guid, name, generationUserId) {\n  check(guid, String);\n  check(name, String); // console.log('QRS Functions copy App, copy the app id: ' + guid + ' to app with name: ', name);\n\n  const call = {};\n\n  try {\n    call.request = qrsSrv + '/qrs/app/' + guid + '/copy';\n    call.response = HTTP.post(call.request, {\n      'npmRequestOptions': configCerticates,\n      params: {\n        'xrfkey': senseConfig.xrfkey,\n        \"name\": name\n      },\n      data: {}\n    });\n    REST_Log(call, generationUserId);\n    var newGuid = call.response.data.id; // console.log('Step 2: the new app id is: ', newGuid);\n    //addTag('App', newGuid);\n\n    return newGuid;\n  } catch (err) {\n    console.error(err);\n    call.action = 'Copy app FAILED';\n    call.response = err.message;\n    REST_Log(call, generationUserId);\n    throw new Meteor.Error('Copy app for selected customers failed', err.message);\n  }\n}\n\n; //\n// ─── CHECKSTREAMSTATUS ──────────────────────────────────────────────────────────\n//\n\nfunction checkStreamStatus(customer, generationUserId) {\n  console.log('checkStreamStatus for: ' + customer.name); //first update the list of streams we have from Sense. (we keep a private copy, which should reflect the state of Sense)\n\n  Meteor.call('updateLocalSenseCopyStreams');\n  var stream = Streams.findOne({\n    name: customer.name\n  }); //Find the stream for the name of the customer in Mongo, and get his Id from the returned object\n\n  var streamId = '';\n\n  if (stream) {\n    console.log('Stream already exists: ', stream.id);\n    streamId = stream.id;\n  } else {\n    console.log('No stream for customer exist, so create one: ' + customer.name);\n    streamId = QSStream.createStream(customer.name, generationUserId).id;\n    console.log('Step 1: the (new) stream ID for ' + customer.name + ' is: ', streamId);\n  }\n\n  return streamId;\n} //\n// ─── GETAPPS ────────────────────────────────────────────────────────────────────\n//    \n\n\nfunction getApps(name, stream) {\n  console.log('getApps ' + name + ' with stream: ' + stream);\n  var path = '/qrs/app/full'; //if a name/stream is provided only search the apps with this name\n\n  if (name) {\n    path += \"?filter=Name eq '\" + name + \"'\";\n\n    if (stream) {\n      path += \" and stream.name eq '\" + stream + \"'\";\n      console.log('getApps(name: ' + name + ' and stream ' + stream + ' via API path: ' + path);\n    }\n  } else {\n    console.log('getApps via API path: ' + path);\n  }\n\n  var call = {\n    action: 'Get list of apps',\n    request: path\n  }; // REST_Log(call,generationUserId);\n\n  try {\n    return qrs.get(call.request);\n  } catch (error) {\n    console.error('Error while getting the apps via the QRS API: we can not connect to Qlik Sense');\n    console.log(error);\n  }\n}\n\n; //\n// ─── DELETEAPP ──────────────────────────────────────────────────────────────────\n//\n\nfunction deleteApp(guid, generationUserId = 'Not defined') {\n  console.log('QRSApp deleteApp: ', guid);\n\n  try {\n    const call = {};\n    call.request = qrsSrv + '/qrs/app/' + guid;\n    call.response = HTTP.del(call.request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates,\n      data: {}\n    }); // Meteor.call('updateLocalSenseCopy');\n    //logging only\n\n    call.action = 'Delete app';\n    call.url = gitHubLinks.deleteApp;\n    call.response = call.response;\n    REST_Log(call, generationUserId);\n    return call.response;\n  } catch (err) {\n    console.error(err);\n    throw new Meteor.Error('App delete failed', err.message);\n  }\n}\n\n; //\n// ─── PUBLISHAPP ─────────────────────────────────────────────────────────────────\n//\n\nfunction publishApp(appGuid, appName, streamId, customerName, generationUserId) {\n  console.log('Publish app: ' + appName + ' to stream: ' + streamId);\n  check(appGuid, String);\n  check(appName, String);\n  check(streamId, String);\n\n  try {\n    const call = {};\n    call.request = qrsSrv + '/qrs/app/' + appGuid + '/publish?name=' + appName + '&stream=' + streamId;\n    call.response = HTTP.put(call.request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates,\n      data: {}\n    }); //logging into database\n\n    call.action = 'Publish app';\n    call.url = gitHubLinks.publishApp;\n    REST_Log(call, generationUserId);\n    return call.response;\n  } catch (err) {\n    console.error(err); // // IF APP ALREADY EXISTED TRY TO PUBLISH OVERWRITE IT (REPLACE)\n    // if(err.response.statusCode == 400){\n    //     replaceApp()\n    // }\n    // console.error('statusCode:', err.response.statusCode);\n    // console.info('Try to PUBLISH OVERWRITE THE APP, SINCE IT WAS ALREADY PUBLISHED');\n\n    throw new Meteor.Error('Publication of app ' + appName + ' for customer ' + customerName + ' failed: ', err.message);\n  }\n}\n\n; // REPLACE APP \n// export function replaceApp(targetApp, replaceByApp, generationUserId) {\n//     console.log('Function: Replace app: ' + targetApp + ' by app ' + targetApp);\n//     check(appGuid, String);\n//     check(replaceByApp, String);\n//     try {\n//         const result = HTTP.put(qlikHDRServer + '/qrs/app/' + replaceByApp + '/replace?app=' + targetApp + '&xrfkey=' + senseConfig.xrfkey, {\n//             headers: {\n//                 'hdr-usr': senseConfig.headerValue,\n//                 'X-Qlik-xrfkey': senseConfig.xrfkey\n//             }\n//         });\n//         //logging into database\n//         const call = {};\n//         call.action = 'Replace app';\n//         call.request = 'HTTP.put(' + qlikHDRServer + '/qrs/app/' + replaceByApp + '/replace?app=' + targetApp + '&xrfkey=' + senseConfig.xrfkey;\n//         call.response = result;\n//         call.url = 'http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-App-Replace.htm';\n//         REST_Log(call, generationUserId);\n//         return result;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Publication of app ' + appName + ' for customer ' + customerName + ' failed: ', err.message);\n//     }\n// };\n// function createTag(name) {\n//     check(name, String);\n//     // console.log('QRS Functions Appp, create a tag: ' + name);\n//     try {\n//         const result = HTTP.post(qlikHDRServer + '/qrs/Tag', {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             },\n//             data: {\n//                 \"name\": name\n//             }\n//         })\n//         //logging only\n//         const call = {};\n//         call.action = 'create Tag';\n//         call.request = 'HTTP.get(http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/tag';\n//         call.response = result;\n//         REST_Log(call, generationUserId);\n//         return result;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Tag: ' + name + ' create failed ', err.message);\n//     }\n// };\n// function addTag(type, guid, tagName) {\n//     check(type, String);\n//     check(guid, String);\n//     //check if tag with tagName already exists\n//     var selectionId = createSelection(type, guid);\n//     addTagViaSyntheticToType('App', selectionId, tagGuid)\n// }\n// function createSelection(type, guid) {\n//     check(type, String);\n//     check(guid, String);\n//     console.log('QRS Functions APP, create selection for type: ', type + ' ' + guid);\n//     try {\n//         const result = HTTP.post(qlikHDRServer + '/qrs/Selection', {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             },\n//             data: {\n//                 items: [{\n//                     type: type,\n//                     objectID: guid\n//                 }]\n//             }\n//         })\n//         console.log('the result of selection for type: ', type + ' ' + guid);\n//         console.log(result);\n//         return result.id;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Selection: ' + type + ' failed for guid ' + guid, err.message);\n//     }\n// };\n// function deleteSelection(selectionId) {\n//     check(selectionId, String);\n//     console.log('QRS Functions APP, deleteSelection selection for selectionId: ', selectionId);\n//     try {\n//         const result = HTTP.delete(qlikHDRServer + '/qrs/Selection/' + selectionId, {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             }\n//         })\n//         console.log(result);\n//         return result.id;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Selection delete failed: ', err.message);\n//     }\n// };\n// function buildModDate() {\n//     var d = new Date();\n//     return d.toISOString();\n// }\n// function addTagViaSyntheticToType(type, selectionId, tagGuid) {\n//     check(type, String);\n//     check(guid, String);\n//     console.log('QRS Functions Appp, Update all entities of a specific type: ' + type + ' in the selection set identified by {id} ' + selectionId + ' based on an existing synthetic object. : ');\n//     try {\n//         const result = HTTP.put(qlikHDRServer + '/qrs/Selection/' + selectionId + '/' + type + '/synthetic', {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             },\n//             data: {\n//                 \"latestModifiedDate\": buildModDate(),\n//                 \"properties\": [{\n//                     \"name\": \"refList_Tag\",\n//                     \"value\": {\n//                         \"added\": [tagGuid]\n//                     },\n//                     \"valueIsModified\": true\n//                 }],\n//                 \"type\": type\n//             }\n//         })\n//         console.log('the result of selection for type: ', type + ' ' + guid);\n//         console.log(result);\n//         return result;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Selection: ' + type + ' failed for guid ' + guid, err.message);\n//     }\n// };\n// async function uploadPublishTemplateApps() {\n//     //check if template apps have been uploaded and published in the templates stream\n//     // if (true) { // (!Apps.find({ \"stream.name\": \"Templates\" }).count()) {\n//     console.warn('no template apps found, so upload from the templates dir.');\n//     var folder = Meteor.settings.private.templateAppsFrom;\n//     // var folder = await copyTemplatesToQRSFolder();\n//     console.log('apps folder', folder);\n//     uploadAndPublishApps(folder);\n//     // } else {}\n// }\n// //upload and publish all apps found in the folder to the templates stream\n// async function copyTemplatesToQRSFolder() {\n//     var newFolder = Meteor.settings.private.templateAppsTo + '\\\\' + process.env.USERDOMAIN + '\\\\' + process.env.USERNAME;\n//     try {\n//         await fs.copy(Meteor.settings.private.templateAppsFrom, newFolder, {\n//             overwrite: true\n//         }); //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n//         return newFolder\n//     } catch (err) {\n//         console.error('error copy Templates from ' + Meteor.settings.private.templateAppsFrom + ' To QRSFolder ' + Meteor.settings.private.templateAppsDir, err);\n//     }\n// }\n// For a system service account, the app must be in the %ProgramData%\\Qlik\\Sense\\Repository\\DefaultApps folder.\n// For any other account, the app must be in the %ProgramData%\\Qlik\\Sense\\Apps\\<login domain>\\<login user> folder.\n//so you have to copy your apps there first. in a fresh sense installation.\n\nfunction importApp(fileName, name, generationUserId = 'no user set') {// check(fileName, String);\n  // check(name, String);\n  // console.log('QRS Functions import App, with name ' + name + ', with fileName: ', fileName);\n  // try {\n  //     const call = {};\n  //     call.action = 'Import app';\n  //     call.url = 'http://help.qlik.com/en-US/sense-developer/3.2/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-App-Import-App.htm'\n  //     call.request = qlikHDRServer + '/qrs/app/import?keepData=true&name=' + name + '&xrfkey=' + senseConfig.xrfkey; //using header auth.\n  //     call.response = HTTP.post(call.request, {\n  //         headers: {\n  //             'hdr-usr': senseConfig.headerValue,\n  //             'X-Qlik-xrfkey': senseConfig.xrfkey\n  //         },\n  //         data: '\"Sales.qvf\"'\n  //     });\n  //     REST_Log(call, generationUserId);\n  //     var newGuid = call.response.data.id;\n  //     return newGuid;\n  // } catch (err) {\n  //     console.error(err);\n  //     const call = {};\n  //     call.action = 'Import app FAILED';\n  //     call.response = err.message;\n  //     REST_Log(call, generationUserId);\n  //     throw new Meteor.Error('Import app failed', err.message);\n  // }\n}\n\n; //https://www.npmjs.com/package/request#forms\n// function uploadApp(filePath, fileSize, appName) {\n//     console.log('QRS Functions upload App, with name ' + appName + ', with fileSize: ', fileSize + ' and filePath ' + filePath);\n//     var formData = {\n//         my_file: fs.createReadStream(filePath)\n//     };\n//     request.post({\n//         url: qlikHDRServer + '/qrs/app/upload?name=' + appName + '&xrfkey=' + senseConfig.xrfkey,\n//         headers: {\n//             'Content-Type': 'application/vnd.qlik.sense.app',\n//             'hdr-usr': senseConfig.headerValue,\n//             'X-Qlik-xrfkey': senseConfig.xrfkey\n//         },\n//         formData: formData\n//     }, function optionalCallback(err, httpResponse, body) {\n//         if (err) {\n//             return console.error('upload failed:', err);\n//         }\n//         console.log('Upload successful!  Server responded with:', body);\n//     });\n// }\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QRSFunctionsCustomProperties.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QRSFunctionsCustomProperties.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  createCustomProperty: () => createCustomProperty,\n  upsertCustomPropertyByName: () => upsertCustomPropertyByName,\n  deleteCustomProperty: () => deleteCustomProperty,\n  getCustomProperties: () => getCustomProperties\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet myQRS;\nmodule.watch(require(\"/imports/api/server/QRSAPI\"), {\n  myQRS(v) {\n    myQRS = v;\n  }\n\n}, 1);\nlet senseConfig, qrs;\nmodule.watch(require(\"/imports/api/config.js\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  qrs(v) {\n    qrs = v;\n  }\n\n}, 2);\n\nvar fs = require('fs-extra');\n\nconst path = require('path');\n\nfunction createCustomProperty(name, newProperty) {\n  console.log('------------------------------------');\n  console.log('createCustomProperty', name + ' ' + newProperty.toString());\n  console.log('------------------------------------');\n\n  try {\n    check(name, String);\n    check(newProperty, Object);\n  } catch (err) {\n    throw new Meteor.Error('createCustomProperty: Missing values', 'You did not specify a name or choice values for the custom property');\n  }\n\n  var result = qrs.post('/qrs/CustomPropertyDefinition', null, newProperty);\n  console.log('result of create custom property: ', result);\n}\n\nfunction upsertCustomPropertyByName(name, choiceValues) {\n  try {\n    check(name, String);\n    check(choiceValues, Array);\n  } catch (err) {\n    throw new Meteor.Error('upsertCustomPropertyByName: Missing values', 'You did not specify a name or update object for the custom property');\n  }\n\n  try {\n    var newProperty = {\n      \"name\": name,\n      \"valueType\": \"Text\",\n      \"objectTypes\": [\"App\", \"ContentLibrary\", \"DataConnection\", \"ReloadTask\", \"Stream\", \"User\"],\n      \"choiceValues\": choiceValues\n    };\n    var existingProperty = getCustomProperties(name)[0];\n\n    if (existingProperty) {\n      //update it\n      var updatedProperty = Object.assign(existingProperty, newProperty);\n      var result = qrs.put('/qrs/CustomPropertyDefinition/' + updatedProperty.id, null, updatedProperty); //you can only update when you supply the original modified date, otherwise you get a 409 error. \n\n      console.log('Custom property update: ', result);\n    } else {\n      //create a new one\n      createCustomProperty(name, newProperty);\n    }\n  } catch (error) {\n    console.log('error upserting custom property', error);\n  }\n}\n\nfunction deleteCustomProperty(name) {\n  console.log('deleteCustomProperty(name)', name);\n  var customProperty = getCustomProperties(name)[0];\n\n  if (customProperty) {\n    var result = qrs.del('/qrs/CustomPropertyDefinition/' + customProperty.id);\n    console.log('result after delete', result);\n  }\n}\n\nfunction getCustomProperties(name) {\n  var filter = name ? {\n    filter: \"Name eq '\" + name + \"'\"\n  } : null;\n  var customProperties = qrs.get('/qrs/CustomPropertyDefinition/full', filter);\n  var file = path.join(Meteor.settings.broker.automationBaseFolder, 'customProperties', 'export', 'ExtractedCustomProperties.json'); // SAVE FILE TO DISK\n\n  fs.outputFile(file, JSON.stringify(customProperties, null, 2), 'utf-8');\n  return customProperties;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QRSFunctionsExtension.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QRSFunctionsExtension.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  uploadExtensions: () => uploadExtensions\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet myQRS;\nmodule.watch(require(\"/imports/api/server/QRSAPI\"), {\n  myQRS(v) {\n    myQRS = v;\n  }\n\n}, 1);\nlet qlikHDRServer, senseConfig;\nmodule.watch(require(\"/imports/api/config.js\"), {\n  qlikHDRServer(v) {\n    qlikHDRServer = v;\n  },\n\n  senseConfig(v) {\n    senseConfig = v;\n  }\n\n}, 2);\n\n//\n// ─── INSTALL NPM MODULES ────────────────────────────────────────────────────────\n//\nconst fs = require('fs-extra');\n\nconst path = require('path');\n\nconst enigma = require('enigma.js');\n\nvar promise = require('bluebird');\n\nvar request = require('request');\n\nvar qrs = new myQRS(); // export async function automaticUploadExtensions() {\n//     console.log('Automatically download the extensions from Github and upload to Qlik Sense');\n//     var url = 'https://github.com/kai/qlik-sense-timeline.git';\n//     var req = request.get(url);\n//     console.log('req', req)\n// }\n\nfunction uploadExtensions() {\n  return Promise.asyncApply(() => {\n    console.log('--------------------------UPLOAD EXTENSIONS'); // LOAD ALL EXTENSIONS IN FOLDER\n\n    var extensionsFolder = '';\n\n    try {\n      extensionsFolder = path.join(Meteor.settings.broker.automationBaseFolder, 'extensions');\n      console.log('extensionsFolder', extensionsFolder);\n      var extensions = Promise.await(fs.readdir(extensionsFolder));\n    } catch (err) {\n      throw error('error loading all extensions in folder.', err);\n    } // FOR EACH EXTENSION FOUND, UPLOAD IT    \n\n\n    Promise.await(Promise.all(extensions.map(extension => Promise.asyncApply(() => {\n      console.log('Current extension', extension);\n\n      try {\n        //CREATE A FILEPATH          \n        var filePath = path.join(extensionsFolder, extension); //UPLOAD THE APP, GET THE APP ID BACK\n\n        var result = Promise.await(uploadExtension('', filePath));\n      } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('Unable to upload the app to Qlik Sense. ', err);\n      }\n    }))));\n  });\n}\n\nfunction uploadExtension(password, filePath) {\n  return Promise.asyncApply(() => {\n    console.log('uploadExtension: try to upload extension from path: ' + filePath);\n    var formData = {\n      my_file: fs.createReadStream(filePath)\n    }; // qrs.post('/qrs/extension/upload?pwd=' + password, data)\n\n    return Promise.await(new Promise(function (resolve, reject) {\n      request.post({\n        url: qlikHDRServer + '/qrs/extension/upload?&xrfkey=' + senseConfig.xrfkey,\n        //removed password parameter, assume blank\n        headers: {\n          'hdr-usr': senseConfig.headerValue,\n          'X-Qlik-xrfkey': senseConfig.xrfkey\n        },\n        formData: formData\n      }, function (error, res, body) {\n        if (!error) {\n          try {\n            var id = JSON.parse(body).id;\n            console.log('Uploaded \"' + path.basename(filePath) + ' to Qlik Sense.'); //\n          } catch (err) {\n            console.log('Qlik Sense reported: ', body);\n          }\n\n          resolve();\n        } else {\n          reject(error);\n        }\n      });\n    }));\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QRSFunctionsLicense.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QRSFunctionsLicense.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  getLicense: () => getLicense,\n  insertLicense: () => insertLicense,\n  insertUserAccessRule: () => insertUserAccessRule,\n  getSystemRules: () => getSystemRules,\n  saveSystemRules: () => saveSystemRules\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet myQRS;\nmodule.watch(require(\"/imports/api/server/QRSAPI\"), {\n  myQRS(v) {\n    myQRS = v;\n  }\n\n}, 1);\nlet senseConfig, qrs;\nmodule.watch(require(\"/imports/api/config.js\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  qrs(v) {\n    qrs = v;\n  }\n\n}, 2);\n\nvar fs = require('fs-extra');\n\nconst path = require('path'); //\n// ─── IMPORT CONFIG FOR QLIK SENSE QRS AND ENGINE API ────────────────────────────\n//\n\n\nvar demoUserAccessRule = \"SAAS DEMO - License rule to grant user access\"; // http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-License-Add.htm //\n\nfunction getLicense() {\n  var lic = qrs.get('/qrs/license');\n  return lic;\n}\n\nfunction insertLicense() {\n  console.log('------------------------------------');\n  console.log('INSERT LICENSE');\n  console.log('------------------------------------');\n  var existingLicense = qrs.get('/qrs/license');\n  var newLicense = Meteor.settings.private.license;\n\n  try {\n    console.log('check if all settings.json parameters are set...');\n    check(Meteor.settings.private.license, {\n      serial: String,\n      name: String,\n      organization: String\n    });\n    check(Meteor.settings.private.LicenseControlNumber, Number);\n  } catch (err) {\n    console.error('Missing parameters in your settings.json file for your Qlik Sense license', err);\n  }\n\n  if (!existingLicense) {\n    console.log('No existing license present, therefore inserted license into Qlik Sense.'); // try {\n    //     console.log('Update the existing license');\n    //     newLicense.id = existingLicense.id;\n    //     var response = qrs.del('/qrs/license/' + existingLicense.id);\n    //     // var response = qrs.put('/qrs/license/' + newLicense.id, newLicense, { control: Meteor.settings.private.LicenseControlNumber });\n    //     // console.error('Stop license insertion, license for ' + lic.organization + ' is already included: ', lic.serial);\n    //     // throw Error('You are trying to insert a license while the Qlik Sense is already licensed, please remove the existing one in the QMC');\n    // } catch (err) {\n    //     // lic did not already exist.\n    // }\n\n    var response = qrs.post('/qrs/license', {\n      control: Meteor.settings.private.LicenseControlNumber\n    }, newLicense);\n  }\n}\n\nfunction insertUserAccessRule() {\n  console.log('insert UserAccess Rule for all users');\n  var licenseRule = {\n    \"name\": demoUserAccessRule,\n    \"category\": \"License\",\n    \"rule\": \"((user.name like \\\"*\\\"))\",\n    \"type\": \"Custom\",\n    \"privileges\": [\"create\", \"read\", \"update\"],\n    \"resourceFilter\": \"License.UserAccessGroup_507c9aa5-8812-44d9-ade8-32809785eecf\",\n    \"actions\": 1,\n    \"ruleContext\": \"QlikSenseOnly\",\n    \"disabled\": false,\n    \"comment\": \"Rule to set up automatic user access for each user that has received a ticket via your SaaS platform\",\n    \"disabledActions\": [\"useaccesstype\"]\n  };\n  var ruleExist = getSystemRules(demoUserAccessRule);\n\n  if (typeof ruleExist[0] == 'undefined' || ruleExist.length === 0) {\n    console.log('Create a new user license rule since it did not exist.');\n    var response = qrs.post('/qrs/SystemRule', null, licenseRule);\n  }\n}\n\nfunction getSystemRules(name) {\n  console.log('Get system rules with name: ' + name);\n  var filter = name ? {\n    filter: \"Name eq '\" + name + \"'\"\n  } : null;\n  var rules = qrs.get('/qrs/SystemRule/full', filter);\n  var file = path.join(Meteor.settings.broker.automationBaseFolder, 'securityrules', 'export', 'ExtractedSystemRules.json'); // SAVE FILE TO DISK\n\n  fs.outputFile(file, JSON.stringify(rules, null, 2), 'utf-8');\n  return rules;\n}\n\nfunction saveSystemRules() {\n  var file = path.join(Meteor.settings.broker.automationBaseFolder, 'securityrules', 'export', 'ExtractedSystemRules.json');\n  console.log('------------------------------------');\n  console.log('Save all system rules in ' + file);\n  console.log('------------------------------------');\n  var rules = qrs.get('/qrs/SystemRule');\n\n  try {\n    // SAVE FILE TO DISK\n    fs.outputFile(file, JSON.stringify(rules, null, 2), 'utf-8');\n  } catch (error) {\n    console.error('unable to save systemrules, does the directory exist? Check your automationBaseFolder in your settings.json file, ', error);\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QRSFunctionsStream.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QRSFunctionsStream.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  initSenseStreams: () => initSenseStreams,\n  deleteStream: () => deleteStream,\n  getStreamByName: () => getStreamByName,\n  getStreams: () => getStreams,\n  createStream: () => createStream\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet GeneratedResources;\nmodule.watch(require(\"/imports/api/apps.js\"), {\n  GeneratedResources(v) {\n    GeneratedResources = v;\n  }\n\n}, 1);\nlet gitHubLinks;\nmodule.watch(require(\"/imports/ui/UIHelpers\"), {\n  gitHubLinks(v) {\n    gitHubLinks = v;\n  }\n\n}, 2);\nlet senseConfig, authHeaders, qrsSrv, qrs, configCerticates;\nmodule.watch(require(\"/imports/api/config.js\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  },\n\n  qrsSrv(v) {\n    qrsSrv = v;\n  },\n\n  qrs(v) {\n    qrs = v;\n  },\n\n  configCerticates(v) {\n    configCerticates = v;\n  }\n\n}, 3);\nlet REST_Log;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 4);\nconst qlikServer = 'http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy; //\n// ─── CREATE STREAMS FOR THE INITIAL SETUP OF QLIK SENSE ─────────────────────────\n//\n\nfunction initSenseStreams() {\n  console.log('------------------------------------');\n  console.log('Create initial streams');\n  console.log('------------------------------------');\n\n  for (const streamName of Meteor.settings.broker.qlikSense.StreamsToCreateAutomatically) {\n    try {\n      console.log('Try to create stream: ' + streamName + ' if it not already exists');\n\n      if (!getStreamByName(streamName)) {\n        createStream(streamName);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction deleteStream(guid, generationUserId) {\n  console.log('deleteStream: ', guid);\n\n  try {\n    var request = qrsSrv + '/qrs/stream/' + guid;\n    var response = HTTP.del(request, {\n      'npmRequestOptions': configCerticates\n    }); // Logging\n\n    const call = {};\n    call.action = 'Delete stream';\n    call.request = \"HTTP.del(\" + qlikServer + '/qrs/stream/' + guid + '?xrfkey=' + senseConfig.xrfkey;\n    call.response = response;\n    REST_Log(call, generationUserId);\n    Meteor.call('updateLocalSenseCopy');\n    return response;\n  } catch (err) {// console.error(err);\n    // throw new Meteor.Error('Delete stream failed', err.message);\n  }\n}\n\n; //\n// ─── GET STREAM BY NAME ────────────────────────────────────────────────────────────\n//\n\nfunction getStreamByName(name) {\n  try {\n    var request = qrsSrv + \"/qrs/stream/full?filter=Name eq '\" + name + \"'\";\n    console.log('getStreamByName request', request);\n    var response = HTTP.get(request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates,\n      data: {}\n    });\n    return response.data[0];\n  } catch (err) {\n    console.error(err);\n    throw Error('get streamByName failed', err.message);\n  }\n}\n\nfunction getStreams() {\n  try {\n    const call = {};\n    call.action = 'Get list of streams';\n    call.request = qrsSrv + '/qrs/stream/full';\n    call.response = HTTP.get(call.request, {\n      params: {\n        xrfkey: senseConfig.xrfkey\n      },\n      npmRequestOptions: configCerticates,\n      data: {}\n    }); // REST_Log(call);        \n\n    return call.response.data;\n  } catch (err) {\n    console.error(err);\n    throw new Meteor.Error('getStreams failed', err.message);\n  }\n}\n\n; //\n// ─── CREATE STREAM ──────────────────────────────────────────────────────────────\n//\n\nfunction createStream(name, generationUserId) {\n  console.log('QRS Functions Stream, create the stream with name', name);\n\n  try {\n    check(name, String);\n    var response = qrs.post('/qrs/stream', null, {\n      name: name\n    }); // Meteor.call('updateLocalSenseCopy');\n    //logging\n\n    const call = {\n      action: 'Create stream',\n      url: gitHubLinks.createStream,\n      request: \"HTTP.post(qlikServer + '/qrs/stream', { headers: \" + JSON.stringify(authHeaders) + \", params: { 'xrfkey': \" + senseConfig.xrfkey + \"}, data: { name: \" + name + \"}}) --> USE OF HEADER AUTH ONLY FOR DEMO/REVERSE PROXY PURPOSES\",\n      response: response\n    };\n    REST_Log(call, generationUserId);\n    console.log('Create stream call.response;', call.response);\n    return call.response;\n  } catch (err) {\n    console.error(err);\n    throw new Meteor.Error('Create stream failed ', err.message);\n  }\n}\n\n;\nMeteor.methods({\n  deleteStream(guid) {\n    check(guid, String); //logging only\n\n    const call = {};\n    call.action = 'Delete stream';\n    call.request = 'Delete stream: ' + guid;\n    REST_Log(call);\n    const id = deleteStream(guid, Meteor.userId());\n    Meteor.call('updateLocalSenseCopy');\n    return id;\n  },\n\n  createStream(name) {\n    const streamId = createStream(name);\n    Meteor.call('updateLocalSenseCopy'); //store in the database that the user generated something, so we can later on remove it.\n\n    GeneratedResources.insert({\n      'generationUserId': Meteor.userId(),\n      'customer': null,\n      'streamId': streamId.data.id,\n      'appId': null\n    });\n    return streamId;\n  },\n\n  getStreams() {\n    return getStreams();\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"QRSFunctionsSystemRules.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/server/QRSFunctionsSystemRules.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  getSecurityRules: () => getSecurityRules,\n  disableDefaultSecurityRules: () => disableDefaultSecurityRules,\n  createSecurityRules: () => createSecurityRules\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet qrs, validateJSON;\nmodule.watch(require(\"/imports/api/config.js\"), {\n  qrs(v) {\n    qrs = v;\n  },\n\n  validateJSON(v) {\n    validateJSON = v;\n  }\n\n}, 1);\nlet QSLic;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsLicense\"), {\n  \"*\"(v) {\n    QSLic = v;\n  }\n\n}, 2);\n\n// import { APILogs } from '/imports/api/APILogs';\nvar fs = require('fs-extra');\n\nconst path = require('path');\n\nfunction getSecurityRules(name) {\n  return QSLic.getSystemRules(name);\n}\n\nfunction disableDefaultSecurityRules() {\n  console.log('------------------------------------');\n  console.log('disable Default SecurityRules');\n  console.log('------------------------------------');\n\n  for (let ruleName of Meteor.settings.security.rulesToDisable) {\n    console.log('From Meteor.settings.security.rulesToDisable, Disable security rule: ', ruleName);\n    var ruleDefinition = QSLic.getSystemRules(ruleName)[0];\n\n    if (ruleDefinition) {\n      ruleDefinition.disabled = true;\n      var response = qrs.put('/qrs/SystemRule/' + ruleDefinition.id, null, ruleDefinition);\n    } else {\n      console.warn('The system rule does not exist in Sense: ' + ruleName);\n    }\n  }\n\n  ;\n}\n\nfunction createSecurityRules() {\n  return Promise.asyncApply(() => {\n    console.log('------------------------------------');\n    console.log('create security rules in Qlik Sense based on import file');\n    console.log('------------------------------------');\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, 'securityrules', 'import', 'securityRuleSettings.json'); // READ THE FILE \n\n    var securityRules = Promise.await(fs.readJson(file));\n\n    try {\n      validateJSON(securityRules);\n    } catch (err) {\n      throw new Error('Cant read the security rule definitions file: ' + file);\n    }\n\n    securityRules.forEach(function (rule) {\n      //check if the rule already exists in Sense\n      if (!QSLic.getSystemRules(rule.name).length) {\n        //if not exist, create it\n        var response = qrs.post('/qrs/SystemRule', null, rule);\n      } else {\n        console.log('Security rule \"' + rule.name + '\" already existed');\n      }\n    });\n  });\n}\n\nfunction stringToJSON(myString) {\n  var myJSONString = JSON.stringify(myString);\n  var myEscapedJSONString = myJSONString.replace(/\\\\n/g, \"\\\\n\").replace(/\\\\'/g, \"\\\\'\").replace(/\\\\\"/g, '\\\\\"').replace(/\\\\&/g, \"\\\\&\").replace(/\\\\r/g, \"\\\\r\").replace(/\\\\t/g, \"\\\\t\").replace(/\\\\b/g, \"\\\\b\").replace(/\\\\f/g, \"\\\\f\");\n  console.log('myEscapedJSONString', myEscapedJSONString);\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"APILogs.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/APILogs.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  APILogs: () => APILogs,\n  REST_Log: () => REST_Log\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst APILogs = new Mongo.Collection('apiLogs');\n\nfunction REST_Log(call, userId = 'Not defined') {\n  call.createDate = new Date();\n  call.generationUserId = userId;\n  APILogs.insert(call);\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"apps.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/apps.js                                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Apps: () => Apps,\n  TemplateApps: () => TemplateApps,\n  GeneratedResources: () => GeneratedResources\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst Apps = new Mongo.Collection('apps');\nconst TemplateApps = new Mongo.Collection('templateApps');\nconst GeneratedResources = new Mongo.Collection('generatedResources');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"config.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/config.js                                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  senseConfig: () => senseConfig,\n  missingParameters: () => missingParameters\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\n\nconst _QIXSchema = require('enigma.js/schemas/3.2.json'); //This is the config that we need to make available on the client (the webpage)\n\n\nif (Meteor.isClient) {\n  var _senseConfig = {\n    \"host\": Meteor.settings.public.qlikSenseHost,\n    \"port\": Meteor.settings.public.qlikSensePort,\n    \"useSSL\": Meteor.settings.public.useSSL,\n    \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n    \"virtualProxySlideGenerator\": Meteor.settings.public.slideGenerator.virtualProxy,\n    \"webIntegrationDemoPort\": Meteor.settings.public.webIntegrationDemoPort,\n    \"QIXSchema\": _QIXSchema //ssbi and slide generator app id are set automatically on main.js (client side, via a call to the server)\n    // config.SSBIAppId = \n    // config.slideGeneratorAppId = \n\n  };\n} //SERVER SIDE\n\n\nif (Meteor.isServer) {\n  module.export({\n    authHeaders: () => authHeaders,\n    validateJSON: () => validateJSON,\n    QRSconfig: () => QRSconfig\n  });\n  let sslRootCas;\n  module.watch(require(\"ssl-root-cas\"), {\n    default(v) {\n      sslRootCas = v;\n    }\n\n  }, 3);\n  let crypto;\n  module.watch(require(\"crypto\"), {\n    default(v) {\n      crypto = v;\n    }\n\n  }, 4);\n  let myQRS;\n  module.watch(require(\"/imports/api/server/QRSAPI\"), {\n    myQRS(v) {\n      myQRS = v;\n    }\n\n  }, 5);\n  process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n  sslRootCas.inject();\n  console.log('This tool uses this config as defined in the settings-XYZ.json file in the root folder: ', Meteor.settings);\n\n  var fs = require('fs-extra');\n\n  const path = require('path');\n\n  var os = require('os'); // import fs from 'fs';\n\n\n  const bluebird = require('bluebird');\n\n  const WebSocket = require('ws');\n\n  if (!Meteor.settings.public.qlikSenseHost) {\n    Meteor.settings.public.qlikSenseHost = os.hostname();\n  }\n\n  if (!Meteor.settings.public.SenseServerInternalLanIP) {\n    Meteor.settings.public.SenseServerInternalLanIP = os.hostname();\n  }\n\n  if (!Meteor.settings.public.webIntegrationHost) {\n    Meteor.settings.public.webIntegrationHost = os.hostname();\n  }\n\n  var _senseConfig = {\n    \"host\": Meteor.settings.public.qlikSenseHost,\n    \"SenseServerInternalLanIP\": Meteor.settings.public.SenseServerInternalLanIP,\n    \"port\": Meteor.settings.public.qlikSensePort,\n    \"useSSL\": Meteor.settings.public.useSSL,\n    \"xrfkey\": generateXrfkey(),\n    \"virtualProxy\": Meteor.settings.private.virtualProxy,\n    //used to connect via REST to Sense, we authenticate via a http header. not for production!!!\n    \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n    \"headerKey\": Meteor.settings.private.headerKey,\n    \"headerValue\": process.env.USERDOMAIN + '\\\\' + process.env.USERNAME,\n    //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n    \"isSecure\": Meteor.settings.private.isSecure,\n    \"qrsPort\": Meteor.settings.private.qrsPort,\n    \"enginePort\": Meteor.settings.private.enginePort\n  };\n\n  if (missingParameters(_senseConfig)) {\n    throw new Meteor.Error('Missing parameters in _senseConfig, you did not populate the settings.json file in the project root of MeteorQRS, or with docker: did you mount the volume with the config including the settings.json file? (with the correct name)');\n  }\n\n  if (!_senseConfig.host) {\n    throw new Meteor.Error('You have not started this meteor project with: meteor --settings settings-development.json ? You missed the reference to this settings file, or it is empty?');\n  } //CONFIG FOR HTTP MODULE WITH HEADER AUTH (TO MAKE REST CALLS TO SENSE VIA HTTP CALLS).\n\n\n  const authHeaders = {\n    'hdr-usr': _senseConfig.headerValue,\n    'X-Qlik-xrfkey': _senseConfig.xrfkey //\n\n  };\n\n  if (!Meteor.settings.private.certificatesDirectory) {\n    Meteor.settings.private.certificatesDirectory = 'C:\\\\ProgramData\\\\Qlik\\\\Sense\\\\Repository\\\\Exported Certificates\\\\.Local Certificates';\n    console.log('Meteor.settings.private.certificatesDirectory was empty, setting it to default: ', Meteor.settings.private.certificatesDirectory);\n  }\n\n  try {\n    module.export({\n      _certs: () => _certs,\n      configCerticates: () => configCerticates,\n      enigmaServerConfig: () => enigmaServerConfig,\n      engineConfig: () => engineConfig,\n      qlikHDRServer: () => qlikHDRServer,\n      qrsSrv: () => qrsSrv,\n      qrs: () => qrs\n    });\n    const _certs = {\n      ca: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/root.pem'),\n      key: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client_key.pem'),\n      cert: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client.pem') //if you use windows and this tool runs on the same machine, you can keep the parameters empty\n      // and we use the user the node service runs under... .\n\n    };\n    var qlikUserDomain = '';\n    var qlikUser = '';\n\n    if (!Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory) {\n      qlikUserDomain = process.env.USERDOMAIN;\n      qlikUser = process.env.USERNAME;\n    } else {\n      qlikUserDomain = Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory;\n      qlikUser = Meteor.settings.broker.qlikSense.connectToSenseAsUser;\n    }\n\n    var configCerticates = {\n      rejectUnauthorized: false,\n      hostname: _senseConfig.SenseServerInternalLanIP,\n      headers: {\n        'x-qlik-xrfkey': _senseConfig.xrfkey,\n        'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n        //`UserDirectory=INTERNAL;UserId=sa_repository` you need to give this user extra roles before this works\n        'Content-Type': 'application/json'\n      },\n      key: _certs.key,\n      cert: _certs.cert,\n      ca: _certs.ca\n    };\n    console.log('configCerticates: we connect to Qlik Sense via certificates using these credentials: ', configCerticates); //used for engimaJS, the engine API javascript wrapper\n\n    var _engineConfig = {\n      host: _senseConfig.SenseServerInternalLanIP,\n      isSecure: _senseConfig.isSecure,\n      port: Meteor.settings.private.enginePort,\n      headers: {\n        'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`\n      },\n      ca: _certs.ca,\n      key: _certs.key,\n      cert: _certs.cert,\n      passphrase: Meteor.settings.private.passphrase,\n      rejectUnauthorized: false,\n      // Don't reject self-signed certs\n      appname: null,\n      QIXSchema: _QIXSchema\n    };\n    const enigmaServerConfig = {\n      schema: _engineConfig.QIXSchema,\n      // appId: appId,\n      session: {\n        host: _engineConfig.host,\n        port: _engineConfig.port\n      },\n      Promise: bluebird,\n\n      createSocket(url) {\n        return new WebSocket(url, {\n          ca: _certs.ca,\n          key: _certs.key,\n          cert: _certs.cert,\n          headers: {\n            'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`\n          }\n        });\n      }\n\n    };\n    const engineConfig = _engineConfig;\n    const qlikHDRServer = 'http://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.port + '/' + _senseConfig.virtualProxy;\n    const qrsSrv = 'https://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.qrsPort;\n    const qrs = new myQRS();\n  } catch (error) {\n    console.warn('Make sure you run the \"QRS START.BAT\" as administrator? Please note that Qlik Sense is not installed, or certificate directory wrong in the settings.json file.'); // throw new Meteor.Error(500, 'We can not connect to Sense yet: Because we can not find the Sense certificates yet in the ' + Meteor.settings.private.certificatesDirectory + '. This can happen if Sense has not yet been installed....');\n  } //END CODE THAT NEEDS CERTIFICATES\n\n\n  function generateXrfkey() {\n    return Random.hexString(16);\n  }\n\n  function validateJSON(body) {\n    try {\n      var data = JSON.parse(body); // if came to here, then valid\n\n      return data;\n    } catch (e) {\n      // failed to parse\n      return null;\n    }\n  }\n\n  const QRSconfig = {\n    authentication: 'header',\n    host: _senseConfig.host,\n    port: _senseConfig.port,\n    useSSL: false,\n    virtualProxy: _senseConfig.virtualProxy,\n    //header proxy\n    headerKey: _senseConfig.headerKey,\n    headerValue: _senseConfig.headerValue //'mydomain\\\\justme'\n\n  };\n\n  try {\n    Meteor.startup(function () {\n      return Promise.asyncApply(() => {\n        console.log('------------------------------------');\n        console.log('Validate settings.json parameters');\n        console.log('------------------------------------');\n        Meteor.absolutePath = path.resolve('.').split(path.sep + '.meteor')[0];\n        console.log('Meteor tries to find the settings-development-example.json file in Meteor.absolutePath:', Meteor.absolutePath);\n        var file = path.join(Meteor.absolutePath, 'settings-development-example.json'); // READ THE FILE \n\n        try {\n          var exampleSettingsFile = Promise.await(fs.readJson(file));\n          console.log('TCL: exampleSettingsFile', exampleSettingsFile);\n        } catch (error) {\n          throw new Error('Meteor can not find your example settings file: ' + file);\n        } // VALIDATE JSON OF SETTINGS FILE AGAINST EXAMPLE SETTINGS FILE\n\n\n        try {\n          validateJSON(exampleSettingsFile);\n        } catch (err) {\n          console.log(err);\n          throw new Error('Meteor wants to check your settings.json with the parameters in the example settings.json in the project root. Error: Cant read the example settings definitions file (not valid JSON): ' + file, err);\n        }\n\n        var keysEqual = compareKeys(Meteor.settings, exampleSettingsFile);\n        console.log('Settings file has all the keys as specified in the example json file?', keysEqual);\n\n        if (!keysEqual) {\n          throw new Error('Settings.json file does not have all keys as defined in the settings-development-example.json (in your project root), Please verify if you have all the keys as specified in the settings-development-example.json in the project root folder. In my dev environment: C:\\\\Users\\\\Qlikexternal\\\\Documents\\\\GitHub\\\\QRSMeteor');\n        }\n      });\n    });\n  } catch (error) {\n    throw new Error(error);\n  }\n} //exit server side config\n\n\nconst senseConfig = _senseConfig;\n\nfunction missingParameters(obj) {\n  for (var key in obj) {\n    if (obj[key] !== null && obj[key] != \"\") return false;\n  }\n\n  return true;\n}\n\nfunction hasSameProps(obj1, obj2) {\n  return Object.keys(obj1).every(function (prop) {\n    return obj2.hasOwnProperty(prop);\n  });\n}\n\nfunction compareKeys(...objects) {\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"customers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/customers.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Customers: () => Customers,\n  dummyCustomer: () => dummyCustomer,\n  dummyCustomers: () => dummyCustomers\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst Customers = new Mongo.Collection('customers');\nMeteor.methods({\n  updateUserForCustomer(updatedUser) {\n    var selection = {\n      'generationUserId': Meteor.userId(),\n      'users.name': updatedUser.name\n    };\n    Customers.update(selection, {\n      $set: {\n        'users.$': updatedUser\n      }\n    });\n  }\n\n});\nCustomers.attachSchema(new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Customer name\"\n  },\n  checked: {\n    type: Boolean,\n    label: \"Selected for the generation?\",\n    optional: true,\n    defaultValue: true\n  },\n  createdAt: {\n    type: Date,\n    label: \"Date created\",\n    optional: true\n  },\n  createdBy: {\n    type: Object,\n    label: \"Date created\",\n    optional: true\n  },\n  generationUserId: {\n    type: String,\n    autoValue: function () {\n      return this.userId;\n    }\n  },\n  users: {\n    type: [Object],\n    optional: true\n  },\n  \"users.$\": {\n    type: Object\n  },\n  \"users.$.name\": {\n    type: String\n  },\n  \"users.$.group\": {\n    type: String,\n    allowedValues: ['Consumer', 'Contributor', 'Developer', 'Admin', 'Global auditor']\n  },\n  \"users.$.currentlyLoggedIn\": {\n    type: Boolean,\n    optional: true\n  },\n  \"users.$.country\": {\n    type: String,\n    allowedValues: ['Germany', 'United States', 'Italy']\n  }\n}));\nconst dummyCustomer = {\n  \"name\": faker.company.companyName(),\n  \"checked\": true,\n  \"user\": {\n    \"name\": 'John',\n    \"group\": \"Consumer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Germany\"\n  }\n};\nconst dummyCustomers = [{\n  \"name\": faker.company.companyName(),\n  \"checked\": true,\n  \"users\": [{\n    \"name\": 'John',\n    \"group\": \"Consumer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Germany\"\n  }, {\n    \"name\": 'Linda',\n    \"group\": \"Contributor\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"United States\"\n  }, {\n    \"name\": 'Martin',\n    \"group\": \"Developer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }, {\n    \"name\": 'Paul',\n    \"group\": \"Admin\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }]\n}, {\n  \"name\": faker.company.companyName(),\n  \"checked\": true,\n  \"users\": [{\n    \"name\": faker.name.findName(),\n    \"group\": \"Consumer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }]\n}, {\n  \"name\": faker.company.companyName(),\n  \"checked\": true,\n  \"users\": [{\n    \"name\": faker.name.findName(),\n    \"group\": \"Consumer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }] // {\n  //     \"name\": \"QPMG Accountants\",\n  //     \"checked\": true,\n  //     \"users\": [{\n  //         \"name\": \"Ron\",\n  //         \"group\": \"Global Auditor\",\n  //         \"currentlyLoggedIn\": false,\n  //         \"country\": \"Italy\"\n  //     }]\n  // }\n  // { \"name\": \"A&R Partners\", \"checked\": true },\n  //     { \"name\": \"A2Z Solutions\", \"checked\": true },\n  //     { \"name\": \"Aaron D. Meyer & Associates\", \"checked\": true },\n  //     { \"name\": \"Aaron Products\", \"checked\": true },\n  // { \"name\": \"Active Data\", \"checked\": true },\n  // { \"name\": \"Ben and Jerry’s\", \"checked\": true },\n  // { \"name\": \"Benedict\", \"checked\": true },\n  // { \"name\": \"Bizmarts\", \"checked\": true },\n  // { \"name\": \"C & C  Design\", \"checked\": true },\n  // { \"name\": \"C & J Engineering\", \"checked\": true },\n  // { \"name\": \"CAF Systemhaus\", \"checked\": true },\n  // { \"name\": \"CAM Group\", \"checked\": true },\n  // { \"name\": \"Caribian Specialties\", \"checked\": true },\n  // { \"name\": \"City Fresh Foods\", \"checked\": true },\n  // { \"name\": \"Clearout\", \"checked\": true },\n  // { \"name\": \"David Spencer Ltd.\", \"checked\": true },\n  // { \"name\": \"Dayton Malleable Inc.\", \"checked\": true },\n  // { \"name\": \"DCP Research\", \"checked\": true },\n  // { \"name\": \"DCS International\", \"checked\": true },\n  // { \"name\": \"DCS Laboratory\", \"checked\": true },\n  // { \"name\": \"Deak-Perera Group.\", \"checked\": true },\n  // { \"name\": \"Earth\", \"checked\": true },\n  // { \"name\": \"eDistrict\", \"checked\": true },\n  // { \"name\": \"EDP\", \"checked\": true },\n  // { \"name\": \"Ethyl Corporation\", \"checked\": true },\n  // { \"name\": \"Federal Focus\", \"checked\": true },\n  // { \"name\": \"Fill It\", \"checked\": true },\n  // { \"name\": \"Filmotype\", \"checked\": true },\n  // { \"name\": \"Fins\", \"checked\": true },\n  // { \"name\": \"Gate\", \"checked\": true },\n  // { \"name\": \"Gulf and Western Industries\", \"checked\": true },\n  // { \"name\": \"Harte-Hanks (formerly Locator)\", \"checked\": true },\n  // { \"name\": \"Harvard Trust Company\", \"checked\": true },\n  // { \"name\": \"HCHS\", \"checked\": true },\n  // { \"name\": \"Healtheon\", \"checked\": true },\n  // { \"name\": \"Hetrick Systems\", \"checked\": true },\n  // { \"name\": \"Home Team\", \"checked\": true },\n  // { \"name\": \"Homebound\", \"checked\": true },\n  // { \"name\": \"IBVA\", \"checked\": true },\n  // { \"name\": \"Icon\", \"checked\": true },\n  // { \"name\": \"Icon Site Builders\", \"checked\": true },\n  // { \"name\": \"Idyllwild\", \"checked\": true },\n  // { \"name\": \"J. S. Lee Associates\", \"checked\": true },\n  // { \"name\": \"K International\", \"checked\": true },\n  // { \"name\": \"K.C. Irving\", \"checked\": true },\n  // { \"name\": \"Kari & Associates\", \"checked\": true },\n  // { \"name\": \"Karsing\", \"checked\": true },\n  // { \"name\": \"Kazinformcom\", \"checked\": true },\n  // { \"name\": \"KentISP\", \"checked\": true },\n  // { \"name\": \"Kool-Seal\", \"checked\": true },\n  // { \"name\": \"Laker Airways\", \"checked\": true },\n  // { \"name\": \"Livermore  Laboratories (LSLI)\", \"checked\": true },\n  // { \"name\": \"LiveWire BBS and   Favourite Links\", \"checked\": true },\n  // { \"name\": \"MATRIX\", \"checked\": true },\n  // { \"name\": \"Miles Laboratories, Inc.\", \"checked\": true },\n  // { \"name\": \"NACSCORP\", \"checked\": true },\n  // { \"name\": \"Onestar\", \"checked\": true },\n  // { \"name\": \"Pace\", \"checked\": true },\n  // { \"name\": \"Pacific Group\", \"checked\": true },\n  // { \"name\": \"Pacific Matics\", \"checked\": true },\n  // { \"name\": \"Pacific Sierra Research\", \"checked\": true },\n  // { \"name\": \"Pacific Voice\", \"checked\": true },\n  // { \"name\": \"Pacific West Enterprises\", \"checked\": true },\n  // { \"name\": \"PacificServ\", \"checked\": true },\n  // { \"name\": \"Panngea\", \"checked\": true },\n  // { \"name\": \"PAP (Maintenance)\", \"checked\": true },\n  // { \"name\": \"Paracel\", \"checked\": true },\n  // { \"name\": \"Patient\", \"checked\": true },\n  // { \"name\": \"Pinnacle Micro\", \"checked\": true },\n  // { \"name\": \"QualServe\", \"checked\": true },\n  // { \"name\": \"Quantum 4Xyte  Architects\", \"checked\": true },\n  // { \"name\": \"Qwest\", \"checked\": true },\n  // { \"name\": \"R&R Group\", \"checked\": true },\n  // { \"name\": \"R.J. Matter & Associates\", \"checked\": true },\n  // { \"name\": \"Ra Co Amo\", \"checked\": true },\n  // { \"name\": \"RC\", \"checked\": true },\n  // { \"name\": \"Ready-to-Run\", \"checked\": true },\n  // { \"name\": \"Remedy\", \"checked\": true },\n  // { \"name\": \"Renegade info Crew\", \"checked\": true },\n  // { \"name\": \"Reuters Usability Group\", \"checked\": true },\n  // { \"name\": \"ReviewBooth\", \"checked\": true },\n  // { \"name\": \"RFI Corporation\", \"checked\": true },\n  // { \"name\": \"Road Warrior International\", \"checked\": true },\n  // { \"name\": \"Robust Code\", \"checked\": true },\n  // { \"name\": \"Sage\", \"checked\": true },\n  // { \"name\": \"Sagent\", \"checked\": true },\n  // { \"name\": \"Salamander Junction\", \"checked\": true },\n  // { \"name\": \"Satronix\", \"checked\": true },\n  // { \"name\": \"Satyam\", \"checked\": true },\n  // { \"name\": \"Scientific Atlanta\", \"checked\": true },\n  // { \"name\": \"ScotGold Products\", \"checked\": true },\n  // { \"name\": \"Screen Saver.com\", \"checked\": true },\n  // { \"name\": \"Sifton Properties Limited\", \"checked\": true },\n  // { \"name\": \"Sigma\", \"checked\": true },\n  // { \"name\": \"Signature\", \"checked\": true },\n  // { \"name\": \"SignatureFactory\", \"checked\": true },\n  // { \"name\": \"Soloman Brothers\", \"checked\": true },\n  // { \"name\": \"Southern Company\", \"checked\": true },\n  // { \"name\": \"Stone Consolidated Corporation\", \"checked\": true },\n  // { \"name\": \"Talou\", \"checked\": true },\n  // { \"name\": \"Tampere\", \"checked\": true },\n  // { \"name\": \"Tandy Corporation\", \"checked\": true },\n  // { \"name\": \"Tangent\", \"checked\": true },\n  // { \"name\": \"Tao Group\", \"checked\": true },\n  // { \"name\": \"Target Marketing\", \"checked\": true },\n  // { \"name\": \"Team ASA\", \"checked\": true },\n  // { \"name\": \"Team Financial Management Systems\", \"checked\": true },\n  // { \"name\": \"Teca-Print\", \"checked\": true },\n  // { \"name\": \"Time Warner\", \"checked\": true },\n  // { \"name\": \"Towmotor Corporation\", \"checked\": true },\n  // { \"name\": \"Tredegar Company\", \"checked\": true },\n  // { \"name\": \"Trend Line Corporation\", \"checked\": true },\n  // { \"name\": \"U. S. Exchange\", \"checked\": true },\n  // { \"name\": \"Unison Management Concepts\", \"checked\": true },\n  // { \"name\": \"United States  (USIT)\", \"checked\": true },\n  // { \"name\": \"UUmail\", \"checked\": true },\n  // { \"name\": \"ValiCert\", \"checked\": true },\n  // { \"name\": \"Valley  Solutions\", \"checked\": true },\n  // { \"name\": \"Valpatken\", \"checked\": true },\n  // { \"name\": \"Vanstar\", \"checked\": true },\n  // { \"name\": \"Venable\", \"checked\": true },\n  // { \"name\": \"Venred\", \"checked\": true },\n  // { \"name\": \"Watcom International\", \"checked\": true },\n  // { \"name\": \"Xentec\", \"checked\": true },\n  // { \"name\": \"Xilinx\", \"checked\": true },\n  // { \"name\": \"XVT\", \"checked\": true },\n  // { \"name\": \"Zero Assumption Recovery\", \"checked\": true },\n  // { \"name\": \"Zilog\", \"checked\": true },\n  // { \"name\": \"Zitel\", \"checked\": true },\n\n}];\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"logger.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/logger.js                                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Logger: () => Logger,\n  SenseSelections: () => SenseSelections\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst Logger = new Mongo.Collection('logger');\nconst SenseSelections = new Mongo.Collection('senseSelections');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"streams.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/streams.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Streams: () => Streams\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst Streams = new Mongo.Collection('streams');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"startup\":{\"accounts-config.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/startup/accounts-config.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAccountsTemplates.configure({\n  // Behavior\n  confirmPassword: false,\n  enablePasswordChange: true,\n  forbidClientAccountCreation: false,\n  overrideLoginErrors: true,\n  sendVerificationEmail: false,\n  lowercaseUsername: false,\n  focusFirstInput: true,\n  // Appearance\n  showAddRemoveServices: false,\n  showForgotPasswordLink: false,\n  showLabels: true,\n  showPlaceholders: true,\n  showResendVerificationEmailLink: false,\n  // Client-side Validation\n  continuousValidation: false,\n  negativeFeedback: false,\n  negativeValidation: true,\n  positiveValidation: true,\n  positiveFeedback: true,\n  showValidating: true,\n  // // Privacy Policy and Terms of Use\n  // privacyUrl: 'privacy',\n  // termsUrl: 'terms-of-use',\n  // Redirects\n  homeRoutePath: '/',\n  redirectTimeout: 4000,\n  // // Hooks\n  // onLogoutHook: myLogoutFunc,\n  // onSubmitHook: mySubmitFunc,\n  // preSignUpHook: myPreSubmitFunc,\n  // postSignUpHook: myPostSubmitFunc,\n  // Texts\n  texts: {\n    button: {\n      signUp: \"Register now to start using the Qlik Sense SaaS demo\"\n    },\n    socialSignUp: \"Register\",\n    socialIcons: {\n      \"meteor-developer\": \"fa fa-rocket\"\n    },\n    title: {\n      forgotPwd: \"Recover Your Password\"\n    }\n  }\n});\nAccountsTemplates.configureRoute('signIn');\nAccountsTemplates.configureRoute('changePwd'); // AccountsTemplates.configureRoute('enrollAccount');\n// AccountsTemplates.configureRoute('forgotPwd');\n// AccountsTemplates.configureRoute('resetPwd');\n\nAccountsTemplates.configureRoute('signUp');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ui\":{\"UIHelpers.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/ui/UIHelpers.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  gitHubLinks: () => gitHubLinks\n});\nlet Apps, TemplateApps;\nmodule.watch(require(\"/imports/api/apps\"), {\n  Apps(v) {\n    Apps = v;\n  },\n\n  TemplateApps(v) {\n    TemplateApps = v;\n  }\n\n}, 0);\nlet Streams;\nmodule.watch(require(\"/imports/api/streams\"), {\n  Streams(v) {\n    Streams = v;\n  }\n\n}, 1);\nlet Customers;\nmodule.watch(require(\"/imports/api/customers\"), {\n  Customers(v) {\n    Customers = v;\n  }\n\n}, 2);\nlet senseConfig;\nmodule.watch(require(\"/imports/api/config\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  }\n\n}, 3);\nvar gitHubLinks = {\n  createStream: 'https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsStream.js#L113',\n  copyApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L477\",\n  replaceAndReloadApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L275\",\n  publishApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L604\",\n  requestTicket: \"https://github.com/QHose/QRSMeteor/blob/50bf903dc67d8d1b3757b572e8b2dedbb63202da/imports/api/server/QPSFunctions.js#L205\",\n  createPasport: \"https://github.com/QHose/QRSMeteor/blob/50bf903dc67d8d1b3757b572e8b2dedbb63202da/imports/api/server/QPSFunctions.js#L56\",\n  redirectURLReceived: \"https://github.com/QHose/QRSMeteor/blob/master/imports/SSO/client/SSO.js#L100\",\n  deleteApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L570\",\n  logoutUser: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QPSFunctions.js#L461\",\n  saveApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L300\",\n  getScript: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L275\",\n  setScript: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L288\",\n  reloadApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L292\"\n};\n\nif (Meteor.isClient) {\n  module.export({\n    freshEnvironment: () => freshEnvironment,\n    currentStep: () => currentStep\n  });\n\n  var Cookies = require('js-cookie'); // console.log('Setup generic helper functions, for functions every template needs');\n\n\n  Template.registerHelper('formatDate', function (date) {\n    return moment(date).format('DD-MM-YYYY');\n  }); // // Template.registerHelper('formatNumber', function(myNumber) {\n  //     var commaFormat = d3.format(\",\");\n  //     // The expression /,/g is a regular expression that matches all commas.\n  //     return commaFormat(myNumber)\n  //         .replace(/,/g, \".\");\n  // });\n\n  Template.registerHelper('URL_Youtube_howToDemo', function () {\n    return 'https://www.youtube.com/embed/OulQS-1fH-A?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk';\n  });\n  Template.registerHelper('URL_Youtube_quickIntro', function () {\n    return '';\n  });\n  Template.registerHelper('URL_Youtube_1mflashyIntro', function () {\n    return 'https://www.youtube.com/embed/W3gDKdv6K8Y';\n  });\n  Template.registerHelper('URL_Youtube_playlist', function () {\n    return 'https://www.youtube.com/playlist?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk';\n  });\n  Template.registerHelper('URL_Youtube_integrated_flow', function () {\n    return \"https://www.youtube.com/embed/M49nv6on5Eg?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n  });\n  Template.registerHelper('URL_Youtube_generic_security_intro', function () {\n    return \"https://www.youtube.com/embed/sdCVsMzTf64\";\n  });\n  Template.registerHelper('URL_Youtube_webintegration_introduction', function () {\n    return \"https://www.youtube.com/embed/zuNvZ_UTmow?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n  }); //QAP\n\n  Template.registerHelper('URL_Youtube_webintegration_extended', function () {\n    return \"https://www.youtube.com/embed/yLTqzftDa7s\";\n  });\n  Template.registerHelper('URL_Youtube_architecture_introduction', function () {\n    return \"https://www.youtube.com/embed/sv5nKDvmRPI?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n  });\n  Template.registerHelper('URL_Youtube_security_introduction', function () {\n    return \"https://www.youtube.com/embed/XJ9dOHoMiXE?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n  });\n  Template.registerHelper('URL_Youtube_security_deepDive', function () {\n    return \"https://www.youtube.com/embed/iamo6RLc5Pg\";\n  });\n  Template.registerHelper('URL_Youtube_concept_behind', function () {\n    return \"https://www.youtube.com/embed/1PjcTFnC4Mo\";\n  });\n  Template.registerHelper('doc_demo_manual', function () {\n    return '/docs/How to demo the Qlik Sense SaaS demo platform.pdf';\n  });\n  Template.registerHelper('doc_sec_function_task_matrix', function () {\n    return '/docs/QlikSense Authorizations - Function and Tasks_Demo.xlsx';\n  });\n  Template.registerHelper('doc_securtityIntegration', function () {\n    return 'https://community.qlik.com/docs/DOC-17599';\n  });\n  Template.registerHelper('doc_processIntegration', function () {\n    return 'https://community.qlik.com/docs/DOC-17831';\n  });\n  Template.registerHelper('doc_integrationOverview', function () {\n    return 'https://community.qlik.com/docs/DOC-9533';\n  });\n  Template.registerHelper('doc_sourceCode', function () {\n    return '/docs/Qlik Sense SaaS demo tool documentation of source code.docx';\n  });\n  Template.registerHelper('doc_demo_setup_instructions', function () {\n    return '/docs/Qlik Sense SaaS demo tool setup instructions.docx';\n  });\n  Template.registerHelper('doc_webIntegration', function () {\n    return 'https://community.qlik.com/docs/DOC-17834';\n  });\n  Template.registerHelper('doc_dataIntegration', function () {\n    return 'https://onedrive.live.com/view.aspx?cid=0805405928a75727&id=documents&resid=805405928A75727%211330&app=OneNote&authkey=!ANwk5S8KPC__-dw&&wd=target%28%2F%2FEMBEDDED%20ANALYTICS.one%7Cbf2972be-48a0-46fa-af7a-f6d2f80cf06b%2FData%20integration%20Combine%20sources%20into%20one%20associative%20model%7Ce669a0a2-9a83-470e-aae8-ba63ac500038%2F%29';\n  });\n  Template.registerHelper('seq_ticketing_flow', function () {\n    return \"http://knsv.github.io/mermaid/live_editor/#/view/c2VxdWVuY2VEaWFncmFtCkJyb3dzZXItPj5NZXRlb3Igd2ViIGludGVncmF0aW9uIGRlbW86IFVzZXIgbG9ncyBpbiBpbnRvIE1ldGVvciAKQnJvd3Nlci0-PiBQcm94eTogSUZyYW1lIHRyaWVzIHRvIG9wZW4gU2Vuc2UgY29udGVudCB2aWEgbGluayB0aGF0IGNvbnRhaW5zIC9wcm94eS8KUHJveHktPj5NZXRlb3IgU1NPIGNsaWVudDogUmVkaXJlY3QgcmVxdWVzdCB0byB3ZWJwYWdlIG9uIHRoZSBjbGllbnQgKGNsaWVudCBzaWRlIHJvdXRlKS4KCk5vdGUgcmlnaHQgb2YgUHJveHk6IFByb3h5IGFsc28gaW5jbHVkZXMgdGFyZ2V0SWQgPSA8SUQgZm9yIHRoZSBvcmlnaW5hbCBVUkkgdGhhdCB0aGUgdXNlciB0cmllcyB0byBhY2Nlc3M-LCBhbmQgcHJveHlSZXN0VXJpID0gPHRoZSBVUkkgd2hlcmUgdGhlIGF1dGhlbnRpY2F0aW9uIG1vZHVsZSBjYW4gYWNjZXNzIHRoZSBSRVNUIEFQST4KTWV0ZW9yIFNTTyBjbGllbnQtPk1ldGVvciBzZXJ2ZXI6ICBjbGllbnQgY2FsbHMgKHVzZXIgYXdhcmUpIHNlcnZlciBzaWRlIG1ldGhvZApOb3RlIHJpZ2h0IG9mIE1ldGVvciBzZXJ2ZXI6IFNpbmNlIHRoZSB1c2VyIGlzIGFscmVhZHkgbG9nZ2VkIGluIGluIE1ldGVvciwgd2UgY2FuIHJlcXVlc3QgdGhlIHVzZXJJRCBhbmQgZ3JvdXAgbWVtYmVyc2hpcCBmcm9tIHRoZSBNZXRlb3Igc2Vzc2lvbi4gVHJ1c3QgbWVjaGFuaXNtOiBTZXJ2ZXIgaW1wb3J0ZWQgUWxpayBTZW5zZSBjbGllbnQgY2VydGlmaWNhdGUuCk1ldGVvciBzZXJ2ZXItPj5RUFMgQVBJOiBSZXF1ZXN0IHRpY2tldCBhdCBRUFMgQVBJLCBwcm92aWRlIHRoZSB1c2VySWQgYW5kIGdyb3VwcyBpbiBKU09OLgpOb3RlIHJpZ2h0IG9mIE1ldGVvciBzZXJ2ZXI6IE9wdGlvbmFsbHkgaW5jbHVkZSB0aGUgcmVkaXJlY3QgcGFyYW1ldGVyIHRvIGZvcndhcmQgdGhlIHVzZXIgYmFjayB0byB0aGUgcGFnZSBoZSBpbml0aWFsbHkgdHJpZWQgdG8gYWNjZXNzLgpRUFMgQVBJLS0-Pk1ldGVvciBzZXJ2ZXI6IFFQUyBBUEkgcmV0dXJucyBhIHRpY2tldCBudW1iZXIgKGFuZCBwb3NzaWJseSByZWRpcmVjdCBVUkwpIHdoaWNoIHlvdSBoYXZlIHRvIGFwcGVuZCBpbiB0aGUgVVJMIApNZXRlb3Igc2VydmVyLS0-PiBNZXRlb3Igd2ViIGludGVncmF0aW9uIGRlbW86IENyZWF0ZSBhIHJlZGlyZWN0IFVSTCB3aGljaCB0aGUgY2xpZW50IGNvZGUgY2FuIHB1dCBpbiB0aGUgYnJvd3NlciBVUkwgYmFyLiAKTm90ZSByaWdodCBvZiBNZXRlb3Igd2ViIGludGVncmF0aW9uIGRlbW86IENsaWVudCBzaWRlIGNvZGUsIHJlcGxhY2VzIHRoZSB1cmwgaW4gYnJvd3NlciwgYW5kIGZvcndhcmRzIHRoZSB1c2VyIHRvIFFsaWsgU2Vuc2UuIFVzZXIgbm93IHJlY2VpdmVzIGEgUWxpayBTZW5zZSBzZXNzaW9uIGNvb2tpZSAoc2VlIHZpcnR1YWwgcHJveHkgY29uZmlnKSwgYW5kIGFuZCBzdWNoIHNpbmdsZSBzaWduIG9uIGlzIGNvbmZpZ3VyZWQu\";\n  });\n  Template.registerHelper('github_create_stream', function () {\n    return gitHubLinks.createStream;\n  });\n  Template.registerHelper('github_copy_app', function () {\n    return gitHubLinks.copyApp;\n  });\n  Template.registerHelper('github_replace_and_reload_app', function () {\n    return gitHubLinks.replaceAndReloadApp;\n  });\n  Template.registerHelper('github_publish_app', function () {\n    return gitHubLinks.publishApp;\n  });\n  Template.registerHelper('github_logout_user', function () {\n    return \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QPSFunctions.js#L18\";\n  });\n  Template.registerHelper('senseServerHub', function () {\n    return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage + '/hub';\n  });\n  Template.registerHelper('senseServerDevHub', function () {\n    return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage + '/dev-hub';\n  });\n  Template.registerHelper('senseServerQMC', function () {\n    return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage + '/qmc';\n  });\n  Template.registerHelper('senseServer', function () {\n    return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage;\n  });\n  Template.registerHelper('webIntegrationDemo', function () {\n    return 'https://' + Meteor.settings.public.webIntegrationHost + ':' + Meteor.settings.public.webIntegrationDemoPort;\n  }); //Integration presentation Iframe selector\n\n  Template.registerHelper('IFrameURLChapterSelection', function () {\n    var appId = Cookies.get('slideGeneratorAppId'); //senseConfig.slideGeneratorAppId;\n\n    var IntegrationPresentationSelectionSheet = Meteor.settings.public.slideGenerator.selectionSheet; //'DYTpxv'; selection sheet of the slide generator\n\n    var proxy = Meteor.settings.public.slideGenerator.virtualProxy;\n    var url = senseConfig.host + ':' + senseConfig.port + '/' + proxy + '/single/?appid=' + appId + '&sheet=' + IntegrationPresentationSelectionSheet + '&opt=currsel';\n\n    if (Meteor.settings.public.useSSL) {\n      return 'https://' + url;\n    } else {\n      return 'http://' + url;\n    }\n  }); // Template.registerHelper('authenticatedSlideGenerator', function() {\n  //     return Session.get('authenticatedSlideGenerator');\n  // });\n\n  Template.registerHelper('shrinkForSlideSorter', function () {\n    return Cookies.get('showSlideSorter') === \"true\" ? \"shrink\" : \"\"; //\n  });\n  Template.registerHelper('groupSelectedSlideGenerator', function () {\n    return Session.get('groupForPresentation'); //user selected a presentation type?\n  }); //role that defines your role in the whole integration.qlik.com site, based on this we make selections in the slide generator.\n\n  Template.registerHelper('mainUserRole', function () {\n    return Cookies.get('currentMainRole');\n  });\n  Template.registerHelper('isSelected', function () {\n    return someValue ? 'selected' : '';\n  });\n  Template.registerHelper('customers', function () {\n    return Customers.find({});\n  }); //used for Aldeed autoform\n\n  Template.registerHelper(\"Customers\", Customers);\n  Template.registerHelper('noCustomers', function () {\n    return !Customers.find({}).count();\n  });\n  Template.registerHelper('noTemplateApps', function () {\n    return !TemplateApps.find({}).count();\n  }); //generic helpers to return the collection to the blaze template\n\n  Template.registerHelper('customersCollection', function () {\n    return Customers.find({}, {\n      sort: {\n        checked: -1\n      }\n    });\n  });\n  Template.registerHelper('templateAppsCollection', function () {\n    return TemplateApps.find();\n  });\n  Template.registerHelper('appsCollection', function () {\n    return Apps.find();\n  });\n  Template.registerHelper('streamsCollection', function () {\n    return Streams.find();\n  });\n  Template.registerHelper('freshEnvironment', function () {\n    return freshEnvironment();\n  });\n  Template.registerHelper('loading', function () {\n    // console.log('loading indicator in helper is: ', Session.get('loadingIndicator'));\n    return Session.get('loadingIndicator');\n  });\n\n  function freshEnvironment() {\n    if (!Customers.find().count() && !TemplateApps.find().count()) {\n      // Session.set('currentStep', 0);\n      return true;\n    }\n  }\n\n  ;\n  Template.registerHelper('readyToSelectTemplate', function () {\n    return currentStep() === 2;\n  });\n  Template.registerHelper('templateButNoCustomer', function () {\n    return !Customers.find().count() && TemplateApps.find().count();\n  });\n  Template.registerHelper('readyToGenerate', function () {\n    return currentStep() === 3 && !Session.equals('loadingIndicator', 'loading');\n  });\n  Template.registerHelper('step3', function () {\n    return Session.get('currentStep') === 3;\n  });\n  Template.registerHelper('step3or4', function () {\n    return Session.get('currentStep') === 3 || Session.get('currentStep') === 4 || Session.equals('loadingIndicator', 'loading');\n  });\n  Template.registerHelper('stepEqualTo', function (stepNr) {\n    // console.log('value of currentStep() ', currentStep());\n    return currentStep() === stepNr;\n  });\n\n  function currentStep() {\n    // console.log('the current step session', Session.get('currentStep'));//\n    //step 0: fresh/resetted environment\n    if (freshEnvironment()) {\n      return 0;\n    } //step 1 insert customers\n    else if (Session.get('currentStep') === 1) {\n        Router.go('users');\n        return 1;\n      } //step 2 there are customers, but no template\n      else if ( // (Customers.find().count() && !TemplateApps.find().count()) &&\n        Session.get('currentStep') === 2) {\n          return 2;\n        } //step 3\n        else if ( // Customers.find().count() && \n          // TemplateApps.find().count() && \n          Session.get('currentStep') === 3 && !Session.equals('loadingIndicator', 'loading')) {\n            // console.log('loading indicator is ', Session.get('loadingIndicator') )\n            return 3;\n          } //step 4\n          else if (Session.get('currentStep') === 4 // &&\n            // Customers.find().count() &&\n            // TemplateApps.find().count()\n            ) {\n                return 4;\n              } else if (Session.equals('loadingIndicator', 'loading')) {\n              return;\n            } else {\n              Session.set('currentStep', 3);\n              return 3;\n            }\n  }\n\n  Template.registerHelper('generationFinished', function () {\n    return Session.equals('loadingIndicator', 'loading') || Session.get('generated?');\n  });\n  Template.registerHelper('readyToTestSSO', function () {\n    return currentStep() === 4;\n  });\n  Template.registerHelper('and', (a, b) => {\n    return a && b;\n  });\n  Template.registerHelper('or', (a, b) => {\n    return a || b;\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"accounts.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/accounts.js                                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// ServiceConfiguration.configurations.upsert({\n//     service: \"facebook\"\n// }, {\n//     $set: {\n//         appId: Meteor.settings.private.facebook.clientId,\n//         loginStyle: \"popup\",\n//         secret: Meteor.settings.private.facebook.secret\n//     }\n// });\n// ServiceConfiguration.configurations.upsert({\n//     service: \"github\"\n// }, {\n//     $set: {\n//         clientId: Meteor.settings.private.github.clientId,\n//         loginStyle: \"popup\",\n//         secret: Meteor.settings.private.github.secret\n//     }\n// });\n// ServiceConfiguration.configurations.upsert({\n//     service: \"linkedin\"\n// },{\n//     loginStyle: \"popup\",\n//     service: \"linkedin\",\n//     clientId: Meteor.settings.private.linkedin.clientId,\n//     secret: Meteor.settings.private.linkedin.secret,\n// });\n// ServiceConfiguration.configurations.upsert({\n//     service: \"twitter\"  \n// },{\n//     service: \"twitter\",\n//     consumerKey: Meteor.settings.private.twitter.clientId,\n//     loginStyle: \"popup\",\n//     secret: Meteor.settings.private.twitter.secret\n// });\n// ServiceConfiguration.configurations.upsert({\n//     service: \"google\"\n// }, {\n//     $set: {\n//         clientId: Meteor.settings.private.google.clientId,\n//         loginStyle: \"popup\",\n//         secret: Meteor.settings.private.google.secret\n//     }\n// });\nconst numberOfUsers = Meteor.users.find().count();\nconsole.log('Checking the user accounts, number of users is: ' + numberOfUsers);\n\nif (!numberOfUsers) {\n  var id = Accounts.createUser({\n    username: 'demo',\n    email: 'demo@qlik.com',\n    password: 'schiphol',\n    profile: {\n      name: 'Qlik test user'\n    }\n  });\n  console.log('user created with id: ', id);\n  Roles.addUsersToRoles(id, 'test', Roles.GLOBAL_GROUP);\n  id = Accounts.createUser({\n    username: 'admin',\n    email: 'test@test.com',\n    //these are just dummies\n    password: 'Qlik456464',\n    profile: {\n      name: 'Qlik admin user'\n    }\n  });\n  console.log('user created with id: ', id);\n  Roles.addUsersToRoles(id, 'admin', Roles.GLOBAL_GROUP);\n} //enable anon access: https://atmospherejs.com/artwells/accounts-guest\n\n\nAccountsGuest.enabled = true;\nAccountsGuest.anonymous = true;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/methods.js                                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./methods.js\"));\nlet http;\nmodule.watch(require(\"meteor/meteor\"), {\n  http(v) {\n    http = v;\n  }\n\n}, 1);\nlet Apps, TemplateApps, GeneratedResources;\nmodule.watch(require(\"/imports/api/apps\"), {\n  Apps(v) {\n    Apps = v;\n  },\n\n  TemplateApps(v) {\n    TemplateApps = v;\n  },\n\n  GeneratedResources(v) {\n    GeneratedResources = v;\n  }\n\n}, 2);\nlet SenseSelections;\nmodule.watch(require(\"/imports/api/logger\"), {\n  SenseSelections(v) {\n    SenseSelections = v;\n  }\n\n}, 3);\nlet APILogs, REST_Log;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  APILogs(v) {\n    APILogs = v;\n  },\n\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 4);\nlet Streams;\nmodule.watch(require(\"/imports/api/streams\"), {\n  Streams(v) {\n    Streams = v;\n  }\n\n}, 5);\nlet Customers;\nmodule.watch(require(\"/imports/api/customers\"), {\n  Customers(v) {\n    Customers = v;\n  }\n\n}, 6);\nlet QSApp;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsApp\"), {\n  \"*\"(v) {\n    QSApp = v;\n  }\n\n}, 7);\nlet QSStream;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsStream\"), {\n  \"*\"(v) {\n    QSStream = v;\n  }\n\n}, 8);\nlet QSLic;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsLicense\"), {\n  \"*\"(v) {\n    QSLic = v;\n  }\n\n}, 9);\nlet QSProxy;\nmodule.watch(require(\"/imports/api/server/QPSFunctions\"), {\n  \"*\"(v) {\n    QSProxy = v;\n  }\n\n}, 10);\nlet QSSystem;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsSystemRules\"), {\n  \"*\"(v) {\n    QSSystem = v;\n  }\n\n}, 11);\nlet QSExtensions;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsExtension\"), {\n  \"*\"(v) {\n    QSExtensions = v;\n  }\n\n}, 12);\nlet QSCustomProps;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsCustomProperties\"), {\n  \"*\"(v) {\n    QSCustomProps = v;\n  }\n\n}, 13);\nlet senseConfig, authHeaders;\nmodule.watch(require(\"/imports/api/config\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  }\n\n}, 14);\nmodule.watch(require(\"/imports/startup/accounts-config.js\"));\n//stop on unhandled errors\nprocess.on('unhandledRejection', up => {\n  throw up;\n}); //import config for Qlik Sense QRS and Engine API.\n\nconst path = require('path');\n\nvar fs = require('fs-extra');\n\nvar marked = require('marked'); //\n// ─── METEOR METHODS ─────────────────────────────────────────────────────────────\n//\n\n\nvar showdown = require(\"showdown\");\n\nvar converter = new showdown.Converter();\nMeteor.methods({\n  getHTMLFromMarkdownUrl(url) {\n    // console.log('get markdown from the server: '+url)\n    var markdownResult = HTTP.get(url); // var HTMLresult = converter.makeHtml(markdownResult.content);\n\n    var HTMLresult = marked.parse(markdownResult.content);\n    return HTMLresult;\n  },\n\n  getSenseSelectionObject(id) {\n    // console.log('------------------------------------');\n    // console.log('getSenseSelectionObject for id', id)\n    // console.log('------------------------------------');\n    check(id, String);\n    var result = SenseSelections.findOne({\n      _id: id\n    });\n    console.log('result of get selection by id', result);\n    return result;\n  },\n\n  getAppIDs() {\n    return {\n      SSBI: senseConfig.SSBIApp,\n      // QSApp.getApps(Meteor.settings.public.SSBI.name, Meteor.settings.public.SSBI.stream)[0].id,\n      slideGenerator: senseConfig.slideGeneratorAppId //QSApp.getApps(Meteor.settings.public.slideGenerator.name, Meteor.settings.public.slideGenerator.stream)[0].id\n\n    };\n  },\n\n  generateStreamAndApp(customers) {\n    return Promise.asyncApply(() => {\n      try {\n        check(customers, Array);\n      } catch (error) {\n        throw new Meteor.Error('Missing field', 'No customers supplied for the generation of apps.');\n      } // first clean the environment\n\n\n      Meteor.call('removeGeneratedResources', {\n        'generationUserId': Meteor.userId()\n      });\n      Promise.await(QSApp.generateStreamAndApp(customers, this.userId)); //then, create the new stuff\n\n      try {\n        if (!Meteor.settings.broker.qlikSense.multiTenantScenario) {\n          //on premise installation for a single tenant (e.g. with MS Active Directory)\n          var customerNames = customers.map(function (c) {\n            return c.name;\n          });\n          QSCustomProps.upsertCustomPropertyByName('customer', customerNames); //for non OEM scenarios (with MS AD), people like to use custom properties for authorization instead of the groups via a ticket.\n        }\n      } catch (error) {\n        console.log('error to create custom properties', error);\n      }\n\n      Meteor.call('updateLocalSenseCopy');\n    });\n  },\n\n  resetEnvironment() {\n    Meteor.call('resetLoggedInUser'); //logout all users before removing all the current customers. This to prevent the screen stays logged in at an old user.\n\n    Meteor.call('removeGeneratedResources', {\n      'generationUserId': Meteor.userId()\n    });\n    TemplateApps.remove({\n      'generationUserId': Meteor.userId()\n    });\n    Customers.remove({\n      'generationUserId': Meteor.userId()\n    });\n    APILogs.remove({\n      'generationUserId': Meteor.userId()\n    });\n\n    if (!Meteor.settings.broker.qlikSense.multiTenantScenario) {\n      //on premise installation for a single tenant (e.g. with MS Active Directory)\n      QSCustomProps.deleteCustomProperty('customers');\n    }\n  },\n\n  upsertTemplate(selector, currentApp) {\n    console.log('user ' + Meteor.userId() + ' selected a template app: ' + currentApp.name);\n    TemplateApps.upsert(selector, {\n      $set: {\n        name: currentApp.name,\n        id: currentApp.id,\n        generationUserId: Meteor.userId()\n      }\n    });\n  },\n\n  removeTemplate(selector, currentApp) {\n    console.log('remove template');\n    TemplateApps.remove(selector);\n  },\n\n  removeGeneratedResources(generationUserSelection) {\n    //console.log('remove GeneratedResources method, before we make new ones');\n    //logging only\n    if (generationUserSelection) {\n      const call = {};\n      call.action = 'Remove generated resources';\n      call.request = 'Remove all apps and streams in Qlik Sense for userId: ' + generationUserSelection.generationUserId;\n      REST_Log(call, generationUserSelection);\n    }\n\n    GeneratedResources.find(generationUserSelection).forEach(function (resource) {\n      // this.unblock()\n      //console.log('resetEnvironment for userId', Meteor.userId());generationUserSelection.generationUserId\n      //If not selection was given, we want to reset the whole environment, so also delete the streams.\n      // if (!generationUserSelection.generationUserId) {\n      try {\n        Meteor.call('deleteStream', resource.streamId); //added random company names, so this should not be an issue //26-9 can't delete stream, because each user creates a stream with the same name...\n      } catch (err) {} //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n      //don't bother if generated resources do not exists, just continue\n      // }\n      //delete apps always\n\n\n      try {\n        Meteor.call('deleteApp', resource.appId);\n      } catch (err) {//console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n      }\n    });\n    GeneratedResources.remove(generationUserSelection);\n    APILogs.remove(generationUserSelection);\n  },\n\n  copyApp(guid, name) {\n    check(guid, String);\n    check(name, String);\n    const id = QSApp.copyApp(guid, name);\n    Meteor.call('updateLocalSenseCopy');\n    return id;\n  },\n\n  copyAppSelectedCustomers(currentApp) {\n    //the app the user clicked on        \n    if (!currentApp) {\n      throw new Meteor.Error('No App selected to copy');\n    }\n\n    ;\n    customers = Customers.find({\n      'generationUserId': Meteor.userId(),\n      checked: true\n    }); //all selected customers\n\n    if (!customers) {\n      throw new Meteor.Error('No customers selected to copy the app for');\n    }\n\n    ;\n    customers.forEach(customer => {\n      const newAppId = Meteor.call('copyApp', currentApp.id, customer.name + '-' + currentApp.name);\n      Meteor.call('updateLocalSenseCopy'); //store in the database that the user generated something, so we can later on remove it.\n\n      GeneratedResources.insert({\n        'generationUserId': Meteor.userId(),\n        'customer': null,\n        'streamId': null,\n        'appId': newAppId\n      });\n    });\n  },\n\n  deleteApp(guid) {\n    check(guid, String);\n\n    if (guid !== Meteor.settings.public.templateAppId) {\n      //logging only\n      const call = {};\n      call.action = 'Delete app';\n      call.request = 'Delete app: ' + guid;\n      REST_Log(call);\n      const id = QSApp.deleteApp(guid);\n      Meteor.call('updateLocalSenseCopy');\n      return id;\n    } else {\n      throw new Meteor.Error(\"you can't delete the template app with guid: \", guid);\n    }\n  },\n\n  removeAllCustomers: function () {\n    return Customers.remove({\n      'generationUserId': Meteor.userId()\n    });\n  }\n});\nMeteor.methods({\n  updateLocalSenseCopyApps() {\n    //delete the local content of the database before updating it\n    Apps.remove({}); //Update the Apps with fresh info from Sense        \n\n    _.each(QSApp.getApps(), app => {\n      Apps.insert(app);\n    });\n  },\n\n  updateLocalSenseCopyStreams() {\n    //delete the local content of the database before updating it        \n    Streams.remove({}); //Update the Streams with fresh info from Sense        \n\n    _.each(QSStream.getStreams(), stream => {\n      Streams.insert(stream);\n    });\n  },\n\n  updateLocalSenseCopy() {\n    // //console.log('Method: update the local mongoDB with fresh data from Qlik Sense: call QRS API getStreams and getApps');\n    //delete the local content of the database before updating it\n    Apps.remove({});\n    Streams.remove({}); //Update the Apps and Streams with fresh info from Sense        \n\n    _.each(QSApp.getApps(), app => {\n      Apps.insert(app);\n    });\n\n    _.each(QSStream.getStreams(), stream => {\n      Streams.insert(stream);\n    });\n  },\n\n  getSecurityRules() {\n    return QSSystem.getSecurityRules();\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"proxy.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/proxy.js                                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//SETUP PROXY SERVER TO RUN METEOR QRS AND WEB INTEGRATION DEMO BOTH ON PORT 80\n// var proxy = require('redbird')({ port: Meteor.settings.public.proxyPort, ntlm: true, bunyan: false }); //bunyan:true for logging output in the console    \n// Route to any local ip, for example from docker containers.\n// Meteor.startup(() => {\n//     proxy.register(Meteor.settings.public.qlikSenseHost, \"http://localhost:3000\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register(Meteor.settings.public.webIntegrationHost, \"http://localhost:3030\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register('slides.qlik.com', \"http://localhost:3060\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register('integration.qlik.com', \"http://localhost:3000\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register('saasdemo.qlik.com', \"http://localhost:3000\"); //need subdomain otherwise meteor root-URL does not work\n// });\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"publications.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/publications.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Apps, TemplateApps, GeneratedResources;\nmodule.watch(require(\"/imports/api/apps\"), {\n  Apps(v) {\n    Apps = v;\n  },\n\n  TemplateApps(v) {\n    TemplateApps = v;\n  },\n\n  GeneratedResources(v) {\n    GeneratedResources = v;\n  }\n\n}, 0);\nlet Streams;\nmodule.watch(require(\"/imports/api/streams\"), {\n  Streams(v) {\n    Streams = v;\n  }\n\n}, 1);\nlet Customers;\nmodule.watch(require(\"/imports/api/customers\"), {\n  Customers(v) {\n    Customers = v;\n  }\n\n}, 2);\nlet APILogs;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  APILogs(v) {\n    APILogs = v;\n  }\n\n}, 3);\nlet Logger, SenseSelections;\nmodule.watch(require(\"/imports/api/logger\"), {\n  Logger(v) {\n    Logger = v;\n  },\n\n  SenseSelections(v) {\n    SenseSelections = v;\n  }\n\n}, 4);\nlet moment;\nmodule.watch(require(\"moment\"), {\n  default(v) {\n    moment = v;\n  }\n\n}, 5);\nMeteor.publish('Logger', function () {\n  return Logger.find();\n  this.ready();\n}); // Meteor.publish('SenseSelections', function() {\n//     return SenseSelections.find({ 'userId': this.userId });\n//     this.ready();\n// });\n//only fill the local mongoDB that runs in the browser with data that belongs to the user...\n//https://www.meteor.com/tutorials/blaze/publish-and-subscribe\n\nMeteor.publish('apps', function (generatedAppsFromUser) {\n  if (Roles.userIsInRole(this.userId, ['admin'], Roles.GLOBAL_GROUP)) {\n    return Apps.find();\n  } else {\n    //console.log('Client subscribed to collection, with these generated app ids: ', generatedAppsFromUser);\n    if (!generatedAppsFromUser) {\n      generatedAppsFromUser = []; // console.log('##### No generated resources exists yet, so only show the template apps')\n    } else {// console.log('### publication recevied these generated app ids for the user: ', generatedAppsFromUser);\n      }\n\n    return Apps.find({\n      $or: [{\n        \"id\": {\n          \"$in\": generatedAppsFromUser\n        }\n      }, {\n        \"stream.name\": \"Templates\" //, { \"stream.name\": \"Everyone\" }\n\n      }]\n    });\n  }\n\n  this.ready();\n});\nMeteor.publish('streams', function (generatedStreamsFromUser) {\n  if (Roles.userIsInRole(this.userId, ['admin'], Roles.GLOBAL_GROUP)) {\n    return Streams.find();\n  } else {\n    if (!generatedStreamsFromUser) {\n      generatedStreamsFromUser = [];\n    }\n\n    return Streams.find({\n      $or: [{\n        \"id\": {\n          \"$in\": generatedStreamsFromUser\n        }\n      }, {\n        \"name\": \"Templates\" //, { \"name\": \"Everyone\" }\n\n      }]\n    });\n  }\n\n  this.ready();\n});\nMeteor.publish('templateApps', function () {\n  return TemplateApps.find({\n    'generationUserId': this.userId\n  });\n  this.ready();\n});\nMeteor.publish('generatedResources', function () {\n  return GeneratedResources.find({\n    'generationUserId': this.userId\n  });\n  this.ready();\n});\nMeteor.publish('customers', function () {\n  return Customers.find({\n    'generationUserId': this.userId\n  });\n  this.ready();\n});\nMeteor.publish('apiLogs', function () {\n  // const selector = {\n  //     \"createDate\": {\n  //         $lt: new Date(),\n  //         $gte: new Date(new Date().setDate(new Date().getDate() - 0.05))  //show only the last hour  of api logs\n  //     }\n  //};\n  //     today: function() {\n  //     var now = moment().toDate();\n  //     return Posts.find({createdAt : { $gte : now }});\n  // }\n  const selector = {\n    sort: {\n      createDate: -1\n    },\n    limit: 15\n  };\n  return APILogs.find({\n    'generationUserId': this.userId\n  }, selector);\n  this.ready();\n});\nMeteor.publish('users', function () {\n  //See https://github.com/alanning/meteor-roles\n  if (Roles.userIsInRole(this.userId, ['admin'], Roles.GLOBAL_GROUP)) {\n    return Meteor.users.find();\n  } else {\n    // user not authorized. do not publish secrets\n    this.stop();\n    return;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"restEndpoints.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/restEndpoints.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//https://atmospherejs.com/simple/json-routes\nJsonRoutes.add(\"get\", \"/OneCustomerWithUsers\", function (req, res, next) {\n  // var id = req.params.id;\n  var sampleData = customer1;\n  JsonRoutes.sendResult(res, {\n    data: customer1\n  });\n});\nJsonRoutes.add(\"get\", \"/multipleCustomersWithUsers\", function (req, res, next) {\n  // var id = req.params.id;\n  var sampleData = [customer1, customer2];\n  JsonRoutes.sendResult(res, {\n    data: [customer1, customer2]\n  });\n});\nvar customer1 = {\n  \"_id\": \"EXpapRzZXc52B3joK\",\n  \"name\": \"Ullrich - Barrows\",\n  \"checked\": true,\n  \"users\": [{\n    \"name\": \"John\",\n    \"group\": \"Consumer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Germany\"\n  }, {\n    \"name\": \"Linda\",\n    \"group\": \"Contributor\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"United States\"\n  }, {\n    \"name\": \"Martin\",\n    \"group\": \"Developer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }, {\n    \"name\": \"Paul\",\n    \"group\": \"Admin\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }],\n  \"generationUserId\": \"rZPZYbaWM33ZHNr6Z\"\n};\nvar customer2 = {\n  \"_id\": \"EXpapRzZXc52B3joK\",\n  \"name\": \"Ullrich - Barrows\",\n  \"checked\": true,\n  \"users\": [{\n    \"name\": \"John\",\n    \"group\": \"Consumer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Germany\"\n  }, {\n    \"name\": \"Linda\",\n    \"group\": \"Contributor\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"United States\"\n  }, {\n    \"name\": \"Martin\",\n    \"group\": \"Developer\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }, {\n    \"name\": \"Paul\",\n    \"group\": \"Admin\",\n    \"currentlyLoggedIn\": false,\n    \"country\": \"Italy\"\n  }],\n  \"generationUserId\": \"rZPZYbaWM33ZHNr6Z\"\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"routes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/routes.js                                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet REST_Log;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 0);\nRouter.route('/updateSenseInfo/apps', function (request, response, next) {\n  // console.log('++++++++++++We got an incoming REST Call from the Sense Notification handler for APPS, this means the Sense Repository has changed');\n  //logging only\n  // var call = {};\n  // call.action = 'Notification apps'\n  // call.request = 'We got an incoming REST Call from the Sense Notification handler for APPS, this means the Sense Repository has changed';\n  // REST_Log(call);\n  Meteor.call('updateLocalSenseCopyApps');\n}, {\n  where: 'server'\n});\nRouter.route('/updateSenseInfo/streams', function (request, response, next) {\n  // console.log('++++++++++++We got an incoming REST Call from the Sense Notification handler for STREAMS, this means the Sense Repository has changed');\n  //logging only\n  // var call = {};\n  // call.action = 'Notification streams'\n  // call.request = 'We got an incoming REST Call from the Sense Notification handler for APPS, this means the Sense Repository has changed';\n  // REST_Log(call);\n  Meteor.call('updateLocalSenseCopyStreams');\n}, {\n  where: 'server'\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"seeds.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/seeds.js                                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Customers;\nmodule.watch(require(\"../imports/api/customers.js\"), {\n  Customers(v) {\n    Customers = v;\n  }\n\n}, 0);\nvar customers = // [{\"name\":\"A&R Partners\",\"checked\":true},\n// {\"name\":\"A2Z Solutions\",\"checked\":true},\n// {\"name\":\"Aaron D. Meyer & Associates\",\"checked\":true},\n// {\"name\":\"Aaron Products\",\"checked\":true},\n// {\"name\":\"Active Data\",\"checked\":true},\n// {\"name\":\"Ben and Jerry’s\",\"checked\":true},\n// {\"name\":\"Benedict\",\"checked\":true},\n// {\"name\":\"Bizmarts\",\"checked\":true},\n// {\"name\":\"C & C  Design\",\"checked\":true},\n// {\"name\":\"C & J Engineering\",\"checked\":true},\n// {\"name\":\"CAF Systemhaus\",\"checked\":true},\n// {\"name\":\"CAM Group\",\"checked\":true},\n// {\"name\":\"Caribian Specialties\",\"checked\":true},\n// {\"name\":\"City Fresh Foods\",\"checked\":true},\n// {\"name\":\"Clearout\",\"checked\":true},\n// {\"name\":\"David Spencer Ltd.\",\"checked\":true},\n// {\"name\":\"Dayton Malleable Inc.\",\"checked\":true},\n// {\"name\":\"DCP Research\",\"checked\":true},\n// {\"name\":\"DCS International\",\"checked\":true},\n// {\"name\":\"DCS Laboratory\",\"checked\":true},\n// {\"name\":\"Deak-Perera Group.\",\"checked\":true},\n// {\"name\":\"Earth\",\"checked\":true},\n// {\"name\":\"eDistrict\",\"checked\":true},\n// {\"name\":\"EDP\",\"checked\":true},\n// {\"name\":\"Ethyl Corporation\",\"checked\":true},\n// {\"name\":\"Federal Focus\",\"checked\":true},\n// {\"name\":\"Fill It\",\"checked\":true},\n// {\"name\":\"Filmotype\",\"checked\":true},\n// {\"name\":\"Fins\",\"checked\":true},\n// {\"name\":\"Gate\",\"checked\":true},\n// {\"name\":\"Gulf and Western Industries\",\"checked\":true},\n// {\"name\":\"Harte-Hanks (formerly Locator)\",\"checked\":true},\n// {\"name\":\"Harvard Trust Company\",\"checked\":true},\n// {\"name\":\"HCHS\",\"checked\":true},\n// {\"name\":\"Healtheon\",\"checked\":true},\n// {\"name\":\"Hetrick Systems\",\"checked\":true},\n// {\"name\":\"Home Team\",\"checked\":true},\n// {\"name\":\"Homebound\",\"checked\":true},\n// {\"name\":\"IBVA\",\"checked\":true},\n// {\"name\":\"Icon\",\"checked\":true},\n// {\"name\":\"Icon Site Builders\",\"checked\":true},\n// {\"name\":\"Idyllwild\",\"checked\":true},\n// {\"name\":\"J. S. Lee Associates\",\"checked\":true},\n// {\"name\":\"K International\",\"checked\":true},\n// {\"name\":\"K.C. Irving\",\"checked\":true},\n// {\"name\":\"Kari & Associates\",\"checked\":true},\n// {\"name\":\"Karsing\",\"checked\":true},\n// {\"name\":\"Kazinformcom\",\"checked\":true},\n// {\"name\":\"KentISP\",\"checked\":true},\n// {\"name\":\"Kool-Seal\",\"checked\":true},\n// {\"name\":\"Laker Airways\",\"checked\":true},\n// {\"name\":\"Livermore  Laboratories (LSLI)\",\"checked\":true},\n// {\"name\":\"LiveWire BBS and   Favourite Links\",\"checked\":true},\n// {\"name\":\"MATRIX\",\"checked\":true},\n// {\"name\":\"Miles Laboratories, Inc.\",\"checked\":true},\n// {\"name\":\"NACSCORP\",\"checked\":true},\n// {\"name\":\"Onestar\",\"checked\":true},\n// {\"name\":\"Pace\",\"checked\":true},\n// {\"name\":\"Pacific Group\",\"checked\":true},\n// {\"name\":\"Pacific Matics\",\"checked\":true},\n// {\"name\":\"Pacific Sierra Research\",\"checked\":true},\n// {\"name\":\"Pacific Voice\",\"checked\":true},\n// {\"name\":\"Pacific West Enterprises\",\"checked\":true},\n// {\"name\":\"PacificServ\",\"checked\":true},\n// {\"name\":\"Panngea\",\"checked\":true},\n// {\"name\":\"PAP (Maintenance)\",\"checked\":true},\n// {\"name\":\"Paracel\",\"checked\":true},\n// {\"name\":\"Patient\",\"checked\":true},\n// {\"name\":\"Pinnacle Micro\",\"checked\":true},\n// {\"name\":\"QualServe\",\"checked\":true},\n// {\"name\":\"Quantum 4Xyte  Architects\",\"checked\":true},\n// {\"name\":\"Qwest\",\"checked\":true},\n// {\"name\":\"R&R Group\",\"checked\":true},\n// {\"name\":\"R.J. Matter & Associates\",\"checked\":true},\n// {\"name\":\"Ra Co Amo\",\"checked\":true},\n// {\"name\":\"RC\",\"checked\":true},\n// {\"name\":\"Ready-to-Run\",\"checked\":true},\n// {\"name\":\"Remedy\",\"checked\":true},\n// {\"name\":\"Renegade info Crew\",\"checked\":true},\n// {\"name\":\"Reuters Usability Group\",\"checked\":true},\n// {\"name\":\"ReviewBooth\",\"checked\":true},\n// {\"name\":\"RFI Corporation\",\"checked\":true},\n// {\"name\":\"Road Warrior International\",\"checked\":true},\n// {\"name\":\"Robust Code\",\"checked\":true},\n// {\"name\":\"Sage\",\"checked\":true},\n// {\"name\":\"Sagent\",\"checked\":true},\n// {\"name\":\"Salamander Junction\",\"checked\":true},\n// {\"name\":\"Satronix\",\"checked\":true},\n// {\"name\":\"Satyam\",\"checked\":true},\n// {\"name\":\"Scientific Atlanta\",\"checked\":true},\n// {\"name\":\"ScotGold Products\",\"checked\":true},\n// {\"name\":\"Screen Saver.com\",\"checked\":true},\n// {\"name\":\"Sifton Properties Limited\",\"checked\":true},\n// {\"name\":\"Sigma\",\"checked\":true},\n// {\"name\":\"Signature\",\"checked\":true},\n// {\"name\":\"SignatureFactory\",\"checked\":true},\n// {\"name\":\"Soloman Brothers\",\"checked\":true},\n// {\"name\":\"Southern Company\",\"checked\":true},\n// {\"name\":\"Stone Consolidated Corporation\",\"checked\":true},\n// {\"name\":\"Talou\",\"checked\":true},\n// {\"name\":\"Tampere\",\"checked\":true},\n// {\"name\":\"Tandy Corporation\",\"checked\":true},\n// {\"name\":\"Tangent\",\"checked\":true},\n// {\"name\":\"Tao Group\",\"checked\":true},\n// {\"name\":\"Target Marketing\",\"checked\":true},\n// {\"name\":\"Team ASA\",\"checked\":true},\n// {\"name\":\"Team Financial Management Systems\",\"checked\":true},\n// {\"name\":\"Teca-Print\",\"checked\":true},\n// {\"name\":\"Time Warner\",\"checked\":true},\n// {\"name\":\"Towmotor Corporation\",\"checked\":true},\n// {\"name\":\"Tredegar Company\",\"checked\":true},\n// {\"name\":\"Trend Line Corporation\",\"checked\":true},\n// {\"name\":\"U. S. Exchange\",\"checked\":true},\n// {\"name\":\"Unison Management Concepts\",\"checked\":true},\n// {\"name\":\"United States  (USIT)\",\"checked\":true},\n// {\"name\":\"UUmail\",\"checked\":true},\n// {\"name\":\"ValiCert\",\"checked\":true},\n// {\"name\":\"Valley  Solutions\",\"checked\":true},\n// {\"name\":\"Valpatken\",\"checked\":true},\n// {\"name\":\"Vanstar\",\"checked\":true},\n// {\"name\":\"Venable\",\"checked\":true},\n// {\"name\":\"Venred\",\"checked\":true},\n// {\"name\":\"Watcom International\",\"checked\":true},\n// {\"name\":\"Xentec\",\"checked\":true},\n// {\"name\":\"Xilinx\",\"checked\":true},\n// {\"name\":\"XVT\",\"checked\":true},\n// {\"name\":\"Zero Assumption Recovery\",\"checked\":true},\n// {\"name\":\"Zilog\",\"checked\":true},\n// {\"name\":\"Zitel\",\"checked\":true},\n// {\"name\":\"Zocalo\",\"checked\":true}]\n[{\n  \"name\": \"Shell\",\n  \"collection\": \"Shell\"\n}, {\n  \"name\": \"Esso\",\n  \"collection\": \"Esso\"\n}, {\n  \"name\": \"BP\",\n  \"collection\": \"BP\"\n}]; //if (Customers.find().count() === 0){ \n// _.each(customers, function(customer){\n//  Customers.insert(customer);\n//    console.log(\"Inserted \"+ customer.name);\n// })\n//}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// server/main.js                                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet http;\nmodule.watch(require(\"meteor/meteor\"), {\n  http(v) {\n    http = v;\n  }\n\n}, 1);\nlet Apps, TemplateApps, GeneratedResources;\nmodule.watch(require(\"/imports/api/apps\"), {\n  Apps(v) {\n    Apps = v;\n  },\n\n  TemplateApps(v) {\n    TemplateApps = v;\n  },\n\n  GeneratedResources(v) {\n    GeneratedResources = v;\n  }\n\n}, 2);\nlet APILogs, REST_Log;\nmodule.watch(require(\"/imports/api/APILogs\"), {\n  APILogs(v) {\n    APILogs = v;\n  },\n\n  REST_Log(v) {\n    REST_Log = v;\n  }\n\n}, 3);\nlet WebApp;\nmodule.watch(require(\"meteor/webapp\"), {\n  WebApp(v) {\n    WebApp = v;\n  }\n\n}, 4);\nlet Streams;\nmodule.watch(require(\"/imports/api/streams\"), {\n  Streams(v) {\n    Streams = v;\n  }\n\n}, 5);\nlet Customers;\nmodule.watch(require(\"/imports/api/customers\"), {\n  Customers(v) {\n    Customers = v;\n  }\n\n}, 6);\nlet QSApp;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsApp\"), {\n  \"*\"(v) {\n    QSApp = v;\n  }\n\n}, 7);\nlet QSStream;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsStream\"), {\n  \"*\"(v) {\n    QSStream = v;\n  }\n\n}, 8);\nlet QSLic;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsLicense\"), {\n  \"*\"(v) {\n    QSLic = v;\n  }\n\n}, 9);\nlet QSProxy;\nmodule.watch(require(\"/imports/api/server/QPSFunctions\"), {\n  \"*\"(v) {\n    QSProxy = v;\n  }\n\n}, 10);\nlet QSSystem;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsSystemRules\"), {\n  \"*\"(v) {\n    QSSystem = v;\n  }\n\n}, 11);\nlet QSExtensions;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsExtension\"), {\n  \"*\"(v) {\n    QSExtensions = v;\n  }\n\n}, 12);\nlet QSCustomProps;\nmodule.watch(require(\"/imports/api/server/QRSFunctionsCustomProperties\"), {\n  \"*\"(v) {\n    QSCustomProps = v;\n  }\n\n}, 13);\nlet senseConfig, authHeaders;\nmodule.watch(require(\"/imports/api/config\"), {\n  senseConfig(v) {\n    senseConfig = v;\n  },\n\n  authHeaders(v) {\n    authHeaders = v;\n  }\n\n}, 14);\nmodule.watch(require(\"/imports/startup/accounts-config.js\"));\nlet shell;\nmodule.watch(require(\"node-powershell\"), {\n  default(v) {\n    shell = v;\n  }\n\n}, 15);\n\nvar os = require('os'); //stop on unhandled errors\n\n\nprocess.on(\"unhandledRejection\", up => {\n  throw up;\n}); //import config for Qlik Sense QRS and Engine API.\n\nconst path = require(\"path\");\n\nvar fs = require(\"fs-extra\");\n\nvar connectHandler = WebApp.connectHandlers; // get meteor-core's connect-implementation\n// attach connect-style middleware for response header injection\n\nMeteor.startup(function () {\n  WebApp.addHtmlAttributeHook(() => ({\n    lang: 'en'\n  }));\n  connectHandler.use(function (req, res, next) {\n    res.setHeader('access-control-allow-origin', '*');\n    return next();\n  });\n});\nMeteor.startup(function () {\n  return Promise.asyncApply(() => {\n    // process.env.ROOT_URL = \"http://\" + Meteor.settings.public.qlikSenseHost;\n    // console.log(\n    //     \"********* We expect Qlik Sense to run on host: \",\n    //     process.env.ROOT_URL + \":\" + Meteor.settings.public.qlikSensePort\n    // );\n    // console.log('********* For END USERS we expect Sense to run on host: ', Meteor.settings.public.qlikSenseHost + ':' + Meteor.settings.public.qlikSensePort);\n    Promise.await(initQlikSense());\n    removeGeneratedResources();\n    optimizeMongoDB();\n  });\n}); //\n// ─── SETUP QLIK SENSE AFTER A CLEAN QlIK SENSE INSTALL ─────────────────────────────────────\n//\n//Check if Qlik Sense has been properly setup for this MeteorQRS tool..\n\nfunction initQlikSense() {\n  return Promise.asyncApply(() => {\n    console.log(\"------------------------------------\");\n    console.log(\"INIT QLIK SENSE\");\n    console.log(\"Project root folder: \", Meteor.absolutePath);\n\n    if (!Meteor.settings.broker.automationBaseFolder) {\n      Meteor.settings.broker.automationBaseFolder = path.join(Meteor.absolutePath, \".automation\");\n      console.log(\"Meteor.settings.broker.automationBaseFolder was empty, setting it to default: \", Meteor.settings.broker.automationBaseFolder);\n    }\n\n    if (!Meteor.settings.broker.customerDataDir) {\n      Meteor.settings.broker.customerDataDir = path.join(Meteor.absolutePath, \"customerData\");\n      console.log(\"Meteor.settings.broker.customerDataDir was empty, setting it to default: \", Meteor.settings.broker.customerDataDir);\n    }\n\n    try {\n      if (Meteor.settings.broker.runInitialQlikSenseSetup) {\n        console.log(\"The runInitialQlikSenseSetup setting has been set to true, so we expect to have a fresh Qlik Sense installation for which we now automatically populate with the apps, streams, license, security rules etc.\");\n\n        if (Meteor.settings.broker.qlikSense.installQlikSense) {\n          Promise.await(installQlikSense()); // await timeout(1000 * 60 * 20); //wait 20 minutes till the Qlik Sense installation has completed...\n        }\n\n        QSLic.insertLicense();\n        QSLic.insertUserAccessRule();\n        QSSystem.disableDefaultSecurityRules();\n        Promise.await(QSProxy.createVirtualProxies());\n        Promise.await(timeout(4000)); //wait till the proxy has restarted...\n\n        Promise.await(QSSystem.createSecurityRules());\n        QSStream.initSenseStreams();\n        Promise.await(QSApp.uploadAndPublishTemplateApps());\n        QSApp.setAppIDs();\n        Promise.await(QSApp.createAppConnections()); //import extra connections\n\n        QSExtensions.uploadExtensions();\n        QSLic.saveSystemRules();\n      } else {\n        //set the app Id for the self service bi and the slide generator app, for use in the IFrames etc.\n        QSApp.setAppIDs();\n      } //now qlik sense has been installed, we can try to connect, and load the streams and apps into our mongoDB\n\n\n      Meteor.call(\"updateLocalSenseCopy\");\n    } catch (error) {\n      console.error(\"Main.js, initQlikSense: Failed to run the initialization of Qlik Sense. Most likely reason is that Qlik Sense has not been installed, wrong hostnames, wrong cert directory...\", error);\n    }\n  });\n} //helper functions to await a set timeout\n\n\nfunction timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction sleep(fn, ...args) {\n  return Promise.asyncApply(() => {\n    Promise.await(timeout(3000));\n    return fn(...args);\n  });\n} //\n// ─── INSTALL QLIK SENSE ───────────────────────────────────────────────────────────\n//\n\n\nvar installQlikSense = function () {\n  return Promise.asyncApply(() => {\n    console.log(\"installQlikSense is true in the settings file so start creating the config file for the Sense silent script...\"); //we dynamically populate the Qlik sense silent installation config file, the hostname is the variable... Because we create a folder share with this name\n\n    var configFile = `<?xml version=\"1.0\"?>\n    <SharedPersistenceConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <DbUserName>username</DbUserName>\n    <DbUserPassword>password</DbUserPassword>\n    <DbHost>` + os.hostname() + `</DbHost>\n    <DbPort>4432</DbPort>\n    <RootDir>\\\\\\\\` + os.hostname() + `\\\\QlikSenseShare</RootDir>\n    <StaticContentRootDir>\\\\\\\\` + os.hostname() + `\\\\QlikSenseShare\\\\StaticContent</StaticContentRootDir>\n    <CustomDataRootDir>\\\\\\\\` + os.hostname() + `\\\\QlikSenseShare\\\\CustomData</CustomDataRootDir>\n    <ArchivedLogsDir>\\\\\\\\` + os.hostname() + `\\\\QlikSenseShare\\\\ArchivedLogs</ArchivedLogsDir>\n    <AppsDir>\\\\\\\\` + os.hostname() + `\\\\QlikSenseShare\\\\Apps</AppsDir>\n    <CreateCluster>true</CreateCluster>\n    <InstallLocalDb>true</InstallLocalDb>\n    <ConfigureDbListener>false</ConfigureDbListener>\n    <ListenAddresses>*</ListenAddresses>\n    <IpRange>0.0.0.0/0</IpRange>\n    </SharedPersistenceConfiguration>`; //SAVE Silent install CONFIG TO THE EXPORT FOLDER\n\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, \"InstallationSoftware\", \"spc.cfg\");\n    fs.outputFile(file, configFile, \"utf-8\");\n    console.log(\"------------------------------------\");\n    console.log('config file created! you can now run the \"start.bat\" in the \"C:\\\\GitHub\\QRSMeteor\\\\.automation\\\\InstallationSoftware\" folder as administrator');\n    console.error(\"We now create an error to ensure QRSMeteor stops further setup.  To test the Sense installation, you can open the QMC (also check the hostname). The QMC will ask for you license. But do not do anything like inserting the license. QRSMeteor will do this for you.\");\n    console.log(\"------------------------------------\");\n    throw new Error(\"Dummy error to make sure QRSMeteor stops running...\"); //removed auto install of sense, to prevent an issue with the rights...\n    // var executable = 'startSilentInstall.ps1';\n    // var installer = path.join(Meteor.settings.broker.automationBaseFolder, 'InstallationSoftware', executable);\n    // console.log('installer', installer)\n    // await new Promise(function(resolve, reject) {\n    //     try {\n    //         var spawn = require(\"child_process\").spawn,\n    //             child;\n    //         child = spawn(\"powershell.exe\", [installer]);\n    //         child.stdout.on(\"data\", function(data) {\n    //             console.log(\"Powershell Data: \" + data);\n    //         });\n    //         child.stderr.on(\"data\", function(data) {\n    //             console.error(\"Powershell Errors: \" + data);\n    //             return reject('Error in running the silent installation script of qlik sense...');\n    //         });\n    //         child.on(\"exit\", function() {\n    //             console.log(\"Powershell Script finished\");\n    //             return resolve(\"Powershell Script finished\");\n    //         });\n    //         child.stdin.end(); //end input.\n    //     } catch (error) {\n    //         console.error('error in calling the start of silent install of qlik sense, ', error);\n    //     }\n    // });\n  });\n}; // let ps = new shell({\n//     executionPolicy: 'Bypass',\n//     noProfile: true\n// });\n// var folder = Meteor.settings.broker.qlikSense.sharedPersistanceFolder;\n// var name = Meteor.settings.broker.qlikSense.sharedPersistanceFolderName;\n// // ps.addCommand('Write-Host Creating a shared folder on: ' + folder);\n// ps.addCommand('New-Item \"C:\\\\test\" –type directory');\n// // ps.addCommand('New-SmbShare –Name ' + name + ' –Path ' + folder + ' –FullAccess Everyone  ')\n// ps.invoke()\n//     .then(output => {\n//         console.log(output);\n//     })\n//     .catch(err => {\n//         console.error('Installation of Qlik Sense failed, make sure you check the log file in GitHub\\QRSMeteor\\.automation\\InstallationSoftware\\log.txt', err)\n//         ps.dispose();\n//     });\n//\n// ─── REMOVE STREAMS AND APPS CREATED DURING THE SAAS DEMO ───────────────────────\n//\n\n\nfunction removeGeneratedResources() {\n  // console.log('remove the all generated resources on each server start');\n  // Meteor.setTimeout(function() {\n  //     console.log('remove all generated resources in mongo and qlik sense periodically by making use of a server side timer');\n  //     Meteor.call('removeGeneratedResources', {});\n  // }, 0); //remove all logs directly at startup\n  if (Meteor.settings.broker.automaticCleanUpGeneratedApps === \"Yes\") {\n    Meteor.setInterval(function () {\n      console.log(\"remove all generated resources in mongo and qlik sense periodically by making use of a server side timer\");\n      Meteor.call(\"removeGeneratedResources\", {});\n    }, 1 * 86400000); //remove all logs/apps/streams every 1 day\n  }\n}\n\nfunction optimizeMongoDB() {\n  // console.log('## setting up mongo indexes on generationUserId in the generated resources, customers and other collections, to increase mongo performance');\n  TemplateApps._ensureIndex({\n    generationUserId: 1,\n    id: 1\n  });\n\n  GeneratedResources._ensureIndex({\n    generationUserId: 1,\n    id: 1\n  });\n\n  Apps._ensureIndex({\n    id: 1\n  });\n\n  Customers._ensureIndex({\n    generationUserId: 1\n  });\n\n  Streams._ensureIndex({\n    id: 1\n  });\n\n  APILogs._ensureIndex({\n    createdBy: 1\n  });\n\n  APILogs._ensureIndex({\n    createDate: 1\n  });\n} //\n// ─── GET AN UPDATE WHEN QLIK SENSE HAS CHANGED ──────────────────────────────────\n//\n// function createNotificationListeners() {\n//     //Create notification listener in Qlik sense https://help.qlik.com/en-US/sense-developer/3.1/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Notification-Remove-Change-Subscription.htm\n//     //console.log('********* On meteor startup, Meteor tool registers itself at Qlik Sense to get notifications from Sense on changes to apps and streams.');\n//     //console.log('********* we try to register a notification on this URL: HTTP post to http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=app');\n//     //console.log('********* The notification URL for Streams is: ' + Meteor.settings.private.notificationURL + '/streams');\n//     try {\n//         const resultApp = HTTP.post('http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=app', {\n//             headers: authHeaders,\n//             params: { 'xrfkey': senseConfig.xrfkey },\n//             data: Meteor.settings.private.notificationURL + '/apps'\n//         })\n//         const resultStream = HTTP.post('http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=stream', {\n//                 headers: authHeaders,\n//                 params: { 'xrfkey': senseConfig.xrfkey },\n//                 data: Meteor.settings.private.notificationURL + '/streams'\n//             })\n//             //console.log('Register notication success');\n//             // //console.log('the result from sense register App notification was: ', resultApp);\n//             // //console.log('the result from sense register Stream notification was: ', resultStream);\n//     } catch (err) {\n//         console.error('Create notification subscription in sense qrs failed', err);\n//         // throw new Meteor.Error('Create notification subscription in sense qrs failed', err);\n//     }\n// }\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/lib/yogiben.js\");\nrequire(\"/server/accounts.js\");\nrequire(\"/server/methods.js\");\nrequire(\"/server/proxy.js\");\nrequire(\"/server/publications.js\");\nrequire(\"/server/restEndpoints.js\");\nrequire(\"/server/routes.js\");\nrequire(\"/server/seeds.js\");\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["lib/yogiben.js","imports/api/server/QPSFunctions.js","imports/api/server/QRSAPI.js","imports/api/server/QRSFunctionsApp.js","imports/api/server/QRSFunctionsCustomProperties.js","imports/api/server/QRSFunctionsExtension.js","imports/api/server/QRSFunctionsLicense.js","imports/api/server/QRSFunctionsStream.js","imports/api/server/QRSFunctionsSystemRules.js","imports/api/APILogs.js","imports/api/apps.js","imports/api/config.js","imports/api/customers.js","imports/api/logger.js","imports/api/streams.js","imports/startup/accounts-config.js","imports/ui/UIHelpers.js","server/accounts.js","server/methods.js","server/proxy.js","server/publications.js","server/restEndpoints.js","server/routes.js","server/seeds.js","server/main.js"],"names":["module1","module","export","createVirtualProxies","getVirtualProxies","logoutUser","getRedirectURL","Meteor","watch","require","v","Customers","dummyCustomers","dummyCustomer","REST_Log","gitHubLinks","senseConfig","authHeaders","qliksrv","configCerticates","validateJSON","qrsSrv","lodash","default","fs","path","os","ip","v4","uuidv4","_","console","log","file","join","settings","broker","automationBaseFolder","proxySettings","readJson","err","Error","vpToCreate","websocketCrossOriginWhiteList","push","public","qlikSenseHost","address","hostname","existingProxies","found","some","existingVP","prefix","virtualProxy","createVirtualProxy","linkVirtualProxyToProxy","error","loadBalancingServerNodes","id","getServerNodeConfiguration","check","Object","request","response","HTTP","call","params","xrfkey","npmRequestOptions","data","proxyId","getProxyId","proxyConfig","getProxyServiceConfiguration","virtualProxies","qlikSensePort","Number","qlikSensePortSecure","qlikSense","proxyAllowHTTP","Boolean","unencryptedListenPort","listenPort","allowHttp","updateProxy","String","outputFile","JSON","stringify","methods","currentlyLoggedInUser","action","userId","customer","findOne","generationUserId","user","find","users","currentlyLoggedIn","getRedirectUrl","proxyRestUri","targetId","loggedInUser","passport","UserDirectory","UserId","name","Attributes","group","toUpperCase","country","url","createpassport","getTicketNumber","userProperties","requestTicketWithPassport","proxyGetTicketURI","SenseServerInternalLanIP","private","proxyPort","headers","message","Ticket","getJWTToken","uuid","sub","email","groups","Groups","genT","token","generate","certificatesDirectory","resetLoggedInUser","forEach","updatedUsers","map","update","_id","$set","logoutPresentationUser","UDC","slideGenerator","logoutVirtualProxyClientUsageUser","virtualProxyClientUsage","simulateUserLogin","query","numberAffectedDocuments","insertDummyCustomers","resetPasswordOrCreateUser","password","userExists","Accounts","findUserByEmail","setPassword","createUser","Roles","addUsersToRoles","each","insert","proxy","ticketRequestBody","TargetId","requestTicket","ticketResponse","TargetUri","indexOf","redirectURI","useSSL","host","hub","port","myQRS","http","myQRSMain","get","endpoint","checkPath","newParams","assign","length","post","del","put","uploadAndPublishTemplateApps","generateStreamAndApp","setAppIDs","createAppConnections","createAppConnection","copyApp","getApps","deleteApp","publishApp","importApp","Apps","TemplateApps","GeneratedResources","QSStream","Streams","qlikHDRServer","enigmaServerConfig","qrs","_slideGeneratorAppId","APILogs","enigma","promise","sanitize","newFolder","everyOneStreamId","getStreamByName","EveryoneAppStreamName","templateStreamId","TemplateAppStreamName","APIAppsStreamID","APIAppStreamName","appsInFolder","readdir","Promise","all","QVF","appName","substr","filePath","appId","uploadApp","_SSBIApp","copiedAppId","customers","templateApps","checkTemplateAppExists","checkCustomersAreSelected","templateApp","generateAppForTemplate","stream","selectionSheet","dataObject","slideObject","SSBI","sheetId","slideGeneratorApps","SSBIApps","SSBIApp","slideGeneratorAppId","createdBy","streamId","checkStreamStatus","customerDataFolder","createDirectory","createDataConnectionPerCustomer","newAppId","result","reloadAppAndReplaceScriptviaEngine","publishedAppId","newAppName","scriptReplace","config","process","on","up","qix","getService","replaceAndReloadApp","script","getScript","setScript","replaceScript","doReload","reloadApp","saveApp","doSave","senseDemoMaterials","absolutePath","c","dataConnections","type","connectionString","qConnectionId","createConnection","deleteDirectoryAndDataConnection","customerName","filename","dir","customerDataDir","ensureDir","fetch","resolve","reject","formData","my_file","createReadStream","headerValue","res","body","parse","guid","newGuid","createStream","appGuid","fileName","createCustomProperty","upsertCustomPropertyByName","deleteCustomProperty","getCustomProperties","newProperty","toString","choiceValues","Array","existingProperty","updatedProperty","customProperty","filter","customProperties","uploadExtensions","extensionsFolder","extensions","extension","uploadExtension","basename","getLicense","insertLicense","insertUserAccessRule","getSystemRules","saveSystemRules","demoUserAccessRule","lic","existingLicense","newLicense","license","serial","organization","LicenseControlNumber","control","licenseRule","ruleExist","rules","initSenseStreams","deleteStream","getStreams","qlikServer","streamName","StreamsToCreateAutomatically","getSecurityRules","disableDefaultSecurityRules","createSecurityRules","QSLic","ruleName","security","rulesToDisable","ruleDefinition","disabled","warn","securityRules","rule","stringToJSON","myString","myJSONString","myEscapedJSONString","replace","Mongo","Collection","createDate","Date","missingParameters","Random","_QIXSchema","isClient","_senseConfig","webIntegrationDemoPort","isServer","QRSconfig","sslRootCas","crypto","env","inject","bluebird","WebSocket","webIntegrationHost","generateXrfkey","headerKey","USERDOMAIN","USERNAME","isSecure","qrsPort","enginePort","_certs","engineConfig","ca","readFileSync","key","cert","qlikUserDomain","qlikUser","connectToSenseAsUserDirectory","connectToSenseAsUser","rejectUnauthorized","_engineConfig","passphrase","appname","QIXSchema","schema","session","createSocket","hexString","e","authentication","startup","split","sep","exampleSettingsFile","keysEqual","compareKeys","obj","hasSameProps","obj1","obj2","keys","every","prop","hasOwnProperty","objects","allKeys","reduce","object","concat","union","Set","size","updateUserForCustomer","updatedUser","selection","attachSchema","SimpleSchema","label","checked","optional","defaultValue","createdAt","autoValue","allowedValues","faker","company","companyName","findName","Logger","SenseSelections","AccountsTemplates","configure","confirmPassword","enablePasswordChange","forbidClientAccountCreation","overrideLoginErrors","sendVerificationEmail","lowercaseUsername","focusFirstInput","showAddRemoveServices","showForgotPasswordLink","showLabels","showPlaceholders","showResendVerificationEmailLink","continuousValidation","negativeFeedback","negativeValidation","positiveValidation","positiveFeedback","showValidating","homeRoutePath","redirectTimeout","texts","button","signUp","socialSignUp","socialIcons","title","forgotPwd","configureRoute","createPasport","redirectURLReceived","freshEnvironment","currentStep","Cookies","Template","registerHelper","date","moment","format","IntegrationPresentationSelectionSheet","Session","someValue","count","sort","equals","stepNr","Router","go","set","a","b","numberOfUsers","username","profile","GLOBAL_GROUP","AccountsGuest","enabled","anonymous","QSApp","QSProxy","QSSystem","QSExtensions","QSCustomProps","marked","showdown","converter","Converter","getHTMLFromMarkdownUrl","markdownResult","HTMLresult","content","getSenseSelectionObject","getAppIDs","multiTenantScenario","customerNames","resetEnvironment","remove","upsertTemplate","selector","currentApp","upsert","removeTemplate","removeGeneratedResources","generationUserSelection","resource","copyAppSelectedCustomers","templateAppId","removeAllCustomers","updateLocalSenseCopyApps","app","updateLocalSenseCopyStreams","updateLocalSenseCopy","publish","ready","generatedAppsFromUser","userIsInRole","$or","generatedStreamsFromUser","limit","stop","JsonRoutes","add","req","next","sampleData","customer1","sendResult","customer2","route","where","WebApp","shell","connectHandler","connectHandlers","addHtmlAttributeHook","lang","use","setHeader","initQlikSense","optimizeMongoDB","runInitialQlikSenseSetup","installQlikSense","timeout","ms","setTimeout","sleep","fn","args","configFile","automaticCleanUpGeneratedApps","setInterval","_ensureIndex"],"mappings":"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ACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACO,SAASwE,SAAT,CAAmByG,QAAnB,EAA6BhM,IAA7B,EAAmCZ,mBAAmB,aAAtD,EAAqE,CACxE;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAAA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;;;;;;;;;;;ACv2BA/F,OAAOC,MAAP,CAAc;AAAC2S,wBAAqB,MAAIA,oBAA1B;AAA+CC,8BAA2B,MAAIA,0BAA9E;AAAyGC,wBAAqB,MAAIA,oBAAlI;AAAuJC,uBAAoB,MAAIA;AAA/K,CAAd;AAAmN,IAAIzS,MAAJ;AAAWN,OAAOO,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,SAAOG,CAAP,EAAS;AAACH,aAAOG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIoK,KAAJ;AAAU7K,OAAOO,KAAP,CAAaC,QAAQ,4BAAR,CAAb,EAAmD;AAACqK,QAAMpK,CAAN,EAAQ;AAACoK,YAAMpK,CAA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","file":"/app.js","sourcesContent":["// import { Customers } from '/imports/api/customers';\n\n\n// AdminConfig = {\n//     collections: {\n//         Customers: {\n//             collectionObject: Customers,\n//         }\n//     },\n//     userSchema: new SimpleSchema({\n//         'profile.gender': {\n//             type: String,\n//             allowedValues: ['male', 'female']\n//         }\n//     })\n// };\n","import { Meteor } from \"meteor/meteor\";\nimport {\n  Customers,\n  dummyCustomers,\n  dummyCustomer,\n} from \"/imports/api/customers\";\nimport { REST_Log } from \"/imports/api/APILogs\";\nimport { gitHubLinks } from \"/imports/ui/UIHelpers\";\nvar fs = require(\"fs-extra\");\nconst path = require(\"path\");\nvar os = require(\"os\");\nvar ip = require(\"ip\");\n// const token = require(\"./token\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\n\n//\n// ─── IMPORT CONFIG FOR QLIK SENSE QRS ───────────────────────────────────────────\n//\n\nimport {\n  senseConfig,\n  authHeaders,\n  qrsSrv as qliksrv,\n  configCerticates,\n  validateJSON,\n} from \"/imports/api/config.js\";\nimport lodash from \"lodash\";\n_ = lodash;\n\n//\n// ─── CREATE VIRTUAL PROXIES ─────────────────────────────────────────────────────\n//\n\n// http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Virtual-Proxy-Create.htm\nexport async function createVirtualProxies() {\n  console.log(\"------------------------------------\");\n  console.log(\"CREATE VIRTUAL PROXIES\");\n  console.log(\"------------------------------------\");\n  var file = path.join(\n    Meteor.settings.broker.automationBaseFolder,\n    \"proxy\",\n    \"import\",\n    \"virtualProxySettings.json\"\n  );\n  try {\n    // READ THE PROXY FILE\n    var proxySettings = await fs.readJson(file);\n    try {\n      validateJSON(proxySettings);\n    } catch (err) {\n      throw new Error(\n        \"Cant read the virtual proxy definitions file: virtualProxySettings.json in your automation folder\"\n      );\n    }\n\n    //FOR EACH PROXY FOUND IN THE INPUTFILE (vpToCreate), CREATE IT IN SENSE. We also put the current ip/host in the list of sense since in most cases this tool runs on the same machine as sense.\n    for (var vpToCreate of proxySettings) {\n      if (vpToCreate.websocketCrossOriginWhiteList) {\n        vpToCreate.websocketCrossOriginWhiteList.push(\n          Meteor.settings.public.qlikSenseHost\n        );\n        vpToCreate.websocketCrossOriginWhiteList.push(ip.address());\n        vpToCreate.websocketCrossOriginWhiteList.push(os.hostname());\n      }\n      var existingProxies = getVirtualProxies();\n\n      // CHECK IF VIRT. PROXY ALREADY EXISTS IN SENSE\n      var found = existingProxies.some(function (existingVP) {\n        return existingVP.prefix === vpToCreate.prefix;\n      });\n      if (!found) {\n        var virtualProxy = createVirtualProxy(vpToCreate);\n        // THE VIRTUAL PROXY HAS BEEN CREATED, NOW LINK IT TO THE CENTRAL PROXY\n        linkVirtualProxyToProxy(virtualProxy);\n      } else {\n        console.log(\n          \"Virtual proxy \" +\n            vpToCreate.prefix +\n            \" already existed. We do not update existing ones.\"\n        );\n      }\n    }\n  } catch (err) {\n    console.error(err);\n    throw new Error(\"unable to create virtual proxies\", err);\n  }\n\n  function createVirtualProxy(virtualProxy) {\n    // get id of local node so we can link the virtual proxy to a load balancing node\n    virtualProxy.loadBalancingServerNodes = [\n      {\n        id: getServerNodeConfiguration().id,\n      },\n    ];\n    try {\n      check(virtualProxy, Object);\n      console.log(\"------CREATE VIRTUAL PROXY: \", virtualProxy.prefix);\n\n      var request = qliksrv + \"/qrs/virtualproxyconfig/\";\n      response = HTTP.call(\"POST\", request, {\n        params: {\n          xrfkey: senseConfig.xrfkey,\n        },\n        npmRequestOptions: configCerticates,\n        data: virtualProxy,\n      });\n      return response.data;\n    } catch (err) {\n      console.error(\"create virtual proxy failed\", err);\n    }\n    // }\n  }\n}\n\n// http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Virtual-Proxy-Link.htm\nfunction linkVirtualProxyToProxy(virtualProxy) {\n  // console.log('linkVirtualProxyToProxy', virtualProxy.id);\n\n  // GET ID OF PROXY ON THIS HOST\n  var proxyId = getProxyId();\n  // GET THE CONFIG OF THE PROXY (WHICH CONTAINS VIRTUAL PROXIES)\n  var proxyConfig = getProxyServiceConfiguration(proxyId);\n  // ADD THE NEW VIRTUAL PROXY TO THE EXISTING PROXY LIST\n  proxyConfig.settings.virtualProxies.push(virtualProxy);\n\n  try {\n    check(Meteor.settings.public.qlikSensePort, Number);\n    check(Meteor.settings.public.qlikSensePortSecure, Number);\n    check(Meteor.settings.broker.qlikSense.proxyAllowHTTP, Boolean);\n  } catch (error) {\n    console.error(\n      \"settings file incomplete, your are missing the qliksenseport, qlikSensePortSecure or proxyAllowHTTP\"\n    );\n  }\n\n  //UPDATE SOME PROXY SETTINGS\n  console.log(\"UPDATE SOME PROXY SETTINGS...\");\n  proxyConfig.settings.unencryptedListenPort =\n    Meteor.settings.public.qlikSensePort; //HTTP\n  proxyConfig.settings.listenPort = Meteor.settings.public.qlikSensePortSecure; //HTTPS\n  proxyConfig.settings.allowHttp =\n    Meteor.settings.broker.qlikSense.proxyAllowHTTP;\n\n  //OVERWRITE THE SETTINGS WITH THE COMPLETE UPDATED OBJECT.\n  updateProxy(proxyId, proxyConfig);\n}\n\nfunction updateProxy(proxyId, proxyConfig) {\n  try {\n    check(proxyId, String);\n    check(proxyConfig, Object);\n    // console.log('proxyConfig', proxyConfig.settings.virtualProxies)\n\n    var request = qliksrv + \"/qrs/proxyservice/\" + proxyId;\n    response = HTTP.call(\"PUT\", request, {\n      params: {\n        xrfkey: senseConfig.xrfkey,\n      },\n      npmRequestOptions: configCerticates,\n      data: proxyConfig,\n    });\n  } catch (err) {\n    console.error(\"update proxy failed\", err);\n  }\n}\n\nfunction getProxyId() {\n  try {\n    var request = qliksrv + \"/qrs/proxyservice/?xrfkey=\" + senseConfig.xrfkey;\n    response = HTTP.call(\"GET\", request, {\n      npmRequestOptions: configCerticates,\n    });\n    return response.data[0].id;\n  } catch (err) {\n    console.error(\"get proxyId failed\", err);\n  }\n}\n\nfunction getProxyServiceConfiguration(proxyId) {\n  try {\n    check(proxyId, String);\n\n    var request =\n      qliksrv +\n      \"/qrs/proxyservice/\" +\n      proxyId +\n      \"?xrfkey=\" +\n      senseConfig.xrfkey;\n    response = HTTP.call(\"GET\", request, {\n      npmRequestOptions: configCerticates,\n    });\n\n    //SAVE RPOXY CONFIG TO THE EXPORT FOLDER\n    var file = path.join(\n      Meteor.settings.broker.automationBaseFolder,\n      \"proxy\",\n      \"export\",\n      \"proxyServiceConfiguration.json\"\n    );\n    fs.outputFile(file, JSON.stringify(response.data, null, 2), \"utf-8\");\n\n    return response.data;\n  } catch (err) {\n    console.error(\"create virtual proxy failed\", err);\n  }\n}\n\nexport function getVirtualProxies() {\n  // console.log('--------------------------GET VIRTUAL PROXIES');//\n  try {\n    var request = qliksrv + \"/qrs/virtualproxyconfig/\";\n    response = HTTP.call(\"GET\", request, {\n      params: {\n        xrfkey: senseConfig.xrfkey,\n      },\n      npmRequestOptions: configCerticates,\n    });\n\n    var file = path.join(\n      Meteor.settings.broker.automationBaseFolder,\n      \"proxy\",\n      \"export\",\n      \"virtualProxyServiceConfiguration.json\"\n    );\n\n    // SAVE PROXY FILE TO DISK\n    fs.outputFile(file, JSON.stringify(response.data, null, 2), \"utf-8\");\n    return response.data;\n  } catch (err) {\n    console.error(\"create virtual proxy failed\", err);\n  }\n}\n\n// function getCentralProxy() {\n//     console.log('getCentralProxy: GET /qrs/ServerNodeConfiguration?filter=isCentral')\n// }\n\nfunction getServerNodeConfiguration() {\n  try {\n    var request =\n      qliksrv +\n      \"/qrs/servernodeconfiguration/local?xrfkey=\" +\n      senseConfig.xrfkey;\n    response = HTTP.call(\"GET\", request, {\n      npmRequestOptions: configCerticates,\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"create virtual proxy failed\", err);\n  }\n}\n\n//\n// ─── METEOR METHODS ─────────────────────────────────────────────────────────────\n//\n\nMeteor.methods({\n  currentlyLoggedInUser() {\n    // console.log(\"Meteor will now look which user is currently logged in, and request a ticket for this ID, and add his group memberships.\");\n    var call = {};\n    call.action = \"STEP 3: Server received request to create ticket\";\n    call.request =\n      \"Meteor server received a incoming method call from the browser. The meteor server will now look which user is currently logged in, and create a ticket for this ID, and add his group memberships.\";\n    REST_Log(call, Meteor.userId());\n\n    // first find the customers that have a logged in users (mongo returns a complete document)\n    var customer = Customers.findOne({\n      generationUserId: Meteor.userId(),\n      \"users.currentlyLoggedIn\": true,\n    });\n    // console.log('In our local database we can find the customer with the currentlyLoggedIn set to true for user: ' + loggedInUser + ', the customer which contains the user that the user selected with the dropdown: ', customer);\n\n    // now we have the document, we can look in the array of users, to find the one that is logged in.\n    var user;\n    if (!customer) {\n      // if no user is selected, just insert john as a dummy\n      // const error = 'You have not selected a user you want to simulate the Single Sign on with. For demo purposes we now selected John for you. You can also select your own user in step 4 of the SaaS demo';\n      var response = {};\n      // console.log('dummyCustomer :', dummyCustomer);\n      response.user = dummyCustomer.user;\n      response.customer = dummyCustomer;\n      // throw new Meteor.Warning('No user', error);\n    } else {\n      var user = _.find(customer.users, {\n        currentlyLoggedIn: true,\n      });\n      var response = {};\n      response.user = user;\n      response.customer = customer;\n    }\n    // console.log('the response is: ', response);\n    return response;\n  },\n  getRedirectUrl(proxyRestUri, targetId, loggedInUser) {\n    var response = Meteor.call(\"currentlyLoggedInUser\");\n    var customer = response.customer;\n    var user = response.user;\n\n    console.log(\n      \"UserID currently logged in in the demo platform: \" +\n        loggedInUser +\n        \". Meteor server side thinks the meteor.userId is \" +\n        Meteor.userId() +\n        \". We use this as the UDC name\"\n    );\n    // Create a paspoort (ticket) request: user directory, user identity and attributes\n    var passport = {\n      UserDirectory: Meteor.userId(), // Specify a dummy value to ensure userID's are unique E.g. \"Dummy\", or in my case, I use the logged in user, so each user who uses the demo can logout only his users, or the name of the customer domain if you need a Virtual proxy per customer\n      UserId: user.name, // the current user that we are going to login with\n      Attributes: [\n        {\n          group: customer.name.toUpperCase(),\n        }, // attributes supply the group membership from the source system to Qlik Sense\n        {\n          group: user.country.toUpperCase(),\n        },\n        {\n          group: user.group.toUpperCase(),\n        },\n      ],\n    };\n    console.log('Request ticket for this user passport\": ', passport);\n\n    // logging only\n    var call = {};\n    call.action =\n      \"STEP 4: User and group information received from customer database, now we can request a ticket\";\n    call.url = gitHubLinks.createpassport;\n    call.request =\n      'Request ticket for this user and his groups (an array of values which you can use in the security rules): \": ' +\n      JSON.stringify(passport);\n    REST_Log(call, Meteor.userId());\n\n    return getRedirectURL(passport, proxyRestUri, targetId, Meteor.userId());\n  },\n  getTicketNumber(userProperties, virtualProxy) {\n    // only get a ticket number for a SPECIFIC virtual proxy\n    console.log('getTicketNumber using properties:')\n    console.log('virtualProxy', virtualProxy)\n    console.log('userProperties', userProperties)\n    try {\n      check(userProperties.group, String);\n      check(virtualProxy, String);\n      check(Meteor.userId(), String);\n    } catch (err) {\n      throw new Meteor.Error(\n        \"Failed to login into Qlik Sense via a ticket\",\n        \"We could not request a ticket because the userId or groups (technical, generic) or virtual proxy, or UDC (your Meteor userId, are you not yet logged into Meteor?) are not provided\"\n      );\n    }\n    var passport = {\n      UserDirectory: Meteor.userId(), // Specify a dummy value to ensure userID's are unique E.g. \"Dummy\", or in my case, I use the logged in user, so each user who uses the demo can logout only his users, or the name of the customer domain if you need a Virtual proxy per customer\n      UserId: Meteor.userId(), // the current user that we are going to login with\n      Attributes: [\n        {\n          group: \"slideGenerator\",\n        }, // attributes supply the group membership from the source system to Qlik Sense\n        {\n          group: userProperties.group,\n        },\n        {\n          group: \"ITALY\",\n        }, // make sure the row level demo works by passing this\n      ],\n    };\n    //get the ticket number and return it to the client\n    return Meteor.call(\"requestTicketWithPassport\", virtualProxy, passport);\n  },\n  //only for demo purposes! never supply groups from the client...\n  requestTicketWithPassport(virtualProxy, passport) {\n    console.log('getTicketNumber passport', passport);\n    // var rootCas = require(\"ssl-root-cas\").create();//\n\n    // default for all https requests\n\n    // (whether using https directly, request, or another module)\n    // require(\"https\").globalAgent.options.ca = rootCas;\n\n    // http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/ProxyServiceAPI/Content/ProxyServiceAPI/ProxyServiceAPI-ProxyServiceAPI-Authentication-Ticket-Add.htm\n    var proxyGetTicketURI =\n      \"https://\" +\n      senseConfig.SenseServerInternalLanIP +\n      \":\" +\n      Meteor.settings.private.proxyPort +\n      \"/qps/\" +\n      virtualProxy +\n      \"/ticket\"; // \"proxyRestUri\": \"https://ip-172-31-22-22.eu-central-1.compute.internal:4243/qps/meteor/\",\n    // console.log('proxyGetTicketURI', proxyGetTicketURI)\n    try {\n      var response = HTTP.call(\"POST\", proxyGetTicketURI, {\n        npmRequestOptions: configCerticates,\n        headers: authHeaders,\n        params: {\n          xrfkey: senseConfig.xrfkey,\n        },\n        data: passport, // the user and group info for which we want to create a ticket\n      });\n    } catch (err) {\n      console.error(\n        \"REST call to request a ticket failed. PLEASE EXPORT AND IMPORT CERTIFICATES FROM QMC FOR THE CORRECT HOSTNAME\",\n        err\n      );\n      throw new Meteor.Error(\"Request ticket failed\", err.message);\n    }\n    return response.data.Ticket;\n  },\n  //https://qlik.dev/authenticate/jwt/create-signed-tokens-for-jwt-authorization\n  getJWTToken(passport) {\n    console.log(\"get JWT with passport\", passport);\n\n    try {\n      const uuid = uuidv4();\n      const sub = `sub_${uuid}`;\n      const name = passport.UserId;\n      const email = `${uuid}@demo.anon`;\n      const groups = passport.Groups;\n\n      const genT = token.generate(sub, name, email, groups);\n      console.log(\"🚀 ~ file: QPSFunctions.js:423 ~ getJWTToken ~ genT:\", genT)\n      return genT;\n    } catch (err) {\n      console.error(\n        \"unable to generate JWT token, did you supply the correct public.pem and private.pem in the dir: \"+Meteor.settings.private.certificatesDirectory,\n        err\n      );\n      throw new Meteor.Error(\"generate jwt token failed\", err.message);\n    }\n  },\n  resetLoggedInUser() {\n    // console.log(\"***Method resetLoggedInUsers\");\n    // console.log('call the QPS logout api, to invalidate the session cookie for each user in our local database');\n\n    // reset the local database. set all users to not logged in. We need this code because we do a simulation of the login and not a real end user login.\n    Customers.find({\n      generationUserId: Meteor.userId(),\n    }).forEach(function (customer) {\n      var updatedUsers = _.map(customer.users, function (user) {\n        if (user) {\n          user.currentlyLoggedIn = false;\n        }\n\n        // and just logout everybody in the user list\n        logoutUser(Meteor.userId(), user.name);\n        return user;\n      });\n\n      Customers.update(customer._id, {\n        $set: {\n          users: updatedUsers,\n        },\n      });\n    });\n    // logoutUser(Meteor.userId(), Meteor.userId()); //logout the user for the slide generator\n  },\n  logoutPresentationUser(UDC, name) {\n    console.log(\"logoutPresentationUser(UDC, name)\", UDC, name);\n    logoutUser(UDC, name, Meteor.settings.public.slideGenerator.virtualProxy);\n  },\n  logoutVirtualProxyClientUsageUser(UDC, name) {\n    console.log(\n      \"logout virtual proxy client usuage User(UDC, name)\",\n      UDC,\n      name\n    );\n    logoutUser(UDC, name, Meteor.settings.public.virtualProxyClientUsage);\n  },\n  simulateUserLogin(name) {\n    check(name, String);\n    Meteor.call(\"resetLoggedInUser\");\n    // console.log('*** Reset all logged in user done, now write in our local database the name for the current simulated user: generationUserId: ' + Meteor.userId() + ' & users.name:' + name);\n    var query = [\n      {\n        generationUserId: Meteor.userId(),\n        \"users.name\": name,\n      },\n      {\n        $set: {\n          \"users.$.currentlyLoggedIn\": true,\n        },\n      },\n    ];\n\n    Customers.update(\n      {\n        generationUserId: Meteor.userId(),\n        \"users.name\": name,\n      },\n      {\n        $set: {\n          \"users.$.currentlyLoggedIn\": true,\n        },\n      },\n      {},\n      function (error, numberAffectedDocuments) {\n        if (numberAffectedDocuments === 0) {\n          // if nothing is updated, insert some dummy customers\n          // console.log('simulateUserLogin numberAffectedDocuments: ', numberAffectedDocuments);\n          // name does not yet exist in the customers created by the current demo user. So insert our dummy customers.numberAffectedDocuments\n          insertDummyCustomers(Meteor.userId());\n          Customers.update(\n            {\n              generationUserId: Meteor.userId(),\n              \"users.name\": name,\n            },\n            {\n              $set: {\n                \"users.$.currentlyLoggedIn\": true,\n              },\n            }\n          );\n        }\n      }\n    );\n  },\n});\n\nMeteor.methods({\n  resetPasswordOrCreateUser(user) {\n    try {\n      // console.log('reset the password of the user before logging him in');\n      check(user.email, String);\n      check(user.password, String);\n    } catch (err) {\n      throw new Meteor.Error(\n        \"Missing Qlik.com user data\",\n        \"The user misses important information from its Qlik.com account\"\n      );\n    }\n    const userExists = Accounts.findUserByEmail(user.email);\n    var userId = {};\n\n    if (userExists) {\n      // console.log('########### found user, now reset his password: ', userExists);\n      userId = userExists._id;\n      Accounts.setPassword(userId, user.password);\n    } else {\n      userId = Accounts.createUser(user);\n      Roles.addUsersToRoles(userId, [\"untrusted\"], \"GLOBAL\"); // https://github.com/alanning/meteor-roles\n    }\n    return userId;\n  },\n});\n\nfunction insertDummyCustomers(generationUserId) {\n  // console.log('insertDummyCustomers called for generationUserId: ', generationUserId);\n  _.each(dummyCustomers, function (customer) {\n    customer.generationUserId = generationUserId;\n    Customers.insert(customer);\n  });\n}\n\n//Each proxy has its own session cookie, so you have to logout the users per proxy used.\nexport function logoutUser(UDC, name, proxy) {\n  if (!proxy) {\n    proxy = senseConfig.virtualProxyClientUsage;\n  } // use use the proxy for the dummy users from step 4\n  // console.log('******** QPS Functions: logout the current: ' + name + ' on proxy: ' + proxy);\n\n  if (name) {\n    // //console.log('Make QPS-logout call, We authenticate to Sense using the options (including a certificate) object in the HTTPs call: '); //, configCerticates);\n    // //console.log('Meteor tries to logout the user on this URL: https://' + senseConfig.SenseServerInternalLanIP + ':4243/qps/' + senseConfig.virtualProxyClientUsage + '/user/' + senseConfig.UDC + '/' + name);\n    try {\n      const call = {};\n      call.action = \"Logout user: \" + name;\n      call.url = gitHubLinks.logoutUser;\n      call.request =\n        \"https://\" +\n        senseConfig.SenseServerInternalLanIP +\n        \":4243/qps/\" +\n        proxy +\n        \"/user/\" +\n        UDC +\n        \"/\" +\n        name +\n        \"?xrfkey=\" +\n        senseConfig.xrfkey;\n      call.response = HTTP.call(\"DELETE\", call.request, {\n        npmRequestOptions: configCerticates,\n      });\n\n      REST_Log(call, UDC); // the UDC is the by definition the userId of meteor in our approach...\n      // console.log('The HTTP REQUEST to Sense QPS API:', call.request);\n      // console.log('The HTTP RESPONSE from Sense QPS API: ', call.response);\n    } catch (err) {\n      console.error(err);\n      throw new Meteor.Error(\"Logout user failed\", err.message);\n    }\n  }\n}\n\n// based on Rikard Braathen's QlikAuth module\nexport function getRedirectURL(\n  passport,\n  proxyRestUri,\n  targetId,\n  generationUserId\n) {\n  try {\n    check(passport, Object);\n    check(proxyRestUri, String);\n    check(targetId, String);\n    check(generationUserId, String);\n  } catch (error) {\n    throw new Meteor.error(\n      \"Request ticket failed\",\n      \"You did not specify a pasport, proxyUri, targetId  or generationUserID\",\n      error\n    );\n  }\n\n  // console.log('entered server side requestTicket module for user and passport', passport, proxyRestUri);\n  // see https://help.qlik.com/en-US/sense-developer/3.0/Subsystems/ProxyServiceAPI/Content/ProxyServiceAPI/ProxyServiceAPI-ProxyServiceAPI-Authentication-Ticket-Add.htm\n\n  var ticketRequestBody = passport;\n  ticketRequestBody.TargetId = targetId;\n  // console.log('The passport for requesting a ticket: ', passport);\n\n  try {\n    var call = {};\n    call.action = \"STEP 5: Request ticket at endpoint received from Sense\";\n    call.request = proxyRestUri + \"ticket\"; // we use the proxy rest uri which we got from the redirect from the proxy (the first bounce)\n    call.url = gitHubLinks.requestTicket;\n    call.response = HTTP.call(\"POST\", call.request, {\n      npmRequestOptions: configCerticates,\n      headers: authHeaders,\n      params: {\n        xrfkey: senseConfig.xrfkey,\n      },\n      data: passport, // the user and group info for which we want to create a ticket\n    });\n    REST_Log(call, generationUserId);\n  } catch (err) {\n    console.error(\"REST call to request a ticket failed\", err);\n    throw new Meteor.Error(\n      \"Request ticket failed via getRedirectURL\",\n      err.message\n    );\n  }\n\n  console.log(\"The HTTP REQUEST to Sense QPS API:\", call.request);\n  console.log(\"The HTTP RESPONSE from Sense QPS API: \", call.response);\n  var ticketResponse = call.response.data;\n  call.action =\n    \"STEP 6: Use response from our ticket request to create redirect url\";\n  call.request =\n    \"Use the redirect url we got back and the ticket string to make a redirect url for the client. Format: \" +\n    ticketResponse.TargetUri +\n    \"?QlikTicket=\" +\n    ticketResponse.Ticket +\n    \". JSON received: \" +\n    ticketResponse;\n  // REST_Log(call);\n\n  // Build redirect URL for the client including the ticket\n  if (ticketResponse.TargetUri.indexOf(\"?\") > 0) {\n    redirectURI =\n      ticketResponse.TargetUri + \"&QlikTicket=\" + ticketResponse.Ticket;\n  } else {\n    redirectURI =\n      ticketResponse.TargetUri + \"?QlikTicket=\" + ticketResponse.Ticket;\n  }\n\n  if (!redirectURI) {\n    if (Meteor.settings.public.useSSL) {\n      redirectURI =\n        \"https://\" +\n        senseConfig.host +\n        \":\" +\n        senseConfig.qlikSensePortSecure +\n        \"/\" +\n        senseConfig.virtualProxyClientUsage +\n        \"/\" +\n        hub;\n    } else {\n      redirectURI =\n        \"http://\" +\n        senseConfig.host +\n        \":\" +\n        senseConfig.port +\n        \"/\" +\n        senseConfig.virtualProxyClientUsage +\n        \"/\" +\n        hub;\n    }\n  }\n  console.log(\"Meteor server side created this redirect url: \", redirectURI);\n  return redirectURI;\n}\n","import {\n    Meteor,\n} from 'meteor/meteor';\nimport {\n    http,\n} from 'meteor/meteor';\n\nimport {\n    configCerticates,\n    senseConfig,\n    authHeaders,\n    qrsSrv\n} from '/imports/api/config';\n\nexport var myQRS = function myQRSMain() {\n\n    this.get = function get(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n        console.log('QRS module received GET request for endpoint', endpoint);\n\n        // copy the params to one object\n        var newParams = Object.assign({\n            xrfkey: senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.get(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: {},\n            });\n\n            try {\n                console.log('QRS GET result: response.data length: ', response.data.length);\n                 return response.data;\n            } catch (error) {\n                console.log('------------------------------------');\n                console.error('We did not get any data back from Qlik Sense (empty array). If you do not expect this, make sure you check the udc, username in the settings file.');\n                console.log('------------------------------------');\n            }           \n        } catch (err) {\n            var error = 'QRS HTTP GET FAILED FOR ' + endpoint;\n            console.error(err);\n            throw new Meteor.Error(500, 'This node server can not connect to Qlik Sense. Sometimes you have to wait 10 minutes after restarting... ' + error);\n        }\n    };\n\n    this.post = function post(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n\n        // copy the params to one object\n        var newParams = Object.assign({\n            'xrfkey': senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.post(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: data,\n            });\n            return response.data;\n        } catch (err) {\n            console.error('HTTP POST FAILED FOR ' + endpoint, err);\n        }\n    };\n\n    this.del = function del(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n        console.log('endpoint', endpoint)\n        console.log('data', data)\n\n        // copy the params to one object.\n        var newParams = Object.assign({\n            xrfkey: senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.del(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: data,\n            });\n            // console.log('response', response)\n            return response.data;\n        } catch (err) {\n            console.error('QRS HTTP DEL FAILED FOR ' + endpoint, err);\n        }\n    };\n\n    this.put = function put(path, params = {}, data = {}) {\n        var endpoint = checkPath(path);\n\n        // copy the params to one object\n        var newParams = Object.assign({\n            'xrfkey': senseConfig.xrfkey\n        }, params);\n        try {\n            var response = HTTP.put(endpoint, {\n                npmRequestOptions: configCerticates,\n                params: newParams,\n                data: data,\n            });\n            return response.data;\n        } catch (err) {\n            console.error('HTTP PUT FAILED FOR ' + endpoint, err);\n        }\n    };\n\n};\n\nfunction checkPath(path) {\n    console.log('checkPath: path', path);\n    console.log('checkPath: qrsSrv', qrsSrv);\n\n    try {\n        check(path, String);\n        check(qrsSrv, String);\n    } catch (err) {\n        throw Error(\"QRS module can not use an empty server: \" + qrsSrv + \" or path: \" + path + \" for the QRS API, settings.json correct?\")\n    }\n    return qrsSrv + path;\n}","import {\n    Meteor\n} from 'meteor/meteor';\nimport {\n    http\n} from 'meteor/meteor';\nimport {\n    Apps,\n    TemplateApps,\n    GeneratedResources\n} from '/imports/api/apps';\nimport * as QSStream from '/imports/api/server/QRSFunctionsStream';\nimport {\n    gitHubLinks\n} from '/imports/ui/UIHelpers';\n\n//import meteor collections\nimport {\n    Streams\n} from '/imports/api/streams';\nimport {\n    Customers\n} from '/imports/api/customers';\n\nimport {\n    createVirtualProxies\n} from '/imports/api/server/QPSFunctions';\n\n\n//import config for Qlik Sense QRS and Engine API//\nimport {\n    qlikHDRServer, // Qlik sense QRS endpoint via header authentication\n    senseConfig,\n    enigmaServerConfig,\n    qrsSrv,\n    qrs,\n    configCerticates,\n    _slideGeneratorAppId\n} from '/imports/api/config.js';\nimport {\n    APILogs,\n    REST_Log\n} from '/imports/api/APILogs';\nimport lodash from 'lodash';\n_ = lodash;\n\n//\n// ─── INSTALL NPM MODULES ────────────────────────────────────────────────────────\n//\nconst path = require('path');\nconst fs = require('fs-extra');\nconst enigma = require('enigma.js');\nvar promise = require('bluebird');\nvar request = require('request');\nvar sanitize = require(\"sanitize-filename\");\n\n\n//\n// ─── UPLOAD APPS FOR THE INITIAL SETUP OF QLIK SENSE ─────────────────────────\n//\n\n\n// UPLOAD TEMPLATES APPS FROM FOLDER, AND PUBLISH INTO THE TEMPLATES STREAM\nexport async function uploadAndPublishTemplateApps() {\n    console.log('------------------------------------');\n    console.log('uploadAndPublishTemplateApps');\n    console.log('------------------------------------');\n    var newFolder = path.join(Meteor.settings.broker.automationBaseFolder, 'apps');\n    console.log('uploadAndPublishTemplateApps: Read all files in the template apps folder \"' + newFolder + '\" and upload them to Qlik Sense.');\n\n    //GET THE ID OF THE IMPORTANT STREAMS (streams that QRSMeteor needs)\n    var everyOneStreamId = QSStream.getStreamByName(Meteor.settings.broker.qlikSense.EveryoneAppStreamName).id;\n    var templateStreamId = QSStream.getStreamByName(Meteor.settings.public.TemplateAppStreamName).id;\n    var APIAppsStreamID = QSStream.getStreamByName(Meteor.settings.broker.qlikSense.APIAppStreamName).id;\n    try {\n        check(newFolder, String);\n        check(everyOneStreamId, String);\n        check(templateStreamId, String);\n        check(APIAppsStreamID, String);\n    } catch (err) {\n        console.error('You did not specify the templateAppsFrom, everyone, api apps or template stream name in the settings.json file?');\n        throw new Meteor.Error('Missing Settings', 'You did not specify the everone, api apps or template stream name in the settings.json file?');\n    }\n\n    // LOAD ALL SENSE APPS IN FOLDER\n    var appsInFolder = await fs.readdir(newFolder);\n\n    // FOR EACH APP FOUND: PUBLISH IT    \n    return await Promise.all(appsInFolder.map(async(QVF) => {\n        try {\n            //GET THE NAME OF THE APP AND CREATE A FILEPATH\n            var appName = QVF.substr(0, QVF.indexOf('.'));\n            var filePath = path.join(newFolder, QVF);\n\n            //ONLY UPLOAD APPS IF THEY DO NOT ALREADY EXIST\n            if (!getApps(appName).length) {\n                //UPLOAD THE APP, GET THE APP ID BACK\n                var appId = await uploadApp(filePath, appName);\n\n                //BASED ON THE APP WE WANT TO PUBLISH IT INTO A DIFFERENT STREAM                      \n                if (appName === 'SSBI') { //should be published in the everyone stream\n                    _SSBIApp = appId; // for the client side HTML/IFrames etc.                                \n                    publishApp(appId, appName, everyOneStreamId);\n                } else if (appName === 'Sales') { //THIS ONE NEEDS TO BE COPIED AND PUBLISHED INTO 2 STREAMS: AS TEMPLATE AND FOR THE EVERYONE STREAM.\n                    publishApp(appId, appName, everyOneStreamId);\n                    var copiedAppId = copyApp(appId, appName);\n                    publishApp(copiedAppId, appName, templateStreamId);\n                } else if (appName === 'Slide generator') {\n                    _slideGeneratorAppId = appId,\n                        publishApp(appId, appName, APIAppsStreamID);\n                } else {\n                    //Insert into template apps stream\n                    publishApp(appId, appName, templateStreamId);\n                }\n            } else {\n                console.log('App ' + appName + ' already exists in Qlik Sense')\n            };\n        } catch (err) {\n            console.error(err);\n            throw new Meteor.Error('Unable to upload the app to Qlik Sense. ', err)\n        }\n    }))\n}\n\nexport async function generateStreamAndApp(customers, generationUserId) {\n    console.log('METHOD called: generateStreamAndApp for the template apps as stored in the database of the fictive OEM');\n\n    try {\n        var templateApps = checkTemplateAppExists(generationUserId); //is a template app selected, and does the guid still exist in Sense? if yes, return the valid templates\n        checkCustomersAreSelected(customers); //have we selected a  customer to do the generation for?\n\n        console.log('------------------------------------');\n        console.log('start generation for ', customers);\n        console.log('------------------------------------');\n        for (const customer of customers) {\n            for (const templateApp of templateApps) {\n                await generateAppForTemplate(templateApp, customer, generationUserId);\n            }\n        };\n    } catch (error) {\n        console.error(error);\n    }\n\n};\n\nexport function setAppIDs(params) {\n    console.log('------------------------------------');\n    console.log('SET APP IDs');\n    console.log('------------------------------------');\n    try {\n        console.log('check if all settings.json parameters are set...')\n        check(Meteor.settings.public.slideGenerator, {\n            name: String,\n            stream: String,\n            selectionSheet: String,\n            dataObject: String,\n            slideObject: String,\n            virtualProxy: String\n        });\n        check(Meteor.settings.public.SSBI, {\n            name: String,\n            stream: String,\n            sheetId: String,\n            appId: String\n        });\n    } catch (err) {\n        console.error('Missing parameters in your settings.json file for the SSBI or slidegenerator...', err)\n    }\n\n    try {\n        var slideGeneratorApps = getApps(Meteor.settings.public.slideGenerator.name, Meteor.settings.public.slideGenerator.stream);\n        var SSBIApps = getApps(Meteor.settings.public.SSBI.name, Meteor.settings.public.SSBI.stream);\n        if (slideGeneratorApps.length > 1) {\n            throw new Error('Can not automatically set the app ID for the slide generator. You have not one but you have multiple slide generator apps under the name ' + Meteor.settings.public.slideGenerator.name + ' in the stream ' + Meteor.settings.public.slideGenerator.stream);\n        }\n        if (SSBIApps.length > 1) {\n            throw new Error('Can not automatically set the app ID for the Self Service BI app. You have not one but you have multiple Self Service apps under the name ' + Meteor.settings.public.SSBI.name + ' in the stream ' + Meteor.settings.public.SSBI.stream);\n        }\n        senseConfig.SSBIApp = SSBIApps[0].id; //\n        console.log('The SSBI app id has been set to ', senseConfig.SSBIApp);\n\n        senseConfig.slideGeneratorAppId = slideGeneratorApps[0].id;\n        console.log('The slide generator app id has been set to ', senseConfig.slideGeneratorAppId);\n        console.log('------------------------------------');\n        console.log('YOU HAVE SUCCESFULLY STARTED QRSMETEOR, WE ARE CONNECTED TO QLIK SENSE');\n        console.log('------------------------------------');\n    } catch (err) {\n        console.error(err)\n        throw new Meteor.Error('The slideGenerator or Self Service BI app can not be found in Qlik sense, or you did not have all parameters set as defined in the the settings.json example file.', err);\n    }\n}\n\n\nasync function generateAppForTemplate(templateApp, customer, generationUserId) {\n    console.log('--------------------------GENERATE APPS FOR TEMPLATE');\n    // console.log(templateApp);\n    // console.log('############## START CREATING THE TEMPLATE ' + templateApp.name + ' FOR THIS CUSTOMER: ' + customer.name + ' FOR generationUserId: ' + generationUserId);\n    const call = {};\n    call.action = 'Start of generation of app ' + templateApp.name + ' for ' + customer.name;\n    call.createdBy = generationUserId;\n    call.request = 'Start creating app ' + templateApp.name + ' for customer ' + customer.name;\n    REST_Log(call, generationUserId);\n\n    try {\n        var streamId = checkStreamStatus(customer, generationUserId) //create a stream for the customer if it not already exists \n        var customerDataFolder = await createDirectory(customer.name); //for data like XLS/qvd specific for a customer\n        if (Meteor.settings.broker.createDataConnectionPerCustomer)\n         {await createAppConnection('folder', customer.name, customerDataFolder);}\n        var newAppId = copyApp(templateApp.id, templateApp.name, generationUserId);\n        var result = reloadAppAndReplaceScriptviaEngine(newAppId, templateApp.name, streamId, customer, customerDataFolder, '', generationUserId);\n        var publishedAppId = publishApp(newAppId, templateApp.name, streamId, customer.name, generationUserId);\n\n        //logging only\n        const call = {};\n        call.action = 'Finished generation for ' + customer.name;\n        call.request = templateApp.name + ' has been created and reloaded with data from the ' + customer.name + ' database';\n        REST_Log(call, generationUserId);\n        console.log('############## FINISHED CREATING THE TEMPLATE ' + templateApp.name + ' FOR THIS CUSTOMER: ' + customer.name);\n        GeneratedResources.insert({\n            'generationUserId': generationUserId,\n            'customer': customer.name,\n            'streamId': streamId,\n            'appId': newAppId\n        });\n    } catch (err) {\n        console.error('Failed to generate...', err);\n        throw new Meteor.Error('Generation failed', 'The server has an internal error, please check the server command logs');\n    }\n    return;\n};\n\n\n//Example to demo that you can also use the Engine API to get all the apps, or reload an app, set the script etc.\n//source based on loic's work: https://github.com/pouc/qlik-elastic/blob/master/app.js\nasync function reloadAppAndReplaceScriptviaEngine(appId, newAppName, streamId, customer, customerDataFolder, scriptReplace, generationUserId) {\n    console.log('--------------------------REPLACE SCRIPT AND RELOAD APP');\n\n    //set the app ID to be used in the enigma connection to the engine API\n    var config = Object.assign({}, enigmaServerConfig);\n    config.appId = appId;\n\n    try {\n        process.on('unhandledRejection', up => { //ignore \n        })\n        check(appId, String);\n        check(customer.name, String);\n        check(customerDataFolder, String);\n        check(generationUserId, String);\n\n        //connect to the engine\n        var qix = await enigma.getService('qix', config);\n        var call = {};\n        call.action = 'Connect to Qlik Sense';\n        call.request = 'Connect to Engine API (using Enigma.js) using an appId: ' + appId;\n        call.url = gitHubLinks.replaceAndReloadApp;\n        REST_Log(call, generationUserId);\n\n        /* try {\n            //create folder connection \n            console.log('create folder connection, if you see a warning below that means the connection already existed.');\n            var qConnectionId = await qix.createConnection({\n                \"qName\": customer.name,\n                \"qType\": \"folder\",\n                \"qConnectionString\": customerDataFolder\n            })\n            var call = {};\n            call.action = 'Create data/folder connection';\n            call.url = '';\n            call.request = 'Link to a folder on the server where users can put files/QVD, or create a REST/ODBC/OLEDB... database connection.';\n            call.response = 'created folder connection: ' + qConnectionId;\n            console.log('created folder connection: ', qConnectionId);\n        } catch (error) {\n            console.info('No issue, existing customer so his data folder connection already exists', error);\n        } */\n\n        //get the script\n        var script = await qix.getScript();\n        var call = {};\n        call.action = 'Get data load script';\n        call.url = gitHubLinks.getScript;\n        call.request = 'We extracted the following load script from the app';\n        call.response = script;\n        REST_Log(call, generationUserId);\n\n        //set the new script\n        var call = {};\n        call.response = await qix.setScript(replaceScript(script)) //we now just include the old script in this app\n        call.action = 'Insert customer specific data load script for its database';\n        call.url = gitHubLinks.setScript;\n        call.request = 'The script of the app has been replaced with a customer specific one. Normally you would replace the database connection for each customer. Or you can insert a customer specific script to enable customization per customer. ';\n        REST_Log(call, generationUserId);\n\n        //reload the app\n        var call = {};\n        call.response = await qix.doReload()\n        call.action = 'Reload the app';\n        call.url = gitHubLinks.reloadApp;\n        call.request = 'Has the app been reloaded with customer specific data?';\n        REST_Log(call, generationUserId);\n\n        //save the app\n        var call = {};\n        call.action = 'Save app'\n        call.url = gitHubLinks.saveApp;\n        call.request = 'App with GUID ' + appId + ' has been saved to disk';\n        REST_Log(call, generationUserId);\n        await qix.doSave();\n\n        REST_Log(call, generationUserId);\n        process.on('unhandledRejection', up => { throw up })\n    } catch (error) {\n        console.error('error in reloadAppAndReplaceScriptviaEngine via Enigma.JS, did you used the correct schema definition in the settings.json file?', error);\n    }\n\n    function replaceScript(script) {\n        //var scriptMarker = '§dummyDatabaseString§';\n        // if you want to replace the database connection per customer use the script below.\n        //return doc.setScript(script.replace(scriptMarker, scriptReplace)).then(function (result) {\n        //you can also change the sense database connection: https://github.com/mindspank/qsocks/blob/master/examples/App/create-dataconnection.js\n        return script;\n    }\n}\nexport async function createAppConnections() {\n    console.log('------------------------------------');\n    console.log('create app connections');\n    console.log('------------------------------------');\n    //create the default demo import folder where all the csv and qvf files are...\n    var senseDemoMaterials = path.join(Meteor.absolutePath, 'Sense Demo materials');\n    console.log('senseDemoMaterials', senseDemoMaterials)\n    await createAppConnection('folder', 'Import demo', senseDemoMaterials);\n\n    for (let c of Meteor.settings.broker.dataConnections) {\n        await createAppConnection(c.type, c.name, c.connectionString);\n    }\n}\n\nexport async function createAppConnection(type, name, path) {\n\n    //set the app ID to be used in the enigma connection to the engine API\n    var config = Object.assign({}, enigmaServerConfig);\n    config.appId = getApps('sales', 'Everyone')[0].id;\n    console.log('createAppConnection: ' + type + ' ' + name + ' ' + path + ' using the sales app in the everyone stream to create the connection: ' + config.appId);\n    try {\n        check(type, String);\n        check(path, String);\n        check(name, String);\n        check(config.appId, String);\n    } catch (error) {\n        console.error('Missing parameters to create a data connection', error);\n    }\n\n    try {\n        //connect to the engine\n        var qix = await enigma.getService('qix', config);\n\n        //create folder connection \n        console.log('create folder connection, if you see a warning below that means the connection already existed.');\n\n        var qConnectionId = await qix.createConnection({\n            \"qName\": name,\n            \"qType\": type,\n            \"qConnectionString\": path\n        })\n        console.log('created folder connection: ', qConnectionId);\n    } catch (error) {\n        console.error('Failed to create data connection', error);\n    }\n}\n\nfunction deleteDirectoryAndDataConnection(customerName) {\n    console.log('deleteDirectoryAndDataConnection');\n    //@TODO a bit dangerous, so better to do by hand. Make sure you can't delete root folder... \n    // https://stackoverflow.com/questions/18052762/remove-directory-which-is-not-empty\n}\n\nasync function createDirectory(customerName) {\n    console.log('createDirectory ', customerName)\n    try {\n        check(customerName, String);\n        var filename = sanitize(customerName);\n        const dir = path.join(Meteor.settings.broker.customerDataDir, customerName);\n        console.log('Meteor.settings.broker.customerDataDir', dir)\n        await fs.ensureDir(dir)\n        return dir;\n    } catch (error) {\n        throw new Meteor.Error('Failed to create directory for ', customerName);\n    }\n\n}\n\nfunction checkCustomersAreSelected(customers) {\n    if (!customers.length) { // = 0\n        throw new Meteor.Error('No customers', 'user has not specified at least one customer for which an app can be generated');\n    }\n};\n\n// CHECK IF SELECTED TEMPLATE APP EXISTS IN QLIK SENSE\n//These are the apps that the OEM partner has in his database, but do they still exists on the qliks sense side?\nfunction checkTemplateAppExists(generationUserId) {\n    console.log('------------------------------------');\n    console.log('checkTemplateAppExists for userID ', generationUserId)\n    console.log('------------------------------------');\n\n    var templateApps = TemplateApps.find({\n            'generationUserId': Meteor.userId()\n        })\n        .fetch();\n    return templateApps;\n\n    // console.log('templateApps found: ', templateApps)\n\n    // if (templateApps.length === 0) { //user has not specified a template\n    //     throw new Meteor.Error('No Template', 'user has not specified a template for which apps can be generated');\n    // }\n\n    // currentAppsInSense = getApps();\n    // if (!currentAppsInSense) {\n    //     throw new Meteor.Error('No apps have been received from Qlik Sense. Therefore you have selected a Qlik Sense App: ' + templateApp.name + ' with guid: ' + templateApp.id + ' which does not exist in Sense anymore. Have you deleted the template in Sense?');\n    // }\n\n    // _.each(templateApps, function(templateApp) {\n    //     console.log('templateApp in MongoDB: ', templateApp)\n    //     var templateFound = _.some(currentAppsInSense, ['id', templateApp.id]);\n\n    //     if (!templateFound) {\n    //         console.log('------------------------------------');\n    //         console.log('!! template app exists in mongoDB but not in Qlik Sense');\n    //         console.log('------------------------------------');\n    //         throw new Meteor.Error('You have selected a Qlik Sense App: ' + templateApp.name + ' with guid: ' + templateApp.id + ' which does not exist in Sense anymore. Have you deleted the template in Sense?');\n    //     } else {\n    //         console.log('checkTemplateAppExists: True, template guid exist: ', templateApp.id);\n    //     }\n    // })\n    // return templateApps;\n};\n\n//\n// ─── UPLOAD APP ─────────────────────────────────────────────────────────────────\n//\n\n\nasync function uploadApp(filePath, appName) {\n    console.log('Upload app: ' + appName + ' from path: ' + filePath + ' via header authentication server: ' + qlikHDRServer);\n    return await new Promise(function(resolve, reject) {\n        var formData = {\n            my_file: fs.createReadStream(filePath)\n        };\n\n        try {\n            request.post({\n                url: qlikHDRServer + '/qrs/app/upload?name=' + appName + '&xrfkey=' + senseConfig.xrfkey,\n                headers: {\n                    'Content-Type': 'application/vnd.qlik.sense.app',\n                    'hdr-usr': senseConfig.headerValue,\n                    'X-Qlik-xrfkey': senseConfig.xrfkey\n                },\n                formData: formData\n            }, function(error, res, body) {\n                if (!error) {\n                    var appId = JSON.parse(body).id;\n                    console.log('Uploaded \"' + appName + '.qvf\" to Qlik Sense and got appID: ' + appId);\n                    resolve(appId);\n                } else {\n                    console.error(\"Failed to upload app\" + appName, error);\n                    reject(error);\n                }\n            });\n        } catch (error) {\n            console.error('failed to upload app', error);\n        }\n    });\n}\n//\n// ─── COPYAPP ────────────────────────────────────────────────────────────────────\n//\n\n\nexport function copyApp(guid, name, generationUserId) {\n    check(guid, String);\n    check(name, String);\n    // console.log('QRS Functions copy App, copy the app id: ' + guid + ' to app with name: ', name);\n    const call = {};\n\n    try {\n        call.request = qrsSrv + '/qrs/app/' + guid + '/copy';\n        call.response = HTTP.post(call.request, {\n            'npmRequestOptions': configCerticates,\n            params: {\n                'xrfkey': senseConfig.xrfkey,\n                \"name\": name\n            },\n            data: {}\n        });\n\n\n        REST_Log(call, generationUserId);\n        var newGuid = call.response.data.id;\n        // console.log('Step 2: the new app id is: ', newGuid);\n        //addTag('App', newGuid);\n        return newGuid;\n    } catch (err) {\n        console.error(err);\n        call.action = 'Copy app FAILED';\n        call.response = err.message;\n        REST_Log(call, generationUserId);\n        throw new Meteor.Error('Copy app for selected customers failed', err.message);\n    }\n};\n\n//\n// ─── CHECKSTREAMSTATUS ──────────────────────────────────────────────────────────\n//\n\n\nfunction checkStreamStatus(customer, generationUserId) {\n    console.log('checkStreamStatus for: ' + customer.name);\n    //first update the list of streams we have from Sense. (we keep a private copy, which should reflect the state of Sense)\n    Meteor.call('updateLocalSenseCopyStreams');\n\n    var stream = Streams.findOne({\n        name: customer.name\n    }); //Find the stream for the name of the customer in Mongo, and get his Id from the returned object\n    var streamId = '';\n    if (stream) {\n        console.log('Stream already exists: ', stream.id);\n        streamId = stream.id;\n    } else {\n        console.log('No stream for customer exist, so create one: ' + customer.name);\n        streamId = QSStream.createStream(customer.name, generationUserId).id;\n        console.log('Step 1: the (new) stream ID for ' + customer.name + ' is: ', streamId);\n    }\n\n    return streamId;\n}\n\n//\n// ─── GETAPPS ────────────────────────────────────────────────────────────────────\n//    \n\nexport function getApps(name, stream) {\n    console.log('getApps ' + name + ' with stream: ' + stream);\n    var path = '/qrs/app/full';\n\n    //if a name/stream is provided only search the apps with this name\n    if (name) {\n        path += \"?filter=Name eq '\" + name + \"'\"\n        if (stream) {\n            path += \" and stream.name eq '\" + stream + \"'\"\n            console.log('getApps(name: ' + name + ' and stream ' + stream + ' via API path: ' + path);\n        }\n    } else {\n        console.log('getApps via API path: ' + path);\n    }\n\n    var call = {\n        action: 'Get list of apps',\n        request: path\n    };\n    // REST_Log(call,generationUserId);\n    try {\n        return qrs.get(call.request);\n    } catch (error) {\n        console.error('Error while getting the apps via the QRS API: we can not connect to Qlik Sense');\n        console.log(error);\n    }\n};\n\n//\n// ─── DELETEAPP ──────────────────────────────────────────────────────────────────\n//\n\n\nexport function deleteApp(guid, generationUserId = 'Not defined') {\n    console.log('QRSApp deleteApp: ', guid);\n    try {\n        const call = {};\n        call.request = qrsSrv + '/qrs/app/' + guid;\n        call.response = HTTP.del(call.request, {\n            params: {\n                xrfkey: senseConfig.xrfkey\n            },\n            npmRequestOptions: configCerticates,\n            data: {}\n        });\n\n        // Meteor.call('updateLocalSenseCopy');\n        //logging only\n        call.action = 'Delete app';\n        call.url = gitHubLinks.deleteApp;\n        call.response = call.response;\n        REST_Log(call, generationUserId);\n        return call.response;\n    } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('App delete failed', err.message);\n    }\n};\n\n\n//\n// ─── PUBLISHAPP ─────────────────────────────────────────────────────────────────\n//\n\n\nexport function publishApp(appGuid, appName, streamId, customerName, generationUserId) {\n    console.log('Publish app: ' + appName + ' to stream: ' + streamId);\n    check(appGuid, String);\n    check(appName, String);\n    check(streamId, String);\n\n    try {\n        const call = {};\n        call.request = qrsSrv + '/qrs/app/' + appGuid + '/publish?name=' + appName + '&stream=' + streamId;\n        call.response = HTTP.put(call.request, {\n            params: {\n                xrfkey: senseConfig.xrfkey\n            },\n            npmRequestOptions: configCerticates,\n            data: {}\n        });\n\n\n        //logging into database\n        call.action = 'Publish app';\n        call.url = gitHubLinks.publishApp;\n        REST_Log(call, generationUserId);\n        return call.response;\n    } catch (err) {\n        console.error(err);\n\n        // // IF APP ALREADY EXISTED TRY TO PUBLISH OVERWRITE IT (REPLACE)\n        // if(err.response.statusCode == 400){\n        //     replaceApp()\n        // }\n        // console.error('statusCode:', err.response.statusCode);\n        // console.info('Try to PUBLISH OVERWRITE THE APP, SINCE IT WAS ALREADY PUBLISHED');\n        throw new Meteor.Error('Publication of app ' + appName + ' for customer ' + customerName + ' failed: ', err.message);\n    }\n};\n\n// REPLACE APP \n// export function replaceApp(targetApp, replaceByApp, generationUserId) {\n//     console.log('Function: Replace app: ' + targetApp + ' by app ' + targetApp);\n//     check(appGuid, String);\n//     check(replaceByApp, String);\n\n//     try {\n//         const result = HTTP.put(qlikHDRServer + '/qrs/app/' + replaceByApp + '/replace?app=' + targetApp + '&xrfkey=' + senseConfig.xrfkey, {\n//             headers: {\n//                 'hdr-usr': senseConfig.headerValue,\n//                 'X-Qlik-xrfkey': senseConfig.xrfkey\n//             }\n//         });\n\n//         //logging into database\n//         const call = {};\n//         call.action = 'Replace app';\n//         call.request = 'HTTP.put(' + qlikHDRServer + '/qrs/app/' + replaceByApp + '/replace?app=' + targetApp + '&xrfkey=' + senseConfig.xrfkey;\n//         call.response = result;\n//         call.url = 'http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-App-Replace.htm';\n//         REST_Log(call, generationUserId);\n//         return result;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Publication of app ' + appName + ' for customer ' + customerName + ' failed: ', err.message);\n//     }\n// };\n\n\n// function createTag(name) {\n//     check(name, String);\n//     // console.log('QRS Functions Appp, create a tag: ' + name);\n\n//     try {\n//         const result = HTTP.post(qlikHDRServer + '/qrs/Tag', {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             },\n//             data: {\n//                 \"name\": name\n//             }\n//         })\n\n//         //logging only\n//         const call = {};\n//         call.action = 'create Tag';\n//         call.request = 'HTTP.get(http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/tag';\n//         call.response = result;\n//         REST_Log(call, generationUserId);\n\n//         return result;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Tag: ' + name + ' create failed ', err.message);\n//     }\n// };\n\n// function addTag(type, guid, tagName) {\n//     check(type, String);\n//     check(guid, String);\n\n//     //check if tag with tagName already exists\n\n//     var selectionId = createSelection(type, guid);\n//     addTagViaSyntheticToType('App', selectionId, tagGuid)\n\n// }\n\n// function createSelection(type, guid) {\n//     check(type, String);\n//     check(guid, String);\n//     console.log('QRS Functions APP, create selection for type: ', type + ' ' + guid);\n\n//     try {\n//         const result = HTTP.post(qlikHDRServer + '/qrs/Selection', {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             },\n//             data: {\n//                 items: [{\n//                     type: type,\n//                     objectID: guid\n//                 }]\n//             }\n//         })\n//         console.log('the result of selection for type: ', type + ' ' + guid);\n//         console.log(result);\n//         return result.id;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Selection: ' + type + ' failed for guid ' + guid, err.message);\n//     }\n// };\n\n// function deleteSelection(selectionId) {\n//     check(selectionId, String);\n//     console.log('QRS Functions APP, deleteSelection selection for selectionId: ', selectionId);\n\n//     try {\n//         const result = HTTP.delete(qlikHDRServer + '/qrs/Selection/' + selectionId, {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             }\n//         })\n//         console.log(result);\n//         return result.id;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Selection delete failed: ', err.message);\n//     }\n// };\n\n// function buildModDate() {\n//     var d = new Date();\n//     return d.toISOString();\n// }\n\n// function addTagViaSyntheticToType(type, selectionId, tagGuid) {\n//     check(type, String);\n//     check(guid, String);\n//     console.log('QRS Functions Appp, Update all entities of a specific type: ' + type + ' in the selection set identified by {id} ' + selectionId + ' based on an existing synthetic object. : ');\n\n//     try {\n//         const result = HTTP.put(qlikHDRServer + '/qrs/Selection/' + selectionId + '/' + type + '/synthetic', {\n//             headers: authHeaders,\n//             params: {\n//                 'xrfkey': senseConfig.xrfkey\n//             },\n//             data: {\n//                 \"latestModifiedDate\": buildModDate(),\n//                 \"properties\": [{\n//                     \"name\": \"refList_Tag\",\n//                     \"value\": {\n//                         \"added\": [tagGuid]\n//                     },\n//                     \"valueIsModified\": true\n//                 }],\n//                 \"type\": type\n//             }\n//         })\n//         console.log('the result of selection for type: ', type + ' ' + guid);\n//         console.log(result);\n//         return result;\n//     } catch (err) {\n//         console.error(err);\n//         throw new Meteor.Error('Selection: ' + type + ' failed for guid ' + guid, err.message);\n//     }\n// };\n\n\n// async function uploadPublishTemplateApps() {\n//     //check if template apps have been uploaded and published in the templates stream\n//     // if (true) { // (!Apps.find({ \"stream.name\": \"Templates\" }).count()) {\n//     console.warn('no template apps found, so upload from the templates dir.');\n//     var folder = Meteor.settings.private.templateAppsFrom;\n//     // var folder = await copyTemplatesToQRSFolder();\n//     console.log('apps folder', folder);\n//     uploadAndPublishApps(folder);\n//     // } else {}\n// }\n\n// //upload and publish all apps found in the folder to the templates stream\n// async function copyTemplatesToQRSFolder() {\n//     var newFolder = Meteor.settings.private.templateAppsTo + '\\\\' + process.env.USERDOMAIN + '\\\\' + process.env.USERNAME;\n//     try {\n//         await fs.copy(Meteor.settings.private.templateAppsFrom, newFolder, {\n//             overwrite: true\n//         }); //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n//         return newFolder\n//     } catch (err) {\n//         console.error('error copy Templates from ' + Meteor.settings.private.templateAppsFrom + ' To QRSFolder ' + Meteor.settings.private.templateAppsDir, err);\n//     }\n// }\n\n// For a system service account, the app must be in the %ProgramData%\\Qlik\\Sense\\Repository\\DefaultApps folder.\n// For any other account, the app must be in the %ProgramData%\\Qlik\\Sense\\Apps\\<login domain>\\<login user> folder.\n//so you have to copy your apps there first. in a fresh sense installation.\nexport function importApp(fileName, name, generationUserId = 'no user set') {\n    // check(fileName, String);\n    // check(name, String);\n    // console.log('QRS Functions import App, with name ' + name + ', with fileName: ', fileName);\n\n    // try {\n    //     const call = {};\n    //     call.action = 'Import app';\n    //     call.url = 'http://help.qlik.com/en-US/sense-developer/3.2/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-App-Import-App.htm'\n    //     call.request = qlikHDRServer + '/qrs/app/import?keepData=true&name=' + name + '&xrfkey=' + senseConfig.xrfkey; //using header auth.\n    //     call.response = HTTP.post(call.request, {\n    //         headers: {\n    //             'hdr-usr': senseConfig.headerValue,\n    //             'X-Qlik-xrfkey': senseConfig.xrfkey\n    //         },\n    //         data: '\"Sales.qvf\"'\n    //     });\n\n    //     REST_Log(call, generationUserId);\n    //     var newGuid = call.response.data.id;\n    //     return newGuid;\n    // } catch (err) {\n    //     console.error(err);\n    //     const call = {};\n    //     call.action = 'Import app FAILED';\n    //     call.response = err.message;\n    //     REST_Log(call, generationUserId);\n    //     throw new Meteor.Error('Import app failed', err.message);\n    // }\n};\n\n//https://www.npmjs.com/package/request#forms\n// function uploadApp(filePath, fileSize, appName) {\n//     console.log('QRS Functions upload App, with name ' + appName + ', with fileSize: ', fileSize + ' and filePath ' + filePath);\n//     var formData = {\n//         my_file: fs.createReadStream(filePath)\n//     };\n//     request.post({\n//         url: qlikHDRServer + '/qrs/app/upload?name=' + appName + '&xrfkey=' + senseConfig.xrfkey,\n//         headers: {\n//             'Content-Type': 'application/vnd.qlik.sense.app',\n//             'hdr-usr': senseConfig.headerValue,\n//             'X-Qlik-xrfkey': senseConfig.xrfkey\n//         },\n//         formData: formData\n//     }, function optionalCallback(err, httpResponse, body) {\n//         if (err) {\n//             return console.error('upload failed:', err);\n//         }\n//         console.log('Upload successful!  Server responded with:', body);\n//     });\n// }","import {\n    Meteor\n} from 'meteor/meteor';\nimport {\n    myQRS\n} from '/imports/api/server/QRSAPI';\n\nvar fs = require('fs-extra');\nconst path = require('path');\n\nimport {\n    senseConfig,\n    qrs\n} from '/imports/api/config.js';\n\n// http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Custom-Property-Add.htm\nexport function createCustomProperty(name, newProperty) {\n    console.log('------------------------------------');\n    console.log('createCustomProperty', name + ' ' + newProperty.toString())\n    console.log('------------------------------------');\n\n    try {\n        check(name, String);\n        check(newProperty, Object);\n    } catch (err) {\n        throw new Meteor.Error('createCustomProperty: Missing values', 'You did not specify a name or choice values for the custom property');\n    }\n\n    var result = qrs.post('/qrs/CustomPropertyDefinition', null, newProperty);\n    console.log('result of create custom property: ', result);\n}\n\nexport function upsertCustomPropertyByName(name, choiceValues) {\n    try {\n        check(name, String);\n        check(choiceValues, Array);\n    } catch (err) {\n        throw new Meteor.Error('upsertCustomPropertyByName: Missing values', 'You did not specify a name or update object for the custom property');\n    }\n\n    try {\n        var newProperty = {\n            \"name\": name,\n            \"valueType\": \"Text\",\n            \"objectTypes\": [\"App\", \"ContentLibrary\", \"DataConnection\", \"ReloadTask\", \"Stream\", \"User\"],\n            \"choiceValues\": choiceValues\n        }\n\n        var existingProperty = getCustomProperties(name)[0];\n        if (existingProperty) { //update it\n            var updatedProperty = Object.assign(existingProperty, newProperty);\n            var result = qrs.put('/qrs/CustomPropertyDefinition/' + updatedProperty.id, null, updatedProperty); //you can only update when you supply the original modified date, otherwise you get a 409 error. \n            console.log('Custom property update: ', result);\n        } else { //create a new one\n            createCustomProperty(name, newProperty);\n        }\n    } catch (error) {\n        console.log('error upserting custom property', error);\n    }\n}\n\nexport function deleteCustomProperty(name) {\n    console.log('deleteCustomProperty(name)', name);\n\n    var customProperty = getCustomProperties(name)[0];\n    if (customProperty) {\n        var result = qrs.del('/qrs/CustomPropertyDefinition/' + customProperty.id);\n        console.log('result after delete', result);\n    }\n\n}\n\nexport function getCustomProperties(name) {\n    var filter = name ? {\n        filter: \"Name eq '\" + name + \"'\"\n    } : null;\n    var customProperties = qrs.get('/qrs/CustomPropertyDefinition/full', filter);\n\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, 'customProperties', 'export', 'ExtractedCustomProperties.json');\n\n    // SAVE FILE TO DISK\n    fs.outputFile(file, JSON.stringify(customProperties, null, 2), 'utf-8');\n\n    return customProperties;\n}","import { Meteor } from 'meteor/meteor';\nimport { myQRS } from '/imports/api/server/QRSAPI';\n\n\n//\n// ─── IMPORT CONFIG FOR QLIK SENSE QRS AND ENGINE API ────────────────────────────\n//\n\n\nimport {\n    qlikHDRServer, // Qlik sense QRS endpoint via header authentication\n    senseConfig,\n} from '/imports/api/config.js';\n\n//\n// ─── INSTALL NPM MODULES ────────────────────────────────────────────────────────\n//\n\nconst fs = require('fs-extra');\nconst path = require('path');\nconst enigma = require('enigma.js');\nvar promise = require('bluebird');\nvar request = require('request');\nvar qrs = new myQRS();\n\n// export async function automaticUploadExtensions() {\n//     console.log('Automatically download the extensions from Github and upload to Qlik Sense');\n//     var url = 'https://github.com/kai/qlik-sense-timeline.git';\n//     var req = request.get(url);\n//     console.log('req', req)\n\n// }\n\nexport async function uploadExtensions() {\n    console.log('--------------------------UPLOAD EXTENSIONS');\n    // LOAD ALL EXTENSIONS IN FOLDER\n    var extensionsFolder = '';\n    try {\n        extensionsFolder = path.join(Meteor.settings.broker.automationBaseFolder, 'extensions');\n        console.log('extensionsFolder', extensionsFolder)\n        var extensions = await fs.readdir(extensionsFolder);\n    } catch (err) {\n        throw error('error loading all extensions in folder.', err);\n    }\n\n    // FOR EACH EXTENSION FOUND, UPLOAD IT    \n    await Promise.all(extensions.map(async(extension) => {\n        console.log('Current extension', extension)\n        try {\n            //CREATE A FILEPATH          \n            var filePath = path.join(extensionsFolder, extension);\n\n            //UPLOAD THE APP, GET THE APP ID BACK\n            var result = await uploadExtension('', filePath);\n        } catch (err) {\n            console.error(err);\n            throw new Meteor.Error('Unable to upload the app to Qlik Sense. ', err)\n        }\n    }))\n\n}\n\n\nasync function uploadExtension(password, filePath) {\n\n    console.log('uploadExtension: try to upload extension from path: ' + filePath);\n    var formData = {\n        my_file: fs.createReadStream(filePath)\n    };\n\n    // qrs.post('/qrs/extension/upload?pwd=' + password, data)\n    return await new Promise(function(resolve, reject) {\n\n        request.post({\n            url: qlikHDRServer + '/qrs/extension/upload?&xrfkey=' + senseConfig.xrfkey, //removed password parameter, assume blank\n            headers: {\n                'hdr-usr': senseConfig.headerValue,\n                'X-Qlik-xrfkey': senseConfig.xrfkey\n            },\n            formData: formData\n        }, function(error, res, body) {\n            if (!error) {\n                try {\n                    var id = JSON.parse(body).id;\n                    console.log('Uploaded \"' + path.basename(filePath) + ' to Qlik Sense.'); //\n                } catch (err) {\n                    console.log('Qlik Sense reported: ', body)\n                }\n                resolve();\n            } else {\n                reject(error);\n            }\n        });\n    });\n\n}","import { Meteor } from 'meteor/meteor';\nimport { myQRS } from '/imports/api/server/QRSAPI';\n\nvar fs = require('fs-extra');\nconst path = require('path');\n\n\n//\n// ─── IMPORT CONFIG FOR QLIK SENSE QRS AND ENGINE API ────────────────────────────\n//\n\n\nimport {\n    senseConfig,\n    qrs\n} from '/imports/api/config.js';\n\nvar demoUserAccessRule = \"SAAS DEMO - License rule to grant user access\";\n\n// http://help.qlik.com/en-US/sense-developer/June2017/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-License-Add.htm //\n\nexport function getLicense() {\n    var lic = qrs.get('/qrs/license');\n    return lic;\n}\n\nexport function insertLicense() {\n    console.log('------------------------------------');\n    console.log('INSERT LICENSE');\n    console.log('------------------------------------');\n    var existingLicense = qrs.get('/qrs/license');\n    var newLicense = Meteor.settings.private.license;\n\n    try {\n        console.log('check if all settings.json parameters are set...')\n        check(Meteor.settings.private.license, {\n            serial: String,\n            name: String,\n            organization: String\n        });\n        check(Meteor.settings.private.LicenseControlNumber, Number);\n    } catch (err) {\n        console.error('Missing parameters in your settings.json file for your Qlik Sense license', err)\n    }\n\n    if (!existingLicense) {\n        console.log('No existing license present, therefore inserted license into Qlik Sense.')\n            // try {\n            //     console.log('Update the existing license');\n            //     newLicense.id = existingLicense.id;\n            //     var response = qrs.del('/qrs/license/' + existingLicense.id);\n            //     // var response = qrs.put('/qrs/license/' + newLicense.id, newLicense, { control: Meteor.settings.private.LicenseControlNumber });\n            //     // console.error('Stop license insertion, license for ' + lic.organization + ' is already included: ', lic.serial);\n            //     // throw Error('You are trying to insert a license while the Qlik Sense is already licensed, please remove the existing one in the QMC');\n            // } catch (err) {\n            //     // lic did not already exist.\n            // }\n        var response = qrs.post('/qrs/license', { control: Meteor.settings.private.LicenseControlNumber }, newLicense);\n    }\n}\n\nexport function insertUserAccessRule() {\n    console.log('insert UserAccess Rule for all users');\n    var licenseRule = {\n        \"name\": demoUserAccessRule,\n        \"category\": \"License\",\n        \"rule\": \"((user.name like \\\"*\\\"))\",\n        \"type\": \"Custom\",\n        \"privileges\": [\"create\", \"read\", \"update\"],\n        \"resourceFilter\": \"License.UserAccessGroup_507c9aa5-8812-44d9-ade8-32809785eecf\",\n        \"actions\": 1,\n        \"ruleContext\": \"QlikSenseOnly\",\n        \"disabled\": false,\n        \"comment\": \"Rule to set up automatic user access for each user that has received a ticket via your SaaS platform\",\n        \"disabledActions\": [\"useaccesstype\"]\n    }\n    var ruleExist = getSystemRules(demoUserAccessRule);\n    if (typeof ruleExist[0] == 'undefined' || ruleExist.length === 0) {\n        console.log('Create a new user license rule since it did not exist.');\n        var response = qrs.post('/qrs/SystemRule', null, licenseRule);\n    }\n}\n\nexport function getSystemRules(name) {\n    console.log('Get system rules with name: ' + name);\n\n    var filter = name ? { filter: \"Name eq '\" + name + \"'\" } : null;\n    var rules = qrs.get('/qrs/SystemRule/full', filter);\n\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, 'securityrules', 'export', 'ExtractedSystemRules.json');\n\n    // SAVE FILE TO DISK\n    fs.outputFile(file, JSON.stringify(rules, null, 2), 'utf-8');\n\n    return rules;\n}\nexport function saveSystemRules() {\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, 'securityrules', 'export', 'ExtractedSystemRules.json');\n    console.log('------------------------------------');\n    console.log('Save all system rules in '+file);\n    console.log('------------------------------------');\n    var rules = qrs.get('/qrs/SystemRule');\n\n    try {\n        // SAVE FILE TO DISK\n        fs.outputFile(file, JSON.stringify(rules, null, 2), 'utf-8');        \n    } catch (error) {\n        console.error('unable to save systemrules, does the directory exist? Check your automationBaseFolder in your settings.json file, ', error);\n    }\n}","import { Meteor } from 'meteor/meteor';\nimport { GeneratedResources } from '/imports/api/apps.js';\nimport { gitHubLinks } from '/imports/ui/UIHelpers';\n\n// import config for Qlik Sense QRS and Engine API\nimport { senseConfig, authHeaders, qrsSrv, qrs, configCerticates } from '/imports/api/config.js';\nimport { REST_Log } from '/imports/api/APILogs';\n\nconst qlikServer = 'http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy;\n\n\n//\n// ─── CREATE STREAMS FOR THE INITIAL SETUP OF QLIK SENSE ─────────────────────────\n//\n\n\nexport function initSenseStreams() {\n    console.log('------------------------------------');\n    console.log('Create initial streams');\n    console.log('------------------------------------');\n\n    for (const streamName of Meteor.settings.broker.qlikSense.StreamsToCreateAutomatically) {\n        try {\n            console.log('Try to create stream: ' + streamName + ' if it not already exists');\n            if (!getStreamByName(streamName)) {\n                createStream(streamName)\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}\n\n//\n// ─── GENERIC STREAM FUNCTIONS ───────────────────────────────────────────────────\n//\n\n\nexport function deleteStream(guid, generationUserId) {\n    console.log('deleteStream: ', guid);\n    try {\n\n        var request = qrsSrv + '/qrs/stream/' + guid;\n        var response = HTTP.del(request, {\n            'npmRequestOptions': configCerticates,\n        });\n\n        // Logging\n        const call = {};\n        call.action = 'Delete stream';\n        call.request = \"HTTP.del(\" + qlikServer + '/qrs/stream/' + guid + '?xrfkey=' + senseConfig.xrfkey;\n        call.response = response;\n        REST_Log(call, generationUserId);\n        Meteor.call('updateLocalSenseCopy');\n        return response;\n    } catch (err) {\n        // console.error(err);\n        // throw new Meteor.Error('Delete stream failed', err.message);\n    }\n};\n\n\n//\n// ─── GET STREAM BY NAME ────────────────────────────────────────────────────────────\n//\n\n\nexport function getStreamByName(name) {\n    try {\n        var request = qrsSrv + \"/qrs/stream/full?filter=Name eq '\" + name + \"'\";\n        console.log('getStreamByName request', request)\n        var response = HTTP.get(request, {\n            params: { xrfkey: senseConfig.xrfkey },\n            npmRequestOptions: configCerticates,\n            data: {}\n        });\n\n        return response.data[0];\n    } catch (err) {\n        console.error(err);\n        throw Error('get streamByName failed', err.message);\n    }\n}\n\n//\n// ─── GET STREAMS ─────────────────────────────────────────────────────────────────\n//\n\n\nexport function getStreams() {\n    try {\n        const call = {};\n        call.action = 'Get list of streams';\n        call.request = qrsSrv + '/qrs/stream/full';\n        call.response = HTTP.get(call.request, {\n            params: { xrfkey: senseConfig.xrfkey },\n            npmRequestOptions: configCerticates,\n            data: {}\n        });\n        // REST_Log(call);        \n        return call.response.data;\n    } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('getStreams failed', err.message);\n    }\n};\n\n//\n// ─── CREATE STREAM ──────────────────────────────────────────────────────────────\n//\n\n\nexport function createStream(name, generationUserId) {\n    console.log('QRS Functions Stream, create the stream with name', name);\n\n\n    try {\n        check(name, String);\n        var response = qrs.post('/qrs/stream', null, { name: name });\n\n        // Meteor.call('updateLocalSenseCopy');\n        //logging\n        const call = {\n            action: 'Create stream',\n            url: gitHubLinks.createStream,\n            request: \"HTTP.post(qlikServer + '/qrs/stream', { headers: \" + JSON.stringify(authHeaders) + \", params: { 'xrfkey': \" + senseConfig.xrfkey + \"}, data: { name: \" + name + \"}}) --> USE OF HEADER AUTH ONLY FOR DEMO/REVERSE PROXY PURPOSES\",\n            response: response\n        };\n\n        REST_Log(call, generationUserId);\n        console.log('Create stream call.response;', call.response)\n        return call.response;\n    } catch (err) {\n        console.error(err);\n        throw new Meteor.Error('Create stream failed ', err.message);\n    }\n};\n\n\nMeteor.methods({\n    deleteStream(guid) {\n        check(guid, String);\n        //logging only\n        const call = {};\n        call.action = 'Delete stream';\n        call.request = 'Delete stream: ' + guid;\n        REST_Log(call);\n\n        const id = deleteStream(guid, Meteor.userId());\n        Meteor.call('updateLocalSenseCopy');\n        return id;\n    },\n    createStream(name) {\n        const streamId = createStream(name);\n        Meteor.call('updateLocalSenseCopy');\n\n        //store in the database that the user generated something, so we can later on remove it.\n        GeneratedResources.insert({\n            'generationUserId': Meteor.userId(),\n            'customer': null,\n            'streamId': streamId.data.id,\n            'appId': null\n        });\n        return streamId;\n    },\n    getStreams() {\n        return getStreams();\n    }\n});","import {\n    Meteor\n} from 'meteor/meteor';\n// import { APILogs } from '/imports/api/APILogs';\nvar fs = require('fs-extra');\nconst path = require('path');\n\nimport {\n    qrs,\n    validateJSON\n} from '/imports/api/config.js';\nimport * as QSLic from '/imports/api/server/QRSFunctionsLicense';\n\nexport function getSecurityRules(name) {\n    return QSLic.getSystemRules(name);\n}\n\nexport function disableDefaultSecurityRules() {\n    console.log('------------------------------------');\n    console.log('disable Default SecurityRules')\n    console.log('------------------------------------');\n\n    for (let ruleName of Meteor.settings.security.rulesToDisable) {\n        console.log('From Meteor.settings.security.rulesToDisable, Disable security rule: ', ruleName)\n\n        var ruleDefinition = QSLic.getSystemRules(ruleName)[0];\n        if (ruleDefinition) {\n            ruleDefinition.disabled = true;\n            var response = qrs.put('/qrs/SystemRule/' + ruleDefinition.id, null, ruleDefinition);\n        } else {\n            console.warn('The system rule does not exist in Sense: ' + ruleName);\n        }\n    };\n}\n\nexport async function createSecurityRules() {\n    console.log('------------------------------------');\n    console.log('create security rules in Qlik Sense based on import file');\n    console.log('------------------------------------');\n\n    var file = path.join(Meteor.settings.broker.automationBaseFolder, 'securityrules', 'import', 'securityRuleSettings.json');\n\n    // READ THE FILE \n    var securityRules = await fs.readJson(file);\n    try {\n        validateJSON(securityRules)\n    } catch (err) {\n        throw new Error('Cant read the security rule definitions file: ' + file);\n    }\n\n    securityRules.forEach(function(rule) {\n        //check if the rule already exists in Sense\n        if (!QSLic.getSystemRules(rule.name).length) {\n            //if not exist, create it\n            var response = qrs.post('/qrs/SystemRule', null, rule);\n        } else {\n            console.log('Security rule \"' + rule.name + '\" already existed');\n        }\n    });\n}\n\nfunction stringToJSON(myString) {\n    var myJSONString = JSON.stringify(myString);\n    var myEscapedJSONString = myJSONString.replace(/\\\\n/g, \"\\\\n\")\n        .replace(/\\\\'/g, \"\\\\'\")\n        .replace(/\\\\\"/g, '\\\\\"')\n        .replace(/\\\\&/g, \"\\\\&\")\n        .replace(/\\\\r/g, \"\\\\r\")\n        .replace(/\\\\t/g, \"\\\\t\")\n        .replace(/\\\\b/g, \"\\\\b\")\n        .replace(/\\\\f/g, \"\\\\f\");\n\n    console.log('myEscapedJSONString', myEscapedJSONString)\n}","import { Mongo } from 'meteor/mongo';\n\nexport const APILogs = new Mongo.Collection('apiLogs');\n\nexport function REST_Log(call, userId = 'Not defined') {\n    call.createDate = new Date();\n    call.generationUserId = userId;\n    APILogs.insert(call);\n}","import { Mongo } from 'meteor/mongo';\n\nexport const Apps = new Mongo.Collection('apps');\nexport const TemplateApps = new Mongo.Collection('templateApps');\nexport const GeneratedResources = new Mongo.Collection('generatedResources');\n\n","import {\n    Mongo\n} from 'meteor/mongo';\nimport {\n    Random\n} from 'meteor/random';\nimport _ from 'meteor/underscore';\nconst _QIXSchema = require('enigma.js/schemas/3.2.json');\n\n//This is the config that we need to make available on the client (the webpage)\nif (Meteor.isClient) {\n    var _senseConfig = {\n        \"host\": Meteor.settings.public.qlikSenseHost,\n        \"port\": Meteor.settings.public.qlikSensePort,\n        \"useSSL\": Meteor.settings.public.useSSL,\n        \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n        \"virtualProxySlideGenerator\": Meteor.settings.public.slideGenerator.virtualProxy,\n        \"webIntegrationDemoPort\": Meteor.settings.public.webIntegrationDemoPort,\n        \"QIXSchema\": _QIXSchema,\n        //ssbi and slide generator app id are set automatically on main.js (client side, via a call to the server)\n        // config.SSBIAppId = \n        // config.slideGeneratorAppId = \n    };\n}\n\n\n//SERVER SIDE\nif (Meteor.isServer) {\n    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n    import sslRootCas from 'ssl-root-cas';\n    sslRootCas.inject();\n    \n    console.log('This tool uses this config as defined in the settings-XYZ.json file in the root folder: ', Meteor.settings);\n    import crypto from 'crypto';\n    var fs = require('fs-extra');\n    const path = require('path');\n    var os = require('os');\n    // import fs from 'fs';\n    import {\n        myQRS\n    } from '/imports/api/server/QRSAPI';\n    const bluebird = require('bluebird');\n    const WebSocket = require('ws');\n\n    if (!Meteor.settings.public.qlikSenseHost) {\n        Meteor.settings.public.qlikSenseHost = os.hostname();\n    }\n    if (!Meteor.settings.public.SenseServerInternalLanIP) {\n        Meteor.settings.public.SenseServerInternalLanIP = os.hostname();\n    }\n    if (!Meteor.settings.public.webIntegrationHost) {\n        Meteor.settings.public.webIntegrationHost = os.hostname();\n    }\n\n    var _senseConfig = {\n        \"host\": Meteor.settings.public.qlikSenseHost,\n        \"SenseServerInternalLanIP\": Meteor.settings.public.SenseServerInternalLanIP,\n        \"port\": Meteor.settings.public.qlikSensePort,\n        \"useSSL\": Meteor.settings.public.useSSL,\n        \"xrfkey\": generateXrfkey(),\n        \"virtualProxy\": Meteor.settings.private.virtualProxy, //used to connect via REST to Sense, we authenticate via a http header. not for production!!!\n        \"virtualProxyClientUsage\": Meteor.settings.public.virtualProxyClientUsage,\n        \"headerKey\": Meteor.settings.private.headerKey,\n        \"headerValue\": process.env.USERDOMAIN + '\\\\' + process.env.USERNAME, //\"QLIK-AB0Q2URN5T\\\\Qlikexternal\",\n        \"isSecure\": Meteor.settings.private.isSecure,\n        \"qrsPort\": Meteor.settings.private.qrsPort,\n        \"enginePort\": Meteor.settings.private.enginePort\n    };\n\n    if (missingParameters(_senseConfig)) {\n        throw new Meteor.Error('Missing parameters in _senseConfig, you did not populate the settings.json file in the project root of MeteorQRS, or with docker: did you mount the volume with the config including the settings.json file? (with the correct name)');\n    }\n\n    if (!_senseConfig.host) {\n        throw new Meteor.Error('You have not started this meteor project with: meteor --settings settings-development.json ? You missed the reference to this settings file, or it is empty?');\n    }\n\n    //CONFIG FOR HTTP MODULE WITH HEADER AUTH (TO MAKE REST CALLS TO SENSE VIA HTTP CALLS).\n    export const authHeaders = {\n            'hdr-usr': _senseConfig.headerValue,\n            'X-Qlik-xrfkey': _senseConfig.xrfkey\n        } //\n    if (!Meteor.settings.private.certificatesDirectory) {\n        Meteor.settings.private.certificatesDirectory = 'C:\\\\ProgramData\\\\Qlik\\\\Sense\\\\Repository\\\\Exported Certificates\\\\.Local Certificates';\n        console.log('Meteor.settings.private.certificatesDirectory was empty, setting it to default: ', Meteor.settings.private.certificatesDirectory)\n    }\n\n    try {\n        export const _certs = {\n            ca: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/root.pem'),\n            key: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client_key.pem'),\n            cert: fs.readFileSync(Meteor.settings.private.certificatesDirectory + '/client.pem'),\n        }\n\n        //if you use windows and this tool runs on the same machine, you can keep the parameters empty\n        // and we use the user the node service runs under... .\n        var qlikUserDomain = '';\n        var qlikUser = '';\n\n        if (!Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory) {\n            qlikUserDomain = process.env.USERDOMAIN;\n            qlikUser = process.env.USERNAME;\n        } else {\n            qlikUserDomain = Meteor.settings.broker.qlikSense.connectToSenseAsUserDirectory;\n            qlikUser = Meteor.settings.broker.qlikSense.connectToSenseAsUser\n        }\n\n        export var configCerticates = {\n            rejectUnauthorized: false,\n            hostname: _senseConfig.SenseServerInternalLanIP,\n            headers: {\n                'x-qlik-xrfkey': _senseConfig.xrfkey,\n                'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`, //`UserDirectory=INTERNAL;UserId=sa_repository` you need to give this user extra roles before this works\n                'Content-Type': 'application/json'\n            },\n            key: _certs.key,\n            cert: _certs.cert,\n            ca: _certs.ca\n        };\n        console.log('configCerticates: we connect to Qlik Sense via certificates using these credentials: ', configCerticates);\n\n        //used for engimaJS, the engine API javascript wrapper\n        var _engineConfig = {\n            host: _senseConfig.SenseServerInternalLanIP,\n            isSecure: _senseConfig.isSecure,\n            port: Meteor.settings.private.enginePort,\n            headers: {\n                'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n            },\n            ca: _certs.ca,\n            key: _certs.key,\n            cert: _certs.cert,\n            passphrase: Meteor.settings.private.passphrase,\n            rejectUnauthorized: false, // Don't reject self-signed certs\n            appname: null,\n            QIXSchema: _QIXSchema\n        };\n\n        export const enigmaServerConfig = {\n            schema: _engineConfig.QIXSchema,\n            // appId: appId,\n            session: {\n                host: _engineConfig.host,\n                port: _engineConfig.port,\n            },\n            Promise: bluebird,\n            createSocket(url) {\n                return new WebSocket(url, {\n                    ca: _certs.ca,\n                    key: _certs.key,\n                    cert: _certs.cert,\n                    headers: {\n                        'X-Qlik-User': `UserDirectory=${qlikUserDomain};UserId=${qlikUser}`,\n                    },\n                });\n            },\n            // handleLog: logRow => console.log(JSON.stringify(logRow)),\n        }\n\n        //for enigma.js\n        export const engineConfig = _engineConfig;\n        //for general (mostly client side) stuff\n\n        // Qlik sense QRS endpoint via header authentication\n        export const qlikHDRServer = 'http://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.port + '/' + _senseConfig.virtualProxy;\n        export const qrsSrv = 'https://' + _senseConfig.SenseServerInternalLanIP + ':' + _senseConfig.qrsPort;\n\n        export const qrs = new myQRS();\n    } catch (error) {\n        console.warn('Make sure you run the \"QRS START.BAT\" as administrator? Please note that Qlik Sense is not installed, or certificate directory wrong in the settings.json file.');\n        // throw new Meteor.Error(500, 'We can not connect to Sense yet: Because we can not find the Sense certificates yet in the ' + Meteor.settings.private.certificatesDirectory + '. This can happen if Sense has not yet been installed....');\n\n    } //END CODE THAT NEEDS CERTIFICATES\n\n    function generateXrfkey() {\n        return Random.hexString(16);\n    }\n\n    export function validateJSON(body) {\n        try {\n            var data = JSON.parse(body);\n            // if came to here, then valid\n            return data;\n        } catch (e) {\n            // failed to parse\n            return null;\n        }\n    }\n\n    // //https://www.npmjs.com/package/qrs\n    //HEADER AUTHENTICATION\n    export const QRSconfig = {\n        authentication: 'header',\n        host: _senseConfig.host,\n        port: _senseConfig.port,\n        useSSL: false,\n        virtualProxy: _senseConfig.virtualProxy, //header proxy\n        headerKey: _senseConfig.headerKey,\n        headerValue: _senseConfig.headerValue, //'mydomain\\\\justme'\n    };\n\n    try {\n        Meteor.startup(async function() {\n            console.log('------------------------------------');\n            console.log('Validate settings.json parameters');\n            console.log('------------------------------------');\n            Meteor.absolutePath = path.resolve('.').split(path.sep + '.meteor')[0];\n            console.log('Meteor tries to find the settings-development-example.json file in Meteor.absolutePath:', Meteor.absolutePath)\n            var file = path.join(Meteor.absolutePath, 'settings-development-example.json');\t\t\t\n\n            // READ THE FILE \n            try {\n                var exampleSettingsFile = await fs.readJson(file);                \n\t\t\t\tconsole.log('TCL: exampleSettingsFile', exampleSettingsFile)\n            } catch (error) {\n                throw new Error('Meteor can not find your example settings file: ' + file);\n            }\n\n            // VALIDATE JSON OF SETTINGS FILE AGAINST EXAMPLE SETTINGS FILE\n            try {\n                validateJSON(exampleSettingsFile)\n            } catch (err) {\n                console.log(err);\n                throw new Error('Meteor wants to check your settings.json with the parameters in the example settings.json in the project root. Error: Cant read the example settings definitions file (not valid JSON): ' + file, err);\n            }\n\n            var keysEqual = compareKeys(Meteor.settings, exampleSettingsFile);\n            console.log('Settings file has all the keys as specified in the example json file?', keysEqual)\n            if (!keysEqual) {\n                throw new Error('Settings.json file does not have all keys as defined in the settings-development-example.json (in your project root), Please verify if you have all the keys as specified in the settings-development-example.json in the project root folder. In my dev environment: C:\\\\Users\\\\Qlikexternal\\\\Documents\\\\GitHub\\\\QRSMeteor');\n            }\n        })\n\n    } catch (error) {\n        throw new Error(error);\n    }\n} //exit server side config\n\nexport const senseConfig = _senseConfig;\n\nexport function missingParameters(obj) {\n    for (var key in obj) {\n        if (obj[key] !== null && obj[key] != \"\")\n            return false;\n    }\n    return true;\n}\n\nfunction hasSameProps(obj1, obj2) {\n    return Object.keys(obj1).every(function(prop) {\n        return obj2.hasOwnProperty(prop);\n    });\n}\n\nfunction compareKeys(...objects) {\n    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n    const union = new Set(allKeys);\n    return objects.every(object => union.size === Object.keys(object).length);\n}","import { Mongo } from 'meteor/mongo';\nexport const Customers = new Mongo.Collection('customers');\n\nMeteor.methods({\n        updateUserForCustomer(updatedUser) {\n            var selection = {\n                'generationUserId': Meteor.userId(),\n                'users.name': updatedUser.name\n            };\n            Customers.update(\n                selection, { $set: { 'users.$': updatedUser } });\n        },\n    })\n\nCustomers.attachSchema(new SimpleSchema({\n    name: {\n        type: String,\n        label: \"Customer name\"\n    },\n    checked: {\n        type: Boolean,\n        label: \"Selected for the generation?\",\n        optional: true,\n        defaultValue: true\n    },\n    createdAt: {\n        type: Date,\n        label: \"Date created\",\n        optional: true\n    },\n    createdBy: {\n        type: Object,\n        label: \"Date created\",\n        optional: true\n    },\n    generationUserId: {\n        type: String,\n        autoValue: function() {\n            return this.userId;\n        }\n    },\n    users: {\n        type: [Object],\n        optional: true\n    },\n    \"users.$\": {\n        type: Object\n    },\n    \"users.$.name\": {\n        type: String\n    },\n    \"users.$.group\": {\n        type: String,\n        allowedValues: ['Consumer', 'Contributor', 'Developer', 'Admin', 'Global auditor']\n    },\n    \"users.$.currentlyLoggedIn\": {\n        type: Boolean,\n        optional: true\n    },\n    \"users.$.country\": {\n        type: String,\n        allowedValues: ['Germany', 'United States', 'Italy']\n    }\n}));\n\nexport const dummyCustomer = {\n    \"name\": faker.company.companyName(),\n    \"checked\": true,\n    \"user\": {\n        \"name\": 'John',\n        \"group\": \"Consumer\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"Germany\"\n    }\n};\n\nexport const dummyCustomers = [{\n        \"name\": faker.company.companyName(),\n        \"checked\": true,\n        \"users\": [{\n            \"name\": 'John',\n            \"group\": \"Consumer\",\n            \"currentlyLoggedIn\": false,\n            \"country\": \"Germany\"\n        }, {\n            \"name\": 'Linda',\n            \"group\": \"Contributor\",\n            \"currentlyLoggedIn\": false,\n            \"country\": \"United States\"\n        }, {\n            \"name\": 'Martin',\n            \"group\": \"Developer\",\n            \"currentlyLoggedIn\": false,\n            \"country\": \"Italy\"\n        }, {\n            \"name\": 'Paul',\n            \"group\": \"Admin\",\n            \"currentlyLoggedIn\": false,\n            \"country\": \"Italy\"\n        }]\n    }, {\n        \"name\": faker.company.companyName(),\n        \"checked\": true,\n        \"users\": [{\n            \"name\": faker.name.findName(),\n            \"group\": \"Consumer\",\n            \"currentlyLoggedIn\": false,\n            \"country\": \"Italy\"\n        }]\n    }, {\n        \"name\": faker.company.companyName(),\n        \"checked\": true,\n        \"users\": [{\n            \"name\": faker.name.findName(),\n            \"group\": \"Consumer\",\n            \"currentlyLoggedIn\": false,\n            \"country\": \"Italy\"\n        }]\n    }\n    // {\n    //     \"name\": \"QPMG Accountants\",\n    //     \"checked\": true,\n    //     \"users\": [{\n    //         \"name\": \"Ron\",\n    //         \"group\": \"Global Auditor\",\n    //         \"currentlyLoggedIn\": false,\n    //         \"country\": \"Italy\"\n    //     }]\n    // }\n\n\n\n\n    // { \"name\": \"A&R Partners\", \"checked\": true },\n    //     { \"name\": \"A2Z Solutions\", \"checked\": true },\n    //     { \"name\": \"Aaron D. Meyer & Associates\", \"checked\": true },\n    //     { \"name\": \"Aaron Products\", \"checked\": true },\n    // { \"name\": \"Active Data\", \"checked\": true },\n    // { \"name\": \"Ben and Jerry’s\", \"checked\": true },\n    // { \"name\": \"Benedict\", \"checked\": true },\n    // { \"name\": \"Bizmarts\", \"checked\": true },\n    // { \"name\": \"C & C  Design\", \"checked\": true },\n    // { \"name\": \"C & J Engineering\", \"checked\": true },\n    // { \"name\": \"CAF Systemhaus\", \"checked\": true },\n    // { \"name\": \"CAM Group\", \"checked\": true },\n    // { \"name\": \"Caribian Specialties\", \"checked\": true },\n    // { \"name\": \"City Fresh Foods\", \"checked\": true },\n    // { \"name\": \"Clearout\", \"checked\": true },\n    // { \"name\": \"David Spencer Ltd.\", \"checked\": true },\n    // { \"name\": \"Dayton Malleable Inc.\", \"checked\": true },\n    // { \"name\": \"DCP Research\", \"checked\": true },\n    // { \"name\": \"DCS International\", \"checked\": true },\n    // { \"name\": \"DCS Laboratory\", \"checked\": true },\n    // { \"name\": \"Deak-Perera Group.\", \"checked\": true },\n    // { \"name\": \"Earth\", \"checked\": true },\n    // { \"name\": \"eDistrict\", \"checked\": true },\n    // { \"name\": \"EDP\", \"checked\": true },\n    // { \"name\": \"Ethyl Corporation\", \"checked\": true },\n    // { \"name\": \"Federal Focus\", \"checked\": true },\n    // { \"name\": \"Fill It\", \"checked\": true },\n    // { \"name\": \"Filmotype\", \"checked\": true },\n    // { \"name\": \"Fins\", \"checked\": true },\n    // { \"name\": \"Gate\", \"checked\": true },\n    // { \"name\": \"Gulf and Western Industries\", \"checked\": true },\n    // { \"name\": \"Harte-Hanks (formerly Locator)\", \"checked\": true },\n    // { \"name\": \"Harvard Trust Company\", \"checked\": true },\n    // { \"name\": \"HCHS\", \"checked\": true },\n    // { \"name\": \"Healtheon\", \"checked\": true },\n    // { \"name\": \"Hetrick Systems\", \"checked\": true },\n    // { \"name\": \"Home Team\", \"checked\": true },\n    // { \"name\": \"Homebound\", \"checked\": true },\n    // { \"name\": \"IBVA\", \"checked\": true },\n    // { \"name\": \"Icon\", \"checked\": true },\n    // { \"name\": \"Icon Site Builders\", \"checked\": true },\n    // { \"name\": \"Idyllwild\", \"checked\": true },\n    // { \"name\": \"J. S. Lee Associates\", \"checked\": true },\n    // { \"name\": \"K International\", \"checked\": true },\n    // { \"name\": \"K.C. Irving\", \"checked\": true },\n    // { \"name\": \"Kari & Associates\", \"checked\": true },\n    // { \"name\": \"Karsing\", \"checked\": true },\n    // { \"name\": \"Kazinformcom\", \"checked\": true },\n    // { \"name\": \"KentISP\", \"checked\": true },\n    // { \"name\": \"Kool-Seal\", \"checked\": true },\n    // { \"name\": \"Laker Airways\", \"checked\": true },\n    // { \"name\": \"Livermore  Laboratories (LSLI)\", \"checked\": true },\n    // { \"name\": \"LiveWire BBS and   Favourite Links\", \"checked\": true },\n    // { \"name\": \"MATRIX\", \"checked\": true },\n    // { \"name\": \"Miles Laboratories, Inc.\", \"checked\": true },\n    // { \"name\": \"NACSCORP\", \"checked\": true },\n    // { \"name\": \"Onestar\", \"checked\": true },\n    // { \"name\": \"Pace\", \"checked\": true },\n    // { \"name\": \"Pacific Group\", \"checked\": true },\n    // { \"name\": \"Pacific Matics\", \"checked\": true },\n    // { \"name\": \"Pacific Sierra Research\", \"checked\": true },\n    // { \"name\": \"Pacific Voice\", \"checked\": true },\n    // { \"name\": \"Pacific West Enterprises\", \"checked\": true },\n    // { \"name\": \"PacificServ\", \"checked\": true },\n    // { \"name\": \"Panngea\", \"checked\": true },\n    // { \"name\": \"PAP (Maintenance)\", \"checked\": true },\n    // { \"name\": \"Paracel\", \"checked\": true },\n    // { \"name\": \"Patient\", \"checked\": true },\n    // { \"name\": \"Pinnacle Micro\", \"checked\": true },\n    // { \"name\": \"QualServe\", \"checked\": true },\n    // { \"name\": \"Quantum 4Xyte  Architects\", \"checked\": true },\n    // { \"name\": \"Qwest\", \"checked\": true },\n    // { \"name\": \"R&R Group\", \"checked\": true },\n    // { \"name\": \"R.J. Matter & Associates\", \"checked\": true },\n    // { \"name\": \"Ra Co Amo\", \"checked\": true },\n    // { \"name\": \"RC\", \"checked\": true },\n    // { \"name\": \"Ready-to-Run\", \"checked\": true },\n    // { \"name\": \"Remedy\", \"checked\": true },\n    // { \"name\": \"Renegade info Crew\", \"checked\": true },\n    // { \"name\": \"Reuters Usability Group\", \"checked\": true },\n    // { \"name\": \"ReviewBooth\", \"checked\": true },\n    // { \"name\": \"RFI Corporation\", \"checked\": true },\n    // { \"name\": \"Road Warrior International\", \"checked\": true },\n    // { \"name\": \"Robust Code\", \"checked\": true },\n    // { \"name\": \"Sage\", \"checked\": true },\n    // { \"name\": \"Sagent\", \"checked\": true },\n    // { \"name\": \"Salamander Junction\", \"checked\": true },\n    // { \"name\": \"Satronix\", \"checked\": true },\n    // { \"name\": \"Satyam\", \"checked\": true },\n    // { \"name\": \"Scientific Atlanta\", \"checked\": true },\n    // { \"name\": \"ScotGold Products\", \"checked\": true },\n    // { \"name\": \"Screen Saver.com\", \"checked\": true },\n    // { \"name\": \"Sifton Properties Limited\", \"checked\": true },\n    // { \"name\": \"Sigma\", \"checked\": true },\n    // { \"name\": \"Signature\", \"checked\": true },\n    // { \"name\": \"SignatureFactory\", \"checked\": true },\n    // { \"name\": \"Soloman Brothers\", \"checked\": true },\n    // { \"name\": \"Southern Company\", \"checked\": true },\n    // { \"name\": \"Stone Consolidated Corporation\", \"checked\": true },\n    // { \"name\": \"Talou\", \"checked\": true },\n    // { \"name\": \"Tampere\", \"checked\": true },\n    // { \"name\": \"Tandy Corporation\", \"checked\": true },\n    // { \"name\": \"Tangent\", \"checked\": true },\n    // { \"name\": \"Tao Group\", \"checked\": true },\n    // { \"name\": \"Target Marketing\", \"checked\": true },\n    // { \"name\": \"Team ASA\", \"checked\": true },\n    // { \"name\": \"Team Financial Management Systems\", \"checked\": true },\n    // { \"name\": \"Teca-Print\", \"checked\": true },\n    // { \"name\": \"Time Warner\", \"checked\": true },\n    // { \"name\": \"Towmotor Corporation\", \"checked\": true },\n    // { \"name\": \"Tredegar Company\", \"checked\": true },\n    // { \"name\": \"Trend Line Corporation\", \"checked\": true },\n    // { \"name\": \"U. S. Exchange\", \"checked\": true },\n    // { \"name\": \"Unison Management Concepts\", \"checked\": true },\n    // { \"name\": \"United States  (USIT)\", \"checked\": true },\n    // { \"name\": \"UUmail\", \"checked\": true },\n    // { \"name\": \"ValiCert\", \"checked\": true },\n    // { \"name\": \"Valley  Solutions\", \"checked\": true },\n    // { \"name\": \"Valpatken\", \"checked\": true },\n    // { \"name\": \"Vanstar\", \"checked\": true },\n    // { \"name\": \"Venable\", \"checked\": true },\n    // { \"name\": \"Venred\", \"checked\": true },\n    // { \"name\": \"Watcom International\", \"checked\": true },\n    // { \"name\": \"Xentec\", \"checked\": true },\n    // { \"name\": \"Xilinx\", \"checked\": true },\n    // { \"name\": \"XVT\", \"checked\": true },\n    // { \"name\": \"Zero Assumption Recovery\", \"checked\": true },\n    // { \"name\": \"Zilog\", \"checked\": true },\n    // { \"name\": \"Zitel\", \"checked\": true },\n]\n","import { Mongo } from 'meteor/mongo';\n\n//stores all the clicks and slides shown\nexport const Logger = new Mongo.Collection('logger');\nexport const SenseSelections = new Mongo.Collection('senseSelections');","import { Mongo } from 'meteor/mongo';\n \nexport const Streams = new Mongo.Collection('streams');\n","\nAccountsTemplates.configure({\n    // Behavior\n    confirmPassword: false,\n    enablePasswordChange: true,\n    forbidClientAccountCreation: false,\n    overrideLoginErrors: true,\n    sendVerificationEmail: false,\n    lowercaseUsername: false,\n    focusFirstInput: true,\n\n    // Appearance\n    showAddRemoveServices: false,\n    showForgotPasswordLink: false,\n    showLabels: true,\n    showPlaceholders: true,\n    showResendVerificationEmailLink: false,\n\n    // Client-side Validation\n    continuousValidation: false,\n    negativeFeedback: false,\n    negativeValidation: true,\n    positiveValidation: true,\n    positiveFeedback: true,\n    showValidating: true,\n\n    // // Privacy Policy and Terms of Use\n    // privacyUrl: 'privacy',\n    // termsUrl: 'terms-of-use',\n\n    // Redirects\n    homeRoutePath: '/',\n    redirectTimeout: 4000,\n\n    // // Hooks\n    // onLogoutHook: myLogoutFunc,\n    // onSubmitHook: mySubmitFunc,\n    // preSignUpHook: myPreSubmitFunc,\n    // postSignUpHook: myPostSubmitFunc,\n\n    // Texts\n    texts: {\n      button: {\n          signUp: \"Register now to start using the Qlik Sense SaaS demo\"\n      },\n      socialSignUp: \"Register\",\n      socialIcons: {\n          \"meteor-developer\": \"fa fa-rocket\"\n      },\n      title: {\n          forgotPwd: \"Recover Your Password\"\n      },\n    },\n});\n\nAccountsTemplates.configureRoute('signIn');\nAccountsTemplates.configureRoute('changePwd');\n// AccountsTemplates.configureRoute('enrollAccount');\n// AccountsTemplates.configureRoute('forgotPwd');\n// AccountsTemplates.configureRoute('resetPwd');\nAccountsTemplates.configureRoute('signUp');\n\n","    // import meteor collections\n    import {\n        Apps,\n        TemplateApps\n    } from '/imports/api/apps';\n    import {\n        Streams\n    } from '/imports/api/streams';\n    import {\n        Customers\n    } from '/imports/api/customers';\n    import {\n        senseConfig\n    } from '/imports/api/config';\n\n\n    export var gitHubLinks = {\n        createStream: 'https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsStream.js#L113',\n        copyApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L477\",\n        replaceAndReloadApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L275\",\n        publishApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L604\",\n        requestTicket: \"https://github.com/QHose/QRSMeteor/blob/50bf903dc67d8d1b3757b572e8b2dedbb63202da/imports/api/server/QPSFunctions.js#L205\",\n        createPasport: \"https://github.com/QHose/QRSMeteor/blob/50bf903dc67d8d1b3757b572e8b2dedbb63202da/imports/api/server/QPSFunctions.js#L56\",\n        redirectURLReceived: \"https://github.com/QHose/QRSMeteor/blob/master/imports/SSO/client/SSO.js#L100\",\n        deleteApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L570\",\n        logoutUser: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QPSFunctions.js#L461\",\n        saveApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L300\",\n        getScript: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L275\",\n        setScript: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L288\",\n        reloadApp: \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QRSFunctionsApp.js#L292\",\n    };\n\n    if (Meteor.isClient) {\n        var Cookies = require('js-cookie');\n\n        // console.log('Setup generic helper functions, for functions every template needs');\n        Template.registerHelper('formatDate', function(date) {\n            return moment(date)\n                .format('DD-MM-YYYY');\n        });\n\n        // // Template.registerHelper('formatNumber', function(myNumber) {\n        //     var commaFormat = d3.format(\",\");\n        //     // The expression /,/g is a regular expression that matches all commas.\n        //     return commaFormat(myNumber)\n        //         .replace(/,/g, \".\");\n        // });\n\n        Template.registerHelper('URL_Youtube_howToDemo', function() {\n            return 'https://www.youtube.com/embed/OulQS-1fH-A?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk';\n        });\n        Template.registerHelper('URL_Youtube_quickIntro', function() {\n            return '';\n        });\n\n        Template.registerHelper('URL_Youtube_1mflashyIntro', function() {\n            return 'https://www.youtube.com/embed/W3gDKdv6K8Y';\n        });\n\n        Template.registerHelper('URL_Youtube_playlist', function() {\n            return 'https://www.youtube.com/playlist?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk';\n        });\n        Template.registerHelper('URL_Youtube_integrated_flow', function() {\n            return \"https://www.youtube.com/embed/M49nv6on5Eg?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n        });\n\n        Template.registerHelper('URL_Youtube_generic_security_intro', function() {\n            return \"https://www.youtube.com/embed/sdCVsMzTf64\";\n        });\n\n\n        Template.registerHelper('URL_Youtube_webintegration_introduction', function() {\n            return \"https://www.youtube.com/embed/zuNvZ_UTmow?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n        });\n\n        //QAP\n        Template.registerHelper('URL_Youtube_webintegration_extended', function() {\n            return \"https://www.youtube.com/embed/yLTqzftDa7s\";\n        });\n\n        Template.registerHelper('URL_Youtube_architecture_introduction', function() {\n            return \"https://www.youtube.com/embed/sv5nKDvmRPI?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n        });\n\n        Template.registerHelper('URL_Youtube_security_introduction', function() {\n            return \"https://www.youtube.com/embed/XJ9dOHoMiXE?list=PLqJfqgR62cVAZxS34WGnByjASKrGf0Fpk\";\n        });\n\n        Template.registerHelper('URL_Youtube_security_deepDive', function() {\n            return \"https://www.youtube.com/embed/iamo6RLc5Pg\";\n        });\n\n        Template.registerHelper('URL_Youtube_concept_behind', function() {\n            return \"https://www.youtube.com/embed/1PjcTFnC4Mo\";\n        });\n\n        Template.registerHelper('doc_demo_manual', function() {\n            return '/docs/How to demo the Qlik Sense SaaS demo platform.pdf';\n        });\n\n        Template.registerHelper('doc_sec_function_task_matrix', function() {\n            return '/docs/QlikSense Authorizations - Function and Tasks_Demo.xlsx';\n        });\n\n        Template.registerHelper('doc_securtityIntegration', function() {\n            return 'https://community.qlik.com/docs/DOC-17599';\n        });\n        Template.registerHelper('doc_processIntegration', function() {\n            return 'https://community.qlik.com/docs/DOC-17831';\n        });\n\n\n        Template.registerHelper('doc_integrationOverview', function() {\n            return 'https://community.qlik.com/docs/DOC-9533';\n        });\n\n        Template.registerHelper('doc_sourceCode', function() {\n            return '/docs/Qlik Sense SaaS demo tool documentation of source code.docx';\n        });\n\n        Template.registerHelper('doc_demo_setup_instructions', function() {\n            return '/docs/Qlik Sense SaaS demo tool setup instructions.docx';\n        });\n\n        Template.registerHelper('doc_webIntegration', function() {\n            return 'https://community.qlik.com/docs/DOC-17834';\n        });\n        Template.registerHelper('doc_dataIntegration', function() {\n            return 'https://onedrive.live.com/view.aspx?cid=0805405928a75727&id=documents&resid=805405928A75727%211330&app=OneNote&authkey=!ANwk5S8KPC__-dw&&wd=target%28%2F%2FEMBEDDED%20ANALYTICS.one%7Cbf2972be-48a0-46fa-af7a-f6d2f80cf06b%2FData%20integration%20Combine%20sources%20into%20one%20associative%20model%7Ce669a0a2-9a83-470e-aae8-ba63ac500038%2F%29';\n        });\n\n        Template.registerHelper('seq_ticketing_flow', function() {\n            return \"http://knsv.github.io/mermaid/live_editor/#/view/c2VxdWVuY2VEaWFncmFtCkJyb3dzZXItPj5NZXRlb3Igd2ViIGludGVncmF0aW9uIGRlbW86IFVzZXIgbG9ncyBpbiBpbnRvIE1ldGVvciAKQnJvd3Nlci0-PiBQcm94eTogSUZyYW1lIHRyaWVzIHRvIG9wZW4gU2Vuc2UgY29udGVudCB2aWEgbGluayB0aGF0IGNvbnRhaW5zIC9wcm94eS8KUHJveHktPj5NZXRlb3IgU1NPIGNsaWVudDogUmVkaXJlY3QgcmVxdWVzdCB0byB3ZWJwYWdlIG9uIHRoZSBjbGllbnQgKGNsaWVudCBzaWRlIHJvdXRlKS4KCk5vdGUgcmlnaHQgb2YgUHJveHk6IFByb3h5IGFsc28gaW5jbHVkZXMgdGFyZ2V0SWQgPSA8SUQgZm9yIHRoZSBvcmlnaW5hbCBVUkkgdGhhdCB0aGUgdXNlciB0cmllcyB0byBhY2Nlc3M-LCBhbmQgcHJveHlSZXN0VXJpID0gPHRoZSBVUkkgd2hlcmUgdGhlIGF1dGhlbnRpY2F0aW9uIG1vZHVsZSBjYW4gYWNjZXNzIHRoZSBSRVNUIEFQST4KTWV0ZW9yIFNTTyBjbGllbnQtPk1ldGVvciBzZXJ2ZXI6ICBjbGllbnQgY2FsbHMgKHVzZXIgYXdhcmUpIHNlcnZlciBzaWRlIG1ldGhvZApOb3RlIHJpZ2h0IG9mIE1ldGVvciBzZXJ2ZXI6IFNpbmNlIHRoZSB1c2VyIGlzIGFscmVhZHkgbG9nZ2VkIGluIGluIE1ldGVvciwgd2UgY2FuIHJlcXVlc3QgdGhlIHVzZXJJRCBhbmQgZ3JvdXAgbWVtYmVyc2hpcCBmcm9tIHRoZSBNZXRlb3Igc2Vzc2lvbi4gVHJ1c3QgbWVjaGFuaXNtOiBTZXJ2ZXIgaW1wb3J0ZWQgUWxpayBTZW5zZSBjbGllbnQgY2VydGlmaWNhdGUuCk1ldGVvciBzZXJ2ZXItPj5RUFMgQVBJOiBSZXF1ZXN0IHRpY2tldCBhdCBRUFMgQVBJLCBwcm92aWRlIHRoZSB1c2VySWQgYW5kIGdyb3VwcyBpbiBKU09OLgpOb3RlIHJpZ2h0IG9mIE1ldGVvciBzZXJ2ZXI6IE9wdGlvbmFsbHkgaW5jbHVkZSB0aGUgcmVkaXJlY3QgcGFyYW1ldGVyIHRvIGZvcndhcmQgdGhlIHVzZXIgYmFjayB0byB0aGUgcGFnZSBoZSBpbml0aWFsbHkgdHJpZWQgdG8gYWNjZXNzLgpRUFMgQVBJLS0-Pk1ldGVvciBzZXJ2ZXI6IFFQUyBBUEkgcmV0dXJucyBhIHRpY2tldCBudW1iZXIgKGFuZCBwb3NzaWJseSByZWRpcmVjdCBVUkwpIHdoaWNoIHlvdSBoYXZlIHRvIGFwcGVuZCBpbiB0aGUgVVJMIApNZXRlb3Igc2VydmVyLS0-PiBNZXRlb3Igd2ViIGludGVncmF0aW9uIGRlbW86IENyZWF0ZSBhIHJlZGlyZWN0IFVSTCB3aGljaCB0aGUgY2xpZW50IGNvZGUgY2FuIHB1dCBpbiB0aGUgYnJvd3NlciBVUkwgYmFyLiAKTm90ZSByaWdodCBvZiBNZXRlb3Igd2ViIGludGVncmF0aW9uIGRlbW86IENsaWVudCBzaWRlIGNvZGUsIHJlcGxhY2VzIHRoZSB1cmwgaW4gYnJvd3NlciwgYW5kIGZvcndhcmRzIHRoZSB1c2VyIHRvIFFsaWsgU2Vuc2UuIFVzZXIgbm93IHJlY2VpdmVzIGEgUWxpayBTZW5zZSBzZXNzaW9uIGNvb2tpZSAoc2VlIHZpcnR1YWwgcHJveHkgY29uZmlnKSwgYW5kIGFuZCBzdWNoIHNpbmdsZSBzaWduIG9uIGlzIGNvbmZpZ3VyZWQu\";\n        });\n\n        Template.registerHelper('github_create_stream', function() {\n            return gitHubLinks.createStream;\n        });\n\n        Template.registerHelper('github_copy_app', function() {\n            return gitHubLinks.copyApp;\n        });\n\n        Template.registerHelper('github_replace_and_reload_app', function() {\n            return gitHubLinks.replaceAndReloadApp;\n        });\n\n        Template.registerHelper('github_publish_app', function() {\n            return gitHubLinks.publishApp;\n        });\n\n        Template.registerHelper('github_logout_user', function() {\n            return \"https://github.com/QHose/QRSMeteor/blob/master/imports/api/server/QPSFunctions.js#L18\";\n        });\n\n        Template.registerHelper('senseServerHub', function() {\n            return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage + '/hub';\n        });\n\n        Template.registerHelper('senseServerDevHub', function() {\n            return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage + '/dev-hub';\n        });\n\n        Template.registerHelper('senseServerQMC', function() {\n            return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage + '/qmc';\n        });\n\n        Template.registerHelper('senseServer', function() {\n            return 'https://' + senseConfig.host + ':' + senseConfig.port + '/' + senseConfig.virtualProxyClientUsage;\n        });\n\n        Template.registerHelper('webIntegrationDemo', function() {\n            return 'https://' + Meteor.settings.public.webIntegrationHost + ':' + Meteor.settings.public.webIntegrationDemoPort;\n        });\n\n        //Integration presentation Iframe selector\n        Template.registerHelper('IFrameURLChapterSelection', function() {\n            var appId = Cookies.get('slideGeneratorAppId'); //senseConfig.slideGeneratorAppId;\n            var IntegrationPresentationSelectionSheet = Meteor.settings.public.slideGenerator.selectionSheet; //'DYTpxv'; selection sheet of the slide generator\n            var proxy = Meteor.settings.public.slideGenerator.virtualProxy;\n            var url = senseConfig.host + ':' + senseConfig.port + '/' + proxy + '/single/?appid=' + appId + '&sheet=' + IntegrationPresentationSelectionSheet + '&opt=currsel';\n            if (Meteor.settings.public.useSSL) {\n                return 'https://' + url;\n            } else {\n                return 'http://' + url;\n            }\n        });\n\n        // Template.registerHelper('authenticatedSlideGenerator', function() {\n        //     return Session.get('authenticatedSlideGenerator');\n        // });\n\n        Template.registerHelper('shrinkForSlideSorter', function() {\n            return Cookies.get('showSlideSorter') === \"true\" ? \"shrink\" : \"\"; //\n        });\n\n        Template.registerHelper('groupSelectedSlideGenerator', function() {\n            return Session.get('groupForPresentation'); //user selected a presentation type?\n        });\n\n        //role that defines your role in the whole integration.qlik.com site, based on this we make selections in the slide generator.\n        Template.registerHelper('mainUserRole', function() {\n            return Cookies.get('currentMainRole');\n        });\n\n        Template.registerHelper('isSelected', function() {\n            return someValue ? 'selected' : '';\n        });\n\n        Template.registerHelper('customers', function() {\n            return Customers.find({});\n        });\n\n        //used for Aldeed autoform\n        Template.registerHelper(\"Customers\", Customers);\n\n        Template.registerHelper('noCustomers', function() {\n            return !Customers.find({})\n                .count();\n        });\n\n        Template.registerHelper('noTemplateApps', function() {\n            return !TemplateApps.find({})\n                .count();\n        });\n\n        //generic helpers to return the collection to the blaze template\n        Template.registerHelper('customersCollection', function() {\n            return Customers.find({}, {\n                sort: {\n                    checked: -1\n                }\n            });\n        });\n\n        Template.registerHelper('templateAppsCollection', function() {\n            return TemplateApps.find();\n        });\n\n        Template.registerHelper('appsCollection', function() {\n            return Apps.find();\n        });\n\n        Template.registerHelper('streamsCollection', function() {\n            return Streams.find();\n        });\n\n        Template.registerHelper('freshEnvironment', function() {\n            return freshEnvironment();\n        });\n\n        Template.registerHelper('loading', function() {\n            // console.log('loading indicator in helper is: ', Session.get('loadingIndicator'));\n            return Session.get('loadingIndicator');\n        });\n\n        export function freshEnvironment() {\n            if (!Customers.find().count() && !TemplateApps.find().count()) {\n                // Session.set('currentStep', 0);\n                return true\n            }\n        };\n\n        Template.registerHelper('readyToSelectTemplate', function() {\n            return currentStep() === 2\n        });\n\n        Template.registerHelper('templateButNoCustomer', function() {\n            return !Customers.find()\n                .count() && TemplateApps.find()\n                .count()\n        });\n\n        Template.registerHelper('readyToGenerate', function() {\n            return currentStep() === 3 && !Session.equals('loadingIndicator', 'loading');\n        });\n\n        Template.registerHelper('step3', function() {\n            return Session.get('currentStep') === 3\n        });\n\n        Template.registerHelper('step3or4', function() {\n            return Session.get('currentStep') === 3 ||\n                Session.get('currentStep') === 4 ||\n                Session.equals('loadingIndicator', 'loading')\n        });\n\n        Template.registerHelper('stepEqualTo', function(stepNr) {\n            // console.log('value of currentStep() ', currentStep());\n            return currentStep() === stepNr;\n        });\n\n        export function currentStep() {\n            // console.log('the current step session', Session.get('currentStep'));//\n\n            //step 0: fresh/resetted environment\n            if (freshEnvironment()) {\n                return 0\n            }\n            //step 1 insert customers\n            else if (Session.get('currentStep') === 1) {\n                Router.go('users');\n                return 1\n            }\n            //step 2 there are customers, but no template\n            else if (\n                // (Customers.find().count() && !TemplateApps.find().count()) &&\n                Session.get('currentStep') === 2) {\n                return 2\n            }\n            //step 3\n            else if (\n                // Customers.find().count() && \n                // TemplateApps.find().count() && \n                Session.get('currentStep') === 3 &&\n                !Session.equals('loadingIndicator', 'loading')) {\n                // console.log('loading indicator is ', Session.get('loadingIndicator') )\n                return 3\n            }\n            //step 4\n            else if (\n                Session.get('currentStep') === 4\n                // &&\n                // Customers.find().count() &&\n                // TemplateApps.find().count()\n            ) {\n                return 4;\n            } else if (Session.equals('loadingIndicator', 'loading')) {\n                return;\n            } else {\n                Session.set('currentStep', 3);\n                return 3;\n            }\n        }\n\n        Template.registerHelper('generationFinished', function() {\n            return (Session.equals('loadingIndicator', 'loading') || Session.get('generated?'));\n        });\n\n        Template.registerHelper('readyToTestSSO', function() {\n            return currentStep() === 4\n        });\n\n        Template.registerHelper('and', (a, b) => {\n            return a && b;\n        });\n        Template.registerHelper('or', (a, b) => {\n            return a || b;\n        });\n\n    }","// ServiceConfiguration.configurations.upsert({\n//     service: \"facebook\"\n// }, {\n//     $set: {\n//         appId: Meteor.settings.private.facebook.clientId,\n//         loginStyle: \"popup\",\n//         secret: Meteor.settings.private.facebook.secret\n//     }\n// });\n\n// ServiceConfiguration.configurations.upsert({\n//     service: \"github\"\n// }, {\n//     $set: {\n//         clientId: Meteor.settings.private.github.clientId,\n//         loginStyle: \"popup\",\n//         secret: Meteor.settings.private.github.secret\n//     }\n// });\n\n// ServiceConfiguration.configurations.upsert({\n//     service: \"linkedin\"\n// },{\n//     loginStyle: \"popup\",\n//     service: \"linkedin\",\n//     clientId: Meteor.settings.private.linkedin.clientId,\n//     secret: Meteor.settings.private.linkedin.secret,\n// });\n\n\n// ServiceConfiguration.configurations.upsert({\n//     service: \"twitter\"  \n// },{\n//     service: \"twitter\",\n//     consumerKey: Meteor.settings.private.twitter.clientId,\n//     loginStyle: \"popup\",\n//     secret: Meteor.settings.private.twitter.secret\n// });\n\n\n// ServiceConfiguration.configurations.upsert({\n//     service: \"google\"\n// }, {\n//     $set: {\n//         clientId: Meteor.settings.private.google.clientId,\n//         loginStyle: \"popup\",\n//         secret: Meteor.settings.private.google.secret\n//     }\n// });\n\n\nconst numberOfUsers = Meteor.users.find().count();\nconsole.log('Checking the user accounts, number of users is: ' + numberOfUsers)\n\nif (!numberOfUsers) {\n    var id = Accounts.createUser({\n        username: 'demo',\n        email: 'demo@qlik.com',\n        password: 'schiphol',\n        profile: { name: 'Qlik test user' }\n    });\n    console.log('user created with id: ', id);\n    Roles.addUsersToRoles(id, 'test', Roles.GLOBAL_GROUP);\n\n    id = Accounts.createUser({\n        username: 'admin',\n        email: 'test@test.com', //these are just dummies\n        password: 'Qlik456464',\n        profile: { name: 'Qlik admin user' }\n    });\n    console.log('user created with id: ', id);\n    Roles.addUsersToRoles(id, 'admin', Roles.GLOBAL_GROUP);\n}\n\n//enable anon access: https://atmospherejs.com/artwells/accounts-guest\nAccountsGuest.enabled = true;\nAccountsGuest.anonymous = true;","import {\n    Meteor\n} from 'meteor/meteor';\nimport './methods.js';\nimport {\n    http\n} from 'meteor/meteor';\nimport {\n    Apps,\n    TemplateApps,\n    GeneratedResources\n} from '/imports/api/apps';\nimport { SenseSelections } from '/imports/api/logger';\nimport {\n    APILogs,\n    REST_Log\n} from '/imports/api/APILogs';\n\n//import meteor collections\nimport {\n    Streams\n} from '/imports/api/streams';\nimport {\n    Customers\n} from '/imports/api/customers';\n\nimport * as QSApp from '/imports/api/server/QRSFunctionsApp';\nimport * as QSStream from '/imports/api/server/QRSFunctionsStream';\nimport * as QSLic from '/imports/api/server/QRSFunctionsLicense';\nimport * as QSProxy from '/imports/api/server/QPSFunctions';\nimport * as QSSystem from '/imports/api/server/QRSFunctionsSystemRules';\nimport * as QSExtensions from '/imports/api/server/QRSFunctionsExtension';\nimport * as QSCustomProps from '/imports/api/server/QRSFunctionsCustomProperties';\n\n//stop on unhandled errors\nprocess.on('unhandledRejection', up => {\n    throw up\n})\n\n//import config for Qlik Sense QRS and Engine API.\nimport {\n    senseConfig,\n    authHeaders\n} from '/imports/api/config';\nimport '/imports/startup/accounts-config.js';\nconst path = require('path');\nvar fs = require('fs-extra');\nvar marked = require('marked');\n\n//\n// ─── METEOR METHODS ─────────────────────────────────────────────────────────────\n//\n\nvar showdown = require(\"showdown\");\nvar converter = new showdown.Converter();\n\nMeteor.methods({\n    getHTMLFromMarkdownUrl(url){\n        // console.log('get markdown from the server: '+url)\n        var markdownResult = HTTP.get(url) \n        // var HTMLresult = converter.makeHtml(markdownResult.content);\n        var HTMLresult = marked.parse(markdownResult.content);\n        return HTMLresult;        \n    },\n    getSenseSelectionObject(id) {\n        // console.log('------------------------------------');\n        // console.log('getSenseSelectionObject for id', id)\n        // console.log('------------------------------------');\n        check(id, String);\n        var result = SenseSelections.findOne({\n            _id: id\n        });\n        console.log('result of get selection by id', result)\n        return result;\n    },\n    getAppIDs() {\n        return {\n            SSBI: senseConfig.SSBIApp, // QSApp.getApps(Meteor.settings.public.SSBI.name, Meteor.settings.public.SSBI.stream)[0].id,\n            slideGenerator: senseConfig.slideGeneratorAppId //QSApp.getApps(Meteor.settings.public.slideGenerator.name, Meteor.settings.public.slideGenerator.stream)[0].id\n        };\n    },\n    async generateStreamAndApp(customers) {\n        try {\n            check(customers, Array);\n        } catch (error) {\n            throw new Meteor.Error('Missing field', 'No customers supplied for the generation of apps.');\n        }\n        // first clean the environment\n        Meteor.call('removeGeneratedResources', {\n            'generationUserId': Meteor.userId()\n        });\n        await QSApp.generateStreamAndApp(customers, this.userId); //then, create the new stuff\n\n        try {\n            if (!Meteor.settings.broker.qlikSense.multiTenantScenario) { //on premise installation for a single tenant (e.g. with MS Active Directory)\n                var customerNames = customers.map(function(c) {\n                    return c.name;\n                });\n                QSCustomProps.upsertCustomPropertyByName('customer', customerNames); //for non OEM scenarios (with MS AD), people like to use custom properties for authorization instead of the groups via a ticket.\n            }\n        } catch (error) {\n            console.log('error to create custom properties', error);\n        }\n\n        Meteor.call('updateLocalSenseCopy');\n    },\n    resetEnvironment() {\n        Meteor.call('resetLoggedInUser'); //logout all users before removing all the current customers. This to prevent the screen stays logged in at an old user.\n        Meteor.call('removeGeneratedResources', {\n            'generationUserId': Meteor.userId()\n        });\n        TemplateApps.remove({\n            'generationUserId': Meteor.userId()\n        });\n        Customers.remove({\n            'generationUserId': Meteor.userId()\n        });\n        APILogs.remove({\n            'generationUserId': Meteor.userId()\n        });\n        if (!Meteor.settings.broker.qlikSense.multiTenantScenario) { //on premise installation for a single tenant (e.g. with MS Active Directory)\n            QSCustomProps.deleteCustomProperty('customers');\n        }\n    },\n    upsertTemplate(selector, currentApp) {\n        console.log('user ' + Meteor.userId() + ' selected a template app: ' + currentApp.name)\n        TemplateApps.upsert(selector, {\n            $set: {\n                name: currentApp.name,\n                id: currentApp.id,\n                generationUserId: Meteor.userId(),\n            },\n        });\n    },\n    removeTemplate(selector, currentApp) {\n        console.log('remove template')\n        TemplateApps.remove(selector);\n    },\n    removeGeneratedResources(generationUserSelection) {\n        //console.log('remove GeneratedResources method, before we make new ones');\n        //logging only\n        if (generationUserSelection) {\n            const call = {};\n            call.action = 'Remove generated resources';\n            call.request = 'Remove all apps and streams in Qlik Sense for userId: ' + generationUserSelection.generationUserId;\n            REST_Log(call, generationUserSelection);\n        }\n        GeneratedResources.find(generationUserSelection)\n            .forEach(function(resource) {\n                // this.unblock()\n                //console.log('resetEnvironment for userId', Meteor.userId());generationUserSelection.generationUserId\n\n                //If not selection was given, we want to reset the whole environment, so also delete the streams.\n                // if (!generationUserSelection.generationUserId) {\n                try {\n                    Meteor.call('deleteStream', resource.streamId); //added random company names, so this should not be an issue //26-9 can't delete stream, because each user creates a stream with the same name...\n                } catch (err) {\n                    //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n                } //don't bother if generated resources do not exists, just continue\n                // }\n                //delete apps always\n                try {\n                    Meteor.call('deleteApp', resource.appId);\n                } catch (err) {\n                    //console.error('No issue, but you can manually remove this id from the generated database. We got one resource in the generated list, that has already been removed manually', resource);\n                }\n            })\n        GeneratedResources.remove(generationUserSelection);\n        APILogs.remove(generationUserSelection);\n    },\n    copyApp(guid, name) {\n        check(guid, String);\n        check(name, String);\n        const id = QSApp.copyApp(guid, name);\n        Meteor.call('updateLocalSenseCopy');\n        return id;\n    },\n    copyAppSelectedCustomers(currentApp) { //the app the user clicked on        \n        if (!currentApp) {\n            throw new Meteor.Error('No App selected to copy')\n        };\n\n        customers = Customers.find({\n            'generationUserId': Meteor.userId(),\n            checked: true\n        }); //all selected customers\n        if (!customers) {\n            throw new Meteor.Error('No customers selected to copy the app for')\n        };\n\n        customers\n            .forEach(customer => {\n                const newAppId = Meteor.call('copyApp', currentApp.id, customer.name + '-' + currentApp.name);\n                Meteor.call('updateLocalSenseCopy');\n\n                //store in the database that the user generated something, so we can later on remove it.\n                GeneratedResources.insert({\n                    'generationUserId': Meteor.userId(),\n                    'customer': null,\n                    'streamId': null,\n                    'appId': newAppId\n                });\n            });\n    },\n    deleteApp(guid) {\n        check(guid, String);\n        if (guid !== Meteor.settings.public.templateAppId) {\n            //logging only\n            const call = {};\n            call.action = 'Delete app';\n            call.request = 'Delete app: ' + guid;\n            REST_Log(call);\n\n            const id = QSApp.deleteApp(guid);\n            Meteor.call('updateLocalSenseCopy');\n            return id;\n        } else {\n            throw new Meteor.Error(\"you can't delete the template app with guid: \", guid);\n        }\n    },\n    removeAllCustomers: function() {\n        return Customers.remove({\n            'generationUserId': Meteor.userId()\n        });\n    }\n})\n\nMeteor.methods({\n    updateLocalSenseCopyApps() {\n        //delete the local content of the database before updating it\n        Apps.remove({});\n\n        //Update the Apps with fresh info from Sense        \n        _.each(QSApp.getApps(), app => {\n            Apps.insert(app);\n        });\n    },\n    updateLocalSenseCopyStreams() {\n        //delete the local content of the database before updating it        \n        Streams.remove({});\n\n        //Update the Streams with fresh info from Sense        \n        _.each(QSStream.getStreams(), stream => {\n            Streams.insert(stream);\n        });\n    },\n    updateLocalSenseCopy() {\n        // //console.log('Method: update the local mongoDB with fresh data from Qlik Sense: call QRS API getStreams and getApps');\n        //delete the local content of the database before updating it\n        Apps.remove({});\n        Streams.remove({});\n\n        //Update the Apps and Streams with fresh info from Sense        \n        _.each(QSApp.getApps(), app => {\n            Apps.insert(app);\n        });\n\n        _.each(QSStream.getStreams(), stream => {\n            Streams.insert(stream);\n        });\n    },\n    getSecurityRules() {\n        return QSSystem.getSecurityRules();\n    }\n});","//SETUP PROXY SERVER TO RUN METEOR QRS AND WEB INTEGRATION DEMO BOTH ON PORT 80\n\n// var proxy = require('redbird')({ port: Meteor.settings.public.proxyPort, ntlm: true, bunyan: false }); //bunyan:true for logging output in the console    \n// Route to any local ip, for example from docker containers.\n\n// Meteor.startup(() => {\n//     proxy.register(Meteor.settings.public.qlikSenseHost, \"http://localhost:3000\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register(Meteor.settings.public.webIntegrationHost, \"http://localhost:3030\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register('slides.qlik.com', \"http://localhost:3060\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register('integration.qlik.com', \"http://localhost:3000\"); //need subdomain otherwise meteor root-URL does not work\n//     proxy.register('saasdemo.qlik.com', \"http://localhost:3000\"); //need subdomain otherwise meteor root-URL does not work\n// });","//import meteor collections\nimport { Apps, TemplateApps, GeneratedResources } from '/imports/api/apps';\nimport { Streams } from '/imports/api/streams';\nimport { Customers } from '/imports/api/customers';\nimport { APILogs } from '/imports/api/APILogs';\nimport { Logger, SenseSelections } from '/imports/api/logger';\nimport moment from 'moment';\n\n\n\nMeteor.publish('Logger', function() {\n    return Logger.find();\n    this.ready();\n});\n\n// Meteor.publish('SenseSelections', function() {\n//     return SenseSelections.find({ 'userId': this.userId });\n//     this.ready();\n// });\n\n//only fill the local mongoDB that runs in the browser with data that belongs to the user...\n//https://www.meteor.com/tutorials/blaze/publish-and-subscribe\nMeteor.publish('apps', function(generatedAppsFromUser) {\n    if (Roles.userIsInRole(this.userId, ['admin'], Roles.GLOBAL_GROUP)) {\n        return Apps.find();\n\n    } else {\n        //console.log('Client subscribed to collection, with these generated app ids: ', generatedAppsFromUser);\n        if (!generatedAppsFromUser) {\n            generatedAppsFromUser = [];\n            // console.log('##### No generated resources exists yet, so only show the template apps')\n        } else {\n            // console.log('### publication recevied these generated app ids for the user: ', generatedAppsFromUser);\n        }\n        return Apps.find({\n            $or: [{ \"id\": { \"$in\": generatedAppsFromUser } }, { \"stream.name\": \"Templates\" } //, { \"stream.name\": \"Everyone\" }\n            ]\n        });\n    }\n    this.ready();\n});\n\nMeteor.publish('streams', function(generatedStreamsFromUser) {\n    if (Roles.userIsInRole(this.userId, ['admin'], Roles.GLOBAL_GROUP)) {\n        return Streams.find();\n\n    } else {\n        if (!generatedStreamsFromUser) {\n            generatedStreamsFromUser = [];\n        }\n        return Streams.find({\n            $or: [{ \"id\": { \"$in\": generatedStreamsFromUser } }, { \"name\": \"Templates\" } //, { \"name\": \"Everyone\" }\n            ]\n        });\n\n    }\n    this.ready();\n});\nMeteor.publish('templateApps', function() {\n    return TemplateApps.find({ 'generationUserId': this.userId });\n    this.ready();\n});\n\nMeteor.publish('generatedResources', function() {\n    return GeneratedResources.find({ 'generationUserId': this.userId });\n    this.ready();\n});\n\nMeteor.publish('customers', function() {\n    return Customers.find({ 'generationUserId': this.userId });\n    this.ready();\n});\n\nMeteor.publish('apiLogs', function() {\n    // const selector = {\n    //     \"createDate\": {\n    //         $lt: new Date(),\n    //         $gte: new Date(new Date().setDate(new Date().getDate() - 0.05))  //show only the last hour  of api logs\n    //     }\n    //};\n    //     today: function() {\n    //     var now = moment().toDate();\n    //     return Posts.find({createdAt : { $gte : now }});\n    // }\n\n    const selector = {\n        sort: { createDate: -1 },\n        limit: 15\n    }\n\n    return APILogs.find({ 'generationUserId': this.userId }, selector);\n    this.ready();\n});\n\nMeteor.publish('users', function() {\n    //See https://github.com/alanning/meteor-roles\n    if (Roles.userIsInRole(this.userId, ['admin'], Roles.GLOBAL_GROUP)) {\n        return Meteor.users.find();\n    } else {\n        // user not authorized. do not publish secrets\n        this.stop();\n        return;\n    }\n});","//https://atmospherejs.com/simple/json-routes\n\nJsonRoutes.add(\"get\", \"/OneCustomerWithUsers\", function(req, res, next) {\n    // var id = req.params.id;\n    var sampleData = customer1\n\n    JsonRoutes.sendResult(res, {\n        data: customer1\n    });\n});\n\nJsonRoutes.add(\"get\", \"/multipleCustomersWithUsers\", function(req, res, next) {\n    // var id = req.params.id;\n    var sampleData = [customer1, customer2]\n\n    JsonRoutes.sendResult(res, {\n        data: [customer1, customer2]\n    });\n});\n\nvar customer1 = {\n    \"_id\": \"EXpapRzZXc52B3joK\",\n    \"name\": \"Ullrich - Barrows\",\n    \"checked\": true,\n    \"users\": [{\n        \"name\": \"John\",\n        \"group\": \"Consumer\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"Germany\"\n    }, {\n        \"name\": \"Linda\",\n        \"group\": \"Contributor\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"United States\"\n    }, {\n        \"name\": \"Martin\",\n        \"group\": \"Developer\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"Italy\"\n    }, {\n        \"name\": \"Paul\",\n        \"group\": \"Admin\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"Italy\"\n    }],\n    \"generationUserId\": \"rZPZYbaWM33ZHNr6Z\"\n};\n\nvar customer2 = {\n    \"_id\": \"EXpapRzZXc52B3joK\",\n    \"name\": \"Ullrich - Barrows\",\n    \"checked\": true,\n    \"users\": [{\n        \"name\": \"John\",\n        \"group\": \"Consumer\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"Germany\"\n    }, {\n        \"name\": \"Linda\",\n        \"group\": \"Contributor\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"United States\"\n    }, {\n        \"name\": \"Martin\",\n        \"group\": \"Developer\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"Italy\"\n    }, {\n        \"name\": \"Paul\",\n        \"group\": \"Admin\",\n        \"currentlyLoggedIn\": false,\n        \"country\": \"Italy\"\n    }],\n    \"generationUserId\": \"rZPZYbaWM33ZHNr6Z\"\n};","import { REST_Log } from '/imports/api/APILogs';\n\nRouter.route('/updateSenseInfo/apps', function(request, response, next) {\n     // console.log('++++++++++++We got an incoming REST Call from the Sense Notification handler for APPS, this means the Sense Repository has changed');\n     //logging only\n     // var call = {};\n     // call.action = 'Notification apps'\n     // call.request = 'We got an incoming REST Call from the Sense Notification handler for APPS, this means the Sense Repository has changed';\n     // REST_Log(call);\n     Meteor.call('updateLocalSenseCopyApps');\n }, { where: 'server' });\n\n Router.route('/updateSenseInfo/streams', function(request, response, next) {\n     // console.log('++++++++++++We got an incoming REST Call from the Sense Notification handler for STREAMS, this means the Sense Repository has changed');\n     //logging only\n     // var call = {};\n     // call.action = 'Notification streams'\n     // call.request = 'We got an incoming REST Call from the Sense Notification handler for APPS, this means the Sense Repository has changed';\n     // REST_Log(call);\n     Meteor.call('updateLocalSenseCopyStreams');\n }, { where: 'server' });\n","import {Customers} from '../imports/api/customers.js';\n\nvar customers = \n// [{\"name\":\"A&R Partners\",\"checked\":true},\n// {\"name\":\"A2Z Solutions\",\"checked\":true},\n// {\"name\":\"Aaron D. Meyer & Associates\",\"checked\":true},\n// {\"name\":\"Aaron Products\",\"checked\":true},\n// {\"name\":\"Active Data\",\"checked\":true},\n// {\"name\":\"Ben and Jerry’s\",\"checked\":true},\n// {\"name\":\"Benedict\",\"checked\":true},\n// {\"name\":\"Bizmarts\",\"checked\":true},\n// {\"name\":\"C & C  Design\",\"checked\":true},\n// {\"name\":\"C & J Engineering\",\"checked\":true},\n// {\"name\":\"CAF Systemhaus\",\"checked\":true},\n// {\"name\":\"CAM Group\",\"checked\":true},\n// {\"name\":\"Caribian Specialties\",\"checked\":true},\n// {\"name\":\"City Fresh Foods\",\"checked\":true},\n// {\"name\":\"Clearout\",\"checked\":true},\n// {\"name\":\"David Spencer Ltd.\",\"checked\":true},\n// {\"name\":\"Dayton Malleable Inc.\",\"checked\":true},\n// {\"name\":\"DCP Research\",\"checked\":true},\n// {\"name\":\"DCS International\",\"checked\":true},\n// {\"name\":\"DCS Laboratory\",\"checked\":true},\n// {\"name\":\"Deak-Perera Group.\",\"checked\":true},\n// {\"name\":\"Earth\",\"checked\":true},\n// {\"name\":\"eDistrict\",\"checked\":true},\n// {\"name\":\"EDP\",\"checked\":true},\n// {\"name\":\"Ethyl Corporation\",\"checked\":true},\n// {\"name\":\"Federal Focus\",\"checked\":true},\n// {\"name\":\"Fill It\",\"checked\":true},\n// {\"name\":\"Filmotype\",\"checked\":true},\n// {\"name\":\"Fins\",\"checked\":true},\n// {\"name\":\"Gate\",\"checked\":true},\n// {\"name\":\"Gulf and Western Industries\",\"checked\":true},\n// {\"name\":\"Harte-Hanks (formerly Locator)\",\"checked\":true},\n// {\"name\":\"Harvard Trust Company\",\"checked\":true},\n// {\"name\":\"HCHS\",\"checked\":true},\n// {\"name\":\"Healtheon\",\"checked\":true},\n// {\"name\":\"Hetrick Systems\",\"checked\":true},\n// {\"name\":\"Home Team\",\"checked\":true},\n// {\"name\":\"Homebound\",\"checked\":true},\n// {\"name\":\"IBVA\",\"checked\":true},\n// {\"name\":\"Icon\",\"checked\":true},\n// {\"name\":\"Icon Site Builders\",\"checked\":true},\n// {\"name\":\"Idyllwild\",\"checked\":true},\n// {\"name\":\"J. S. Lee Associates\",\"checked\":true},\n// {\"name\":\"K International\",\"checked\":true},\n// {\"name\":\"K.C. Irving\",\"checked\":true},\n// {\"name\":\"Kari & Associates\",\"checked\":true},\n// {\"name\":\"Karsing\",\"checked\":true},\n// {\"name\":\"Kazinformcom\",\"checked\":true},\n// {\"name\":\"KentISP\",\"checked\":true},\n// {\"name\":\"Kool-Seal\",\"checked\":true},\n// {\"name\":\"Laker Airways\",\"checked\":true},\n// {\"name\":\"Livermore  Laboratories (LSLI)\",\"checked\":true},\n// {\"name\":\"LiveWire BBS and   Favourite Links\",\"checked\":true},\n// {\"name\":\"MATRIX\",\"checked\":true},\n// {\"name\":\"Miles Laboratories, Inc.\",\"checked\":true},\n// {\"name\":\"NACSCORP\",\"checked\":true},\n// {\"name\":\"Onestar\",\"checked\":true},\n// {\"name\":\"Pace\",\"checked\":true},\n// {\"name\":\"Pacific Group\",\"checked\":true},\n// {\"name\":\"Pacific Matics\",\"checked\":true},\n// {\"name\":\"Pacific Sierra Research\",\"checked\":true},\n// {\"name\":\"Pacific Voice\",\"checked\":true},\n// {\"name\":\"Pacific West Enterprises\",\"checked\":true},\n// {\"name\":\"PacificServ\",\"checked\":true},\n// {\"name\":\"Panngea\",\"checked\":true},\n// {\"name\":\"PAP (Maintenance)\",\"checked\":true},\n// {\"name\":\"Paracel\",\"checked\":true},\n// {\"name\":\"Patient\",\"checked\":true},\n// {\"name\":\"Pinnacle Micro\",\"checked\":true},\n// {\"name\":\"QualServe\",\"checked\":true},\n// {\"name\":\"Quantum 4Xyte  Architects\",\"checked\":true},\n// {\"name\":\"Qwest\",\"checked\":true},\n// {\"name\":\"R&R Group\",\"checked\":true},\n// {\"name\":\"R.J. Matter & Associates\",\"checked\":true},\n// {\"name\":\"Ra Co Amo\",\"checked\":true},\n// {\"name\":\"RC\",\"checked\":true},\n// {\"name\":\"Ready-to-Run\",\"checked\":true},\n// {\"name\":\"Remedy\",\"checked\":true},\n// {\"name\":\"Renegade info Crew\",\"checked\":true},\n// {\"name\":\"Reuters Usability Group\",\"checked\":true},\n// {\"name\":\"ReviewBooth\",\"checked\":true},\n// {\"name\":\"RFI Corporation\",\"checked\":true},\n// {\"name\":\"Road Warrior International\",\"checked\":true},\n// {\"name\":\"Robust Code\",\"checked\":true},\n// {\"name\":\"Sage\",\"checked\":true},\n// {\"name\":\"Sagent\",\"checked\":true},\n// {\"name\":\"Salamander Junction\",\"checked\":true},\n// {\"name\":\"Satronix\",\"checked\":true},\n// {\"name\":\"Satyam\",\"checked\":true},\n// {\"name\":\"Scientific Atlanta\",\"checked\":true},\n// {\"name\":\"ScotGold Products\",\"checked\":true},\n// {\"name\":\"Screen Saver.com\",\"checked\":true},\n// {\"name\":\"Sifton Properties Limited\",\"checked\":true},\n// {\"name\":\"Sigma\",\"checked\":true},\n// {\"name\":\"Signature\",\"checked\":true},\n// {\"name\":\"SignatureFactory\",\"checked\":true},\n// {\"name\":\"Soloman Brothers\",\"checked\":true},\n// {\"name\":\"Southern Company\",\"checked\":true},\n// {\"name\":\"Stone Consolidated Corporation\",\"checked\":true},\n// {\"name\":\"Talou\",\"checked\":true},\n// {\"name\":\"Tampere\",\"checked\":true},\n// {\"name\":\"Tandy Corporation\",\"checked\":true},\n// {\"name\":\"Tangent\",\"checked\":true},\n// {\"name\":\"Tao Group\",\"checked\":true},\n// {\"name\":\"Target Marketing\",\"checked\":true},\n// {\"name\":\"Team ASA\",\"checked\":true},\n// {\"name\":\"Team Financial Management Systems\",\"checked\":true},\n// {\"name\":\"Teca-Print\",\"checked\":true},\n// {\"name\":\"Time Warner\",\"checked\":true},\n// {\"name\":\"Towmotor Corporation\",\"checked\":true},\n// {\"name\":\"Tredegar Company\",\"checked\":true},\n// {\"name\":\"Trend Line Corporation\",\"checked\":true},\n// {\"name\":\"U. S. Exchange\",\"checked\":true},\n// {\"name\":\"Unison Management Concepts\",\"checked\":true},\n// {\"name\":\"United States  (USIT)\",\"checked\":true},\n// {\"name\":\"UUmail\",\"checked\":true},\n// {\"name\":\"ValiCert\",\"checked\":true},\n// {\"name\":\"Valley  Solutions\",\"checked\":true},\n// {\"name\":\"Valpatken\",\"checked\":true},\n// {\"name\":\"Vanstar\",\"checked\":true},\n// {\"name\":\"Venable\",\"checked\":true},\n// {\"name\":\"Venred\",\"checked\":true},\n// {\"name\":\"Watcom International\",\"checked\":true},\n// {\"name\":\"Xentec\",\"checked\":true},\n// {\"name\":\"Xilinx\",\"checked\":true},\n// {\"name\":\"XVT\",\"checked\":true},\n// {\"name\":\"Zero Assumption Recovery\",\"checked\":true},\n// {\"name\":\"Zilog\",\"checked\":true},\n// {\"name\":\"Zitel\",\"checked\":true},\n// {\"name\":\"Zocalo\",\"checked\":true}]\n[{\"name\":\"Shell\",\"collection\":\"Shell\"},\n{\"name\":\"Esso\",\"collection\":\"Esso\"},\n{\"name\":\"BP\",\"collection\":\"BP\"}];\n\n//if (Customers.find().count() === 0){ \n // _.each(customers, function(customer){\n  //  Customers.insert(customer);\n//    console.log(\"Inserted \"+ customer.name);\n // })\n//}\n\n\n","import { Meteor } from \"meteor/meteor\";\nimport { http } from \"meteor/meteor\";\nimport { Apps, TemplateApps, GeneratedResources } from \"/imports/api/apps\";\nimport { APILogs, REST_Log } from \"/imports/api/APILogs\";\nimport { WebApp } from 'meteor/webapp';\n\n//import meteor collections\nimport { Streams } from \"/imports/api/streams\";\nimport { Customers } from \"/imports/api/customers\";\n\nimport * as QSApp from \"/imports/api/server/QRSFunctionsApp\";\nimport * as QSStream from \"/imports/api/server/QRSFunctionsStream\";\nimport * as QSLic from \"/imports/api/server/QRSFunctionsLicense\";\nimport * as QSProxy from \"/imports/api/server/QPSFunctions\";\nimport * as QSSystem from \"/imports/api/server/QRSFunctionsSystemRules\";\nimport * as QSExtensions from \"/imports/api/server/QRSFunctionsExtension\";\nimport * as QSCustomProps from \"/imports/api/server/QRSFunctionsCustomProperties\";\nvar os = require('os')\n\n//stop on unhandled errors\nprocess.on(\"unhandledRejection\", up => {\n    throw up;\n});\n\n//import config for Qlik Sense QRS and Engine API.\nimport { senseConfig, authHeaders } from \"/imports/api/config\";\nimport \"/imports/startup/accounts-config.js\";\nconst path = require(\"path\");\nvar fs = require(\"fs-extra\");\nimport shell from \"node-powershell\";\n\nvar connectHandler = WebApp.connectHandlers; // get meteor-core's connect-implementation\n\n// attach connect-style middleware for response header injection\nMeteor.startup(function() {\n    WebApp.addHtmlAttributeHook(() => ({ lang: 'en' }));\n    connectHandler.use(function(req, res, next) {\n        res.setHeader('access-control-allow-origin', '*');\n        return next();\n    })\n})\n\n\nMeteor.startup(async function() {\n    // process.env.ROOT_URL = \"http://\" + Meteor.settings.public.qlikSenseHost;\n    // console.log(\n    //     \"********* We expect Qlik Sense to run on host: \",\n    //     process.env.ROOT_URL + \":\" + Meteor.settings.public.qlikSensePort\n    // );\n    // console.log('********* For END USERS we expect Sense to run on host: ', Meteor.settings.public.qlikSenseHost + ':' + Meteor.settings.public.qlikSensePort);\n    await initQlikSense();\n    removeGeneratedResources();\n    optimizeMongoDB();\n});\n\n//\n// ─── SETUP QLIK SENSE AFTER A CLEAN QlIK SENSE INSTALL ─────────────────────────────────────\n//\n\n//Check if Qlik Sense has been properly setup for this MeteorQRS tool..\nasync function initQlikSense() {\n    console.log(\"------------------------------------\");\n    console.log(\"INIT QLIK SENSE\");\n    console.log(\"Project root folder: \", Meteor.absolutePath);\n    if (!Meteor.settings.broker.automationBaseFolder) {\n        Meteor.settings.broker.automationBaseFolder = path.join(\n            Meteor.absolutePath,\n            \".automation\"\n        );\n        console.log(\n            \"Meteor.settings.broker.automationBaseFolder was empty, setting it to default: \",\n            Meteor.settings.broker.automationBaseFolder\n        );\n    }\n    if (!Meteor.settings.broker.customerDataDir) {\n        Meteor.settings.broker.customerDataDir = path.join(\n            Meteor.absolutePath,\n            \"customerData\"\n        );\n        console.log(\n            \"Meteor.settings.broker.customerDataDir was empty, setting it to default: \",\n            Meteor.settings.broker.customerDataDir\n        );\n    }\n\n    try {\n        if (Meteor.settings.broker.runInitialQlikSenseSetup) {\n            console.log(\n                \"The runInitialQlikSenseSetup setting has been set to true, so we expect to have a fresh Qlik Sense installation for which we now automatically populate with the apps, streams, license, security rules etc.\"\n            );\n            if (Meteor.settings.broker.qlikSense.installQlikSense) {\n                await installQlikSense();\n                // await timeout(1000 * 60 * 20); //wait 20 minutes till the Qlik Sense installation has completed...\n            }\n            QSLic.insertLicense();\n            QSLic.insertUserAccessRule();\n            QSSystem.disableDefaultSecurityRules();\n            await QSProxy.createVirtualProxies();\n            await timeout(4000); //wait till the proxy has restarted...\n            await QSSystem.createSecurityRules();\n            QSStream.initSenseStreams();\n            await QSApp.uploadAndPublishTemplateApps();\n            QSApp.setAppIDs();\n            await QSApp.createAppConnections(); //import extra connections\n            QSExtensions.uploadExtensions();\n            QSLic.saveSystemRules();\n        } else {\n            //set the app Id for the self service bi and the slide generator app, for use in the IFrames etc.\n            QSApp.setAppIDs();\n        }\n\n        //now qlik sense has been installed, we can try to connect, and load the streams and apps into our mongoDB\n        Meteor.call(\"updateLocalSenseCopy\");\n    } catch (error) {\n        console.error(\n            \"Main.js, initQlikSense: Failed to run the initialization of Qlik Sense. Most likely reason is that Qlik Sense has not been installed, wrong hostnames, wrong cert directory...\",\n            error\n        );\n    }\n}\n\n//helper functions to await a set timeout\nfunction timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function sleep(fn, ...args) {\n    await timeout(3000);\n    return fn(...args);\n}\n\n//\n// ─── INSTALL QLIK SENSE ───────────────────────────────────────────────────────────\n//\n\nvar installQlikSense = async function() {\n    console.log(\n        \"installQlikSense is true in the settings file so start creating the config file for the Sense silent script...\"\n    );\n\n    //we dynamically populate the Qlik sense silent installation config file, the hostname is the variable... Because we create a folder share with this name\n    var configFile =\n        `<?xml version=\"1.0\"?>\n    <SharedPersistenceConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <DbUserName>username</DbUserName>\n    <DbUserPassword>password</DbUserPassword>\n    <DbHost>` +\n        os.hostname() +\n        `</DbHost>\n    <DbPort>4432</DbPort>\n    <RootDir>\\\\\\\\` +\n        os.hostname() +\n        `\\\\QlikSenseShare</RootDir>\n    <StaticContentRootDir>\\\\\\\\` +\n        os.hostname() +\n        `\\\\QlikSenseShare\\\\StaticContent</StaticContentRootDir>\n    <CustomDataRootDir>\\\\\\\\` +\n        os.hostname() +\n        `\\\\QlikSenseShare\\\\CustomData</CustomDataRootDir>\n    <ArchivedLogsDir>\\\\\\\\` +\n        os.hostname() +\n        `\\\\QlikSenseShare\\\\ArchivedLogs</ArchivedLogsDir>\n    <AppsDir>\\\\\\\\` +\n        os.hostname() +\n        `\\\\QlikSenseShare\\\\Apps</AppsDir>\n    <CreateCluster>true</CreateCluster>\n    <InstallLocalDb>true</InstallLocalDb>\n    <ConfigureDbListener>false</ConfigureDbListener>\n    <ListenAddresses>*</ListenAddresses>\n    <IpRange>0.0.0.0/0</IpRange>\n    </SharedPersistenceConfiguration>`;\n    //SAVE Silent install CONFIG TO THE EXPORT FOLDER\n    var file = path.join(\n        Meteor.settings.broker.automationBaseFolder,\n        \"InstallationSoftware\",\n        \"spc.cfg\"\n    );\n    fs.outputFile(file, configFile, \"utf-8\");\n\n    console.log(\"------------------------------------\");\n    console.log(\n        'config file created! you can now run the \"start.bat\" in the \"C:\\\\GitHub\\QRSMeteor\\\\.automation\\\\InstallationSoftware\" folder as administrator'\n    );\n    console.error(\n        \"We now create an error to ensure QRSMeteor stops further setup.  To test the Sense installation, you can open the QMC (also check the hostname). The QMC will ask for you license. But do not do anything like inserting the license. QRSMeteor will do this for you.\"\n    );\n    console.log(\"------------------------------------\");\n    throw new Error(\"Dummy error to make sure QRSMeteor stops running...\");\n    //removed auto install of sense, to prevent an issue with the rights...\n\n    // var executable = 'startSilentInstall.ps1';\n    // var installer = path.join(Meteor.settings.broker.automationBaseFolder, 'InstallationSoftware', executable);\n    // console.log('installer', installer)\n    // await new Promise(function(resolve, reject) {\n    //     try {\n    //         var spawn = require(\"child_process\").spawn,\n    //             child;\n    //         child = spawn(\"powershell.exe\", [installer]);\n    //         child.stdout.on(\"data\", function(data) {\n    //             console.log(\"Powershell Data: \" + data);\n    //         });\n    //         child.stderr.on(\"data\", function(data) {\n    //             console.error(\"Powershell Errors: \" + data);\n    //             return reject('Error in running the silent installation script of qlik sense...');\n    //         });\n    //         child.on(\"exit\", function() {\n    //             console.log(\"Powershell Script finished\");\n    //             return resolve(\"Powershell Script finished\");\n    //         });\n    //         child.stdin.end(); //end input.\n    //     } catch (error) {\n    //         console.error('error in calling the start of silent install of qlik sense, ', error);\n    //     }\n    // });\n};\n\n// let ps = new shell({\n//     executionPolicy: 'Bypass',\n//     noProfile: true\n// });\n// var folder = Meteor.settings.broker.qlikSense.sharedPersistanceFolder;\n// var name = Meteor.settings.broker.qlikSense.sharedPersistanceFolderName;\n\n// // ps.addCommand('Write-Host Creating a shared folder on: ' + folder);\n// ps.addCommand('New-Item \"C:\\\\test\" –type directory');\n// // ps.addCommand('New-SmbShare –Name ' + name + ' –Path ' + folder + ' –FullAccess Everyone  ')\n\n// ps.invoke()\n//     .then(output => {\n//         console.log(output);\n//     })\n//     .catch(err => {\n//         console.error('Installation of Qlik Sense failed, make sure you check the log file in GitHub\\QRSMeteor\\.automation\\InstallationSoftware\\log.txt', err)\n//         ps.dispose();\n//     });\n\n//\n// ─── REMOVE STREAMS AND APPS CREATED DURING THE SAAS DEMO ───────────────────────\n//\n\nfunction removeGeneratedResources() {\n    // console.log('remove the all generated resources on each server start');\n    // Meteor.setTimeout(function() {\n    //     console.log('remove all generated resources in mongo and qlik sense periodically by making use of a server side timer');\n    //     Meteor.call('removeGeneratedResources', {});\n    // }, 0); //remove all logs directly at startup\n    if (Meteor.settings.broker.automaticCleanUpGeneratedApps === \"Yes\") {\n        Meteor.setInterval(function() {\n            console.log(\n                \"remove all generated resources in mongo and qlik sense periodically by making use of a server side timer\"\n            );\n            Meteor.call(\"removeGeneratedResources\", {});\n        }, 1 * 86400000); //remove all logs/apps/streams every 1 day\n    }\n}\n\nfunction optimizeMongoDB() {\n    // console.log('## setting up mongo indexes on generationUserId in the generated resources, customers and other collections, to increase mongo performance');\n    TemplateApps._ensureIndex({\n        generationUserId: 1,\n        id: 1\n    });\n    GeneratedResources._ensureIndex({\n        generationUserId: 1,\n        id: 1\n    });\n    Apps._ensureIndex({\n        id: 1\n    });\n    Customers._ensureIndex({\n        generationUserId: 1\n    });\n    Streams._ensureIndex({\n        id: 1\n    });\n    APILogs._ensureIndex({\n        createdBy: 1\n    });\n    APILogs._ensureIndex({\n        createDate: 1\n    });\n}\n\n//\n// ─── GET AN UPDATE WHEN QLIK SENSE HAS CHANGED ──────────────────────────────────\n//\n\n// function createNotificationListeners() {\n//     //Create notification listener in Qlik sense https://help.qlik.com/en-US/sense-developer/3.1/Subsystems/RepositoryServiceAPI/Content/RepositoryServiceAPI/RepositoryServiceAPI-Notification-Remove-Change-Subscription.htm\n//     //console.log('********* On meteor startup, Meteor tool registers itself at Qlik Sense to get notifications from Sense on changes to apps and streams.');\n//     //console.log('********* we try to register a notification on this URL: HTTP post to http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=app');\n//     //console.log('********* The notification URL for Streams is: ' + Meteor.settings.private.notificationURL + '/streams');\n\n//     try {\n//         const resultApp = HTTP.post('http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=app', {\n//             headers: authHeaders,\n//             params: { 'xrfkey': senseConfig.xrfkey },\n//             data: Meteor.settings.private.notificationURL + '/apps'\n//         })\n\n//         const resultStream = HTTP.post('http://' + senseConfig.SenseServerInternalLanIP + ':' + senseConfig.port + '/' + senseConfig.virtualProxy + '/qrs/notification?name=stream', {\n//                 headers: authHeaders,\n//                 params: { 'xrfkey': senseConfig.xrfkey },\n//                 data: Meteor.settings.private.notificationURL + '/streams'\n//             })\n//             //console.log('Register notication success');\n//             // //console.log('the result from sense register App notification was: ', resultApp);\n//             // //console.log('the result from sense register Stream notification was: ', resultStream);\n//     } catch (err) {\n//         console.error('Create notification subscription in sense qrs failed', err);\n//         // throw new Meteor.Error('Create notification subscription in sense qrs failed', err);\n//     }\n// }"]}}]