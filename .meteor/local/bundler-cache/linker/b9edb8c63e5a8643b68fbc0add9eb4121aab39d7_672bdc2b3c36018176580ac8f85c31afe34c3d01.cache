[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Router = Package['iron:router'].Router;\nvar RouteController = Package['iron:router'].RouteController;\nvar _ = Package.underscore._;\nvar AccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nvar Iron = Package['iron:core'].Iron;\nvar Accounts = Package['accounts-base'].Accounts;\nvar T9n = Package['softwarerero:accounts-t9n'].T9n;\nvar Template = Package['templating-runtime'].Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/useraccounts_iron-routing/lib/core.js                                                                //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n/* global\n  AccountsTemplates: false\n*/\n'use strict';\n\n// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n  name: Match.Optional(String),\n  path: Match.Optional(String),\n  template: Match.Optional(String),\n  layoutTemplate: Match.Optional(String),\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n/*\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n    name:           String (optional). A unique route\"s name to be passed to iron-router\n    path:           String (optional). A unique route\"s path to be passed to iron-router\n    template:       String (optional). The name of the template to be rendered\n    layoutTemplate: String (optional). The name of the layout to be used\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAccountsTemplates.ROUTE_DEFAULT = {\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"},\n};\n\n\n// Current configuration values\n// Redirects\nAccountsTemplates.options.homeRoutePath = \"/\";\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds\n\n// Known routes used to filter out previous path for redirects...\nAccountsTemplates.knownRoutes = [];\n\n// Configured routes\nAccountsTemplates.routes = {};\n\nAccountsTemplates.configureRoute = function(route, options) {\n  check(route, String);\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));\n  options = _.clone(options);\n  // Route Configuration can be done only before initialization\n  if (this._initialized) {\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n  }\n  // Only allowed routes can be configured\n  if (!(route in this.ROUTE_DEFAULT)) {\n    throw new Error(\"Unknown Route!\");\n  }\n  // Allow route configuration only once\n  if (route in this.routes) {\n    throw new Error(\"Route already configured!\");\n  }\n\n  // Possibly adds a initial / to the provided path\n  if (options && options.path && options.path[0] !== \"/\") {\n    options.path = \"/\" + options.path;\n  }\n  // Updates the current configuration\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n\n  this.routes[route] = options;\n  // Known routes are used to filter out previous path for redirects...\n  AccountsTemplates.knownRoutes.push(options.path);\n\n  if (Meteor.isServer){\n    // Configures \"reset password\" email link\n    if (route === \"resetPwd\"){\n      var resetPwdPath = options.path.substr(1);\n      Accounts.urls.resetPassword = function(token){\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n      };\n    }\n    // Configures \"enroll account\" email link\n    if (route === \"enrollAccount\"){\n      var enrollAccountPath = options.path.substr(1);\n      Accounts.urls.enrollAccount = function(token){\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n      };\n    }\n    // Configures \"verify email\" email link\n    if (route === \"verifyEmail\"){\n      var verifyEmailPath = options.path.substr(1);\n      Accounts.urls.verifyEmail = function(token){\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n      };\n    }\n  }\n\n  if (route === \"ensureSignedIn\") {\n    return;\n  }\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n  }\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n  }\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n  }\n\n  // Determines the default layout to be used in case no specific one is specified for single routes\n  var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;\n\n  var name = options.name; // Default provided...\n  var path = options.path; // Default provided...\n  var template = options.template || \"fullPageAtForm\";\n  var layoutTemplate = options.layoutTemplate || defaultLayout;\n  var additionalOptions = _.omit(options, [\n    \"layoutTemplate\", \"name\", \"path\", \"redirect\", \"template\"\n  ]);\n\n  // Possibly adds token parameter\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){\n    path += \"/:paramToken\";\n    if (route === \"verifyEmail\") {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onRun: function() {\n          AccountsTemplates.setState(route);\n          AccountsTemplates.setDisabled(true);\n          var token = this.params.paramToken;\n          Accounts.verifyEmail(token, function(error){\n            AccountsTemplates.setDisabled(false);\n            AccountsTemplates.submitCallback(error, route, function(){\n              AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n            });\n          });\n\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n        },\n      }));\n    }\n    else {\n      Router.route(path, _.extend(additionalOptions, {\n        name: name,\n        template: template,\n        layoutTemplate: layoutTemplate,\n        onBeforeAction: function() {\n          AccountsTemplates.paramToken = this.params.paramToken;\n          AccountsTemplates.setState(route);\n          this.next();\n        },\n        onStop: function() {\n          AccountsTemplates.clearState();\n          AccountsTemplates.paramToken = null;\n        }\n      }));\n    }\n  }\n  else {\n    Router.route(path, _.extend(additionalOptions, {\n      name: name,\n      template: template,\n      layoutTemplate: layoutTemplate,\n      onBeforeAction: function() {\n        var redirect = false;\n        if (route === 'changePwd') {\n          if (!Meteor.loggingIn() && !Meteor.userId()) {\n            redirect = true;\n          }\n        }\n        else if (Meteor.userId()) {\n          redirect = true;\n        }\n        if (redirect) {\n          AccountsTemplates.postSubmitRedirect(route);\n          this.stop();\n        }\n        else {\n          AccountsTemplates.setState(route);\n          this.next();\n        }\n      },\n      onStop: function() {\n        AccountsTemplates.clearState();\n      }\n    }));\n  }\n};\n\n\nAccountsTemplates.getRouteName = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].name;\n  }\n  return null;\n};\n\nAccountsTemplates.getRoutePath = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].path;\n  }\n  return \"#\";\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/useraccounts_iron-routing/lib/client.js                                                              //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n/* global\n  AccountsTemplates: false,\n  grecaptcha: false,\n  Iron: false,\n  Router: false\n*/\n'use strict';\n\n\n// Previous path used for redirect after form submit\nAccountsTemplates._prevPath = null;\n\n// Possibly keeps reference to the handle for the timed out redirect\n// set on some routes\nAccountsTemplates.timedOutRedirect = null;\n\n\nAccountsTemplates.clearState = function() {\n  _.each(this._fields, function(field){\n    field.clearStatus();\n  });\n  var form = this.state.form;\n  form.set('error', null);\n  form.set('result', null);\n  form.set('message', null);\n\n  AccountsTemplates.setDisabled(false);\n\n  // Possibly clears timed out redirects\n  if (AccountsTemplates.timedOutRedirect !== null) {\n    Meteor.clearTimeout(AccountsTemplates.timedOutRedirect);\n    AccountsTemplates.timedOutRedirect = null;\n  }\n};\n\n// Getter for previous route's path\nAccountsTemplates.getPrevPath = function() {\n    return this._prevPath;\n};\n\n// Setter for previous route's path\nAccountsTemplates.setPrevPath = function(newPath) {\n    check(newPath, String);\n    this._prevPath = newPath;\n};\n\nvar ensureSignedIn = function() {\n  if (!Meteor.userId()) {\n    Tracker.nonreactive(function () {\n      AccountsTemplates.setPrevPath(Router.current().url);\n    });\n    AccountsTemplates.setState(AccountsTemplates.options.defaultState, function(){\n      var err = AccountsTemplates.texts.errors.mustBeLoggedIn;\n      AccountsTemplates.state.form.set('error', [err]);\n    });\n    AccountsTemplates.avoidRedirect = true;\n    // render the login template but keep the url in the browser the same\n\n    var options = AccountsTemplates.routes.ensureSignedIn;\n\n    // Determines the template to be rendered in case no specific one was configured for ensureSignedIn\n    var signInRouteTemplate = AccountsTemplates.routes.signIn && AccountsTemplates.routes.signIn.template;\n    var template = (options && options.template) || signInRouteTemplate || 'fullPageAtForm';\n\n    // Determines the layout to be used in case no specific one was configured for ensureSignedIn\n    var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;\n    var layoutTemplate = (options && options.layoutTemplate) || defaultLayout;\n\n    this.layout(layoutTemplate);\n    this.render(template);\n    this.renderRegions();\n  } else {\n    AccountsTemplates.clearError();\n    this.next();\n  }\n};\n\nAccountsTemplates.ensureSignedIn = function() {\n  console.warn(\n    '[UserAccounts] AccountsTemplates.ensureSignedIn will be deprecated soon, please use the plugin version\\n' +\n    '               see https://github.com/meteor-useraccounts/core/blob/master/Guide.md#content-protection'\n  );\n  ensureSignedIn.call(this);\n};\n\n\nIron.Router.plugins.ensureSignedIn = function (router, options) {\n  // this loading plugin just creates an onBeforeAction hook\n  router.onRun(function(){\n    if (Meteor.loggingIn()) {\n        this.renderRegions();\n    } else {\n        this.next();\n    }\n  }, options);\n\n  router.onBeforeAction(\n    ensureSignedIn,\n    options\n  );\n\n  router.onStop(function(){\n    AccountsTemplates.clearError();\n  });\n};\n\n\n\n// Stores previous path on path change...\nRouter.onStop(function() {\n  Tracker.nonreactive(function () {\n    var currentPath = Router.current().url;\n    var currentPathClean = currentPath.replace(/^\\/+|\\/+$/gm,'');\n    var isKnownRoute = _.map(AccountsTemplates.knownRoutes, function(path){\n      if (!path) {\n        return false;\n      }\n      path = path.replace(/^\\/+|\\/+$/gm,'');\n      var known = RegExp(path).test(currentPathClean);\n      return known;\n    });\n    if (!_.some(isKnownRoute)) {\n      AccountsTemplates.setPrevPath(currentPath);\n    }\n    AccountsTemplates.avoidRedirect = false;\n  });\n});\n\n\nAccountsTemplates.linkClick = function(route){\n  if (AccountsTemplates.disabled()) {\n    return;\n  }\n  var path = AccountsTemplates.getRoutePath(route);\n  if (path === '#' || AccountsTemplates.avoidRedirect ||\n     (Router.current().route && path === Router.current().route.path())) {\n    AccountsTemplates.setState(route);\n  }\n  else {\n    Meteor.defer(function(){\n      Router.go(path);\n    });\n  }\n\n  var firstVisibleInput = _.find(this.getFields(), function(f){\n    return _.contains(f.visible, route);\n  });\n  if (firstVisibleInput) {\n    $('input#at-field-' + firstVisibleInput._id).focus();\n  }\n};\n\nAccountsTemplates.logout = function(){\n  var onLogoutHook = AccountsTemplates.options.onLogoutHook;\n  var homeRoutePath = AccountsTemplates.options.homeRoutePath;\n  Meteor.logout(function(){\n    if (onLogoutHook) {\n      onLogoutHook();\n    }\n    else if (homeRoutePath) {\n      Router.go(homeRoutePath);\n    }\n  });\n};\n\nAccountsTemplates.postSubmitRedirect = function(route){\n  if (AccountsTemplates.avoidRedirect) {\n    AccountsTemplates.avoidRedirect = false;\n  }\n  else {\n    var nextPath = AccountsTemplates.routes[route] && AccountsTemplates.routes[route].redirect;\n    if (nextPath){\n      if (_.isFunction(nextPath)) {\n        nextPath();\n      }\n      else {\n        Router.go(nextPath);\n      }\n    }else{\n      var previousPath = AccountsTemplates.getPrevPath();\n      if (previousPath && Router.current().route.path() !== previousPath) {\n        Router.go(previousPath);\n      }\n      else{\n        var homeRoutePath = AccountsTemplates.options.homeRoutePath;\n        if (homeRoutePath) {\n          Router.go(homeRoutePath);\n        }\n      }\n    }\n  }\n};\n\nAccountsTemplates.submitCallback = function(error, state, onSuccess){\n\n  var onSubmitHook = AccountsTemplates.options.onSubmitHook;\n  if(onSubmitHook) {\n    onSubmitHook(error, state);\n  }\n\n  if (error) {\n    if(_.isObject(error.details)) {\n      // If error.details is an object, we may try to set fields errors from it\n      _.each(error.details, function(error, fieldId){\n          AccountsTemplates.getField(fieldId).setError(error);\n      });\n    }\n    else {\n      var err = 'error.accounts.Unknown error';\n      if (error.reason) {\n        err = error.reason;\n      }\n      if (err.substring(0, 15) !== 'error.accounts.') {\n        err = 'error.accounts.' + err;\n      }\n      AccountsTemplates.state.form.set('error', [err]);\n    }\n    AccountsTemplates.setDisabled(false);\n    // Possibly resets reCaptcha form\n    if (state === 'signUp' && AccountsTemplates.options.showReCaptcha) {\n      grecaptcha.reset();\n    }\n  }\n  else{\n    if (onSuccess) {\n      onSuccess();\n    }\n\n    if (_.contains(['enrollAccount', 'forgotPwd', 'resetPwd', 'verifyEmail'], state)){\n      var redirectTimeout = AccountsTemplates.options.redirectTimeout;\n      if (redirectTimeout > 0) {\n        AccountsTemplates.timedOutRedirect = Meteor.setTimeout(function(){\n          AccountsTemplates.timedOutRedirect = null;\n          AccountsTemplates.setDisabled(false);\n          AccountsTemplates.postSubmitRedirect(state);\n        }, redirectTimeout);\n      }\n    }\n    else if (state){\n      AccountsTemplates.setDisabled(false);\n      AccountsTemplates.postSubmitRedirect(state);\n    }\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/useraccounts_iron-routing/lib/templates_helpers/at_input.js                                          //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n/* global\n  AccountsTemplates: false,\n  Router: false\n*/\n'use strict';\n\nAccountsTemplates.atInputRendered.push(function(){\n  var fieldId = this.data._id;\n  var queryKey = this.data.options && this.data.options.queryKey || fieldId;\n  var currentR = Router.current();\n  var inputQueryVal = currentR && currentR.params && currentR.params.query && currentR.params.query[queryKey];\n  if (inputQueryVal) {\n    this.$(\"input#at-field-\" + fieldId).val(inputQueryVal);\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"useraccounts:iron-routing\");\n\n})();\n","servePath":"/packages/useraccounts_iron-routing.js"}]