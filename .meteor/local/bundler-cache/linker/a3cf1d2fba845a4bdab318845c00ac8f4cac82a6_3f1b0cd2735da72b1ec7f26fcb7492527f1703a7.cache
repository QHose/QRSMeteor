[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/oauth2/oauth2_server.js                                  //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n// connect middleware\nOAuth._requestHandlers['2'] = function (service, query, res) {\n  // check if user authorized access\n  if (!query.error) {\n    // Prepare the login results before returning.\n\n    // Run service-specific handler.\n    var oauthResult = service.handleOauthRequest(query);\n    var credentialSecret = Random.secret();\n\n    var credentialToken = OAuth._credentialTokenFromQuery(query);\n\n    // Store the login result so it can be retrieved in another\n    // browser tab by the result handler\n    OAuth._storePendingCredential(credentialToken, {\n      serviceName: service.serviceName,\n      serviceData: oauthResult.serviceData,\n      options: oauthResult.options\n    }, credentialSecret);\n  }\n\n  // Either close the window, redirect, or render nothing\n  // if all else fails\n  OAuth._renderOauthResults(res, query, credentialSecret);\n};\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"oauth2\");\n\n})();\n","servePath":"/packages/oauth2.js"}]