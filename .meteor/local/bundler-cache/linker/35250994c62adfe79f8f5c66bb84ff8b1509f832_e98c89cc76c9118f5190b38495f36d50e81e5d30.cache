[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar EventEmitter;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/raix_eventemitter/packages/raix_eventemitter.js          //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/raix:eventemitter/eventemitter.client.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global EventEmitter: true */                                                                                       // 1\nEventEmitter = function(options) {                                                                                    // 2\n  var self = this;                                                                                                    // 3\n  // Check that the user uses \"new\" keyword for api consistency                                                       // 4\n  if (! (self instanceof EventEmitter)) {                                                                             // 5\n    throw new Error('use \"new\" to construct an EventEmitter');                                                        // 6\n  }                                                                                                                   // 7\n                                                                                                                      // 8\n  options = options || {};                                                                                            // 9\n                                                                                                                      // 10\n  // Hidden scope                                                                                                     // 11\n  self._eventEmitter = {                                                                                              // 12\n    onListeners: {},                                                                                                  // 13\n    onceListeners: {},                                                                                                // 14\n    maxListeners: options.maxListeners || 10                                                                          // 15\n  };                                                                                                                  // 16\n};                                                                                                                    // 17\n                                                                                                                      // 18\nvar _checkListenerLimit = function(eventName, listenerCount) {                                                        // 19\n  var self = this;                                                                                                    // 20\n  // Check if we are to send a warning                                                                                // 21\n  if (self._eventEmitter.maxListeners && listenerCount > self._eventEmitter.maxListeners) {                           // 22\n    // Return string                                                                                                  // 23\n    return 'warning: possible EventEmitter memory leak detected. ' +                                                  // 24\n        listenerCount + ' listeners added on event \"' + eventName +                                                   // 25\n        '\". Use emitter.setMaxListeners() to increase limit. (' +                                                     // 26\n        self._eventEmitter.maxListeners + ')';                                                                        // 27\n                                                                                                                      // 28\n  }                                                                                                                   // 29\n};                                                                                                                    // 30\n                                                                                                                      // 31\n// By default EventEmitters will print a warning if more than 10 listeners are                                        // 32\n// added for a particular event. This is a useful default which helps finding                                         // 33\n// memory leaks. Obviously not all Emitters should be limited to 10. This function                                    // 34\n// allows that to be increased. Set to zero for unlimited.                                                            // 35\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                // 36\n  this._eventEmitter.maxListeners = n;                                                                                // 37\n};                                                                                                                    // 38\n                                                                                                                      // 39\nvar _addToList = function(list, eventName, listener) {                                                                // 40\n  // Check that we have a container for the event, Create listener array                                              // 41\n  if (typeof list[eventName] === 'undefined') {                                                                       // 42\n    list[eventName] = [];                                                                                             // 43\n  }                                                                                                                   // 44\n                                                                                                                      // 45\n  // Make sure the listener is not in there already?                                                                  // 46\n  // We have to comment this to be compliant with node.js                                                             // 47\n  // list[eventName] = _.without(list[eventName], listener);                                                          // 48\n                                                                                                                      // 49\n  // Add the listener and Check the limit                                                                             // 50\n  return _checkListenerLimit.apply(this, [eventName, list[eventName].push(listener)]);                                // 51\n};                                                                                                                    // 52\n                                                                                                                      // 53\n// Adds a listener to the end of the listeners array for the specified event.                                         // 54\n// server.on('connection', function (stream) {                                                                        // 55\n//   console.log('someone connected!');                                                                               // 56\n// });                                                                                                                // 57\n// Returns emitter, so calls can be chained.                                                                          // 58\nEventEmitter.prototype.on = function(eventName, listener) {                                                           // 59\n  var warn = _addToList.apply(this, [this._eventEmitter.onListeners, eventName, listener]);                           // 60\n                                                                                                                      // 61\n  // Warn if needed                                                                                                   // 62\n  if (warn) {                                                                                                         // 63\n    console.warn((new Error(warn)).stack);                                                                            // 64\n  }                                                                                                                   // 65\n                                                                                                                      // 66\n  // Return the emitter                                                                                               // 67\n  return this;                                                                                                        // 68\n};                                                                                                                    // 69\n                                                                                                                      // 70\n// Adds a one time listener for the event. This listener is invoked                                                   // 71\n// only the next time the event is fired, after which it is removed.                                                  // 72\nEventEmitter.prototype.once = function(eventName, listener) {                                                         // 73\n  var warn = _addToList.apply(this, [this._eventEmitter.onceListeners, eventName, listener]);                         // 74\n                                                                                                                      // 75\n  // Warn if needed                                                                                                   // 76\n  if (warn) {                                                                                                         // 77\n    console.warn((new Error(warn)).stack);                                                                            // 78\n  }                                                                                                                   // 79\n                                                                                                                      // 80\n  // Return the emitter                                                                                               // 81\n  return this;                                                                                                        // 82\n};                                                                                                                    // 83\n                                                                                                                      // 84\nvar _runCallbacks = function(listenerArray, args) {                                                                   // 85\n  var self = this;                                                                                                    // 86\n  // count of listeners triggered                                                                                     // 87\n  var count = 0;                                                                                                      // 88\n  // Check if we have anything to work with                                                                           // 89\n  if (typeof listenerArray !== 'undefined') {                                                                         // 90\n    // Try to iterate over the listeners                                                                              // 91\n    _.each(listenerArray, function(listener) {                                                                        // 92\n      // Count listener calls                                                                                         // 93\n      count++;                                                                                                        // 94\n      // Send the job to the eventloop                                                                                // 95\n      listener.apply(self, args);                                                                                     // 96\n    });                                                                                                               // 97\n  }                                                                                                                   // 98\n                                                                                                                      // 99\n  // Return the count                                                                                                 // 100\n  return count;                                                                                                       // 101\n};                                                                                                                    // 102\n                                                                                                                      // 103\n// emitter.emit(event, [arg1], [arg2], [...])#                                                                        // 104\n// Execute each of the listeners in order with the supplied arguments.                                                // 105\nEventEmitter.prototype.emit = function(eventName /* arguments */) {                                                   // 106\n  var self = this;                                                                                                    // 107\n  // make argument list to pass on to listeners                                                                       // 108\n  var args = _.rest(arguments);                                                                                       // 109\n                                                                                                                      // 110\n  // Count listeners triggered                                                                                        // 111\n  var count = 0;                                                                                                      // 112\n                                                                                                                      // 113\n  // Swap once list                                                                                                   // 114\n  var onceList = self._eventEmitter.onceListeners[eventName];                                                         // 115\n                                                                                                                      // 116\n  // Empty the once list                                                                                              // 117\n  self._eventEmitter.onceListeners[eventName] = [];                                                                   // 118\n                                                                                                                      // 119\n  // Trigger on listeners                                                                                             // 120\n  count += _runCallbacks.call(self, self._eventEmitter.onListeners[eventName], args);                                 // 121\n                                                                                                                      // 122\n  // Trigger once listeners                                                                                           // 123\n  count += _runCallbacks.call(self, onceList, args);                                                                  // 124\n                                                                                                                      // 125\n  // Returns true if event had listeners, false otherwise.                                                            // 126\n  return (count > 0);                                                                                                 // 127\n};                                                                                                                    // 128\n                                                                                                                      // 129\n// XXX: When removing a listener in node js it only removes one - not all.                                            // 130\nvar _withoutOne = function(list, obj) {                                                                               // 131\n  var found = false;                                                                                                  // 132\n  var result = [];                                                                                                    // 133\n                                                                                                                      // 134\n  // Iterate over listeners                                                                                           // 135\n  for (var i = 0; i < list.length; i++) {                                                                             // 136\n    // Check if we found one...                                                                                       // 137\n    if (!found && list[i] === obj) {                                                                                  // 138\n      found = true;                                                                                                   // 139\n    } else {                                                                                                          // 140\n      result.push(list[i]);                                                                                           // 141\n    }                                                                                                                 // 142\n  }                                                                                                                   // 143\n                                                                                                                      // 144\n  // return the new array                                                                                             // 145\n  return result;                                                                                                      // 146\n};                                                                                                                    // 147\n                                                                                                                      // 148\n// Removes all listeners, or those of the specified event. It's not a                                                 // 149\n// good idea to remove listeners that were added elsewhere in the code,                                               // 150\n// especially when it's on an emitter that you didn't create (e.g. sockets                                            // 151\n// or file streams).                                                                                                  // 152\n// Returns emitter, so calls can be chained.                                                                          // 153\nEventEmitter.prototype.off = function(eventName, listener) {                                                          // 154\n  var self = this;                                                                                                    // 155\n  if (eventName) {                                                                                                    // 156\n    if (typeof listener === 'function') {                                                                             // 157\n      // its a bit more tricky - we have to iterate over the arrays and only                                          // 158\n      // clone listeners not equal to                                                                                 // 159\n      if (typeof self._eventEmitter.onListeners[eventName] !== 'undefined') {                                         // 160\n        self._eventEmitter.onListeners[eventName] = _withoutOne(self._eventEmitter.onListeners[eventName], listener); // 161\n                                                                                                                      // 162\n      }                                                                                                               // 163\n      if (typeof self._eventEmitter.onceListeners[eventName] !== 'undefined') {                                       // 164\n        self._eventEmitter.onceListeners[eventName] = _withoutOne(self._eventEmitter.onceListeners[eventName], listener);\n                                                                                                                      // 166\n      }                                                                                                               // 167\n    } else {                                                                                                          // 168\n      // Remove all listeners for eventName                                                                           // 169\n      self._eventEmitter.onListeners[eventName] = [];                                                                 // 170\n      self._eventEmitter.onceListeners[eventName] = [];                                                               // 171\n    }                                                                                                                 // 172\n                                                                                                                      // 173\n  } else {                                                                                                            // 174\n    // Remove all listeners                                                                                           // 175\n    self._eventEmitter.onListeners = {};                                                                              // 176\n    self._eventEmitter.onceListeners = {};                                                                            // 177\n  }                                                                                                                   // 178\n};                                                                                                                    // 179\n                                                                                                                      // 180\n// Add api helpers                                                                                                    // 181\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                       // 182\nEventEmitter.prototype.removeListener = EventEmitter.prototype.off;                                                   // 183\nEventEmitter.prototype.removeAllListeners = EventEmitter.prototype.off;                                               // 184\n                                                                                                                      // 185\n// Add jquery like helpers                                                                                            // 186\nEventEmitter.prototype.one = EventEmitter.prototype.once;                                                             // 187\nEventEmitter.prototype.trigger = EventEmitter.prototype.emit;                                                         // 188\n                                                                                                                      // 189\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"raix:eventemitter\", {\n  EventEmitter: EventEmitter\n});\n\n})();\n","servePath":"/packages/raix_eventemitter.js"}]