[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar EJSON = Package.ejson.EJSON;\nvar GeoJSON = Package['geojson-utils'].GeoJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar MongoID = Package['mongo-id'].MongoID;\nvar OrderedDict = Package['ordered-dict'].OrderedDict;\nvar Random = Package.random.Random;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar MinimongoTest, MinimongoError, LocalCollection, Minimongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"minimongo\":{\"minimongo_client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_client.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./minimongo_common.js\"));\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/common.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nmodule.export({\n  hasOwn: function () {\n    return hasOwn;\n  },\n  ELEMENT_OPERATORS: function () {\n    return ELEMENT_OPERATORS;\n  },\n  compileDocumentSelector: function () {\n    return compileDocumentSelector;\n  },\n  equalityElementMatcher: function () {\n    return equalityElementMatcher;\n  },\n  expandArraysInBranches: function () {\n    return expandArraysInBranches;\n  },\n  isIndexable: function () {\n    return isIndexable;\n  },\n  isNumericKey: function () {\n    return isNumericKey;\n  },\n  isOperatorObject: function () {\n    return isOperatorObject;\n  },\n  makeLookupFunction: function () {\n    return makeLookupFunction;\n  },\n  nothingMatcher: function () {\n    return nothingMatcher;\n  },\n  pathsToTree: function () {\n    return pathsToTree;\n  },\n  populateDocumentWithQueryFields: function () {\n    return populateDocumentWithQueryFields;\n  },\n  projectionDetails: function () {\n    return projectionDetails;\n  },\n  regexpElementMatcher: function () {\n    return regexpElementMatcher;\n  }\n});\nvar LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar ELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      } // XXX could require to be ints or round or something\n\n\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      var elementMatchers = operand.map(function (option) {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(function (matcher) {\n          return matcher(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return function (value) {\n        return Array.isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        var operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127\n        };\n\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(\"unknown string alias for $type: \" + operand);\n        }\n\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {\n          throw Error(\"Invalid numerical $type code: \" + operand);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return function (value) {\n        return value !== undefined && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $bitsAllSet: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAllSet');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every(function (byte, i) {\n          return (bitmask[i] & byte) === byte;\n        });\n      };\n    }\n  },\n  $bitsAnySet: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAnySet');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some(function (byte, i) {\n          return (~bitmask[i] & byte) !== byte;\n        });\n      };\n    }\n  },\n  $bitsAllClear: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAllClear');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every(function (byte, i) {\n          return !(bitmask[i] & byte);\n        });\n      };\n    }\n  },\n  $bitsAnyClear: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some(function (byte, i) {\n          return (bitmask[i] & byte) !== byte;\n        });\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      var regexp;\n\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        var source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      var isDocMatcher = !isOperatorObject(Object.keys(operand).filter(function (key) {\n        return !hasOwn.call(LOGICAL_OPERATORS, key);\n      }).reduce(function (a, b) {\n        var _Object$assign;\n\n        return Object.assign(a, (_Object$assign = {}, _Object$assign[b] = operand[b], _Object$assign));\n      }, {}), true);\n      var subMatcher;\n\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher, {\n          inElemMatch: true\n        });\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return function (value) {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg = void 0;\n\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{\n              value: arrayElement,\n              dontIterate: true\n            }];\n          } // XXX support $near in $elemMatch by propagating $distance?\n\n\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n};\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));\n  },\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return function (doc) {\n      var result = matchers.some(function (fn) {\n        return fn(doc).result;\n      }); // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n\n      return {\n        result: result\n      };\n    };\n  },\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = matchers.every(function (fn) {\n        return !fn(doc).result;\n      }); // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n\n      return {\n        result: result\n      };\n    };\n  },\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', \"return \" + selectorValue);\n    } // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n\n\n    return function (doc) {\n      return {\n        result: selectorValue.call(doc, doc)\n      };\n    };\n  },\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {\n        result: true\n      };\n    };\n  }\n}; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\n\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    } // Not sure why, but this seems to be what MongoDB does.\n\n\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    var branchedMatchers = operand.map(function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      } // This is always a regexp or equality selector.\n\n\n      return compileValueSelector(criterion, matcher);\n    }); // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n\n    var maxDistance, point, distance;\n\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(point, {\n            type: 'Point',\n            coordinates: pointToArray(value)\n          });\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = function (value) {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      var result = {\n        result: false\n      };\n      expandArraysInBranches(branchedValues).every(function (branch) {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        var curDistance;\n\n        if (!matcher._isUpdate) {\n          if (!((0, _typeof2.default)(branch.value) === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.\n\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          } // Skip anything that's a tie.\n\n\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n      return result;\n    };\n  }\n}; // NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\n\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return function (docOrBranches) {\n    var match = {};\n    match.result = subMatchers.every(function (fn) {\n      var subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n\n      if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {\n        match.distance = subResult.distance;\n      } // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n\n\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    }); // If we didn't actually match, forget any extra metadata we came up with.\n\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(function (subSelector) {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {\n      inElemMatch: inElemMatch\n    });\n  });\n} // Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\n\n\nfunction compileDocumentSelector(docSelector, matcher) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var docMatchers = Object.keys(docSelector).map(function (key) {\n    var subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    } // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n\n\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    } // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n\n\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    var lookUpByIndex = makeLookupFunction(key);\n    var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);\n    return function (doc) {\n      return valueMatcher(lookUpByIndex(doc));\n    };\n  }).filter(Boolean);\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));\n} // Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\n\n\nfunction convertElementMatcherToBranchedMatcher(elementMatcher) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (branches) {\n    var expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n    var match = {};\n    match.result = expanded.some(function (element) {\n      var matched = elementMatcher(element.value); // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      } // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n\n\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n    return match;\n  };\n} // Helpers for $near.\n\n\nfunction distanceCoordinatePairs(a, b) {\n  var pointA = pointToArray(a);\n  var pointB = pointToArray(b);\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n} // Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\n\n\nfunction equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  } // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n\n\n  if (elementSelector == null) {\n    return function (value) {\n      return value == null;\n    };\n  }\n\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {\n    result: true\n  };\n}\n\nfunction expandArraysInBranches(branches, skipTheArrays) {\n  var branchesOut = [];\n  branches.forEach(function (branch) {\n    var thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        arrayIndices: branch.arrayIndices,\n        value: branch.value\n      });\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach(function (value, i) {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value: value\n        });\n      });\n    }\n  });\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  } // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n\n\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  } // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n\n\n  if (Array.isArray(operand) && operand.every(function (x) {\n    return Number.isInteger(x) && x >= 0;\n  })) {\n    var buffer = new ArrayBuffer((Math.max.apply(Math, (0, _toConsumableArray2.default)(operand)) >> 3) + 1);\n    var view = new Uint8Array(buffer);\n    operand.forEach(function (x) {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n    return view;\n  } // bad operand\n\n\n  throw Error(\"operand to \" + selector + \" must be a numeric bitmask (representable as a \" + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    var buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));\n    var view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension\n\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach(function (byte, i) {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  } // bindata\n\n\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  } // no match\n\n\n  return false;\n} // Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\n\n\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(function (existingKey) {\n    if (existingKey.length > key.length && existingKey.indexOf(key + \".\") === 0 || key.length > existingKey.length && key.indexOf(existingKey + \".\") === 0) {\n      throw new Error(\"cannot infer query fields to set, both paths '\" + existingKey + \"' and \" + (\"'\" + key + \"' are matched\"));\n    } else if (existingKey === key) {\n      throw new Error(\"cannot infer query fields to set, path '\" + key + \"' is matched twice\");\n    }\n  });\n  document[key] = value;\n} // Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\n\n\nfunction invertBranchedMatcher(branchedMatcher) {\n  return function (branchValues) {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {\n      result: !branchedMatcher(branchValues).result\n    };\n  };\n}\n\nfunction isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nfunction isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\nfunction isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  var theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(function (selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\"Inconsistent operator: \" + JSON.stringify(valueSelector));\n      }\n\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return function () {\n          return false;\n        };\n      } // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n\n\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      var operandType = LocalCollection._f._type(operand);\n\n      return function (value) {\n        if (value === undefined) {\n          value = null;\n        } // Comparisons are never true among things of different type (except\n        // null vs undefined).\n\n\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n} // makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\n\n\nfunction makeLookupFunction(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'));\n\n  var omitUnnecessaryFields = function (result) {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  }; // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n\n\n  return function (doc) {\n    var arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      } // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n\n\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    } // Do our first lookup.\n\n\n    var firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices: arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    } // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n\n\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({\n        arrayIndices: arrayIndices,\n        value: undefined\n      })];\n    }\n\n    var result = [];\n\n    var appendToResult = function (more) {\n      result.push.apply(result, (0, _toConsumableArray2.default)(more));\n    }; // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n\n\n    appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n\n    if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach(function (branch, arrayIndex) {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {\n  makeLookupFunction: makeLookupFunction\n};\n\nMinimongoError = function (message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof message === 'string' && options.field) {\n    message += \" for field '\" + options.field + \"'\";\n  }\n\n  var error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nfunction nothingMatcher(docOrBranchedValues) {\n  return {\n    result: false\n  };\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  var operatorMatchers = Object.keys(valueSelector).map(function (operator) {\n    var operand = valueSelector[operator];\n    var simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';\n    var simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);\n    var simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(function (x) {\n      return x === Object(x);\n    });\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);\n    }\n\n    throw new Error(\"Unrecognized operator: \" + operator);\n  });\n  return andBranchedMatchers(operatorMatchers);\n} // paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\n\n\nfunction pathsToTree(paths, newLeafFn, conflictFn) {\n  var root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  paths.forEach(function (path) {\n    var pathArray = path.split('.');\n    var tree = root; // use .every just for iteration with break\n\n    var success = pathArray.slice(0, -1).every(function (key, i) {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path\n\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n      return true;\n    });\n\n    if (success) {\n      var lastKey = pathArray[pathArray.length - 1];\n\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n} // Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n// Handles one key/value pair to put in the selector document\n\n\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n} // Handles a key, value pair to put in the selector document\n// if the value is an object\n\n\nfunction populateDocumentWithObject(document, key, value) {\n  var keys = Object.keys(value);\n  var unprefixedKeys = keys.filter(function (op) {\n    return op[0] !== '$';\n  });\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(\"unknown operator: \" + unprefixedKeys[0]);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(function (op) {\n      var object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(function (element) {\n          return populateDocumentWithKeyValue(document, key, element);\n        });\n      }\n    });\n  }\n} // Fills a document with certain fields from an upsert selector\n\n\nfunction populateDocumentWithQueryFields(query) {\n  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(function (key) {\n      var value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(function (element) {\n          return populateDocumentWithQueryFields(element, document);\n        });\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\nfunction projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(function (key) {\n      return key !== '_id';\n    });\n  }\n\n  var including = null; // Unknown\n\n  fieldsKeys.forEach(function (keyPath) {\n    var rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    } // This error message is copied from MongoDB shell\n\n\n    if (including !== rule) {\n      throw MinimongoError('You cannot currently mix including and excluding fields.');\n    }\n  });\n  var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {\n    return including;\n  }, function (node, path, fullPath) {\n    // Check passed projection fields' keys: If you have two rules such as\n    // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n    // that happens, there is a probability you are doing something wrong,\n    // framework should notify you about such mistake earlier on cursor\n    // compilation step than later during runtime.  Note, that real mongo\n    // doesn't do anything about it and the later rule appears in projection\n    // project, more priority it takes.\n    //\n    // Example, assume following in mongo shell:\n    // > db.coll.insert({ a: { b: 23, c: 44 } })\n    // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n    // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n    //\n    // Note, how second time the return set of keys is different.\n    var currentPath = fullPath;\n    var anotherPath = path;\n    throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath + \" found in fields option, \" + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');\n  });\n  return {\n    including: including,\n    tree: projectionRulesTree\n  };\n}\n\nfunction regexpElementMatcher(regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    } // Regexps only work against strings.\n\n\n    if (typeof value !== 'string') {\n      return false;\n    } // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n\n\n    regexp.lastIndex = 0;\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\"The dotted field '\" + key + \"' in '\" + path + \".\" + key + \" is not valid for storage.\");\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\"The dollar ($) prefixed field  '\" + path + \".\" + key + \" is not valid for storage.\");\n  }\n} // Recursively validates an object that is nested more than one level deep\n\n\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(function (key) {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cursor.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/cursor.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  \"default\": function () {\n    return Cursor;\n  }\n});\nvar LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn;\nmodule.watch(require(\"./common.js\"), {\n  hasOwn: function (v) {\n    hasOwn = v;\n  }\n}, 1);\n\nvar Cursor =\n/*#__PURE__*/\nfunction () {\n  // don't call this ctor directly.  use LocalCollection.find().\n  function Cursor(collection, selector) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || [], {\n          matcher: this.matcher\n        });\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n    this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.\n\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n\n\n  var _proto = Cursor.prototype;\n\n  _proto.count = function () {\n    function count() {\n      var applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.reactive) {\n        // allow the observe to be unordered\n        this._depend({\n          added: true,\n          removed: true\n        }, true);\n      }\n\n      return this._getRawObjects({\n        ordered: true,\n        applySkipLimit: applySkipLimit\n      }).length;\n    }\n\n    return count;\n  }();\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n\n\n  _proto.fetch = function () {\n    function fetch() {\n      var result = [];\n      this.forEach(function (doc) {\n        result.push(doc);\n      });\n      return result;\n    }\n\n    return fetch;\n  }();\n\n  _proto[Symbol.iterator] = function () {\n    var _this = this;\n\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n\n    var index = 0;\n\n    var objects = this._getRawObjects({\n      ordered: true\n    });\n\n    return {\n      next: function () {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          var element = _this._projectionFn(objects[index++]);\n\n          if (_this._transform) element = _this._transform(element);\n          return {\n            value: element\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  };\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n\n\n  _proto.forEach = function () {\n    function forEach(callback, thisArg) {\n      var _this2 = this;\n\n      if (this.reactive) {\n        this._depend({\n          addedBefore: true,\n          removed: true,\n          changed: true,\n          movedBefore: true\n        });\n      }\n\n      this._getRawObjects({\n        ordered: true\n      }).forEach(function (element, i) {\n        // This doubles as a clone operation.\n        element = _this2._projectionFn(element);\n\n        if (_this2._transform) {\n          element = _this2._transform(element);\n        }\n\n        callback.call(thisArg, element, i, _this2);\n      });\n    }\n\n    return forEach;\n  }();\n\n  _proto.getTransform = function () {\n    function getTransform() {\n      return this._transform;\n    }\n\n    return getTransform;\n  }();\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n\n\n  _proto.map = function () {\n    function map(callback, thisArg) {\n      var _this3 = this;\n\n      var result = [];\n      this.forEach(function (doc, i) {\n        result.push(callback.call(thisArg, doc, i, _this3));\n      });\n      return result;\n    }\n\n    return map;\n  }(); // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n\n\n  _proto.observe = function () {\n    function observe(options) {\n      return LocalCollection._observeFromObserveChanges(this, options);\n    }\n\n    return observe;\n  }();\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n\n\n  _proto.observeChanges = function () {\n    function observeChanges(options) {\n      var _this4 = this;\n\n      var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with\n      // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n      // comment in _modifyAndNotify\n      // XXX allow skip/limit with unordered observe\n\n\n      if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n        throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n      }\n\n      if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n        throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n      }\n\n      var distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();\n      var query = {\n        cursor: this,\n        dirty: false,\n        distances: distances,\n        matcher: this.matcher,\n        // not fast pathed\n        ordered: ordered,\n        projectionFn: this._projectionFn,\n        resultsSnapshot: null,\n        sorter: ordered && this.sorter\n      };\n      var qid; // Non-reactive queries call added[Before] and then never call anything\n      // else.\n\n      if (this.reactive) {\n        qid = this.collection.next_qid++;\n        this.collection.queries[qid] = query;\n      }\n\n      query.results = this._getRawObjects({\n        ordered: ordered,\n        distances: query.distances\n      });\n\n      if (this.collection.paused) {\n        query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();\n      } // wrap callbacks we were passed. callbacks only fire when not paused and\n      // are never undefined\n      // Filters out blacklisted fields according to cursor's projection.\n      // XXX wrong place for this?\n      // furthermore, callbacks enqueue until the operation we're working on is\n      // done.\n\n\n      var wrapCallback = function (fn) {\n        if (!fn) {\n          return function () {};\n        }\n\n        var self = _this4;\n        return function ()\n        /* args*/\n        {\n          var _this5 = this;\n\n          if (self.collection.paused) {\n            return;\n          }\n\n          var args = arguments;\n\n          self.collection._observeQueue.queueTask(function () {\n            fn.apply(_this5, args);\n          });\n        };\n      };\n\n      query.added = wrapCallback(options.added);\n      query.changed = wrapCallback(options.changed);\n      query.removed = wrapCallback(options.removed);\n\n      if (ordered) {\n        query.addedBefore = wrapCallback(options.addedBefore);\n        query.movedBefore = wrapCallback(options.movedBefore);\n      }\n\n      if (!options._suppress_initial && !this.collection.paused) {\n        var results = ordered ? query.results : query.results._map;\n        Object.keys(results).forEach(function (key) {\n          var doc = results[key];\n          var fields = EJSON.clone(doc);\n          delete fields._id;\n\n          if (ordered) {\n            query.addedBefore(doc._id, _this4._projectionFn(fields), null);\n          }\n\n          query.added(doc._id, _this4._projectionFn(fields));\n        });\n      }\n\n      var handle = Object.assign(new LocalCollection.ObserveHandle(), {\n        collection: this.collection,\n        stop: function () {\n          if (_this4.reactive) {\n            delete _this4.collection.queries[qid];\n          }\n        }\n      });\n\n      if (this.reactive && Tracker.active) {\n        // XXX in many cases, the same observe will be recreated when\n        // the current autorun is rerun.  we could save work by\n        // letting it linger across rerun and potentially get\n        // repurposed if the same observe is performed, using logic\n        // similar to that of Meteor.subscribe.\n        Tracker.onInvalidate(function () {\n          handle.stop();\n        });\n      } // run the observe callbacks resulting from the initial contents\n      // before we leave the observe.\n\n\n      this.collection._observeQueue.drain();\n\n      return handle;\n    }\n\n    return observeChanges;\n  }(); // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n\n\n  _proto.rewind = function () {\n    function rewind() {}\n\n    return rewind;\n  }(); // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n\n\n  _proto._depend = function () {\n    function _depend(changers, _allow_unordered) {\n      if (Tracker.active) {\n        var dependency = new Tracker.Dependency();\n        var notify = dependency.changed.bind(dependency);\n        dependency.depend();\n        var options = {\n          _allow_unordered: _allow_unordered,\n          _suppress_initial: true\n        };\n        ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(function (fn) {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        }); // observeChanges will stop() when this computation is invalidated\n\n        this.observeChanges(options);\n      }\n    }\n\n    return _depend;\n  }();\n\n  _proto._getCollectionName = function () {\n    function _getCollectionName() {\n      return this.collection.name;\n    }\n\n    return _getCollectionName;\n  }(); // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n\n\n  _proto._getRawObjects = function () {\n    function _getRawObjects() {\n      var _this6 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // By default this method will respect skip and limit because .fetch(),\n      // .forEach() etc... expect this behaviour. It can be forced to ignore\n      // skip and limit by setting applySkipLimit to false (.count() does this,\n      // for example)\n      var applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n      // compatible\n\n      var results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value\n\n      if (this._selectorId !== undefined) {\n        // If you have non-zero skip and ask for a single id, you get nothing.\n        // This is so it matches the behavior of the '{_id: foo}' path.\n        if (applySkipLimit && this.skip) {\n          return results;\n        }\n\n        var selectedDoc = this.collection._docs.get(this._selectorId);\n\n        if (selectedDoc) {\n          if (options.ordered) {\n            results.push(selectedDoc);\n          } else {\n            results.set(this._selectorId, selectedDoc);\n          }\n        }\n\n        return results;\n      } // slow path for arbitrary selector, sort, skip, limit\n      // in the observeChanges case, distances is actually part of the \"query\"\n      // (ie, live results set) object.  in other cases, distances is only used\n      // inside this function.\n\n\n      var distances;\n\n      if (this.matcher.hasGeoQuery() && options.ordered) {\n        if (options.distances) {\n          distances = options.distances;\n          distances.clear();\n        } else {\n          distances = new LocalCollection._IdMap();\n        }\n      }\n\n      this.collection._docs.forEach(function (doc, id) {\n        var matchResult = _this6.matcher.documentMatches(doc);\n\n        if (matchResult.result) {\n          if (options.ordered) {\n            results.push(doc);\n\n            if (distances && matchResult.distance !== undefined) {\n              distances.set(id, matchResult.distance);\n            }\n          } else {\n            results.set(id, doc);\n          }\n        } // Override to ensure all docs are matched if ignoring skip & limit\n\n\n        if (!applySkipLimit) {\n          return true;\n        } // Fast path for limited unsorted queries.\n        // XXX 'length' check here seems wrong for ordered\n\n\n        return !_this6.limit || _this6.skip || _this6.sorter || results.length !== _this6.limit;\n      });\n\n      if (!options.ordered) {\n        return results;\n      }\n\n      if (this.sorter) {\n        results.sort(this.sorter.getComparator({\n          distances: distances\n        }));\n      } // Return the full set of results if there is no skip or limit or if we're\n      // ignoring them\n\n\n      if (!applySkipLimit || !this.limit && !this.skip) {\n        return results;\n      }\n\n      return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);\n    }\n\n    return _getRawObjects;\n  }();\n\n  _proto._publishCursor = function () {\n    function _publishCursor(subscription) {\n      // XXX minimongo should not depend on mongo-livedata!\n      if (!Package.mongo) {\n        throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');\n      }\n\n      if (!this.collection.name) {\n        throw new Error('Can\\'t publish a cursor from a collection without a name.');\n      }\n\n      return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);\n    }\n\n    return _publishCursor;\n  }();\n\n  return Cursor;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"local_collection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/local_collection.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nmodule.export({\n  \"default\": function () {\n    return LocalCollection;\n  }\n});\nvar Cursor;\nmodule.watch(require(\"./cursor.js\"), {\n  \"default\": function (v) {\n    Cursor = v;\n  }\n}, 0);\nvar ObserveHandle;\nmodule.watch(require(\"./observe_handle.js\"), {\n  \"default\": function (v) {\n    ObserveHandle = v;\n  }\n}, 1);\nvar hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;\nmodule.watch(require(\"./common.js\"), {\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  isIndexable: function (v) {\n    isIndexable = v;\n  },\n  isNumericKey: function (v) {\n    isNumericKey = v;\n  },\n  isOperatorObject: function (v) {\n    isOperatorObject = v;\n  },\n  populateDocumentWithQueryFields: function (v) {\n    populateDocumentWithQueryFields = v;\n  },\n  projectionDetails: function (v) {\n    projectionDetails = v;\n  }\n}, 2);\n\nvar LocalCollection =\n/*#__PURE__*/\nfunction () {\n  function LocalCollection(name) {\n    this.name = name; // _id -> document (also containing id)\n\n    this._docs = new LocalCollection._IdMap();\n    this._observeQueue = new Meteor._SynchronousQueue();\n    this.next_qid = 1; // live query id generator\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n\n    this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n\n    this._savedOriginals = null; // True when observers are paused and we should not send callbacks.\n\n    this.paused = false;\n  } // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n\n\n  var _proto = LocalCollection.prototype;\n\n  _proto.find = function () {\n    function find(selector, options) {\n      // default syntax for everything is to omit the selector argument.\n      // but if selector is explicitly passed in as false or undefined, we\n      // want a selector that matches nothing.\n      if (arguments.length === 0) {\n        selector = {};\n      }\n\n      return new LocalCollection.Cursor(this, selector, options);\n    }\n\n    return find;\n  }();\n\n  _proto.findOne = function () {\n    function findOne(selector) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (arguments.length === 0) {\n        selector = {};\n      } // NOTE: by setting limit 1 here, we end up using very inefficient\n      // code that recomputes the whole query on each update. The upside is\n      // that when you reactively depend on a findOne you only get\n      // invalidated when the found object changes, not any object in the\n      // collection. Most findOne will be by id, which has a fast path, so\n      // this might not be a big deal. In most cases, invalidation causes\n      // the called to re-query anyway, so this should be a net performance\n      // improvement.\n\n\n      options.limit = 1;\n      return this.find(selector, options).fetch()[0];\n    }\n\n    return findOne;\n  }(); // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n\n\n  _proto.insert = function () {\n    function insert(doc, callback) {\n      var _this = this;\n\n      doc = EJSON.clone(doc);\n      assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.\n      // Mongo.Collection specifies its own ids and does not use this code.\n\n      if (!hasOwn.call(doc, '_id')) {\n        doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n      }\n\n      var id = doc._id;\n\n      if (this._docs.has(id)) {\n        throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n      }\n\n      this._saveOriginal(id, undefined);\n\n      this._docs.set(id, doc);\n\n      var queriesToRecompute = []; // trigger live queries that match\n\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        var matchResult = query.matcher.documentMatches(doc);\n\n        if (matchResult.result) {\n          if (query.distances && matchResult.distance !== undefined) {\n            query.distances.set(id, matchResult.distance);\n          }\n\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            LocalCollection._insertInResults(query, doc);\n          }\n        }\n      });\n      queriesToRecompute.forEach(function (qid) {\n        if (_this.queries[qid]) {\n          _this._recomputeResults(_this.queries[qid]);\n        }\n      });\n\n      this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run\n      // immediately.\n\n\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, id);\n        });\n      }\n\n      return id;\n    }\n\n    return insert;\n  }(); // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n\n\n  _proto.pauseObservers = function () {\n    function pauseObservers() {\n      var _this2 = this;\n\n      // No-op if already paused.\n      if (this.paused) {\n        return;\n      } // Set the 'paused' flag such that new observer messages don't fire.\n\n\n      this.paused = true; // Take a snapshot of the query results for each query.\n\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this2.queries[qid];\n        query.resultsSnapshot = EJSON.clone(query.results);\n      });\n    }\n\n    return pauseObservers;\n  }();\n\n  _proto.remove = function () {\n    function remove(selector, callback) {\n      var _this3 = this;\n\n      // Easy special case: if we're not calling observeChanges callbacks and\n      // we're not saving originals and we got asked to remove everything, then\n      // just empty everything directly.\n      if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n        var _result = this._docs.size();\n\n        this._docs.clear();\n\n        Object.keys(this.queries).forEach(function (qid) {\n          var query = _this3.queries[qid];\n\n          if (query.ordered) {\n            query.results = [];\n          } else {\n            query.results.clear();\n          }\n        });\n\n        if (callback) {\n          Meteor.defer(function () {\n            callback(null, _result);\n          });\n        }\n\n        return _result;\n      }\n\n      var matcher = new Minimongo.Matcher(selector);\n      var remove = [];\n\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        if (matcher.documentMatches(doc).result) {\n          remove.push(id);\n        }\n      });\n\n      var queriesToRecompute = [];\n      var queryRemove = [];\n\n      var _loop = function (i) {\n        var removeId = remove[i];\n\n        var removeDoc = _this3._docs.get(removeId);\n\n        Object.keys(_this3.queries).forEach(function (qid) {\n          var query = _this3.queries[qid];\n\n          if (query.dirty) {\n            return;\n          }\n\n          if (query.matcher.documentMatches(removeDoc).result) {\n            if (query.cursor.skip || query.cursor.limit) {\n              queriesToRecompute.push(qid);\n            } else {\n              queryRemove.push({\n                qid: qid,\n                doc: removeDoc\n              });\n            }\n          }\n        });\n\n        _this3._saveOriginal(removeId, removeDoc);\n\n        _this3._docs.remove(removeId);\n      };\n\n      for (var i = 0; i < remove.length; i++) {\n        _loop(i);\n      } // run live query callbacks _after_ we've removed the documents.\n\n\n      queryRemove.forEach(function (remove) {\n        var query = _this3.queries[remove.qid];\n\n        if (query) {\n          query.distances && query.distances.remove(remove.doc._id);\n\n          LocalCollection._removeFromResults(query, remove.doc);\n        }\n      });\n      queriesToRecompute.forEach(function (qid) {\n        var query = _this3.queries[qid];\n\n        if (query) {\n          _this3._recomputeResults(query);\n        }\n      });\n\n      this._observeQueue.drain();\n\n      var result = remove.length;\n\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    return remove;\n  }(); // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n\n\n  _proto.resumeObservers = function () {\n    function resumeObservers() {\n      var _this4 = this;\n\n      // No-op if not paused.\n      if (!this.paused) {\n        return;\n      } // Unset the 'paused' flag. Make sure to do this first, otherwise\n      // observer methods won't actually fire when we trigger them.\n\n\n      this.paused = false;\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this4.queries[qid];\n\n        if (query.dirty) {\n          query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`\n          // automatically.\n\n          _this4._recomputeResults(query, query.resultsSnapshot);\n        } else {\n          // Diff the current results against the snapshot and send to observers.\n          // pass the query object for its observer callbacks.\n          LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {\n            projectionFn: query.projectionFn\n          });\n        }\n\n        query.resultsSnapshot = null;\n      });\n\n      this._observeQueue.drain();\n    }\n\n    return resumeObservers;\n  }();\n\n  _proto.retrieveOriginals = function () {\n    function retrieveOriginals() {\n      if (!this._savedOriginals) {\n        throw new Error('Called retrieveOriginals without saveOriginals');\n      }\n\n      var originals = this._savedOriginals;\n      this._savedOriginals = null;\n      return originals;\n    }\n\n    return retrieveOriginals;\n  }(); // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n\n\n  _proto.saveOriginals = function () {\n    function saveOriginals() {\n      if (this._savedOriginals) {\n        throw new Error('Called saveOriginals twice without retrieveOriginals');\n      }\n\n      this._savedOriginals = new LocalCollection._IdMap();\n    }\n\n    return saveOriginals;\n  }(); // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n\n\n  _proto.update = function () {\n    function update(selector, mod, options, callback) {\n      var _this5 = this;\n\n      if (!callback && options instanceof Function) {\n        callback = options;\n        options = null;\n      }\n\n      if (!options) {\n        options = {};\n      }\n\n      var matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to\n      // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n      // it. (We don't need to save the original results of paused queries because\n      // they already have a resultsSnapshot and we won't be diffing in\n      // _recomputeResults.)\n\n      var qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple\n      // queries\n\n      var docMap = new LocalCollection._IdMap();\n\n      var idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this5.queries[qid];\n\n        if ((query.cursor.skip || query.cursor.limit) && !_this5.paused) {\n          // Catch the case of a reactive `count()` on a cursor with skip\n          // or limit, which registers an unordered observe. This is a\n          // pretty rare case, so we just clone the entire result set with\n          // no optimizations for documents that appear in these result\n          // sets and other queries.\n          if (query.results instanceof LocalCollection._IdMap) {\n            qidToOriginalResults[qid] = query.results.clone();\n            return;\n          }\n\n          if (!(query.results instanceof Array)) {\n            throw new Error('Assertion failed: query.results not an array');\n          } // Clones a document to be stored in `qidToOriginalResults`\n          // because it may be modified before the new and old result sets\n          // are diffed. But if we know exactly which document IDs we're\n          // going to modify, then we only need to clone those.\n\n\n          var memoizedCloneIfNeeded = function (doc) {\n            if (docMap.has(doc._id)) {\n              return docMap.get(doc._id);\n            }\n\n            var docToMemoize = idsMatched && !idsMatched.some(function (id) {\n              return EJSON.equals(id, doc._id);\n            }) ? doc : EJSON.clone(doc);\n            docMap.set(doc._id, docToMemoize);\n            return docToMemoize;\n          };\n\n          qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n        }\n      });\n      var recomputeQids = {};\n      var updateCount = 0;\n\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        var queryResult = matcher.documentMatches(doc);\n\n        if (queryResult.result) {\n          // XXX Should we save the original even if mod ends up being a no-op?\n          _this5._saveOriginal(id, doc);\n\n          _this5._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n\n          ++updateCount;\n\n          if (!options.multi) {\n            return false; // break\n          }\n        }\n\n        return true;\n      });\n\n      Object.keys(recomputeQids).forEach(function (qid) {\n        var query = _this5.queries[qid];\n\n        if (query) {\n          _this5._recomputeResults(query, qidToOriginalResults[qid]);\n        }\n      });\n\n      this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then\n      // it's time to do an insert. Figure out what document we are inserting, and\n      // generate an id for it.\n\n\n      var insertedId;\n\n      if (updateCount === 0 && options.upsert) {\n        var doc = LocalCollection._createUpsertDocument(selector, mod);\n\n        if (!doc._id && options.insertedId) {\n          doc._id = options.insertedId;\n        }\n\n        insertedId = this.insert(doc);\n        updateCount = 1;\n      } // Return the number of affected documents, or in the upsert case, an object\n      // containing the number of affected docs and the id of the doc that was\n      // inserted, if any.\n\n\n      var result;\n\n      if (options._returnObject) {\n        result = {\n          numberAffected: updateCount\n        };\n\n        if (insertedId !== undefined) {\n          result.insertedId = insertedId;\n        }\n      } else {\n        result = updateCount;\n      }\n\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    return update;\n  }(); // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n\n\n  _proto.upsert = function () {\n    function upsert(selector, mod, options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return this.update(selector, mod, Object.assign({}, options, {\n        upsert: true,\n        _returnObject: true\n      }), callback);\n    }\n\n    return upsert;\n  }(); // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n\n\n  _proto._eachPossiblyMatchingDoc = function () {\n    function _eachPossiblyMatchingDoc(selector, fn) {\n      var _this6 = this;\n\n      var specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n      if (specificIds) {\n        specificIds.some(function (id) {\n          var doc = _this6._docs.get(id);\n\n          if (doc) {\n            return fn(doc, id) === false;\n          }\n        });\n      } else {\n        this._docs.forEach(fn);\n      }\n    }\n\n    return _eachPossiblyMatchingDoc;\n  }();\n\n  _proto._modifyAndNotify = function () {\n    function _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n      var _this7 = this;\n\n      var matched_before = {};\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this7.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.ordered) {\n          matched_before[qid] = query.matcher.documentMatches(doc).result;\n        } else {\n          // Because we don't support skip or limit (yet) in unordered queries, we\n          // can just do a direct lookup.\n          matched_before[qid] = query.results.has(doc._id);\n        }\n      });\n      var old_doc = EJSON.clone(doc);\n\n      LocalCollection._modify(doc, mod, {\n        arrayIndices: arrayIndices\n      });\n\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this7.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        var afterMatch = query.matcher.documentMatches(doc);\n        var after = afterMatch.result;\n        var before = matched_before[qid];\n\n        if (after && query.distances && afterMatch.distance !== undefined) {\n          query.distances.set(doc._id, afterMatch.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          // We need to recompute any query where the doc may have been in the\n          // cursor's window either before or after the update. (Note that if skip\n          // or limit is set, \"before\" and \"after\" being true do not necessarily\n          // mean that the document is in the cursor's output after skip/limit is\n          // applied... but if they are false, then the document definitely is NOT\n          // in the output. So it's safe to skip recompute if neither before or\n          // after are true.)\n          if (before || after) {\n            recomputeQids[qid] = true;\n          }\n        } else if (before && !after) {\n          LocalCollection._removeFromResults(query, doc);\n        } else if (!before && after) {\n          LocalCollection._insertInResults(query, doc);\n        } else if (before && after) {\n          LocalCollection._updateInResults(query, doc, old_doc);\n        }\n      });\n    }\n\n    return _modifyAndNotify;\n  }(); // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n\n\n  _proto._recomputeResults = function () {\n    function _recomputeResults(query, oldResults) {\n      if (this.paused) {\n        // There's no reason to recompute the results now as we're still paused.\n        // By flagging the query as \"dirty\", the recompute will be performed\n        // when resumeObservers is called.\n        query.dirty = true;\n        return;\n      }\n\n      if (!this.paused && !oldResults) {\n        oldResults = query.results;\n      }\n\n      if (query.distances) {\n        query.distances.clear();\n      }\n\n      query.results = query.cursor._getRawObjects({\n        distances: query.distances,\n        ordered: query.ordered\n      });\n\n      if (!this.paused) {\n        LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {\n          projectionFn: query.projectionFn\n        });\n      }\n    }\n\n    return _recomputeResults;\n  }();\n\n  _proto._saveOriginal = function () {\n    function _saveOriginal(id, doc) {\n      // Are we even trying to save originals?\n      if (!this._savedOriginals) {\n        return;\n      } // Have we previously mutated the original (and so 'doc' is not actually\n      // original)?  (Note the 'has' check rather than truth: we store undefined\n      // here for inserted docs!)\n\n\n      if (this._savedOriginals.has(id)) {\n        return;\n      }\n\n      this._savedOriginals.set(id, EJSON.clone(doc));\n    }\n\n    return _saveOriginal;\n  }();\n\n  return LocalCollection;\n}();\n\nLocalCollection.Cursor = Cursor;\nLocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\n\nLocalCollection._CachingChangeObserver = function () {\n  function _CachingChangeObserver() {\n    var _this8 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    var callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: function (id, fields, before) {\n          var doc = EJSON.clone(fields);\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(_this8, id, fields, before);\n          } // This line triggers if we provide added with movedBefore.\n\n\n          if (callbacks.added) {\n            callbacks.added.call(_this8, id, fields);\n          } // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n\n\n          _this8.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: function (id, before) {\n          var doc = _this8.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(_this8, id, before);\n          }\n\n          _this8.docs.moveBefore(id, before || null);\n        }\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap();\n      this.applyChange = {\n        added: function (id, fields) {\n          var doc = EJSON.clone(fields);\n\n          if (callbacks.added) {\n            callbacks.added.call(_this8, id, fields);\n          }\n\n          doc._id = id;\n\n          _this8.docs.set(id, doc);\n        }\n      };\n    } // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n\n\n    this.applyChange.changed = function (id, fields) {\n      var doc = _this8.docs.get(id);\n\n      if (!doc) {\n        throw new Error(\"Unknown id for changed: \" + id);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(_this8, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = function (id) {\n      if (callbacks.removed) {\n        callbacks.removed.call(_this8, id);\n      }\n\n      _this8.docs.remove(id);\n    };\n  }\n\n  return _CachingChangeObserver;\n}();\n\nLocalCollection._IdMap =\n/*#__PURE__*/\nfunction (_IdMap2) {\n  (0, _inheritsLoose2.default)(_IdMap, _IdMap2);\n\n  function _IdMap() {\n    return _IdMap2.call(this, MongoID.idStringify, MongoID.idParse) || this;\n  }\n\n  return _IdMap;\n}(IdMap); // Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\n\n\nLocalCollection.wrapTransform = function (transform) {\n  if (!transform) {\n    return null;\n  } // No need to doubly-wrap transforms.\n\n\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  var wrapped = function (doc) {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    var id = doc._id; // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n}; // XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n// This binary search puts a value between any equal values, and the first\n// lesser value.\n\n\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0;\n  var range = array.length;\n\n  while (range > 0) {\n    var halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(function (keyPath) {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError('Minimongo doesn\\'t support $ operator in projections yet.');\n    }\n\n    var value = fields[keyPath];\n\n    if ((0, _typeof2.default)(value) === 'object' && ['$elemMatch', '$meta', '$slice'].some(function (key) {\n      return hasOwn.call(value, key);\n    })) {\n      throw MinimongoError('Minimongo doesn\\'t support operators in projections yet.');\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError('Projection values should be one of 1, 0, true, or false');\n    }\n  });\n}; // Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\n\n\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n\n  var _idProjection = fields._id === undefined ? true : fields._id;\n\n  var details = projectionDetails(fields); // returns transformed doc according to ruleTree\n\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(function (subdoc) {\n        return transform(subdoc, ruleTree);\n      });\n    }\n\n    var result = details.including ? {} : EJSON.clone(doc);\n    Object.keys(ruleTree).forEach(function (key) {\n      if (!hasOwn.call(doc, key)) {\n        return;\n      }\n\n      var rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n    return result;\n  };\n\n  return function (doc) {\n    var result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n}; // Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\n\n\nLocalCollection._createUpsertDocument = function (selector, modifier) {\n  var selectorDocument = populateDocumentWithQueryFields(selector);\n\n  var isModify = LocalCollection._isModificationMod(modifier);\n\n  var newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  } // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n\n\n  LocalCollection._modify(newDoc, {\n    $set: selectorDocument\n  });\n\n  LocalCollection._modify(newDoc, modifier, {\n    isInsert: true\n  });\n\n  if (isModify) {\n    return newDoc;\n  } // Replacement can take _id from query document\n\n\n  var replacement = Object.assign({}, modifier);\n\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n}; // ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\n\n\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\n\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\n\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (var i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n}; // If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\n\n\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  } // Do we have an _id clause?\n\n\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    } // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n\n\n    if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  } // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n\n\n  if (Array.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n        distances: query.distances\n      }), query.results, doc);\n\n      var next = query.results[i + 1];\n\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  var i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n  return i;\n};\n\nLocalCollection._isModificationMod = function (mod) {\n  var isModify = false;\n  var isReplace = false;\n  Object.keys(mod).forEach(function (key) {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error('Update parameter cannot have both modifier and non-modifier fields.');\n  }\n\n  return isModify;\n}; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\n\n\nLocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n}; // XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\n\n\nLocalCollection._modify = function (doc, modifier) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  } // Make sure the caller can't mutate our data structures.\n\n\n  modifier = EJSON.clone(modifier);\n  var isModifier = isOperatorObject(modifier);\n  var newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(function (operator) {\n      // Treat $setOnInsert as $set if this is an insert.\n      var setOnInsert = options.isInsert && operator === '$setOnInsert';\n      var modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      var operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(\"Invalid modifier specified \" + operator);\n      }\n\n      Object.keys(operand).forEach(function (keypath) {\n        var arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        var keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\"The update path '\" + keypath + \"' contains an empty field name, \" + 'which is not allowed.');\n        }\n\n        var target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\"After applying the update to the document {_id: \\\"\" + doc._id + \"\\\", ...},\" + ' the (immutable) field \\'_id\\' was found to have been altered to ' + (\"_id: \\\"\" + newDoc._id + \"\\\"\"));\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\"The _id field cannot be changed from {_id: \\\"\" + doc._id + \"\\\"} to \" + (\"{_id: \\\"\" + modifier._id + \"\\\"}\"));\n    } // replace the whole document\n\n\n    assertHasValidFieldNames(modifier);\n  } // move new document into place.\n\n\n  Object.keys(doc).forEach(function (key) {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n  Object.keys(newDoc).forEach(function (key) {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {\n    return doc;\n  };\n\n  var suppressed = !!observeCallbacks._suppress_initial;\n  var observeChangesCallbacks;\n\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        var doc = transform(Object.assign(fields, {\n          _id: id\n        }));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        var doc = EJSON.clone(this.docs.get(id));\n\n        if (!doc) {\n          throw new Error(\"Unknown id for changed: \" + id);\n        }\n\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        var from = indices ? this.docs.indexOf(id) : -1;\n        var to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);\n      },\n      removed: function (id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        } // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n\n\n        var doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {\n            _id: id\n          })));\n        }\n      },\n      changed: function (id, fields) {\n        if (observeCallbacks.changed) {\n          var oldDoc = this.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      }\n    };\n  }\n\n  var changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n  var handle = cursor.observeChanges(changeObserver.applyChange);\n  suppressed = false;\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id; // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n}; // Is this selector just shorthand for lookup by _id?\n\n\nLocalCollection._selectorIsId = function (selector) {\n  return typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID;\n}; // Is the selector just lookup by _id (shorthand or not)?\n\n\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;\n};\n\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  var old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  } // just take it out and put it back in again, and see if the index changes\n\n\n  query.results.splice(old_idx, 1);\n\n  var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n    distances: query.distances\n  }), query.results, doc);\n\n  if (old_idx !== new_idx) {\n    var next = query.results[new_idx + 1];\n\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nvar MODIFIERS = {\n  $currentDate: function (target, field, arg) {\n    if ((0, _typeof2.default)(arg) === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {\n          field: field\n        });\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {\n        field: field\n      });\n    }\n\n    target[field] = new Date();\n  },\n  $min: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {\n        field: field\n      });\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $min modifier to non-number', {\n          field: field\n        });\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {\n        field: field\n      });\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $max modifier to non-number', {\n          field: field\n        });\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {\n        field: field\n      });\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $inc modifier to non-number', {\n          field: field\n        });\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set: function (target, field, arg) {\n    if (target !== Object(target)) {\n      // not an array or an object\n      var error = MinimongoError('Cannot set property on non-object field', {\n        field: field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      var _error = MinimongoError('Cannot set property on null', {\n        field: field\n      });\n\n      _error.setPropertyError = true;\n      throw _error;\n    }\n\n    assertHasValidFieldNames(arg);\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {// converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {\n        field: field\n      });\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n      target[field].push(arg);\n      return;\n    } // Fancy mode: $each (and maybe $slice and $sort and $position)\n\n\n    var toPush = arg.$each;\n\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {\n        field: field\n      });\n    }\n\n    assertHasValidFieldNames(toPush); // Parse $position\n\n    var position = undefined;\n\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {\n          field: field\n        });\n      } // XXX should check to make sure integer\n\n\n      if (arg.$position < 0) {\n        throw MinimongoError('$position in $push must be zero or positive', {\n          field: field\n        });\n      }\n\n      position = arg.$position;\n    } // Parse $slice.\n\n\n    var slice = undefined;\n\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {\n          field: field\n        });\n      } // XXX should check to make sure integer\n\n\n      slice = arg.$slice;\n    } // Parse $sort.\n\n\n    var sortFunction = undefined;\n\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {\n          field: field\n        });\n      } // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n\n\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      toPush.forEach(function (element) {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {\n            field: field\n          });\n        }\n      });\n    } // Actually push.\n\n\n    if (position === undefined) {\n      toPush.forEach(function (element) {\n        target[field].push(element);\n      });\n    } else {\n      var _target$field;\n\n      var spliceArguments = [position, 0];\n      toPush.forEach(function (element) {\n        spliceArguments.push(element);\n      });\n\n      (_target$field = target[field]).splice.apply(_target$field, spliceArguments);\n    } // Actually sort.\n\n\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    } // Actually slice.\n\n\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!((0, _typeof2.default)(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n    var toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError('Cannot apply $pushAll modifier to non-array', {\n        field: field\n      });\n    } else {\n      toPush.push.apply(toPush, (0, _toConsumableArray2.default)(arg));\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n\n    if ((0, _typeof2.default)(arg) === 'object') {\n      // check if first key is '$each'\n      var keys = Object.keys(arg);\n\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    var values = isEach ? arg.$each : [arg];\n    assertHasValidFieldNames(values);\n    var toAdd = target[field];\n\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError('Cannot apply $addToSet modifier to non-array', {\n        field: field\n      });\n    } else {\n      values.forEach(function (value) {\n        if (toAdd.some(function (element) {\n          return LocalCollection._f._equal(value, element);\n        })) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    var toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {\n        field: field\n      });\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    var toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n\n    var out;\n\n    if (arg != null && (0, _typeof2.default)(arg) === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      var matcher = new Minimongo.Matcher(arg);\n      out = toPull.filter(function (element) {\n        return !matcher.documentMatches(element).result;\n      });\n    } else {\n      out = toPull.filter(function (element) {\n        return !LocalCollection._f._equal(element, arg);\n      });\n    }\n\n    target[field] = out;\n  },\n  $pullAll: function (target, field, arg) {\n    if (!((0, _typeof2.default)(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {\n        field: field\n      });\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    var toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n\n    target[field] = toPull.filter(function (object) {\n      return !arg.some(function (element) {\n        return LocalCollection._f._equal(object, element);\n      });\n    });\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {\n        field: field\n      });\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {\n        field: field\n      });\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {\n        field: field\n      });\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError('The \\'to\\' field for $rename cannot contain an embedded null byte', {\n        field: field\n      });\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    var object = target[field];\n    delete target[field];\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {\n      forbidArray: true\n    });\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {\n        field: field\n      });\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {\n      field: field\n    });\n  },\n  $v: function () {// As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\nvar NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n}; // Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nvar invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n}; // checks if all field names in an object are valid\n\nfunction assertHasValidFieldNames(doc) {\n  if (doc && (0, _typeof2.default)(doc) === 'object') {\n    JSON.stringify(doc, function (key, value) {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  var match;\n\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(\"Key \" + key + \" must not \" + invalidCharMsg[match[0]]);\n  }\n} // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\n\n\nfunction findModTarget(doc, keyparts) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var usedArrayIndex = false;\n\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = i === keyparts.length - 1;\n    var keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      var error = MinimongoError(\"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\"can't append to array using string field name [\" + keypart + \"]\");\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if ((0, _typeof2.default)(doc[keypart]) !== 'object') {\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] + \"' of list value \" + JSON.stringify(doc[keypart]));\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  } // notreached\n\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"matcher.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/matcher.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  \"default\": function () {\n    return Matcher;\n  }\n});\nvar LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar compileDocumentSelector, hasOwn, nothingMatcher;\nmodule.watch(require(\"./common.js\"), {\n  compileDocumentSelector: function (v) {\n    compileDocumentSelector = v;\n  },\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  nothingMatcher: function (v) {\n    nothingMatcher = v;\n  }\n}, 1);\n\nvar Matcher =\n/*#__PURE__*/\nfunction () {\n  function Matcher(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {}; // Set to true if compilation finds a $near.\n\n    this._hasGeoQuery = false; // Set to true if compilation finds a $where.\n\n    this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n\n    this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n\n    this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n\n    this._isUpdate = isUpdate;\n  }\n\n  var _proto = Matcher.prototype;\n\n  _proto.documentMatches = function () {\n    function documentMatches(doc) {\n      if (doc !== Object(doc)) {\n        throw Error('documentMatches needs a document');\n      }\n\n      return this._docMatcher(doc);\n    }\n\n    return documentMatches;\n  }();\n\n  _proto.hasGeoQuery = function () {\n    function hasGeoQuery() {\n      return this._hasGeoQuery;\n    }\n\n    return hasGeoQuery;\n  }();\n\n  _proto.hasWhere = function () {\n    function hasWhere() {\n      return this._hasWhere;\n    }\n\n    return hasWhere;\n  }();\n\n  _proto.isSimple = function () {\n    function isSimple() {\n      return this._isSimple;\n    }\n\n    return isSimple;\n  }(); // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n\n\n  _proto._compileSelector = function () {\n    function _compileSelector(selector) {\n      // you can pass a literal function instead of a selector\n      if (selector instanceof Function) {\n        this._isSimple = false;\n        this._selector = selector;\n\n        this._recordPathUsed('');\n\n        return function (doc) {\n          return {\n            result: !!selector.call(doc)\n          };\n        };\n      } // shorthand -- scalar _id\n\n\n      if (LocalCollection._selectorIsId(selector)) {\n        this._selector = {\n          _id: selector\n        };\n\n        this._recordPathUsed('_id');\n\n        return function (doc) {\n          return {\n            result: EJSON.equals(doc._id, selector)\n          };\n        };\n      } // protect against dangerous selectors.  falsey and {_id: falsey} are both\n      // likely programmer error, and not what you want, particularly for\n      // destructive operations.\n\n\n      if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n        this._isSimple = false;\n        return nothingMatcher;\n      } // Top level can't be an array or true or binary.\n\n\n      if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {\n        throw new Error(\"Invalid selector: \" + selector);\n      }\n\n      this._selector = EJSON.clone(selector);\n      return compileDocumentSelector(selector, this, {\n        isRoot: true\n      });\n    }\n\n    return _compileSelector;\n  }(); // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n\n\n  _proto._getPaths = function () {\n    function _getPaths() {\n      return Object.keys(this._paths);\n    }\n\n    return _getPaths;\n  }();\n\n  _proto._recordPathUsed = function () {\n    function _recordPathUsed(path) {\n      this._paths[path] = true;\n    }\n\n    return _recordPathUsed;\n  }();\n\n  return Matcher;\n}();\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type: function (v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    } // note that typeof(/x/) === \"object\"\n\n\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    } // object\n\n\n    return 3; // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {\n      keyOrderSensitive: true\n    });\n  },\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1, // (not a type)\n    1, // number\n    2, // string\n    3, // object\n    4, // array\n    5, // binary\n    -1, // deprecated\n    6, // ObjectID\n    7, // bool\n    8, // Date\n    0, // null\n    9, // RegExp\n    -1, // deprecated\n    100, // JS code\n    2, // deprecated (symbol)\n    100, // JS code\n    1, // 32-bit int\n    8, // Mongo timestamp\n    1 // 64-bit int\n    ][t];\n  },\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    var ta = LocalCollection._f._type(a);\n\n    var tb = LocalCollection._f._type(b);\n\n    var oa = LocalCollection._f._typeorder(ta);\n\n    var ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    } // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n\n\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) {\n      // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) {\n      // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) {\n      // Object\n      // this could be much more efficient in the expected case ...\n      var toArray = function (object) {\n        var result = [];\n        Object.keys(object).forEach(function (key) {\n          result.push(key, object[key]);\n        });\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) {\n      // Array\n      for (var i = 0;; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) {\n      // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (var _i = 0; _i < a.length; _i++) {\n        if (a[_i] < b[_i]) {\n          return -1;\n        }\n\n        if (a[_i] > b[_i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) {\n      // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  }\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"minimongo_common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_common.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar LocalCollection_;\nmodule.watch(require(\"./local_collection.js\"), {\n  \"default\": function (v) {\n    LocalCollection_ = v;\n  }\n}, 0);\nvar Matcher;\nmodule.watch(require(\"./matcher.js\"), {\n  \"default\": function (v) {\n    Matcher = v;\n  }\n}, 1);\nvar Sorter;\nmodule.watch(require(\"./sorter.js\"), {\n  \"default\": function (v) {\n    Sorter = v;\n  }\n}, 2);\nLocalCollection = LocalCollection_;\nMinimongo = {\n  LocalCollection: LocalCollection_,\n  Matcher: Matcher,\n  Sorter: Sorter\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"observe_handle.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/observe_handle.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  \"default\": function () {\n    return ObserveHandle;\n  }\n});\n\nvar ObserveHandle = function () {\n  function ObserveHandle() {}\n\n  return ObserveHandle;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sorter.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/sorter.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nmodule.export({\n  \"default\": function () {\n    return Sorter;\n  }\n});\nvar ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;\nmodule.watch(require(\"./common.js\"), {\n  ELEMENT_OPERATORS: function (v) {\n    ELEMENT_OPERATORS = v;\n  },\n  equalityElementMatcher: function (v) {\n    equalityElementMatcher = v;\n  },\n  expandArraysInBranches: function (v) {\n    expandArraysInBranches = v;\n  },\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  isOperatorObject: function (v) {\n    isOperatorObject = v;\n  },\n  makeLookupFunction: function (v) {\n    makeLookupFunction = v;\n  },\n  regexpElementMatcher: function (v) {\n    regexpElementMatcher = v;\n  }\n}, 0);\n\nvar Sorter =\n/*#__PURE__*/\nfunction () {\n  function Sorter(spec) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    var addSpecPart = function (path, ascending) {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(\"unsupported sort key: \" + path);\n      }\n\n      _this._sortSpecParts.push({\n        ascending: ascending,\n        lookup: makeLookupFunction(path, {\n          forSort: true\n        }),\n        path: path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(function (element) {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if ((0, _typeof2.default)(spec) === 'object') {\n      Object.keys(spec).forEach(function (key) {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n    } // If a function is specified for sorting, we skip the rest.\n\n\n    if (this._sortFunction) {\n      return;\n    } // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n\n\n    if (this.affectedByModifier) {\n      var selector = {};\n\n      this._sortSpecParts.forEach(function (spec) {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(this._sortSpecParts.map(function (spec, i) {\n      return _this._keyFieldComparator(i);\n    })); // If you specify a matcher for this Sorter, _keyFilter may be set to a\n    // function which selects whether or not a given \"sort key\" (tuple of values\n    // for the different sort spec fields) is compatible with the selector.\n\n    this._keyFilter = null;\n\n    if (options.matcher) {\n      this._useWithMatcher(options.matcher);\n    }\n  }\n\n  var _proto = Sorter.prototype;\n\n  _proto.getComparator = function () {\n    function getComparator(options) {\n      // If sort is specified or have no distances, just use the comparator from\n      // the source specification (which defaults to \"everything is equal\".\n      // issue #3599\n      // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n      // sort effectively overrides $near\n      if (this._sortSpecParts.length || !options || !options.distances) {\n        return this._getBaseComparator();\n      }\n\n      var distances = options.distances; // Return a comparator which compares using $near distances.\n\n      return function (a, b) {\n        if (!distances.has(a._id)) {\n          throw Error(\"Missing distance for \" + a._id);\n        }\n\n        if (!distances.has(b._id)) {\n          throw Error(\"Missing distance for \" + b._id);\n        }\n\n        return distances.get(a._id) - distances.get(b._id);\n      };\n    }\n\n    return getComparator;\n  }(); // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n\n\n  _proto._compareKeys = function () {\n    function _compareKeys(key1, key2) {\n      if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {\n        throw Error('Key has wrong length');\n      }\n\n      return this._keyComparator(key1, key2);\n    }\n\n    return _compareKeys;\n  }(); // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n\n\n  _proto._generateKeysFromDoc = function () {\n    function _generateKeysFromDoc(doc, cb) {\n      if (this._sortSpecParts.length === 0) {\n        throw new Error('can\\'t generate keys without a spec');\n      }\n\n      var pathFromIndices = function (indices) {\n        return indices.join(',') + \",\";\n      };\n\n      var knownPaths = null; // maps index -> ({'' -> value} or {path -> value})\n\n      var valuesByIndexAndPath = this._sortSpecParts.map(function (spec) {\n        // Expand any leaf arrays that we find, and ignore those arrays\n        // themselves.  (We never sort based on an array itself.)\n        var branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),\n        // pretend we found one null value.\n\n        if (!branches.length) {\n          branches = [{\n            value: null\n          }];\n        }\n\n        var element = Object.create(null);\n        var usedPaths = false;\n        branches.forEach(function (branch) {\n          if (!branch.arrayIndices) {\n            // If there are no array indices for a branch, then it must be the\n            // only branch, because the only thing that produces multiple branches\n            // is the use of arrays.\n            if (branches.length > 1) {\n              throw Error('multiple branches but no array used?');\n            }\n\n            element[''] = branch.value;\n            return;\n          }\n\n          usedPaths = true;\n          var path = pathFromIndices(branch.arrayIndices);\n\n          if (hasOwn.call(element, path)) {\n            throw Error(\"duplicate path: \" + path);\n          }\n\n          element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the\n          // exact same arrays and we have to find the same paths.  This is\n          // roughly the same condition that makes MongoDB throw this strange\n          // error message.  eg, the main thing is that if sort spec is {a: 1,\n          // b:1} then a and b cannot both be arrays.\n          //\n          // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n          // and 'a.x.y' are both arrays, but we don't allow this for now.\n          // #NestedArraySort\n          // XXX achieve full compatibility here\n\n          if (knownPaths && !hasOwn.call(knownPaths, path)) {\n            throw Error('cannot index parallel arrays');\n          }\n        });\n\n        if (knownPaths) {\n          // Similarly to above, paths must match everywhere, unless this is a\n          // non-array field.\n          if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {\n            throw Error('cannot index parallel arrays!');\n          }\n        } else if (usedPaths) {\n          knownPaths = {};\n          Object.keys(element).forEach(function (path) {\n            knownPaths[path] = true;\n          });\n        }\n\n        return element;\n      });\n\n      if (!knownPaths) {\n        // Easy case: no use of arrays.\n        var soleKey = valuesByIndexAndPath.map(function (values) {\n          if (!hasOwn.call(values, '')) {\n            throw Error('no value in sole key case?');\n          }\n\n          return values[''];\n        });\n        cb(soleKey);\n        return;\n      }\n\n      Object.keys(knownPaths).forEach(function (path) {\n        var key = valuesByIndexAndPath.map(function (values) {\n          if (hasOwn.call(values, '')) {\n            return values[''];\n          }\n\n          if (!hasOwn.call(values, path)) {\n            throw Error('missing path?');\n          }\n\n          return values[path];\n        });\n        cb(key);\n      });\n    }\n\n    return _generateKeysFromDoc;\n  }(); // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n\n\n  _proto._getBaseComparator = function () {\n    function _getBaseComparator() {\n      var _this2 = this;\n\n      if (this._sortFunction) {\n        return this._sortFunction;\n      } // If we're only sorting on geoquery distance and no specs, just say\n      // everything is equal.\n\n\n      if (!this._sortSpecParts.length) {\n        return function (doc1, doc2) {\n          return 0;\n        };\n      }\n\n      return function (doc1, doc2) {\n        var key1 = _this2._getMinKeyFromDoc(doc1);\n\n        var key2 = _this2._getMinKeyFromDoc(doc2);\n\n        return _this2._compareKeys(key1, key2);\n      };\n    }\n\n    return _getBaseComparator;\n  }(); // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n\n\n  _proto._getMinKeyFromDoc = function () {\n    function _getMinKeyFromDoc(doc) {\n      var _this3 = this;\n\n      var minKey = null;\n\n      this._generateKeysFromDoc(doc, function (key) {\n        if (!_this3._keyCompatibleWithSelector(key)) {\n          return;\n        }\n\n        if (minKey === null) {\n          minKey = key;\n          return;\n        }\n\n        if (_this3._compareKeys(key, minKey) < 0) {\n          minKey = key;\n        }\n      }); // This could happen if our key filter somehow filters out all the keys even\n      // though somehow the selector matches.\n\n\n      if (minKey === null) {\n        throw Error('sort selector found no keys in doc?');\n      }\n\n      return minKey;\n    }\n\n    return _getMinKeyFromDoc;\n  }();\n\n  _proto._getPaths = function () {\n    function _getPaths() {\n      return this._sortSpecParts.map(function (part) {\n        return part.path;\n      });\n    }\n\n    return _getPaths;\n  }();\n\n  _proto._keyCompatibleWithSelector = function () {\n    function _keyCompatibleWithSelector(key) {\n      return !this._keyFilter || this._keyFilter(key);\n    }\n\n    return _keyCompatibleWithSelector;\n  }(); // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n\n\n  _proto._keyFieldComparator = function () {\n    function _keyFieldComparator(i) {\n      var invert = !this._sortSpecParts[i].ascending;\n      return function (key1, key2) {\n        var compare = LocalCollection._f._cmp(key1[i], key2[i]);\n\n        return invert ? -compare : compare;\n      };\n    }\n\n    return _keyFieldComparator;\n  }(); // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n\n\n  _proto._useWithMatcher = function () {\n    function _useWithMatcher(matcher) {\n      var _this4 = this;\n\n      if (this._keyFilter) {\n        throw Error('called _useWithMatcher twice?');\n      } // If we are only sorting by distance, then we're not going to bother to\n      // build a key filter.\n      // XXX figure out how geoqueries interact with this stuff\n\n\n      if (!this._sortSpecParts.length) {\n        return;\n      }\n\n      var selector = matcher._selector; // If the user just passed a falsey selector to find(),\n      // then we can't get a key filter from it.\n\n      if (!selector) {\n        return;\n      } // If the user just passed a literal function to find(), then we can't get a\n      // key filter from it.\n\n\n      if (selector instanceof Function) {\n        return;\n      }\n\n      var constraintsByPath = {};\n\n      this._sortSpecParts.forEach(function (spec) {\n        constraintsByPath[spec.path] = [];\n      });\n\n      Object.keys(selector).forEach(function (key) {\n        var subSelector = selector[key]; // XXX support $and and $or\n\n        var constraints = constraintsByPath[key];\n\n        if (!constraints) {\n          return;\n        } // XXX it looks like the real MongoDB implementation isn't \"does the\n        // regexp match\" but \"does the value fall into a range named by the\n        // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n        // \"does the regexp match\" is a good approximation.\n\n\n        if (subSelector instanceof RegExp) {\n          // As far as we can tell, using either of the options that both we and\n          // MongoDB support ('i' and 'm') disables use of the key filter. This\n          // makes sense: MongoDB mostly appears to be calculating ranges of an\n          // index to use, which means it only cares about regexps that match\n          // one range (with a literal prefix), and both 'i' and 'm' prevent the\n          // literal prefix of the regexp from actually meaning one range.\n          if (subSelector.ignoreCase || subSelector.multiline) {\n            return;\n          }\n\n          constraints.push(regexpElementMatcher(subSelector));\n          return;\n        }\n\n        if (isOperatorObject(subSelector)) {\n          Object.keys(subSelector).forEach(function (operator) {\n            var operand = subSelector[operator];\n\n            if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {\n              // XXX this depends on us knowing that these operators don't use any\n              // of the arguments to compileElementSelector other than operand.\n              constraints.push(ELEMENT_OPERATORS[operator].compileElementSelector(operand));\n            } // See comments in the RegExp block above.\n\n\n            if (operator === '$regex' && !subSelector.$options) {\n              constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector));\n            } // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n\n          });\n          return;\n        } // OK, it's an equality thing.\n\n\n        constraints.push(equalityElementMatcher(subSelector));\n      }); // It appears that the first sort field is treated differently from the\n      // others; we shouldn't create a key filter unless the first sort field is\n      // restricted, though after that point we can restrict the other sort fields\n      // or not as we wish.\n\n      if (!constraintsByPath[this._sortSpecParts[0].path].length) {\n        return;\n      }\n\n      this._keyFilter = function (key) {\n        return _this4._sortSpecParts.every(function (specPart, index) {\n          return constraintsByPath[specPart.path].every(function (fn) {\n            return fn(key[index]);\n          });\n        });\n      };\n    }\n\n    return _useWithMatcher;\n  }();\n\n  return Sorter;\n}();\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return function (a, b) {\n    for (var i = 0; i < comparatorArray.length; ++i) {\n      var compare = comparatorArray[i](a, b);\n\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/minimongo/minimongo_client.js\");\n\n/* Exports */\nPackage._define(\"minimongo\", exports, {\n  LocalCollection: LocalCollection,\n  Minimongo: Minimongo,\n  MinimongoTest: MinimongoTest,\n  MinimongoError: MinimongoError\n});\n\n})();\n","servePath":"/packages/minimongo.js","sourceMap":{"version":3,"sources":["packages/minimongo/minimongo_client.js","packages/minimongo/common.js","packages/minimongo/cursor.js","packages/minimongo/local_collection.js","packages/minimongo/matcher.js","packages/minimongo/minimongo_common.js","packages/minimongo/observe_handle.js","packages/minimongo/sorter.js"],"names":["module","watch","require","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","v","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","operandAliasMap","call","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","LOGICAL_OPERATORS","key","reduce","a","b","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","fn","doc","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","curDistance","_isUpdate","branch","arrayIndices","andSomeMatchers","subMatchers","match","subResult","docOrBranches","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","expanded","branches","matched","element","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","concat","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","thisIsOperator","selKey","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","omitUnnecessaryFields","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","pathArray","path","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","rule","keyPath","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","Cursor","collection","sorter","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","Sorter","skip","limit","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","applySkipLimit","_depend","added","removed","_getRawObjects","ordered","fetch","Symbol","iterator","addedBefore","changed","movedBefore","index","objects","next","done","callback","thisArg","getTransform","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","_map","clone","handle","ObserveHandle","stop","active","onInvalidate","drain","rewind","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","Meteor","_SynchronousQueue","create","_savedOriginals","find","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","mod","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","idParse","IdMap","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","details","ruleTree","subdoc","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$min","$max","$inc","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$rename","target2","$bit","$v","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","isUpdate","_paths","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_getPaths","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_keyFilter","_useWithMatcher","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","_keyCompatibleWithSelector","part","invert","compare","constraintsByPath","constraints","ignoreCase","multiline","specPart","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        const operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127,\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(`unknown string alias for $type: ${operand}`);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1\n          || (operand > 19 && operand !== 127)) {\n          throw Error(`Invalid numerical $type code: ${operand}`);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'))\n  );\n\n  const omitUnnecessaryFields = result => {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices = []) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({arrayIndices, value: undefined})];\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(\n          options.sort || [],\n          {matcher: this.matcher}\n        );\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n  rewind() {}\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          const doc = EJSON.clone(fields);\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, fields, before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          const doc = EJSON.clone(fields);\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (!hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return result;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  const handle = cursor.observeChanges(changeObserver.applyChange);\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec, options = {}) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n\n    // If you specify a matcher for this Sorter, _keyFilter may be set to a\n    // function which selects whether or not a given \"sort key\" (tuple of values\n    // for the different sort spec fields) is compatible with the selector.\n    this._keyFilter = null;\n\n    if (options.matcher) {\n      this._useWithMatcher(options.matcher);\n    }\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length) {\n        branches = [{value: null}];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (!this._keyCompatibleWithSelector(key)) {\n        return;\n      }\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null) {\n      throw Error('sort selector found no keys in doc?');\n    }\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  _keyCompatibleWithSelector(key) {\n    return !this._keyFilter || this._keyFilter(key);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher(matcher) {\n    if (this._keyFilter) {\n      throw Error('called _useWithMatcher twice?');\n    }\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (!this._sortSpecParts.length) {\n      return;\n    }\n\n    const selector = matcher._selector;\n\n    // If the user just passed a falsey selector to find(),\n    // then we can't get a key filter from it.\n    if (!selector) {\n      return;\n    }\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function) {\n      return;\n    }\n\n    const constraintsByPath = {};\n\n    this._sortSpecParts.forEach(spec => {\n      constraintsByPath[spec.path] = [];\n    });\n\n    Object.keys(selector).forEach(key => {\n      const subSelector = selector[key];\n\n      // XXX support $and and $or\n      const constraints = constraintsByPath[key];\n      if (!constraints) {\n        return;\n      }\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline) {\n          return;\n        }\n\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        Object.keys(subSelector).forEach(operator => {\n          const operand = subSelector[operator];\n\n          if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand)\n            );\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand,\n                subSelector\n              )\n            );\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (!constraintsByPath[this._sortSpecParts[0].path].length) {\n      return;\n    }\n\n    this._keyFilter = key =>\n      this._sortSpecParts.every((specPart, index) =>\n        constraintsByPath[specPart.path].every(fn => fn(key[index]))\n      )\n    ;\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}}]