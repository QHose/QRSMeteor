[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\n\n/* Package-scope variables */\nvar Field, STATE_PAT, ERRORS_PAT, INFO_PAT, INPUT_ICONS_PAT, ObjWithStringValues, TEXTS_PAT, CONFIG_PAT, FIELD_SUB_PAT, FIELD_PAT, AT, AccountsTemplates;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_core/lib/field.js                                                                     //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// ---------------------------------------------------------------------------------\n// Field object\n// ---------------------------------------------------------------------------------\n\nField = function(field) {\n  check(field, FIELD_PAT);\n  _.defaults(this, field);\n\n  this.validating = new ReactiveVar(false);\n  this.status = new ReactiveVar(null);\n};\n\nif (Meteor.isClient) {\n  Field.prototype.clearStatus = function() {\n    return this.status.set(null);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.clearStatus = function() {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nField.prototype.fixValue = function(value) {\n  if (this.type === \"checkbox\") {\n    return !!value;\n  }\n\n  if (this.type === \"select\") {\n    // TODO: something working...\n    return value;\n  }\n\n  if (this.type === \"radio\") {\n    // TODO: something working...\n    return value;\n  }\n\n  // Possibly applies required transformations to the input value\n  if (this.trim) {\n    value = value.trim();\n  }\n\n  if (this.lowercase) {\n    value = value.toLowerCase();\n  }\n\n  if (this.uppercase) {\n    value = value.toUpperCase();\n  }\n\n  if (!!this.transform) {\n    value = this.transform(value);\n  }\n\n  return value;\n};\n\nif (Meteor.isClient) {\n  Field.prototype.getDisplayName = function(state) {\n    var displayName = this.displayName;\n\n    if (_.isFunction(displayName)) {\n      displayName = displayName();\n    } else if (_.isObject(displayName)) {\n      displayName = displayName[state] || displayName[\"default\"];\n    }\n\n    if (!displayName) {\n      displayName = capitalize(this._id);\n    }\n\n    return displayName;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.getPlaceholder = function(state) {\n    var placeholder = this.placeholder;\n\n    if (_.isObject(placeholder)) {\n      placeholder = placeholder[state] || placeholder[\"default\"];\n    }\n\n    if (!placeholder) {\n      placeholder = capitalize(this._id);\n    }\n\n    return placeholder;\n  };\n}\n\nField.prototype.getStatus = function() {\n  return this.status.get();\n};\n\nif (Meteor.isClient) {\n  Field.prototype.getValue = function(templateInstance) {\n    if (this.type === \"checkbox\") {\n      return !!(templateInstance.$(\"#at-field-\" + this._id + \":checked\").val());\n    }\n\n    if (this.type === \"radio\") {\n      return templateInstance.$(\"[name=at-field-\"+ this._id + \"]:checked\").val();\n    }\n\n    return templateInstance.$(\"#at-field-\" + this._id).val();\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.hasError = function() {\n    return this.negativeValidation && this.status.get();\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.hasIcon = function() {\n    if (this.showValidating && this.isValidating()) {\n      return true;\n    }\n\n    if (this.negativeFeedback && this.hasError()) {\n      return true;\n    }\n\n    if (this.positiveFeedback && this.hasSuccess()) {\n      return true;\n    }\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.hasSuccess = function() {\n    return this.positiveValidation && this.status.get() === false;\n  };\n}\n\nif (Meteor.isClient)\n  Field.prototype.iconClass = function() {\n    if (this.isValidating()) {\n      return AccountsTemplates.texts.inputIcons[\"isValidating\"];\n    }\n\n    if (this.hasError()) {\n      return AccountsTemplates.texts.inputIcons[\"hasError\"];\n    }\n\n    if (this.hasSuccess()) {\n      return AccountsTemplates.texts.inputIcons[\"hasSuccess\"];\n    }\n  };\n\nif (Meteor.isClient) {\n  Field.prototype.isValidating = function() {\n    return this.validating.get();\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setError = function(err) {\n    check(err, Match.OneOf(String, undefined, Boolean));\n\n    if (err === false) {\n      return this.status.set(false);\n    }\n\n    return this.status.set(err || true);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.setError = function(err) {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setSuccess = function() {\n    return this.status.set(false);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.setSuccess = function() {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setValidating = function(state) {\n    check(state, Boolean);\n    return this.validating.set(state);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.setValidating = function(state) {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setValue = function(templateInstance, value) {\n    if (this.type === \"checkbox\") {\n      templateInstance.$(\"#at-field-\" + this._id).prop('checked', true);\n      return;\n    }\n\n    if (this.type === \"radio\") {\n      templateInstance.$(\"[name=at-field-\"+ this._id + \"]\").prop('checked', true);\n      return;\n    }\n\n    templateInstance.$(\"#at-field-\" + this._id).val(value);\n  };\n}\n\nField.prototype.validate = function(value, strict) {\n  check(value, Match.OneOf(undefined, String, Boolean));\n  this.setValidating(true);\n  this.clearStatus();\n\n  if (_.isUndefined(value) || value === '') {\n    if (!!strict) {\n      if (this.required) {\n        this.setError(AccountsTemplates.texts.requiredField);\n        this.setValidating(false);\n\n        return AccountsTemplates.texts.requiredField;\n      } else {\n        this.setSuccess();\n        this.setValidating(false);\n\n        return false;\n      }\n    } else {\n      this.clearStatus();\n      this.setValidating(false);\n\n      return null;\n    }\n  }\n\n  var valueLength = value.length;\n  var minLength = this.minLength;\n  if (minLength && valueLength < minLength) {\n    this.setError(AccountsTemplates.texts.minRequiredLength + \": \" + minLength);\n    this.setValidating(false);\n\n    return AccountsTemplates.texts.minRequiredLength + \": \" + minLength;\n  }\n\n  var maxLength = this.maxLength;\n  if (maxLength && valueLength > maxLength) {\n    this.setError(AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength);\n    this.setValidating(false);\n\n    return AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength;\n  }\n\n  if (this.re && valueLength && !value.match(this.re)) {\n    this.setError(this.errStr);\n    this.setValidating(false);\n\n    return this.errStr;\n  }\n\n  if (this.func) {\n    var result = this.func(value);\n    var err = result === true ? this.errStr || true : result;\n\n    if (_.isUndefined(result)) {\n      return err;\n    }\n\n    this.status.set(err);\n    this.setValidating(false);\n\n    return err;\n  }\n\n  this.setSuccess();\n  this.setValidating(false);\n\n  return false;\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_core/lib/core.js                                                                      //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n// ---------------------------------------------------------------------------------\n// Patterns for methods\" parameters\n// ---------------------------------------------------------------------------------\n\nSTATE_PAT = {\n  changePwd: Match.Optional(String),\n  enrollAccount: Match.Optional(String),\n  forgotPwd: Match.Optional(String),\n  resetPwd: Match.Optional(String),\n  signIn: Match.Optional(String),\n  signUp: Match.Optional(String),\n  verifyEmail: Match.Optional(String),\n  resendVerificationEmail: Match.Optional(String),\n};\n\nERRORS_PAT = {\n  accountsCreationDisabled: Match.Optional(String),\n  cannotRemoveService: Match.Optional(String),\n  captchaVerification: Match.Optional(String),\n  loginForbidden: Match.Optional(String),\n  mustBeLoggedIn: Match.Optional(String),\n  pwdMismatch: Match.Optional(String),\n  validationErrors: Match.Optional(String),\n  verifyEmailFirst: Match.Optional(String),\n};\n\nINFO_PAT = {\n  emailSent: Match.Optional(String),\n  emailVerified: Match.Optional(String),\n  pwdChanged: Match.Optional(String),\n  pwdReset: Match.Optional(String),\n  pwdSet: Match.Optional(String),\n  signUpVerifyEmail: Match.Optional(String),\n  verificationEmailSent: Match.Optional(String),\n};\n\nINPUT_ICONS_PAT = {\n  hasError: Match.Optional(String),\n  hasSuccess: Match.Optional(String),\n  isValidating: Match.Optional(String),\n};\n\nObjWithStringValues = Match.Where(function (x) {\n  check(x, Object);\n  _.each(_.values(x), function(value) {\n      check(value, String);\n  });\n  return true;\n});\n\nTEXTS_PAT = {\n  button: Match.Optional(STATE_PAT),\n  errors: Match.Optional(ERRORS_PAT),\n  info: Match.Optional(INFO_PAT),\n  inputIcons: Match.Optional(INPUT_ICONS_PAT),\n  maxAllowedLength: Match.Optional(String),\n  minRequiredLength: Match.Optional(String),\n  navSignIn: Match.Optional(String),\n  navSignOut: Match.Optional(String),\n  optionalField: Match.Optional(String),\n  pwdLink_link: Match.Optional(String),\n  pwdLink_pre: Match.Optional(String),\n  pwdLink_suff: Match.Optional(String),\n  requiredField: Match.Optional(String),\n  resendVerificationEmailLink_pre: Match.Optional(String),\n  resendVerificationEmailLink_link: Match.Optional(String),\n  resendVerificationEmailLink_suff: Match.Optional(String),\n  sep: Match.Optional(String),\n  signInLink_link: Match.Optional(String),\n  signInLink_pre: Match.Optional(String),\n  signInLink_suff: Match.Optional(String),\n  signUpLink_link: Match.Optional(String),\n  signUpLink_pre: Match.Optional(String),\n  signUpLink_suff: Match.Optional(String),\n  socialAdd: Match.Optional(String),\n  socialConfigure: Match.Optional(String),\n  socialIcons: Match.Optional(ObjWithStringValues),\n  socialRemove: Match.Optional(String),\n  socialSignIn: Match.Optional(String),\n  socialSignUp: Match.Optional(String),\n  socialWith: Match.Optional(String),\n  termsAnd: Match.Optional(String),\n  termsPreamble: Match.Optional(String),\n  termsPrivacy: Match.Optional(String),\n  termsTerms: Match.Optional(String),\n  title: Match.Optional(STATE_PAT),\n};\n\n// Configuration pattern to be checked with check\nCONFIG_PAT = {\n  // Behaviour\n  confirmPassword: Match.Optional(Boolean),\n  defaultState: Match.Optional(String),\n  enablePasswordChange: Match.Optional(Boolean),\n  enforceEmailVerification: Match.Optional(Boolean),\n  focusFirstInput: Match.Optional(Boolean),\n  forbidClientAccountCreation: Match.Optional(Boolean),\n  lowercaseUsername: Match.Optional(Boolean),\n  overrideLoginErrors: Match.Optional(Boolean),\n  sendVerificationEmail: Match.Optional(Boolean),\n  socialLoginStyle: Match.Optional(Match.OneOf(\"popup\", \"redirect\")),\n\n  // Appearance\n  defaultLayout: Match.Optional(String),\n  hideSignInLink: Match.Optional(Boolean),\n  hideSignUpLink: Match.Optional(Boolean),\n  showAddRemoveServices: Match.Optional(Boolean),\n  showForgotPasswordLink: Match.Optional(Boolean),\n  showResendVerificationEmailLink: Match.Optional(Boolean),\n  showLabels: Match.Optional(Boolean),\n  showPlaceholders: Match.Optional(Boolean),\n\n  // Client-side Validation\n  continuousValidation: Match.Optional(Boolean),\n  negativeFeedback: Match.Optional(Boolean),\n  negativeValidation: Match.Optional(Boolean),\n  positiveFeedback: Match.Optional(Boolean),\n  positiveValidation: Match.Optional(Boolean),\n  showValidating: Match.Optional(Boolean),\n\n  // Privacy Policy and Terms of Use\n  privacyUrl: Match.Optional(String),\n  termsUrl: Match.Optional(String),\n\n  // Redirects\n  homeRoutePath: Match.Optional(String),\n  redirectTimeout: Match.Optional(Number),\n\n  // Hooks\n  onLogoutHook: Match.Optional(Function),\n  onSubmitHook: Match.Optional(Function),\n  preSignUpHook: Match.Optional(Function),\n  postSignUpHook: Match.Optional(Function),\n\n  texts: Match.Optional(TEXTS_PAT),\n\n  //reCaptcha config\n  reCaptcha: Match.Optional({\n    data_type: Match.Optional(Match.OneOf(\"audio\", \"image\")),\n    secretKey: Match.Optional(String),\n    siteKey: Match.Optional(String),\n    theme: Match.Optional(Match.OneOf(\"dark\", \"light\")),\n  }),\n\n  showReCaptcha: Match.Optional(Boolean),\n};\n\n\nFIELD_SUB_PAT = {\n  \"default\": Match.Optional(String),\n  changePwd: Match.Optional(String),\n  enrollAccount: Match.Optional(String),\n  forgotPwd: Match.Optional(String),\n  resetPwd: Match.Optional(String),\n  signIn: Match.Optional(String),\n  signUp: Match.Optional(String),\n};\n\n\n// Field pattern\nFIELD_PAT = {\n  _id: String,\n  type: String,\n  required: Match.Optional(Boolean),\n  displayName: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction), FIELD_SUB_PAT)),\n  placeholder: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n  select: Match.Optional([{text: String, value: Match.Any}]),\n  minLength: Match.Optional(Match.Integer),\n  maxLength: Match.Optional(Match.Integer),\n  re: Match.Optional(RegExp),\n  func: Match.Optional(Match.Where(_.isFunction)),\n  errStr: Match.Optional(String),\n\n  // Client-side Validation\n  continuousValidation: Match.Optional(Boolean),\n  negativeFeedback: Match.Optional(Boolean),\n  negativeValidation: Match.Optional(Boolean),\n  positiveValidation: Match.Optional(Boolean),\n  positiveFeedback: Match.Optional(Boolean),\n\n  // Transforms\n  trim: Match.Optional(Boolean),\n  lowercase: Match.Optional(Boolean),\n  uppercase: Match.Optional(Boolean),\n  transform: Match.Optional(Match.Where(_.isFunction)),\n\n  // Custom options\n  options: Match.Optional(Object),\n  template: Match.Optional(String),\n};\n\n// -----------------------------------------------------------------------------\n// AccountsTemplates object\n// -----------------------------------------------------------------------------\n\n// -------------------\n// Client/Server stuff\n// -------------------\n\n// Constructor\nAT = function() {\n\n};\n\nAT.prototype.CONFIG_PAT = CONFIG_PAT;\n\n/*\n  Each field object is represented by the following properties:\n    _id:         String   (required)  // A unique field\"s id / name\n    type:        String   (required)  // Displayed input type\n    required:    Boolean  (optional)  // Specifies Whether to fail or not when field is left empty\n    displayName: String   (optional)  // The field\"s name to be displayed as a label above the input element\n    placeholder: String   (optional)  // The placeholder text to be displayed inside the input element\n    minLength:   Integer  (optional)  // Possibly specifies the minimum allowed length\n    maxLength:   Integer  (optional)  // Possibly specifies the maximum allowed length\n    re:          RegExp   (optional)  // Regular expression for validation\n    func:        Function (optional)  // Custom function for validation\n    errStr:      String   (optional)  // Error message to be displayed in case re validation fails\n*/\n\n\n// Allowed input types\nAT.prototype.INPUT_TYPES = [\n  \"checkbox\",\n  \"email\",\n  \"hidden\",\n  \"password\",\n  \"radio\",\n  \"select\",\n  \"tel\",\n  \"text\",\n  \"url\",\n];\n\n// Current configuration values\nAT.prototype.options = {\n  // Appearance\n  //defaultLayout: undefined,\n  showAddRemoveServices: false,\n  showForgotPasswordLink: false,\n  showResendVerificationEmailLink: false,\n  showLabels: true,\n  showPlaceholders: true,\n\n  // Behaviour\n  confirmPassword: true,\n  defaultState: \"signIn\",\n  enablePasswordChange: false,\n  focusFirstInput: !Meteor.isCordova,\n  forbidClientAccountCreation: false,\n  lowercaseUsername: false,\n  overrideLoginErrors: true,\n  sendVerificationEmail: false,\n  socialLoginStyle: \"popup\",\n\n  // Client-side Validation\n  //continuousValidation: false,\n  //negativeFeedback: false,\n  //negativeValidation: false,\n  //positiveValidation: false,\n  //positiveFeedback: false,\n  //showValidating: false,\n\n  // Privacy Policy and Terms of Use\n  privacyUrl: undefined,\n  termsUrl: undefined,\n\n  // Hooks\n  onSubmitHook: undefined,\n};\n\nAT.prototype.texts = {\n  button: {\n    changePwd: \"updateYourPassword\",\n    //enrollAccount: \"createAccount\",\n    enrollAccount: \"signUp\",\n    forgotPwd: \"emailResetLink\",\n    resetPwd: \"setPassword\",\n    signIn: \"signIn\",\n    signUp: \"signUp\",\n    resendVerificationEmail: \"Send email again\",\n  },\n  errors: {\n    accountsCreationDisabled: \"Client side accounts creation is disabled!!!\",\n    cannotRemoveService: \"Cannot remove the only active service!\",\n    captchaVerification: \"Captcha verification failed!\",\n    loginForbidden: \"error.accounts.Login forbidden\",\n    mustBeLoggedIn: \"error.accounts.Must be logged in\",\n    pwdMismatch: \"error.pwdsDontMatch\",\n    validationErrors: \"Validation Errors\",\n    verifyEmailFirst: \"Please verify your email first. Check the email and follow the link!\",\n  },\n  navSignIn: 'signIn',\n  navSignOut: 'signOut',\n  info: {\n    emailSent: \"info.emailSent\",\n    emailVerified: \"info.emailVerified\",\n    pwdChanged: \"info.passwordChanged\",\n    pwdReset: \"info.passwordReset\",\n    pwdSet: \"Password Set\",\n    signUpVerifyEmail: \"Successful Registration! Please check your email and follow the instructions.\",\n    verificationEmailSent: \"A new email has been sent to you. If the email doesn't show up in your inbox, be sure to check your spam folder.\",\n  },\n  inputIcons: {\n    isValidating: \"fa fa-spinner fa-spin\",\n    hasSuccess: \"fa fa-check\",\n    hasError: \"fa fa-times\",\n  },\n  maxAllowedLength: \"Maximum allowed length\",\n  minRequiredLength: \"Minimum required length\",\n  optionalField: \"optional\",\n  pwdLink_pre: \"\",\n  pwdLink_link: \"forgotPassword\",\n  pwdLink_suff: \"\",\n  requiredField: \"Required Field\",\n  resendVerificationEmailLink_pre: \"Verification email lost?\",\n  resendVerificationEmailLink_link: \"Send again\",\n  resendVerificationEmailLink_suff: \"\",\n  sep: \"OR\",\n  signInLink_pre: \"ifYouAlreadyHaveAnAccount\",\n  signInLink_link: \"signin\",\n  signInLink_suff: \"\",\n  signUpLink_pre: \"dontHaveAnAccount\",\n  signUpLink_link: \"signUp\",\n  signUpLink_suff: \"\",\n  socialAdd: \"add\",\n  socialConfigure: \"configure\",\n  socialIcons: {\n      \"meteor-developer\": \"fa fa-rocket\"\n  },\n  socialRemove: \"remove\",\n  socialSignIn: \"signIn\",\n  socialSignUp: \"signUp\",\n  socialWith: \"with\",\n  termsPreamble: \"clickAgree\",\n  termsPrivacy: \"privacyPolicy\",\n  termsAnd: \"and\",\n  termsTerms: \"terms\",\n  title: {\n    changePwd: \"changePassword\",\n    enrollAccount: \"createAccount\",\n    forgotPwd: \"resetYourPassword\",\n    resetPwd: \"resetYourPassword\",\n    signIn: \"signIn\",\n    signUp: \"createAccount\",\n    verifyEmail: \"\",\n    resendVerificationEmail: \"Send the verification email again\",\n  },\n};\n\nAT.prototype.SPECIAL_FIELDS = [\n  \"password_again\",\n  \"username_and_email\",\n];\n\n// SignIn / SignUp fields\nAT.prototype._fields = [\n  new Field({\n    _id: \"email\",\n    type: \"email\",\n    required: true,\n    lowercase: true,\n    trim: true,\n    func: function(email) {\n        return !_.contains(email, '@');\n    },\n    errStr: 'Invalid email',\n  }),\n  new Field({\n    _id: \"password\",\n    type: \"password\",\n    required: true,\n    minLength: 6,\n    displayName: {\n        \"default\": \"password\",\n        changePwd: \"newPassword\",\n        resetPwd: \"newPassword\",\n    },\n    placeholder: {\n        \"default\": \"password\",\n        changePwd: \"newPassword\",\n        resetPwd: \"newPassword\",\n    },\n  }),\n];\n\n\nAT.prototype._initialized = false;\n\n// Input type validation\nAT.prototype._isValidInputType = function(value) {\n    return _.indexOf(this.INPUT_TYPES, value) !== -1;\n};\n\nAT.prototype.addField = function(field) {\n    // Fields can be added only before initialization\n    if (this._initialized) {\n      throw new Error(\"AccountsTemplates.addField should strictly be called before AccountsTemplates.init!\");\n    }\n\n    field = _.pick(field, _.keys(FIELD_PAT));\n    check(field, FIELD_PAT);\n    // Checks there\"s currently no field called field._id\n    if (_.indexOf(_.pluck(this._fields, \"_id\"), field._id) !== -1) {\n      throw new Error(\"A field called \" + field._id + \" already exists!\");\n    }\n    // Validates field.type\n    if (!this._isValidInputType(field.type)) {\n      throw new Error(\"field.type is not valid!\");\n    }\n    // Checks field.minLength is strictly positive\n    if (typeof field.minLength !== \"undefined\" && field.minLength <= 0) {\n      throw new Error(\"field.minLength should be greater than zero!\");\n    }\n    // Checks field.maxLength is strictly positive\n    if (typeof field.maxLength !== \"undefined\" && field.maxLength <= 0) {\n      throw new Error(\"field.maxLength should be greater than zero!\");\n    }\n    // Checks field.maxLength is greater than field.minLength\n    if (typeof field.minLength !== \"undefined\" && typeof field.minLength !== \"undefined\" && field.maxLength < field.minLength) {\n      throw new Error(\"field.maxLength should be greater than field.maxLength!\");\n    }\n\n    if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, field._id))) {\n      this._fields.push(new Field(field));\n    }\n\n    return this._fields;\n};\n\nAT.prototype.addFields = function(fields) {\n  var ok;\n\n  try { // don\"t bother with `typeof` - just access `length` and `catch`\n    ok = fields.length > 0 && \"0\" in Object(fields);\n  } catch (e) {\n    throw new Error(\"field argument should be an array of valid field objects!\");\n  }\n  if (ok) {\n    _.map(fields, function(field) {\n      this.addField(field);\n    }, this);\n  } else {\n    throw new Error(\"field argument should be an array of valid field objects!\");\n  }\n\n  return this._fields;\n};\n\nAT.prototype.configure = function(config) {\n  // Configuration options can be set only before initialization\n  if (this._initialized) {\n    throw new Error(\"Configuration options must be set before AccountsTemplates.init!\");\n  }\n\n  // Updates the current configuration\n  check(config, CONFIG_PAT);\n  var options = _.omit(config, \"texts\", \"reCaptcha\");\n  this.options = _.defaults(options, this.options);\n\n  // Possibly sets up reCaptcha options\n  var reCaptcha = config.reCaptcha;\n  if (reCaptcha) {\n    // Updates the current button object\n    this.options.reCaptcha = _.defaults(reCaptcha, this.options.reCaptcha || {});\n  }\n\n  // Possibly sets up texts...\n  if (config.texts) {\n    var texts = config.texts;\n    var simpleTexts = _.omit(texts, \"button\", \"errors\", \"info\", \"inputIcons\", \"socialIcons\", \"title\");\n\n    this.texts = _.defaults(simpleTexts, this.texts);\n\n    if (texts.button) {\n      // Updates the current button object\n      this.texts.button = _.defaults(texts.button, this.texts.button);\n    }\n\n    if (texts.errors) {\n      // Updates the current errors object\n      this.texts.errors = _.defaults(texts.errors, this.texts.errors);\n    }\n\n    if (texts.info) {\n      // Updates the current info object\n      this.texts.info = _.defaults(texts.info, this.texts.info);\n    }\n\n    if (texts.inputIcons) {\n      // Updates the current inputIcons object\n      this.texts.inputIcons = _.defaults(texts.inputIcons, this.texts.inputIcons);\n    }\n\n    if (texts.socialIcons) {\n      // Updates the current socialIcons object\n      this.texts.socialIcons = _.defaults(texts.socialIcons, this.texts.socialIcons);\n    }\n\n    if (texts.title) {\n      // Updates the current title object\n      this.texts.title = _.defaults(texts.title, this.texts.title);\n    }\n  }\n};\n\n\nAT.prototype.configureRoute = function(route, options) {\n  console.warn('You now need a routing package like useraccounts:iron-routing or useraccounts:flow-routing to be able to configure routes!');\n};\n\n\nAT.prototype.hasField = function(fieldId) {\n  return !!this.getField(fieldId);\n};\n\nAT.prototype.getField = function(fieldId) {\n  var field = _.filter(this._fields, function(field) {\n    return field._id === fieldId;\n  });\n\n  return (field.length === 1) ? field[0] : undefined;\n};\n\nAT.prototype.getFields = function() {\n    return this._fields;\n};\n\nAT.prototype.getFieldIds = function() {\n    return _.pluck(this._fields, \"_id\");\n};\n\nAT.prototype.getRoutePath = function(route) {\n    return \"#\";\n};\n\nAT.prototype.oauthServices = function() {\n  // Extracts names of available services\n  var names;\n\n  if (Meteor.isServer) {\n    names = (Accounts.oauth && Accounts.oauth.serviceNames()) || [];\n  } else {\n    names = (Accounts.oauth && Accounts.loginServicesConfigured() && Accounts.oauth.serviceNames()) || [];\n  }\n  // Extracts names of configured services\n  var configuredServices = [];\n\n  if (Accounts.loginServiceConfiguration) {\n    configuredServices = _.pluck(Accounts.loginServiceConfiguration.find().fetch(), \"service\");\n  }\n\n  // Builds a list of objects containing service name as _id and its configuration status\n  var services = _.map(names, function(name) {\n    return {\n      _id : name,\n      configured: _.contains(configuredServices, name),\n    };\n  });\n\n  // Checks whether there is a UI to configure services...\n  // XXX: this only works with the accounts-ui package\n  var showUnconfigured = typeof Accounts._loginButtonsSession !== \"undefined\";\n\n  // Filters out unconfigured services in case they\"re not to be displayed\n  if (!showUnconfigured) {\n    services = _.filter(services, function(service) {\n      return service.configured;\n    });\n  }\n\n  // Sorts services by name\n  services = _.sortBy(services, function(service) {\n    return service._id;\n  });\n\n  return services;\n};\n\nAT.prototype.removeField = function(fieldId) {\n  // Fields can be removed only before initialization\n  if (this._initialized) {\n    throw new Error(\"AccountsTemplates.removeField should strictly be called before AccountsTemplates.init!\");\n  }\n  // Tries to look up the field with given _id\n  var index = _.indexOf(_.pluck(this._fields, \"_id\"), fieldId);\n\n  if (index !== -1) {\n    return this._fields.splice(index, 1)[0];\n  } else if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, fieldId))) {\n    throw new Error(\"A field called \" + fieldId + \" does not exist!\");\n  }\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_core/lib/server.js                                                                    //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global\n  AT: false,\n  AccountsTemplates: false\n*/\n\"use strict\";\n\n// Initialization\nAT.prototype.init = function() {\n  console.warn(\"[AccountsTemplates] There is no more need to call AccountsTemplates.init()! Simply remove the call ;-)\");\n};\n\nAT.prototype._init = function() {\n  if (this._initialized) {\n    return;\n  }\n\n  // Checks there is at least one account service installed\n  if (!Package[\"accounts-password\"] && (!Accounts.oauth || Accounts.oauth.serviceNames().length === 0)) {\n    throw Error(\"AccountsTemplates: You must add at least one account service!\");\n  }\n\n  // A password field is strictly required\n  var password = this.getField(\"password\");\n  if (!password) {\n    throw Error(\"A password field is strictly required!\");\n  }\n\n  if (password.type !== \"password\") {\n    throw Error(\"The type of password field should be password!\");\n  }\n\n  // Then we can have \"username\" or \"email\" or even both of them\n  // but at least one of the two is strictly required\n  var username = this.getField(\"username\");\n  var email = this.getField(\"email\");\n\n  if (!username && !email) {\n    throw Error(\"At least one field out of username and email is strictly required!\");\n  }\n\n  if (username && !username.required) {\n    throw Error(\"The username field should be required!\");\n  }\n\n  if (email) {\n    if (email.type !== \"email\") {\n      throw Error(\"The type of email field should be email!\");\n    }\n\n    if (username) {\n      // username and email\n      if (username.type !== \"text\") {\n        throw Error(\"The type of username field should be text when email field is present!\");\n      }\n    } else {\n      // email only\n      if (!email.required) {\n        throw Error(\"The email field should be required when username is not present!\");\n      }\n    }\n  } else {\n    // username only\n    if (username.type !== \"text\" && username.type !== \"tel\") {\n      throw Error(\"The type of username field should be text or tel!\");\n    }\n  }\n\n  // Possibly publish more user data in order to be able to show add/remove\n  // buttons for 3rd-party services\n  if (this.options.showAddRemoveServices) {\n    // Publish additional current user info to get the list of registered services\n    // XXX TODO: use\n    // Accounts.addAutopublishFields({\n    //   forLoggedInUser: ['services.facebook'],\n    //   forOtherUsers: [],\n    // })\n    // ...adds only user.services.*.id\n    Meteor.publish(\"userRegisteredServices\", function() {\n      var userId = this.userId;\n      return Meteor.users.find(userId, {fields: {services: 1}});\n      /*\n      if (userId) {\n        var user = Meteor.users.findOne(userId);\n        var services_id = _.chain(user.services)\n          .keys()\n          .reject(function(service) {return service === \"resume\";})\n          .map(function(service) {return \"services.\" + service + \".id\";})\n          .value();\n        var projection = {};\n        _.each(services_id, function(key) {projection[key] = 1;});\n        return Meteor.users.find(userId, {fields: projection});\n      }\n      */\n    });\n  }\n\n  // Security stuff\n  if (this.options.overrideLoginErrors) {\n    Accounts.validateLoginAttempt(function(attempt) {\n      if (attempt.error) {\n        var reason = attempt.error.reason;\n        if (reason === \"User not found\" || reason === \"Incorrect password\") {\n          throw new Meteor.Error(403, AccountsTemplates.texts.errors.loginForbidden);\n        }\n      }\n      return attempt.allowed;\n    });\n  }\n\n  if (this.options.sendVerificationEmail && this.options.enforceEmailVerification) {\n    Accounts.validateLoginAttempt(function(attempt) {\n      if (!attempt.allowed) {\n        return false;\n      }\n\n      if (attempt.type !== \"password\" || attempt.methodName !== \"login\") {\n        return attempt.allowed;\n      }\n\n      var user = attempt.user;\n      if (!user) {\n        return attempt.allowed;\n      }\n\n      var ok = true;\n      var loginEmail = attempt.methodArguments[0].user.email;\n      if (loginEmail) {\n        var email = _.filter(user.emails, function(obj) {\n          return obj.address === loginEmail;\n        });\n        if (!email.length || !email[0].verified) {\n          ok = false;\n        }\n      } else {\n        // we got the username, lets check there's at lease one verified email\n        var emailVerified = _.chain(user.emails)\n        .pluck('verified')\n        .any()\n        .value();\n\n        if (!emailVerified) {\n          ok = false;\n        }\n      }\n      if (!ok) {\n        throw new Meteor.Error(401, AccountsTemplates.texts.errors.verifyEmailFirst);\n      }\n\n      return attempt.allowed;\n    });\n  }\n\n  //Check that reCaptcha secret keys are available\n  if (this.options.showReCaptcha) {\n    var atSecretKey = AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.secretKey;\n    var settingsSecretKey = Meteor.settings.reCaptcha && Meteor.settings.reCaptcha.secretKey;\n\n    if (!atSecretKey && !settingsSecretKey) {\n      throw new Meteor.Error(401, \"User Accounts: reCaptcha secret key not found! Please provide it or set showReCaptcha to false.\" );\n    }\n  }\n\n  // Marks AccountsTemplates as initialized\n  this._initialized = true;\n};\n\nAccountsTemplates = new AT();\n\n// Client side account creation is disabled by default:\n// the methos ATCreateUserServer is used instead!\n// to actually disable client side account creation use:\n//\n//    AccountsTemplates.config({\n//        forbidClientAccountCreation: true\n//    });\n\nAccounts.config({\n  forbidClientAccountCreation: true\n});\n\n// Initialization\nMeteor.startup(function() {\n  AccountsTemplates._init();\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_core/lib/methods.js                                                                   //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global\n  AccountsTemplates: false\n*/\n\"use strict\";\n\nMeteor.methods({\n  ATRemoveService: function(serviceName) {\n    check(serviceName, String);\n\n    var userId = this.userId;\n\n    if (userId) {\n      var user = Meteor.users.findOne(userId);\n      var numServices = _.keys(user.services).length; // including \"resume\"\n      var unset = {};\n\n      if (numServices === 2) {\n        throw new Meteor.Error(403, AccountsTemplates.texts.errors.cannotRemoveService, {});\n      }\n\n      unset[\"services.\" + serviceName] = \"\";\n      Meteor.users.update(userId, {$unset: unset});\n    }\n  },\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/useraccounts_core/lib/server_methods.js                                                            //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/* global\n  AccountsTemplates\n*/\n\"use strict\";\n\nMeteor.methods({\n  ATCreateUserServer: function(options) {\n    if (AccountsTemplates.options.forbidClientAccountCreation) {\n      throw new Meteor.Error(403, AccountsTemplates.texts.errors.accountsCreationDisabled);\n    }\n\n    // createUser() does more checking.\n    check(options, Object);\n    var allFieldIds = AccountsTemplates.getFieldIds();\n\n    // Picks-up whitelisted fields for profile\n    var profile = options.profile;\n    profile = _.pick(profile, allFieldIds);\n    profile = _.omit(profile, \"username\", \"email\", \"password\");\n\n    // Validates fields\" value\n    var signupInfo = _.clone(profile);\n    if (options.username) {\n      signupInfo.username = options.username;\n\n      if (AccountsTemplates.options.lowercaseUsername) {\n        signupInfo.username = signupInfo.username.trim().replace(/\\s+/gm, ' ');\n        options.profile.name = signupInfo.username;\n        signupInfo.username = signupInfo.username.toLowerCase().replace(/\\s+/gm, '');\n        options.username = signupInfo.username;\n      }\n    }\n\n    if (options.email) {\n      signupInfo.email = options.email;\n\n      if (AccountsTemplates.options.lowercaseUsername) {\n        signupInfo.email = signupInfo.email.toLowerCase().replace(/\\s+/gm, '');\n        options.email = signupInfo.email;\n      }\n    }\n\n    if (options.password) {\n      signupInfo.password = options.password;\n    }\n\n    var validationErrors = {};\n    var someError = false;\n\n    // Validates fields values\n    _.each(AccountsTemplates.getFields(), function(field) {\n      var fieldId = field._id;\n      var value = signupInfo[fieldId];\n\n      if (fieldId === \"password\") {\n        // Can\"t Pick-up password here\n        // NOTE: at this stage the password is already encripted,\n        //       so there is no way to validate it!!!\n        check(value, Object);\n        return;\n      }\n\n      var validationErr = field.validate(value, \"strict\");\n      if (validationErr) {\n        validationErrors[fieldId] = validationErr;\n        someError = true;\n      }\n    });\n\n    if (AccountsTemplates.options.showReCaptcha) {\n      var secretKey = null;\n\n      if (AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.secretKey) {\n        secretKey = AccountsTemplates.options.reCaptcha.secretKey;\n      } else {\n        secretKey = Meteor.settings.reCaptcha.secretKey;\n      }\n\n      var apiResponse = HTTP.post(\"https://www.google.com/recaptcha/api/siteverify\", {\n        params: {\n          secret: secretKey,\n          response: options.profile.reCaptchaResponse,\n          remoteip: this.connection.clientAddress,\n        }\n      }).data;\n\n      if (!apiResponse.success) {\n        throw new Meteor.Error(403, AccountsTemplates.texts.errors.captchaVerification,\n          apiResponse['error-codes'] ? apiResponse['error-codes'].join(\", \") : \"Unknown Error.\");\n      }\n    }\n\n    if (someError) {\n      throw new Meteor.Error(403, AccountsTemplates.texts.errors.validationErrors, validationErrors);\n    }\n\n    // Possibly removes the profile field\n    if (_.isEmpty(options.profile)) {\n      delete options.profile;\n    }\n\n    // Create user. result contains id and token.\n    var userId = Accounts.createUser(options);\n    // safety belt. createUser is supposed to throw on error. send 500 error\n    // instead of sending a verification email with empty userid.\n    if (! userId) {\n      throw new Error(\"createUser failed to insert new user\");\n    }\n\n    // Call postSignUpHook, if any...\n    var postSignUpHook = AccountsTemplates.options.postSignUpHook;\n    if (postSignUpHook) {\n      postSignUpHook(userId, options);\n    }\n\n    // Send a email address verification email in case the context permits it\n    // and the specific configuration flag was set to true\n    if (options.email && AccountsTemplates.options.sendVerificationEmail) {\n      Accounts.sendVerificationEmail(userId, options.email);\n    }\n  },\n\n  // Resend a user's verification e-mail\n  ATResendVerificationEmail: function (email) {\n    check(email, String);\n\n    var user = Meteor.users.findOne({ \"emails.address\": email });\n\n    // Send the standard error back to the client if no user exist with this e-mail\n    if (!user) {\n      throw new Meteor.Error(403, \"User not found\");\n    }\n\n    try {\n      Accounts.sendVerificationEmail(user._id);\n    } catch (error) {\n      // Handle error when email already verified\n      // https://github.com/dwinston/send-verification-email-bug\n      throw new Meteor.Error(403, \"Already verified\");\n    }\n  },\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"useraccounts:core\", {\n  AccountsTemplates: AccountsTemplates\n});\n\n})();\n","servePath":"/packages/useraccounts_core.js"}]