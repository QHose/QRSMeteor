[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ValidationError;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mdg:validation-error\":{\"validation-error.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/mdg_validation-error/validation-error.js                                                               //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// The \"details\" property of the ValidationError must be an array of objects\n// containing at least two properties. The \"name\" and \"type\" properties are\n// required.\nconst errorsPattern = [Match.ObjectIncluding({\n  name: String,\n  type: String\n})];\nValidationError = class extends Meteor.Error {\n  constructor(errors, message = ValidationError.DEFAULT_MESSAGE) {\n    check(errors, errorsPattern);\n    check(message, String);\n    return super(ValidationError.ERROR_CODE, message, errors);\n  } // Static method checking if a given Meteor.Error is an instance of\n  // ValidationError.\n\n\n  static is(err) {\n    return err instanceof Meteor.Error && err.error === ValidationError.ERROR_CODE;\n  }\n\n}; // Universal validation error code to be use in applications and packages.\n\nValidationError.ERROR_CODE = 'validation-error'; // Default validation error message that can be changed globally.\n\nValidationError.DEFAULT_MESSAGE = 'Validation failed';\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/mdg:validation-error/validation-error.js\");\n\n/* Exports */\nPackage._define(\"mdg:validation-error\", {\n  ValidationError: ValidationError\n});\n\n})();\n","servePath":"/packages/mdg_validation-error.js","sourceMap":{"version":3,"sources":["packages/mdg:validation-error/validation-error.js"],"names":["errorsPattern","Match","ObjectIncluding","name","String","type","ValidationError","Meteor","Error","constructor","errors","message","DEFAULT_MESSAGE","check","ERROR_CODE","is","err","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,MAAMA,gBAAgB,CAACC,MAAMC,eAAN,CAAsB;AAC3CC,QAAMC,MADqC;AAE3CC,QAAMD;AAFqC,CAAtB,CAAD,CAAtB;AAKAE,kBAAkB,cAAcC,OAAOC,KAArB,CAA2B;AAC3CC,cAAYC,MAAZ,EAAoBC,UAAUL,gBAAgBM,eAA9C,EAA+D;AAC7DC,UAAMH,MAAN,EAAcV,aAAd;AACAa,UAAMF,OAAN,EAAeP,MAAf;AAEA,WAAO,MAAME,gBAAgBQ,UAAtB,EAAkCH,OAAlC,EAA2CD,MAA3C,CAAP;AACD,GAN0C,CAQ3C;AACA;;;AACA,SAAOK,EAAP,CAAUC,GAAV,EAAe;AACb,WAAOA,eAAeT,OAAOC,KAAtB,IAA+BQ,IAAIC,KAAJ,KAAcX,gBAAgBQ,UAApE;AACD;;AAZ0C,CAA7C,C,CAeA;;AACAR,gBAAgBQ,UAAhB,GAA6B,kBAA7B,C,CACA;;AACAR,gBAAgBM,eAAhB,GAAkC,mBAAlC,C","file":"/packages/mdg_validation-error.js","sourcesContent":["// The \"details\" property of the ValidationError must be an array of objects\n// containing at least two properties. The \"name\" and \"type\" properties are\n// required.\nconst errorsPattern = [Match.ObjectIncluding({\n  name: String,\n  type: String\n})];\n\nValidationError = class extends Meteor.Error {\n  constructor(errors, message = ValidationError.DEFAULT_MESSAGE) {\n    check(errors, errorsPattern);\n    check(message, String);\n\n    return super(ValidationError.ERROR_CODE, message, errors);\n  }\n\n  // Static method checking if a given Meteor.Error is an instance of\n  // ValidationError.\n  static is(err) {\n    return err instanceof Meteor.Error && err.error === ValidationError.ERROR_CODE;\n  };\n};\n\n// Universal validation error code to be use in applications and packages.\nValidationError.ERROR_CODE = 'validation-error';\n// Default validation error message that can be changed globally.\nValidationError.DEFAULT_MESSAGE = 'Validation failed';\n"]}}]