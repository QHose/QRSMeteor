[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Template = Package['templating-runtime'].Template;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar capitalize, signedInAs, Field, STATE_PAT, ERRORS_PAT, INFO_PAT, INPUT_ICONS_PAT, ObjWithStringValues, TEXTS_PAT, CONFIG_PAT, FIELD_SUB_PAT, FIELD_PAT, AT, AccountsTemplates, markIfMissing, options;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/utils.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\ncapitalize = function(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nsignedInAs =  function() {\n  var user = Meteor.user();\n\n  if (user) {\n    if (user.username) {\n      return user.username;\n    } else if (user.profile && user.profile.name) {\n      return user.profile.name;\n    } else if (user.emails && user.emails[0]) {\n      return user.emails[0].address;\n    } else {\n      return \"Signed In\";\n    }\n  }\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/field.js                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// ---------------------------------------------------------------------------------\n// Field object\n// ---------------------------------------------------------------------------------\n\nField = function(field) {\n  check(field, FIELD_PAT);\n  _.defaults(this, field);\n\n  this.validating = new ReactiveVar(false);\n  this.status = new ReactiveVar(null);\n};\n\nif (Meteor.isClient) {\n  Field.prototype.clearStatus = function() {\n    return this.status.set(null);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.clearStatus = function() {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nField.prototype.fixValue = function(value) {\n  if (this.type === \"checkbox\") {\n    return !!value;\n  }\n\n  if (this.type === \"select\") {\n    // TODO: something working...\n    return value;\n  }\n\n  if (this.type === \"radio\") {\n    // TODO: something working...\n    return value;\n  }\n\n  // Possibly applies required transformations to the input value\n  if (this.trim) {\n    value = value.trim();\n  }\n\n  if (this.lowercase) {\n    value = value.toLowerCase();\n  }\n\n  if (this.uppercase) {\n    value = value.toUpperCase();\n  }\n\n  if (!!this.transform) {\n    value = this.transform(value);\n  }\n\n  return value;\n};\n\nif (Meteor.isClient) {\n  Field.prototype.getDisplayName = function(state) {\n    var displayName = this.displayName;\n\n    if (_.isFunction(displayName)) {\n      displayName = displayName();\n    } else if (_.isObject(displayName)) {\n      displayName = displayName[state] || displayName[\"default\"];\n    }\n\n    if (!displayName) {\n      displayName = capitalize(this._id);\n    }\n\n    return displayName;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.getPlaceholder = function(state) {\n    var placeholder = this.placeholder;\n\n    if (_.isObject(placeholder)) {\n      placeholder = placeholder[state] || placeholder[\"default\"];\n    }\n\n    if (!placeholder) {\n      placeholder = capitalize(this._id);\n    }\n\n    return placeholder;\n  };\n}\n\nField.prototype.getStatus = function() {\n  return this.status.get();\n};\n\nif (Meteor.isClient) {\n  Field.prototype.getValue = function(templateInstance) {\n    if (this.type === \"checkbox\") {\n      return !!(templateInstance.$(\"#at-field-\" + this._id + \":checked\").val());\n    }\n\n    if (this.type === \"radio\") {\n      return templateInstance.$(\"[name=at-field-\"+ this._id + \"]:checked\").val();\n    }\n\n    return templateInstance.$(\"#at-field-\" + this._id).val();\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.hasError = function() {\n    return this.negativeValidation && this.status.get();\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.hasIcon = function() {\n    if (this.showValidating && this.isValidating()) {\n      return true;\n    }\n\n    if (this.negativeFeedback && this.hasError()) {\n      return true;\n    }\n\n    if (this.positiveFeedback && this.hasSuccess()) {\n      return true;\n    }\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.hasSuccess = function() {\n    return this.positiveValidation && this.status.get() === false;\n  };\n}\n\nif (Meteor.isClient)\n  Field.prototype.iconClass = function() {\n    if (this.isValidating()) {\n      return AccountsTemplates.texts.inputIcons[\"isValidating\"];\n    }\n\n    if (this.hasError()) {\n      return AccountsTemplates.texts.inputIcons[\"hasError\"];\n    }\n\n    if (this.hasSuccess()) {\n      return AccountsTemplates.texts.inputIcons[\"hasSuccess\"];\n    }\n  };\n\nif (Meteor.isClient) {\n  Field.prototype.isValidating = function() {\n    return this.validating.get();\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setError = function(err) {\n    check(err, Match.OneOf(String, undefined, Boolean));\n\n    if (err === false) {\n      return this.status.set(false);\n    }\n\n    return this.status.set(err || true);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.setError = function(err) {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setSuccess = function() {\n    return this.status.set(false);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.setSuccess = function() {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setValidating = function(state) {\n    check(state, Boolean);\n    return this.validating.set(state);\n  };\n}\n\nif (Meteor.isServer) {\n  Field.prototype.setValidating = function(state) {\n    // Nothing to do server-side\n    return;\n  };\n}\n\nif (Meteor.isClient) {\n  Field.prototype.setValue = function(templateInstance, value) {\n    if (this.type === \"checkbox\") {\n      templateInstance.$(\"#at-field-\" + this._id).prop('checked', true);\n      return;\n    }\n\n    if (this.type === \"radio\") {\n      templateInstance.$(\"[name=at-field-\"+ this._id + \"]\").prop('checked', true);\n      return;\n    }\n\n    templateInstance.$(\"#at-field-\" + this._id).val(value);\n  };\n}\n\nField.prototype.validate = function(value, strict) {\n  check(value, Match.OneOf(undefined, String, Boolean));\n  this.setValidating(true);\n  this.clearStatus();\n\n  if (_.isUndefined(value) || value === '') {\n    if (!!strict) {\n      if (this.required) {\n        this.setError(AccountsTemplates.texts.requiredField);\n        this.setValidating(false);\n\n        return AccountsTemplates.texts.requiredField;\n      } else {\n        this.setSuccess();\n        this.setValidating(false);\n\n        return false;\n      }\n    } else {\n      this.clearStatus();\n      this.setValidating(false);\n\n      return null;\n    }\n  }\n\n  var valueLength = value.length;\n  var minLength = this.minLength;\n  if (minLength && valueLength < minLength) {\n    this.setError(AccountsTemplates.texts.minRequiredLength + \": \" + minLength);\n    this.setValidating(false);\n\n    return AccountsTemplates.texts.minRequiredLength + \": \" + minLength;\n  }\n\n  var maxLength = this.maxLength;\n  if (maxLength && valueLength > maxLength) {\n    this.setError(AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength);\n    this.setValidating(false);\n\n    return AccountsTemplates.texts.maxAllowedLength + \": \" + maxLength;\n  }\n\n  if (this.re && valueLength && !value.match(this.re)) {\n    this.setError(this.errStr);\n    this.setValidating(false);\n\n    return this.errStr;\n  }\n\n  if (this.func) {\n    var result = this.func(value);\n    var err = result === true ? this.errStr || true : result;\n\n    if (_.isUndefined(result)) {\n      return err;\n    }\n\n    this.status.set(err);\n    this.setValidating(false);\n\n    return err;\n  }\n\n  this.setSuccess();\n  this.setValidating(false);\n\n  return false;\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/core.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// ---------------------------------------------------------------------------------\n// Patterns for methods\" parameters\n// ---------------------------------------------------------------------------------\n\nSTATE_PAT = {\n  changePwd: Match.Optional(String),\n  enrollAccount: Match.Optional(String),\n  forgotPwd: Match.Optional(String),\n  resetPwd: Match.Optional(String),\n  signIn: Match.Optional(String),\n  signUp: Match.Optional(String),\n  verifyEmail: Match.Optional(String),\n  resendVerificationEmail: Match.Optional(String),\n};\n\nERRORS_PAT = {\n  accountsCreationDisabled: Match.Optional(String),\n  cannotRemoveService: Match.Optional(String),\n  captchaVerification: Match.Optional(String),\n  loginForbidden: Match.Optional(String),\n  mustBeLoggedIn: Match.Optional(String),\n  pwdMismatch: Match.Optional(String),\n  validationErrors: Match.Optional(String),\n  verifyEmailFirst: Match.Optional(String),\n};\n\nINFO_PAT = {\n  emailSent: Match.Optional(String),\n  emailVerified: Match.Optional(String),\n  pwdChanged: Match.Optional(String),\n  pwdReset: Match.Optional(String),\n  pwdSet: Match.Optional(String),\n  signUpVerifyEmail: Match.Optional(String),\n  verificationEmailSent: Match.Optional(String),\n};\n\nINPUT_ICONS_PAT = {\n  hasError: Match.Optional(String),\n  hasSuccess: Match.Optional(String),\n  isValidating: Match.Optional(String),\n};\n\nObjWithStringValues = Match.Where(function (x) {\n  check(x, Object);\n  _.each(_.values(x), function(value) {\n      check(value, String);\n  });\n  return true;\n});\n\nTEXTS_PAT = {\n  button: Match.Optional(STATE_PAT),\n  errors: Match.Optional(ERRORS_PAT),\n  info: Match.Optional(INFO_PAT),\n  inputIcons: Match.Optional(INPUT_ICONS_PAT),\n  maxAllowedLength: Match.Optional(String),\n  minRequiredLength: Match.Optional(String),\n  navSignIn: Match.Optional(String),\n  navSignOut: Match.Optional(String),\n  optionalField: Match.Optional(String),\n  pwdLink_link: Match.Optional(String),\n  pwdLink_pre: Match.Optional(String),\n  pwdLink_suff: Match.Optional(String),\n  requiredField: Match.Optional(String),\n  resendVerificationEmailLink_pre: Match.Optional(String),\n  resendVerificationEmailLink_link: Match.Optional(String),\n  resendVerificationEmailLink_suff: Match.Optional(String),\n  sep: Match.Optional(String),\n  signInLink_link: Match.Optional(String),\n  signInLink_pre: Match.Optional(String),\n  signInLink_suff: Match.Optional(String),\n  signUpLink_link: Match.Optional(String),\n  signUpLink_pre: Match.Optional(String),\n  signUpLink_suff: Match.Optional(String),\n  socialAdd: Match.Optional(String),\n  socialConfigure: Match.Optional(String),\n  socialIcons: Match.Optional(ObjWithStringValues),\n  socialRemove: Match.Optional(String),\n  socialSignIn: Match.Optional(String),\n  socialSignUp: Match.Optional(String),\n  socialWith: Match.Optional(String),\n  termsAnd: Match.Optional(String),\n  termsPreamble: Match.Optional(String),\n  termsPrivacy: Match.Optional(String),\n  termsTerms: Match.Optional(String),\n  title: Match.Optional(STATE_PAT),\n};\n\n// Configuration pattern to be checked with check\nCONFIG_PAT = {\n  // Behaviour\n  confirmPassword: Match.Optional(Boolean),\n  defaultState: Match.Optional(String),\n  enablePasswordChange: Match.Optional(Boolean),\n  enforceEmailVerification: Match.Optional(Boolean),\n  focusFirstInput: Match.Optional(Boolean),\n  forbidClientAccountCreation: Match.Optional(Boolean),\n  lowercaseUsername: Match.Optional(Boolean),\n  overrideLoginErrors: Match.Optional(Boolean),\n  sendVerificationEmail: Match.Optional(Boolean),\n  socialLoginStyle: Match.Optional(Match.OneOf(\"popup\", \"redirect\")),\n\n  // Appearance\n  defaultLayout: Match.Optional(String),\n  hideSignInLink: Match.Optional(Boolean),\n  hideSignUpLink: Match.Optional(Boolean),\n  showAddRemoveServices: Match.Optional(Boolean),\n  showForgotPasswordLink: Match.Optional(Boolean),\n  showResendVerificationEmailLink: Match.Optional(Boolean),\n  showLabels: Match.Optional(Boolean),\n  showPlaceholders: Match.Optional(Boolean),\n\n  // Client-side Validation\n  continuousValidation: Match.Optional(Boolean),\n  negativeFeedback: Match.Optional(Boolean),\n  negativeValidation: Match.Optional(Boolean),\n  positiveFeedback: Match.Optional(Boolean),\n  positiveValidation: Match.Optional(Boolean),\n  showValidating: Match.Optional(Boolean),\n\n  // Privacy Policy and Terms of Use\n  privacyUrl: Match.Optional(String),\n  termsUrl: Match.Optional(String),\n\n  // Redirects\n  homeRoutePath: Match.Optional(String),\n  redirectTimeout: Match.Optional(Number),\n\n  // Hooks\n  onLogoutHook: Match.Optional(Function),\n  onSubmitHook: Match.Optional(Function),\n  preSignUpHook: Match.Optional(Function),\n  postSignUpHook: Match.Optional(Function),\n\n  texts: Match.Optional(TEXTS_PAT),\n\n  //reCaptcha config\n  reCaptcha: Match.Optional({\n    data_type: Match.Optional(Match.OneOf(\"audio\", \"image\")),\n    secretKey: Match.Optional(String),\n    siteKey: Match.Optional(String),\n    theme: Match.Optional(Match.OneOf(\"dark\", \"light\")),\n  }),\n\n  showReCaptcha: Match.Optional(Boolean),\n};\n\n\nFIELD_SUB_PAT = {\n  \"default\": Match.Optional(String),\n  changePwd: Match.Optional(String),\n  enrollAccount: Match.Optional(String),\n  forgotPwd: Match.Optional(String),\n  resetPwd: Match.Optional(String),\n  signIn: Match.Optional(String),\n  signUp: Match.Optional(String),\n};\n\n\n// Field pattern\nFIELD_PAT = {\n  _id: String,\n  type: String,\n  required: Match.Optional(Boolean),\n  displayName: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction), FIELD_SUB_PAT)),\n  placeholder: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n  select: Match.Optional([{text: String, value: Match.Any}]),\n  minLength: Match.Optional(Match.Integer),\n  maxLength: Match.Optional(Match.Integer),\n  re: Match.Optional(RegExp),\n  func: Match.Optional(Match.Where(_.isFunction)),\n  errStr: Match.Optional(String),\n\n  // Client-side Validation\n  continuousValidation: Match.Optional(Boolean),\n  negativeFeedback: Match.Optional(Boolean),\n  negativeValidation: Match.Optional(Boolean),\n  positiveValidation: Match.Optional(Boolean),\n  positiveFeedback: Match.Optional(Boolean),\n\n  // Transforms\n  trim: Match.Optional(Boolean),\n  lowercase: Match.Optional(Boolean),\n  uppercase: Match.Optional(Boolean),\n  transform: Match.Optional(Match.Where(_.isFunction)),\n\n  // Custom options\n  options: Match.Optional(Object),\n  template: Match.Optional(String),\n};\n\n// -----------------------------------------------------------------------------\n// AccountsTemplates object\n// -----------------------------------------------------------------------------\n\n// -------------------\n// Client/Server stuff\n// -------------------\n\n// Constructor\nAT = function() {\n\n};\n\nAT.prototype.CONFIG_PAT = CONFIG_PAT;\n\n/*\n  Each field object is represented by the following properties:\n    _id:         String   (required)  // A unique field\"s id / name\n    type:        String   (required)  // Displayed input type\n    required:    Boolean  (optional)  // Specifies Whether to fail or not when field is left empty\n    displayName: String   (optional)  // The field\"s name to be displayed as a label above the input element\n    placeholder: String   (optional)  // The placeholder text to be displayed inside the input element\n    minLength:   Integer  (optional)  // Possibly specifies the minimum allowed length\n    maxLength:   Integer  (optional)  // Possibly specifies the maximum allowed length\n    re:          RegExp   (optional)  // Regular expression for validation\n    func:        Function (optional)  // Custom function for validation\n    errStr:      String   (optional)  // Error message to be displayed in case re validation fails\n*/\n\n\n// Allowed input types\nAT.prototype.INPUT_TYPES = [\n  \"checkbox\",\n  \"email\",\n  \"hidden\",\n  \"password\",\n  \"radio\",\n  \"select\",\n  \"tel\",\n  \"text\",\n  \"url\",\n];\n\n// Current configuration values\nAT.prototype.options = {\n  // Appearance\n  //defaultLayout: undefined,\n  showAddRemoveServices: false,\n  showForgotPasswordLink: false,\n  showResendVerificationEmailLink: false,\n  showLabels: true,\n  showPlaceholders: true,\n\n  // Behaviour\n  confirmPassword: true,\n  defaultState: \"signIn\",\n  enablePasswordChange: false,\n  focusFirstInput: !Meteor.isCordova,\n  forbidClientAccountCreation: false,\n  lowercaseUsername: false,\n  overrideLoginErrors: true,\n  sendVerificationEmail: false,\n  socialLoginStyle: \"popup\",\n\n  // Client-side Validation\n  //continuousValidation: false,\n  //negativeFeedback: false,\n  //negativeValidation: false,\n  //positiveValidation: false,\n  //positiveFeedback: false,\n  //showValidating: false,\n\n  // Privacy Policy and Terms of Use\n  privacyUrl: undefined,\n  termsUrl: undefined,\n\n  // Hooks\n  onSubmitHook: undefined,\n};\n\nAT.prototype.texts = {\n  button: {\n    changePwd: \"updateYourPassword\",\n    //enrollAccount: \"createAccount\",\n    enrollAccount: \"signUp\",\n    forgotPwd: \"emailResetLink\",\n    resetPwd: \"setPassword\",\n    signIn: \"signIn\",\n    signUp: \"signUp\",\n    resendVerificationEmail: \"Send email again\",\n  },\n  errors: {\n    accountsCreationDisabled: \"Client side accounts creation is disabled!!!\",\n    cannotRemoveService: \"Cannot remove the only active service!\",\n    captchaVerification: \"Captcha verification failed!\",\n    loginForbidden: \"error.accounts.Login forbidden\",\n    mustBeLoggedIn: \"error.accounts.Must be logged in\",\n    pwdMismatch: \"error.pwdsDontMatch\",\n    validationErrors: \"Validation Errors\",\n    verifyEmailFirst: \"Please verify your email first. Check the email and follow the link!\",\n  },\n  navSignIn: 'signIn',\n  navSignOut: 'signOut',\n  info: {\n    emailSent: \"info.emailSent\",\n    emailVerified: \"info.emailVerified\",\n    pwdChanged: \"info.passwordChanged\",\n    pwdReset: \"info.passwordReset\",\n    pwdSet: \"Password Set\",\n    signUpVerifyEmail: \"Successful Registration! Please check your email and follow the instructions.\",\n    verificationEmailSent: \"A new email has been sent to you. If the email doesn't show up in your inbox, be sure to check your spam folder.\",\n  },\n  inputIcons: {\n    isValidating: \"fa fa-spinner fa-spin\",\n    hasSuccess: \"fa fa-check\",\n    hasError: \"fa fa-times\",\n  },\n  maxAllowedLength: \"Maximum allowed length\",\n  minRequiredLength: \"Minimum required length\",\n  optionalField: \"optional\",\n  pwdLink_pre: \"\",\n  pwdLink_link: \"forgotPassword\",\n  pwdLink_suff: \"\",\n  requiredField: \"Required Field\",\n  resendVerificationEmailLink_pre: \"Verification email lost?\",\n  resendVerificationEmailLink_link: \"Send again\",\n  resendVerificationEmailLink_suff: \"\",\n  sep: \"OR\",\n  signInLink_pre: \"ifYouAlreadyHaveAnAccount\",\n  signInLink_link: \"signin\",\n  signInLink_suff: \"\",\n  signUpLink_pre: \"dontHaveAnAccount\",\n  signUpLink_link: \"signUp\",\n  signUpLink_suff: \"\",\n  socialAdd: \"add\",\n  socialConfigure: \"configure\",\n  socialIcons: {\n      \"meteor-developer\": \"fa fa-rocket\"\n  },\n  socialRemove: \"remove\",\n  socialSignIn: \"signIn\",\n  socialSignUp: \"signUp\",\n  socialWith: \"with\",\n  termsPreamble: \"clickAgree\",\n  termsPrivacy: \"privacyPolicy\",\n  termsAnd: \"and\",\n  termsTerms: \"terms\",\n  title: {\n    changePwd: \"changePassword\",\n    enrollAccount: \"createAccount\",\n    forgotPwd: \"resetYourPassword\",\n    resetPwd: \"resetYourPassword\",\n    signIn: \"signIn\",\n    signUp: \"createAccount\",\n    verifyEmail: \"\",\n    resendVerificationEmail: \"Send the verification email again\",\n  },\n};\n\nAT.prototype.SPECIAL_FIELDS = [\n  \"password_again\",\n  \"username_and_email\",\n];\n\n// SignIn / SignUp fields\nAT.prototype._fields = [\n  new Field({\n    _id: \"email\",\n    type: \"email\",\n    required: true,\n    lowercase: true,\n    trim: true,\n    func: function(email) {\n        return !_.contains(email, '@');\n    },\n    errStr: 'Invalid email',\n  }),\n  new Field({\n    _id: \"password\",\n    type: \"password\",\n    required: true,\n    minLength: 6,\n    displayName: {\n        \"default\": \"password\",\n        changePwd: \"newPassword\",\n        resetPwd: \"newPassword\",\n    },\n    placeholder: {\n        \"default\": \"password\",\n        changePwd: \"newPassword\",\n        resetPwd: \"newPassword\",\n    },\n  }),\n];\n\n\nAT.prototype._initialized = false;\n\n// Input type validation\nAT.prototype._isValidInputType = function(value) {\n    return _.indexOf(this.INPUT_TYPES, value) !== -1;\n};\n\nAT.prototype.addField = function(field) {\n    // Fields can be added only before initialization\n    if (this._initialized) {\n      throw new Error(\"AccountsTemplates.addField should strictly be called before AccountsTemplates.init!\");\n    }\n\n    field = _.pick(field, _.keys(FIELD_PAT));\n    check(field, FIELD_PAT);\n    // Checks there\"s currently no field called field._id\n    if (_.indexOf(_.pluck(this._fields, \"_id\"), field._id) !== -1) {\n      throw new Error(\"A field called \" + field._id + \" already exists!\");\n    }\n    // Validates field.type\n    if (!this._isValidInputType(field.type)) {\n      throw new Error(\"field.type is not valid!\");\n    }\n    // Checks field.minLength is strictly positive\n    if (typeof field.minLength !== \"undefined\" && field.minLength <= 0) {\n      throw new Error(\"field.minLength should be greater than zero!\");\n    }\n    // Checks field.maxLength is strictly positive\n    if (typeof field.maxLength !== \"undefined\" && field.maxLength <= 0) {\n      throw new Error(\"field.maxLength should be greater than zero!\");\n    }\n    // Checks field.maxLength is greater than field.minLength\n    if (typeof field.minLength !== \"undefined\" && typeof field.minLength !== \"undefined\" && field.maxLength < field.minLength) {\n      throw new Error(\"field.maxLength should be greater than field.maxLength!\");\n    }\n\n    if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, field._id))) {\n      this._fields.push(new Field(field));\n    }\n\n    return this._fields;\n};\n\nAT.prototype.addFields = function(fields) {\n  var ok;\n\n  try { // don\"t bother with `typeof` - just access `length` and `catch`\n    ok = fields.length > 0 && \"0\" in Object(fields);\n  } catch (e) {\n    throw new Error(\"field argument should be an array of valid field objects!\");\n  }\n  if (ok) {\n    _.map(fields, function(field) {\n      this.addField(field);\n    }, this);\n  } else {\n    throw new Error(\"field argument should be an array of valid field objects!\");\n  }\n\n  return this._fields;\n};\n\nAT.prototype.configure = function(config) {\n  // Configuration options can be set only before initialization\n  if (this._initialized) {\n    throw new Error(\"Configuration options must be set before AccountsTemplates.init!\");\n  }\n\n  // Updates the current configuration\n  check(config, CONFIG_PAT);\n  var options = _.omit(config, \"texts\", \"reCaptcha\");\n  this.options = _.defaults(options, this.options);\n\n  // Possibly sets up reCaptcha options\n  var reCaptcha = config.reCaptcha;\n  if (reCaptcha) {\n    // Updates the current button object\n    this.options.reCaptcha = _.defaults(reCaptcha, this.options.reCaptcha || {});\n  }\n\n  // Possibly sets up texts...\n  if (config.texts) {\n    var texts = config.texts;\n    var simpleTexts = _.omit(texts, \"button\", \"errors\", \"info\", \"inputIcons\", \"socialIcons\", \"title\");\n\n    this.texts = _.defaults(simpleTexts, this.texts);\n\n    if (texts.button) {\n      // Updates the current button object\n      this.texts.button = _.defaults(texts.button, this.texts.button);\n    }\n\n    if (texts.errors) {\n      // Updates the current errors object\n      this.texts.errors = _.defaults(texts.errors, this.texts.errors);\n    }\n\n    if (texts.info) {\n      // Updates the current info object\n      this.texts.info = _.defaults(texts.info, this.texts.info);\n    }\n\n    if (texts.inputIcons) {\n      // Updates the current inputIcons object\n      this.texts.inputIcons = _.defaults(texts.inputIcons, this.texts.inputIcons);\n    }\n\n    if (texts.socialIcons) {\n      // Updates the current socialIcons object\n      this.texts.socialIcons = _.defaults(texts.socialIcons, this.texts.socialIcons);\n    }\n\n    if (texts.title) {\n      // Updates the current title object\n      this.texts.title = _.defaults(texts.title, this.texts.title);\n    }\n  }\n};\n\n\nAT.prototype.configureRoute = function(route, options) {\n  console.warn('You now need a routing package like useraccounts:iron-routing or useraccounts:flow-routing to be able to configure routes!');\n};\n\n\nAT.prototype.hasField = function(fieldId) {\n  return !!this.getField(fieldId);\n};\n\nAT.prototype.getField = function(fieldId) {\n  var field = _.filter(this._fields, function(field) {\n    return field._id === fieldId;\n  });\n\n  return (field.length === 1) ? field[0] : undefined;\n};\n\nAT.prototype.getFields = function() {\n    return this._fields;\n};\n\nAT.prototype.getFieldIds = function() {\n    return _.pluck(this._fields, \"_id\");\n};\n\nAT.prototype.getRoutePath = function(route) {\n    return \"#\";\n};\n\nAT.prototype.oauthServices = function() {\n  // Extracts names of available services\n  var names;\n\n  if (Meteor.isServer) {\n    names = (Accounts.oauth && Accounts.oauth.serviceNames()) || [];\n  } else {\n    names = (Accounts.oauth && Accounts.loginServicesConfigured() && Accounts.oauth.serviceNames()) || [];\n  }\n  // Extracts names of configured services\n  var configuredServices = [];\n\n  if (Accounts.loginServiceConfiguration) {\n    configuredServices = _.pluck(Accounts.loginServiceConfiguration.find().fetch(), \"service\");\n  }\n\n  // Builds a list of objects containing service name as _id and its configuration status\n  var services = _.map(names, function(name) {\n    return {\n      _id : name,\n      configured: _.contains(configuredServices, name),\n    };\n  });\n\n  // Checks whether there is a UI to configure services...\n  // XXX: this only works with the accounts-ui package\n  var showUnconfigured = typeof Accounts._loginButtonsSession !== \"undefined\";\n\n  // Filters out unconfigured services in case they\"re not to be displayed\n  if (!showUnconfigured) {\n    services = _.filter(services, function(service) {\n      return service.configured;\n    });\n  }\n\n  // Sorts services by name\n  services = _.sortBy(services, function(service) {\n    return service._id;\n  });\n\n  return services;\n};\n\nAT.prototype.removeField = function(fieldId) {\n  // Fields can be removed only before initialization\n  if (this._initialized) {\n    throw new Error(\"AccountsTemplates.removeField should strictly be called before AccountsTemplates.init!\");\n  }\n  // Tries to look up the field with given _id\n  var index = _.indexOf(_.pluck(this._fields, \"_id\"), fieldId);\n\n  if (index !== -1) {\n    return this._fields.splice(index, 1)[0];\n  } else if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, fieldId))) {\n    throw new Error(\"A field called \" + fieldId + \" does not exist!\");\n  }\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/client.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/* global\n  AT: false\n*/\n\"use strict\";\n\n// Allowed Internal (client-side) States\nAT.prototype.STATES = [\n  \"changePwd\", // Change Password\n  \"enrollAccount\", // Account Enrollment\n  \"forgotPwd\", // Forgot Password\n  \"hide\", // Nothing displayed\n  \"resetPwd\", // Reset Password\n  \"signIn\", // Sign In\n  \"signUp\", // Sign Up\n  \"verifyEmail\", // Email verification\n  \"resendVerificationEmail\", // Resend verification email\n];\n\nAT.prototype._loginType = \"\";\n\n// Flag telling whether the whole form should appear disabled\nAT.prototype._disabled = false;\n\n// State validation\nAT.prototype._isValidState = function(value) {\n  return _.contains(this.STATES, value);\n};\n\n// Flags used to avoid clearing errors and redirecting to previous route when\n// signing in/up as a results of a call to ensureSignedIn\nAT.prototype.avoidRedirect = false;\nAT.prototype.avoidClearError = false;\n\n// Token to be provided for routes like reset-password and enroll-account\nAT.prototype.paramToken = null;\n\nAT.prototype.loginType = function () {\n  return this._loginType;\n};\n\nAT.prototype.getparamToken = function() {\n  return this.paramToken;\n};\n\n// Getter for current state\nAT.prototype.getState = function() {\n  return this.state.form.get(\"state\");\n};\n\n// Getter for disabled state\nAT.prototype.disabled = function() {\n  return this.state.form.equals(\"disabled\", true) ? \"disabled\" : undefined;\n};\n\n// Setter for disabled state\nAT.prototype.setDisabled = function(value) {\n  check(value, Boolean);\n  return this.state.form.set(\"disabled\", value);\n};\n\n// Setter for current state\nAT.prototype.setState = function(state, callback) {\n  check(state, String);\n\n  if (!this._isValidState(state) || (this.options.forbidClientAccountCreation && state === 'signUp')) {\n    throw new Meteor.Error(500, \"Internal server error\", \"accounts-templates-core package got an invalid state value!\");\n  }\n\n  this.state.form.set(\"state\", state);\n  if (!this.avoidClearError) {\n    this.clearState();\n  }\n  this.avoidClearError = false;\n\n  if (_.isFunction(callback)) {\n    callback();\n  }\n};\n\nAT.prototype.clearState = function() {\n  _.each(this._fields, function(field) {\n    field.clearStatus();\n  });\n\n  var form = this.state.form;\n\n  form.set(\"error\", null);\n  form.set(\"result\", null);\n  form.set(\"message\", null);\n\n  AccountsTemplates.setDisabled(false);\n};\n\nAT.prototype.clearError = function() {\n  this.state.form.set(\"error\", null);\n};\n\nAT.prototype.clearResult = function() {\n  this.state.form.set(\"result\", null);\n};\n\nAT.prototype.clearMessage = function() {\n  this.state.form.set(\"message\", null);\n};\n\n// Initialization\nAT.prototype.init = function() {\n  console.warn(\"[AccountsTemplates] There is no more need to call AccountsTemplates.init()! Simply remove the call ;-)\");\n};\n\nAT.prototype._init = function() {\n  if (this._initialized) {\n    return;\n  }\n\n  var usernamePresent = this.hasField(\"username\");\n  var emailPresent = this.hasField(\"email\");\n\n  if (usernamePresent && emailPresent) {\n    this._loginType = \"username_and_email\";\n  } else {\n    this._loginType = usernamePresent ? \"username\" : \"email\";\n  }\n\n  if (this._loginType === \"username_and_email\") {\n    // Possibly adds the field username_and_email in case\n    // it was not configured\n    if (!this.hasField(\"username_and_email\")) {\n      this.addField({\n        _id: \"username_and_email\",\n        type: \"text\",\n        displayName: \"usernameOrEmail\",\n        placeholder: \"usernameOrEmail\",\n        required: true,\n      });\n    }\n  }\n\n  // Only in case password confirmation is required\n  if (this.options.confirmPassword) {\n    // Possibly adds the field password_again in case\n    // it was not configured\n    if (!this.hasField(\"password_again\")) {\n      var pwdAgain = _.clone(this.getField(\"password\"));\n\n      pwdAgain._id = \"password_again\";\n      pwdAgain.displayName = {\n        \"default\": \"passwordAgain\",\n        changePwd: \"newPasswordAgain\",\n        resetPwd: \"newPasswordAgain\",\n      };\n      pwdAgain.placeholder = {\n        \"default\": \"passwordAgain\",\n        changePwd: \"newPasswordAgain\",\n        resetPwd: \"newPasswordAgain\",\n      };\n      this.addField(pwdAgain);\n    }\n  } else {\n    if (this.hasField(\"password_again\")) {\n      throw new Error(\"AccountsTemplates: a field password_again was added but confirmPassword is set to false!\");\n    }\n  }\n\n  // Possibly adds the field current_password in case\n  // it was not configured\n  if (this.options.enablePasswordChange) {\n    if (!this.hasField(\"current_password\")) {\n      this.addField({\n        _id: \"current_password\",\n        type: \"password\",\n        displayName: \"currentPassword\",\n        placeholder: \"currentPassword\",\n        required: true,\n      });\n    }\n  }\n\n  // Ensuser the right order of special fields\n  var moveFieldAfter = function(fieldName, referenceFieldName) {\n    var fieldIds = AccountsTemplates.getFieldIds();\n    var refFieldId = _.indexOf(fieldIds, referenceFieldName);\n    // In case the reference field is not present, just return...\n    if (refFieldId === -1) {\n      return;\n    }\n\n    var fieldId = _.indexOf(fieldIds, fieldName);\n    // In case the sought field is not present, just return...\n    if (fieldId === -1) {\n      return;\n    }\n\n    if (fieldId !== -1 && fieldId !== (refFieldId + 1)) {\n      // removes the field\n      var field = AccountsTemplates._fields.splice(fieldId, 1)[0];\n      // push the field right after the reference field position\n      var newFieldIds = AccountsTemplates.getFieldIds();\n      var newReferenceFieldId = _.indexOf(newFieldIds, referenceFieldName);\n      AccountsTemplates._fields.splice(newReferenceFieldId + 1, 0, field);\n    }\n  };\n\n  // Ensuser the right order of special fields\n  var moveFieldBefore = function(fieldName, referenceFieldName) {\n    var fieldIds = AccountsTemplates.getFieldIds();\n    var refFieldId = _.indexOf(fieldIds, referenceFieldName);\n    // In case the reference field is not present, just return...\n    if (refFieldId === -1) {\n      return;\n    }\n\n    var fieldId = _.indexOf(fieldIds, fieldName);\n    // In case the sought field is not present, just return...\n    if (fieldId === -1) {\n      return;\n    }\n\n    if (fieldId !== -1 && fieldId !== (refFieldId - 1)) {\n      // removes the field\n      var field = AccountsTemplates._fields.splice(fieldId, 1)[0];\n      // push the field right after the reference field position\n      var newFieldIds = AccountsTemplates.getFieldIds();\n      var newReferenceFieldId = _.indexOf(newFieldIds, referenceFieldName);\n      AccountsTemplates._fields.splice(newReferenceFieldId, 0, field);\n    }\n  };\n\n  // The final order should be something like:\n  // - username\n  // - email\n  // - username_and_email\n  // - password\n  // - password_again\n  //\n  // ...so lets do it in reverse order...\n  moveFieldAfter(\"username_and_email\", \"username\");\n  moveFieldAfter(\"username_and_email\", \"email\");\n  moveFieldBefore(\"current_password\", \"password\");\n  moveFieldAfter(\"password\", \"current_password\");\n  moveFieldAfter(\"password_again\", \"password\");\n\n\n  // Sets visibility condition and validation flags for each field\n  var gPositiveValidation = !!AccountsTemplates.options.positiveValidation;\n  var gNegativeValidation = !!AccountsTemplates.options.negativeValidation;\n  var gShowValidating = !!AccountsTemplates.options.showValidating;\n  var gContinuousValidation = !!AccountsTemplates.options.continuousValidation;\n  var gNegativeFeedback = !!AccountsTemplates.options.negativeFeedback;\n  var gPositiveFeedback = !!AccountsTemplates.options.positiveFeedback;\n\n  _.each(this._fields, function(field) {\n    // Visibility\n    switch(field._id) {\n      case \"current_password\":\n        field.visible = [\"changePwd\"];\n        break;\n      case \"email\":\n        field.visible = [\"forgotPwd\", \"signUp\", \"resendVerificationEmail\"];\n        if (AccountsTemplates.loginType() === \"email\") {\n          field.visible.push(\"signIn\");\n        }\n        break;\n      case \"password\":\n        field.visible = [\"changePwd\", \"enrollAccount\", \"resetPwd\", \"signIn\", \"signUp\"];\n        break;\n      case \"password_again\":\n        field.visible = [\"changePwd\", \"enrollAccount\", \"resetPwd\", \"signUp\"];\n        break;\n      case \"username\":\n        field.visible = [\"signUp\"];\n        if (AccountsTemplates.loginType() === \"username\") {\n          field.visible.push(\"signIn\");\n        }\n        break;\n      case \"username_and_email\":\n        field.visible = [];\n        if (AccountsTemplates.loginType() === \"username_and_email\") {\n          field.visible.push(\"signIn\");\n        }\n        break;\n      default:\n        field.visible = [\"signUp\"];\n    }\n\n      // Validation\n      var positiveValidation = field.positiveValidation;\n      if (_.isUndefined(positiveValidation)) {\n        field.positiveValidation = gPositiveValidation;\n      }\n\n      var negativeValidation = field.negativeValidation;\n      if (_.isUndefined(negativeValidation)) {\n        field.negativeValidation = gNegativeValidation;\n      }\n\n      field.validation = field.positiveValidation || field.negativeValidation;\n      if (_.isUndefined(field.continuousValidation)) {\n        field.continuousValidation = gContinuousValidation;\n      }\n\n      field.continuousValidation = field.validation && field.continuousValidation;\n      if (_.isUndefined(field.negativeFeedback)) {\n        field.negativeFeedback = gNegativeFeedback;\n      }\n\n      if (_.isUndefined(field.positiveFeedback)) {\n        field.positiveFeedback = gPositiveFeedback;\n      }\n\n      field.feedback = field.negativeFeedback || field.positiveFeedback;\n      // Validating icon\n      var showValidating = field.showValidating;\n      if (_.isUndefined(showValidating)) {\n        field.showValidating = gShowValidating;\n      }\n\n      // Custom Template\n      if (field.template) {\n        if (field.template in Template) {\n          Template[field.template].helpers(AccountsTemplates.atInputHelpers);\n        } else {\n          console.warn(\n            \"[UserAccounts] Warning no template \" + field.template + \" found!\"\n          );\n        }\n      }\n  });\n\n  // Initializes reactive states\n  var form = new ReactiveDict();\n\n  form.set(\"disabled\", false);\n  form.set(\"state\", \"signIn\");\n  form.set(\"result\", null);\n  form.set(\"error\", null);\n  form.set(\"message\", null);\n  this.state = {\n    form: form,\n  };\n\n  // Possibly subscribes to extended user data (to get the list of registered services...)\n  if (this.options.showAddRemoveServices) {\n      Meteor.subscribe(\"userRegisteredServices\");\n  }\n\n  //Check that reCaptcha site keys are available and no secret keys visible\n  if (this.options.showReCaptcha) {\n    var atSiteKey = null;\n    var atSecretKey = null;\n    var settingsSiteKey = null;\n    var settingsSecretKey = null;\n\n    if (AccountsTemplates.options.reCaptcha) {\n      atSiteKey = AccountsTemplates.options.reCaptcha.siteKey;\n      atSecretKey = AccountsTemplates.options.reCaptcha.secretKey;\n    }\n\n    if (Meteor.settings && Meteor.settings.public && Meteor.settings.public.reCaptcha) {\n      settingsSiteKey = Meteor.settings.public.reCaptcha.siteKey;\n      settingsSecretKey = Meteor.settings.public.reCaptcha.secretKey;\n    }\n\n    if (atSecretKey || settingsSecretKey) {\n      //erase the secret key\n      if (atSecretKey) {\n          AccountsTemplates.options.reCaptcha.secretKey = null;\n      }\n\n      if (settingsSecretKey) {\n          Meteor.settings.public.reCaptcha.secretKey = null;\n      }\n\n      var loc = atSecretKey ? \"User Accounts configuration!\" : \"Meteor settings!\";\n      throw new Meteor.Error(401, \"User Accounts: DANGER - reCaptcha private key leaked to client from \" + loc\n      + \" Provide the key in server settings ONLY.\");\n    }\n\n    if (!atSiteKey && !settingsSiteKey) {\n      throw new Meteor.Error(401, \"User Accounts: reCaptcha site key not found! Please provide it or set showReCaptcha to false.\");\n    }\n  }\n\n  // Marks AccountsTemplates as initialized\n  this._initialized = true;\n};\n\nAT.prototype.linkClick = function(route) {\n  if (AccountsTemplates.disabled()) {\n    return;\n  }\n\n  AccountsTemplates.setState(route);\n\n  if (AccountsTemplates.options.focusFirstInput) {\n    var firstVisibleInput = _.find(this.getFields(), function(f) {\n      return _.contains(f.visible, route);\n    });\n\n    if (firstVisibleInput) {\n      $(\"input#at-field-\" + firstVisibleInput._id).focus();\n    }\n  }\n};\n\nAT.prototype.logout = function() {\n  var onLogoutHook = AccountsTemplates.options.onLogoutHook;\n\n  Meteor.logout(function() {\n    if (onLogoutHook) {\n      onLogoutHook();\n    }\n  });\n};\n\nAT.prototype.submitCallback = function(error, state, onSuccess) {\n  var onSubmitHook = AccountsTemplates.options.onSubmitHook;\n\n  if (onSubmitHook) {\n    onSubmitHook(error, state);\n  }\n\n  if (error) {\n    if (_.isObject(error.details)) {\n      // If error.details is an object, we may try to set fields errors from it\n      _.each(error.details, function(error, fieldId) {\n          AccountsTemplates.getField(fieldId).setError(error);\n      });\n    } else {\n      var err = \"error.accounts.Unknown error\";\n\n      if (error.reason) {\n        err = error.reason;\n      }\n\n      if (err.substring(0, 15) !== \"error.accounts.\") {\n        err = \"error.accounts.\" + err;\n      }\n\n      AccountsTemplates.state.form.set(\"error\", [err]);\n    }\n\n    AccountsTemplates.setDisabled(false);\n    // Possibly resets reCaptcha form\n    if (state === \"signUp\" && AccountsTemplates.options.showReCaptcha) {\n      grecaptcha.reset();\n    }\n  } else {\n    if (onSuccess) {\n      onSuccess();\n    }\n\n    if (state) {\n      AccountsTemplates.setDisabled(false);\n    }\n  }\n};\n\nAccountsTemplates = new AT();\n\n// Initialization\nMeteor.startup(function() {\n  AccountsTemplates._init();\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_error.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atErrorHelpers = {\n    singleError: function() {\n        var errors = AccountsTemplates.state.form.get(\"error\");\n        return errors && errors.length === 1;\n    },\n    error: function() {\n        return AccountsTemplates.state.form.get(\"error\");\n    },\n    errorText: function(){\n        var field, err;\n        if (this.field){\n            field = T9n.get(this.field, markIfMissing=false);\n            err = T9n.get(this.err, markIfMissing=false);\n        }\n        else\n            err = T9n.get(this.valueOf(), markIfMissing=false);\n\n        // Possibly removes initial prefix in case the key in not found inside t9n\n        if (err.substring(0, 15) === \"error.accounts.\")\n            err = err.substring(15);\n\n        if (field)\n            return field + \": \" + err;\n        return err;\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_form.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atFormHelpers = {\n    hide: function(){\n        var state = this.state || AccountsTemplates.getState();\n        return state === \"hide\";\n    },\n    showTitle: function(next_state){\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if (Meteor.userId() && state === \"signIn\")\n          return false;\n        return !!AccountsTemplates.texts.title[state];\n    },\n    showOauthServices: function(next_state){\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if (!(state === \"signIn\" || state === \"signUp\"))\n            return false;\n        var services = AccountsTemplates.oauthServices();\n        if (!services.length)\n            return false;\n        if (Meteor.userId())\n            return AccountsTemplates.options.showAddRemoveServices;\n        return true;\n    },\n    showServicesSeparator: function(next_state){\n        var pwdService = Package[\"accounts-password\"] !== undefined;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        var rightState = (state === \"signIn\" || state === \"signUp\");\n        return rightState && !Meteor.userId() && pwdService && AccountsTemplates.oauthServices().length;\n    },\n    showError: function(next_state) {\n        return !!AccountsTemplates.state.form.get(\"error\");\n    },\n    showResult: function(next_state) {\n        return !!AccountsTemplates.state.form.get(\"result\");\n    },\n    showMessage: function(next_state) {\n        return !!AccountsTemplates.state.form.get(\"message\");\n    },\n    showPwdForm: function(next_state) {\n        if (Package[\"accounts-password\"] === undefined)\n            return false;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if ((state === \"verifyEmail\") || (state === \"signIn\" && Meteor.userId()))\n            return false;\n        return true;\n    },\n    showSignInLink: function(next_state){\n        if (AccountsTemplates.options.hideSignInLink)\n            return false;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if (AccountsTemplates.options.forbidClientAccountCreation && state === \"forgotPwd\")\n            return true;\n        return state === \"signUp\";\n    },\n    showSignUpLink: function(next_state){\n        if  (AccountsTemplates.options.hideSignUpLink)\n            return false;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        return ((state === \"signIn\" && !Meteor.userId()) || state === \"forgotPwd\") && !AccountsTemplates.options.forbidClientAccountCreation;\n    },\n    showTermsLink: function(next_state){\n        //TODO: Add privacyRoute and termsRoute as alternatives (the point of named routes is\n        // being able to change the url in one place only)\n        if (!!AccountsTemplates.options.privacyUrl || !!AccountsTemplates.options.termsUrl) {\n            var state = next_state || this.state || AccountsTemplates.getState();\n            if (state === \"signUp\" || state === \"enrollAccount\" ) {\n              return true;\n            }\n        }\n        /*\n        if (state === \"signIn\"){\n            var pwdService = Package[\"accounts-password\"] !== undefined;\n            if (!pwdService)\n                return true;\n        }\n        */\n        return false;\n    },\n    showResendVerificationEmailLink: function(){\n        var parentData = Template.currentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return (state === \"signIn\" || state === \"forgotPwd\") && AccountsTemplates.options.showResendVerificationEmailLink;\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_input.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atInputRendered = [function(){\n    var fieldId = this.data._id;\n\n    var parentData = Template.currentData();\n    var state = (parentData && parentData.state) || AccountsTemplates.getState();\n\n    if (AccountsTemplates.options.focusFirstInput) {\n      var firstVisibleInput = _.find(AccountsTemplates.getFields(), function(f){\n        return _.contains(f.visible, state);\n      });\n\n      if (firstVisibleInput && firstVisibleInput._id === fieldId) {\n        this.$(\"input#at-field-\" + fieldId).focus();\n      }\n  }\n}];\n\nAT.prototype.atInputHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    showLabels: function() {\n        return AccountsTemplates.options.showLabels;\n    },\n    displayName: function() {\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        var displayName = this.getDisplayName(state);\n        return T9n.get(displayName, markIfMissing=false);\n    },\n    optionalText: function(){\n        return \"(\" + T9n.get(AccountsTemplates.texts.optionalField, markIfMissing=false) + \")\";\n    },\n    templateName: function() {\n        if (this.template)\n            return this.template;\n        if (this.type === \"checkbox\")\n            return \"atCheckboxInput\";\n        if (this.type === \"select\")\n            return \"atSelectInput\";\n        if (this.type === \"radio\")\n            return \"atRadioInput\";\n        if (this.type === \"hidden\")\n            return \"atHiddenInput\";\n        return \"atTextInput\";\n    },\n    values: function(){\n        var id = this._id;\n        return _.map(this.select, function(select){\n            var s = _.clone(select);\n            s._id = id + \"-\" + select.value;\n            s.id = id;\n            return s;\n        });\n    },\n    errorText: function() {\n        var err = this.getStatus();\n        return T9n.get(err, markIfMissing=false);\n    },\n    placeholder: function() {\n        if (AccountsTemplates.options.showPlaceholders) {\n            var parentData = Template.parentData();\n            var state = (parentData && parentData.state) || AccountsTemplates.getState();\n            var placeholder = this.getPlaceholder(state);\n            return T9n.get(placeholder, markIfMissing=false);\n        }\n    },\n};\n\nAT.prototype.atInputEvents = {\n    \"focusin input\": function(event, t){\n        this.clearStatus();\n    },\n    \"focusout input, change select\": function(event, t){\n        var fieldId = this._id;\n        var rawValue = this.getValue(t);\n        var value = this.fixValue(rawValue);\n        // Possibly updates the input value\n        if (value !== rawValue) {\n            this.setValue(t, value);\n        }\n\n        // Client-side only validation\n        if (!this.validation)\n            return;\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        // No validation during signIn\n        if (state === \"signIn\")\n            return;\n        // Special case for password confirmation\n        if (value && fieldId === \"password_again\"){\n            if (value !== $(\"#at-field-password\").val())\n                return this.setError(AccountsTemplates.texts.errors.pwdMismatch);\n        }\n        this.validate(value);\n    },\n    \"keyup input\": function(event, t){\n        // Client-side only continuous validation\n        if (!this.continuousValidation)\n            return;\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        // No validation during signIn\n        if (state === \"signIn\")\n            return;\n        var fieldId = this._id;\n        var rawValue = this.getValue(t);\n        var value = this.fixValue(rawValue);\n        // Possibly updates the input value\n        if (value !== rawValue) {\n            this.setValue(t, value);\n        }\n        // Special case for password confirmation\n        if (value && fieldId === \"password_again\"){\n            if (value !== $(\"#at-field-password\").val())\n                return this.setError(AccountsTemplates.texts.errors.pwdMismatch);\n        }\n        this.validate(value);\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_nav_button.js                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atNavButtonHelpers = {\n    text: function(){\n        var key = Meteor.userId() ? AccountsTemplates.texts.navSignOut : AccountsTemplates.texts.navSignIn;\n        return T9n.get(key, markIfMissing=false);\n    }\n};\n\nAT.prototype.atNavButtonEvents = {\n    'click #at-nav-button': function(event){\n        event.preventDefault();\n        if (Meteor.userId())\n            AccountsTemplates.logout();\n        else\n            AccountsTemplates.linkClick(\"signIn\");\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_oauth.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atOauthHelpers = {\n    oauthService: function() {\n        return AccountsTemplates.oauthServices();\n    },\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_pwd_form.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atPwdFormHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    fields: function() {\n        var parentData = Template.currentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return _.filter(AccountsTemplates.getFields(), function(s) {\n            return _.contains(s.visible, state);\n        });\n    },\n    showForgotPasswordLink: function() {\n        var parentData = Template.currentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return state === \"signIn\" && AccountsTemplates.options.showForgotPasswordLink;\n    },\n    showReCaptcha: function() {\n      var parentData = Template.currentData();\n      var state = (parentData && parentData.state) || AccountsTemplates.getState();\n      return state === \"signUp\" && AccountsTemplates.options.showReCaptcha;\n    },\n};\n\n\nvar toLowercaseUsername = function(value){\n  return value.toLowerCase().replace(/\\s+/gm, '');\n};\n\nAT.prototype.atPwdFormEvents = {\n    // Form submit\n    \"submit #at-pwd-form\": function(event, t) {\n        event.preventDefault();\n        t.$(\"#at-btn\").blur();\n\n        AccountsTemplates.setDisabled(true);\n\n        var parentData = Template.currentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        var preValidation = (state !== \"signIn\");\n\n        // Client-side pre-validation\n        // Validates fields values\n        // NOTE: This is the only place where password validation can be enforced!\n        var formData = {};\n        var someError = false;\n        var errList = [];\n        _.each(AccountsTemplates.getFields(), function(field){\n            // Considers only visible fields...\n            if (!_.contains(field.visible, state))\n                return;\n\n            var fieldId = field._id;\n\n            var rawValue = field.getValue(t);\n            var value = field.fixValue(rawValue);\n            // Possibly updates the input value\n            if (value !== rawValue) {\n                field.setValue(t, value);\n            }\n            if (value !== undefined && value !== \"\") {\n                formData[fieldId] = value;\n            }\n\n            // Validates the field value only if current state is not \"signIn\"\n            if (preValidation && field.getStatus() !== false){\n                var validationErr = field.validate(value, \"strict\");\n                if (validationErr) {\n                    if (field.negativeValidation)\n                        field.setError(validationErr);\n                    else{\n                        var fId = T9n.get(field.getDisplayName(), markIfMissing=false);\n                        //errList.push(fId + \": \" + err);\n                        errList.push({\n                            field: field.getDisplayName(),\n                            err: validationErr\n                        });\n                    }\n                    someError = true;\n                }\n                else\n                    field.setSuccess();\n            }\n        });\n\n        // Clears error and result\n        AccountsTemplates.clearError();\n        AccountsTemplates.clearResult();\n        AccountsTemplates.clearMessage();\n        // Possibly sets errors\n        if (someError){\n            if (errList.length)\n                AccountsTemplates.state.form.set(\"error\", errList);\n            AccountsTemplates.setDisabled(false);\n            //reset reCaptcha form\n            if (state === \"signUp\" && AccountsTemplates.options.showReCaptcha) {\n                grecaptcha.reset();\n            }\n            return;\n        }\n\n        // Extracts username, email, and pwds\n        var current_password = formData.current_password;\n        var email = formData.email;\n        var password = formData.password;\n        var password_again = formData.password_again;\n        var username = formData.username;\n        var username_and_email = formData.username_and_email;\n        // Clears profile data removing username, email, and pwd\n        delete formData.current_password;\n        delete formData.email;\n        delete formData.password;\n        delete formData.password_again;\n        delete formData.username;\n        delete formData.username_and_email;\n\n        if (AccountsTemplates.options.confirmPassword){\n            // Checks passwords for correct match\n            if (password_again && password !== password_again){\n                var pwd_again = AccountsTemplates.getField(\"password_again\");\n                if (pwd_again.negativeValidation)\n                    pwd_again.setError(AccountsTemplates.texts.errors.pwdMismatch);\n                else\n                    AccountsTemplates.state.form.set(\"error\", [{\n                        field: pwd_again.getDisplayName(),\n                        err: AccountsTemplates.texts.errors.pwdMismatch\n                    }]);\n                AccountsTemplates.setDisabled(false);\n                //reset reCaptcha form\n                if (state === \"signUp\" && AccountsTemplates.options.showReCaptcha) {\n                  grecaptcha.reset();\n                }\n                return;\n            }\n        }\n\n        // -------\n        // Sign In\n        // -------\n        if (state === \"signIn\") {\n            var pwdOk = !!password;\n            var userOk = true;\n            var loginSelector;\n            if (email) {\n                if (AccountsTemplates.options.lowercaseUsername) {\n                  email = toLowercaseUsername(email);\n                }\n\n                loginSelector = {email: email};\n            }\n            else if (username) {\n                if (AccountsTemplates.options.lowercaseUsername) {\n                  username = toLowercaseUsername(username);\n                }\n                loginSelector = {username: username};\n            }\n            else if (username_and_email) {\n                if (AccountsTemplates.options.lowercaseUsername) {\n                  username_and_email = toLowercaseUsername(username_and_email);\n                }\n                loginSelector = username_and_email;\n            }\n            else\n                userOk = false;\n\n            // Possibly exits if not both 'password' and 'username' are non-empty...\n            if (!pwdOk || !userOk){\n                AccountsTemplates.state.form.set(\"error\", [AccountsTemplates.texts.errors.loginForbidden]);\n                AccountsTemplates.setDisabled(false);\n                return;\n            }\n\n\n            return Meteor.loginWithPassword(loginSelector, password, function(error) {\n                AccountsTemplates.submitCallback(error, state);\n            });\n        }\n\n        // -------\n        // Sign Up\n        // -------\n        if (state === \"signUp\") {\n            // Possibly gets reCaptcha response\n            if (AccountsTemplates.options.showReCaptcha) {\n              var response = grecaptcha.getResponse();\n              if (response === \"\") {\n                // recaptcha verification has not completed yet (or has expired)...\n                // ...simply ignore submit event!\n                AccountsTemplates.setDisabled(false);\n                return;\n              } else {\n                formData.reCaptchaResponse = response;\n              }\n            }\n\n            var hash = Accounts._hashPassword(password);\n            var options = {\n                username: username,\n                email: email,\n                password: hash,\n                profile: formData,\n            };\n\n            // Call preSignUpHook, if any...\n            var preSignUpHook = AccountsTemplates.options.preSignUpHook;\n            if (preSignUpHook) {\n              preSignUpHook(password, options);\n            }\n\n            return Meteor.call(\"ATCreateUserServer\", options, function(error){\n                if (error && error.reason === 'Email already exists.') {\n                    if (AccountsTemplates.options.showReCaptcha) {\n                      grecaptcha.reset();\n                    }\n                }\n                AccountsTemplates.submitCallback(error, undefined, function(){\n                    if (AccountsTemplates.options.sendVerificationEmail && AccountsTemplates.options.enforceEmailVerification){\n                        AccountsTemplates.submitCallback(error, state, function () {\n                            AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.signUpVerifyEmail);\n                            // Cleans up input fields' content\n                            _.each(AccountsTemplates.getFields(), function(field){\n                                // Considers only visible fields...\n                                if (!_.contains(field.visible, state))\n                                    return;\n\n                                var elem = t.$(\"#at-field-\" + field._id);\n\n                                // Naïve reset\n                                if (field.type === \"checkbox\") elem.prop('checked', false);\n                                else elem.val(\"\");\n\n                            });\n                            AccountsTemplates.setDisabled(false);\n                            AccountsTemplates.avoidRedirect = true;\n                        });\n                    }\n                    else {\n                        var loginSelector;\n\n                        if (email) {\n                            if (AccountsTemplates.options.lowercaseUsername) {\n                              email = toLowercaseUsername(email);\n                            }\n\n                            loginSelector = {email: email};\n                        }\n                        else if (username) {\n                            if (AccountsTemplates.options.lowercaseUsername) {\n                              username = toLowercaseUsername(username);\n                            }\n                            loginSelector = {username: username};\n                        }\n                        else {\n                            if (AccountsTemplates.options.lowercaseUsername) {\n                              username_and_email = toLowercaseUsername(username_and_email);\n                            }\n                            loginSelector = username_and_email;\n                        }\n\n                        Meteor.loginWithPassword(loginSelector, password, function(error) {\n                            AccountsTemplates.submitCallback(error, state, function(){\n                                AccountsTemplates.setState(\"signIn\");\n                            });\n                        });\n                    }\n                });\n            });\n        }\n\n        //----------------\n        // Forgot Password\n        //----------------\n        if (state === \"forgotPwd\"){\n            return Accounts.forgotPassword({\n                email: email\n            }, function(error) {\n                AccountsTemplates.submitCallback(error, state, function(){\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailSent);\n                    t.$(\"#at-field-email\").val(\"\");\n                });\n            });\n        }\n\n        //--------------------------------\n        // Reset Password / Enroll Account\n        //--------------------------------\n        if (state === \"resetPwd\" || state === \"enrollAccount\") {\n            var paramToken = AccountsTemplates.getparamToken();\n            return Accounts.resetPassword(paramToken, password, function(error) {\n                AccountsTemplates.submitCallback(error, state, function(){\n                    var pwd_field_id;\n                    if (state === \"resetPwd\")\n                        AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdReset);\n                    else // Enroll Account\n                        AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdSet);\n                    t.$(\"#at-field-password\").val(\"\");\n                    if (AccountsTemplates.options.confirmPassword)\n                        t.$(\"#at-field-password_again\").val(\"\");\n                });\n            });\n        }\n\n        //----------------\n        // Change Password\n        //----------------\n        if (state === \"changePwd\"){\n            return Accounts.changePassword(current_password, password, function(error) {\n                AccountsTemplates.submitCallback(error, state, function(){\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdChanged);\n                    t.$(\"#at-field-current_password\").val(\"\");\n                    t.$(\"#at-field-password\").val(\"\");\n                    if (AccountsTemplates.options.confirmPassword)\n                        t.$(\"#at-field-password_again\").val(\"\");\n                });\n            });\n        }\n\n        //----------------\n        // Resend Verification E-mail\n        //----------------\n        if (state === \"resendVerificationEmail\"){\n            return Meteor.call(\"ATResendVerificationEmail\", email, function (error) {\n                AccountsTemplates.submitCallback(error, state, function(){\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.verificationEmailSent);\n                    t.$(\"#at-field-email\").val(\"\");\n\n                    AccountsTemplates.avoidRedirect = true;\n                });\n            });\n        }\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_pwd_form_btn.js                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atPwdFormBtnHelpers = {\n    submitDisabled: function(){\n        var disable = _.chain(AccountsTemplates.getFields())\n            .map(function(field){\n                return field.hasError() || field.isValidating();\n            })\n            .some()\n            .value()\n        ;\n        if (disable)\n            return \"disabled\";\n    },\n    buttonText: function() {\n        var parentData = Template.currentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return T9n.get(AccountsTemplates.texts.button[state], markIfMissing=false);\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_pwd_link.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atPwdLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    forgotPwdLink: function(){\n        return AccountsTemplates.getRoutePath(\"forgotPwd\");\n    },\n    preText: function(){\n        return T9n.get(AccountsTemplates.texts.pwdLink_pre, markIfMissing=false);\n    },\n    linkText: function(){\n        return T9n.get(AccountsTemplates.texts.pwdLink_link, markIfMissing=false);\n    },\n    suffText: function(){\n        return T9n.get(AccountsTemplates.texts.pwdLink_suff, markIfMissing=false);\n    },\n};\n\nAT.prototype.atPwdLinkEvents = {\n    \"click #at-forgotPwd\": function(event, t) {\n        event.preventDefault();\n        AccountsTemplates.linkClick(\"forgotPwd\");\n    },\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_reCaptcha.js                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atReCaptchaRendered = function() {\n    $.getScript('//www.google.com/recaptcha/api.js?hl=' + T9n.getLanguage());\n};\n\nAT.prototype.atReCaptchaHelpers = {\n    key: function() {\n        if (AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.siteKey)\n            return AccountsTemplates.options.reCaptcha.siteKey;\n        return Meteor.settings.public.reCaptcha.siteKey;\n    },\n\n    theme: function() {\n        return AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.theme;\n    },\n\n    data_type: function() {\n        return AccountsTemplates.options.reCaptcha && AccountsTemplates.options.reCaptcha.data_type;\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_resend_verification_email_link.js                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atResendVerificationEmailLinkHelpers = {\n    disabled: function () {\n        return AccountsTemplates.disabled();\n    },\n    resendVerificationEmailLink: function () {\n        return AccountsTemplates.getRoutePath(\"resendVerificationEmail\");\n    },\n    preText: function(){\n        return T9n.get(AccountsTemplates.texts.resendVerificationEmailLink_pre, markIfMissing=false);\n    },\n    linkText: function(){\n        return T9n.get(AccountsTemplates.texts.resendVerificationEmailLink_link, markIfMissing=false);\n    },\n    suffText: function(){\n        return T9n.get(AccountsTemplates.texts.resendVerificationEmailLink_suff, markIfMissing=false);\n    },\n};\n\nAT.prototype.atResendVerificationEmailLinkEvents = {\n    \"click #at-resend-verification-email\": function(event, t) {\n        event.preventDefault();\n        AccountsTemplates.linkClick('resendVerificationEmail');\n    },\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_result.js                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atResultHelpers = {\n    result: function() {\n        var resultText = AccountsTemplates.state.form.get(\"result\");\n        if (resultText)\n            return T9n.get(resultText, markIfMissing=false);\n    },\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_sep.js                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSepHelpers = {\n    sepText: function(){\n        return T9n.get(AccountsTemplates.texts.sep, markIfMissing=false);\n    },\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_signin_link.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSigninLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    signInLink: function(){\n        return AccountsTemplates.getRoutePath(\"signIn\");\n    },\n    preText: function(){\n        return T9n.get(AccountsTemplates.texts.signInLink_pre, markIfMissing=false);\n    },\n    linkText: function(){\n        return T9n.get(AccountsTemplates.texts.signInLink_link, markIfMissing=false);\n    },\n    suffText: function(){\n        return T9n.get(AccountsTemplates.texts.signInLink_suff, markIfMissing=false);\n    },\n};\n\nAT.prototype.atSigninLinkEvents = {\n    \"click #at-signIn\": function(event, t) {\n        event.preventDefault();\n        AccountsTemplates.linkClick(\"signIn\");\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_signup_link.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSignupLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    signUpLink: function(){\n        return AccountsTemplates.getRoutePath(\"signUp\");\n    },\n    preText: function(){\n        return T9n.get(AccountsTemplates.texts.signUpLink_pre, markIfMissing=false);\n    },\n    linkText: function(){\n        return T9n.get(AccountsTemplates.texts.signUpLink_link, markIfMissing=false);\n    },\n    suffText: function(){\n        return T9n.get(AccountsTemplates.texts.signUpLink_suff, markIfMissing=false);\n    },\n};\n\nAT.prototype.atSignupLinkEvents = {\n    \"click #at-signUp\": function(event, t) {\n        event.preventDefault();\n        AccountsTemplates.linkClick('signUp');\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_social.js                                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atSocialHelpers = {\n    disabled: function() {\n        if (AccountsTemplates.disabled())\n            return \"disabled\";\n        var user = Meteor.user();\n        if (user){\n            var numServices = 0;\n            if (user.services)\n                numServices = _.keys(user.services).length; // including \"resume\"\n            if (numServices === 2 && user.services[this._id])\n                return \"disabled\";\n        }\n    },\n    name: function(){\n        return this._id;\n    },\n    iconClass: function() {\n        var ic = AccountsTemplates.texts.socialIcons[this._id];\n        if (!ic)\n            ic = \"fa fa-\" + this._id;\n        return ic;\n    },\n    buttonText: function() {\n        var service = this;\n        var serviceName = this._id;\n        if (serviceName === \"meteor-developer\")\n            serviceName = \"meteor\";\n        serviceName = capitalize(serviceName);\n        if (!service.configured)\n            return T9n.get(AccountsTemplates.texts.socialConfigure, markIfMissing=false) + \" \" + serviceName;\n        var showAddRemove = AccountsTemplates.options.showAddRemoveServices;\n        var user = Meteor.user();\n        if (user && showAddRemove){\n            if (user.services && user.services[this._id]){\n                var numServices = _.keys(user.services).length; // including \"resume\"\n                if (numServices === 2)\n                    return serviceName;\n                else\n                    return T9n.get(AccountsTemplates.texts.socialRemove, markIfMissing=false) + \" \" + serviceName;\n            } else\n                    return T9n.get(AccountsTemplates.texts.socialAdd, markIfMissing=false) + \" \" + serviceName;\n        }\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        var prefix = state === \"signIn\" ?\n            T9n.get(AccountsTemplates.texts.socialSignIn, markIfMissing=false) :\n            T9n.get(AccountsTemplates.texts.socialSignUp, markIfMissing=false);\n        return prefix + \" \" + T9n.get(AccountsTemplates.texts.socialWith, markIfMissing=false) + \" \" + serviceName;\n    },\n};\n\nAT.prototype.atSocialEvents = {\n    \"click button\": function(event, t) {\n        event.preventDefault();\n        event.currentTarget.blur();\n        if (AccountsTemplates.disabled())\n            return;\n        var user = Meteor.user();\n        if (user && user.services && user.services[this._id]){\n            var numServices = _.keys(user.services).length; // including \"resume\"\n            if (numServices === 2)\n                return;\n            else{\n                AccountsTemplates.setDisabled(true);\n                Meteor.call(\"ATRemoveService\", this._id, function(error){\n                    AccountsTemplates.setDisabled(false);\n                });\n            }\n        } else {\n            AccountsTemplates.setDisabled(true);\n            var parentData = Template.parentData();\n            var state = (parentData && parentData.state) || AccountsTemplates.getState();\n            var serviceName = this._id;\n            var methodName;\n            if (serviceName === 'meteor-developer')\n                methodName = \"loginWithMeteorDeveloperAccount\";\n            else\n                methodName = \"loginWith\" + capitalize(serviceName);\n            var loginWithService = Meteor[methodName];\n            options = {\n                loginStyle: AccountsTemplates.options.socialLoginStyle,\n            };\n            if (Accounts.ui) {\n                if (Accounts.ui._options.requestPermissions[serviceName]) {\n                    options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n                }\n                if (Accounts.ui._options.requestOfflineToken[serviceName]) {\n                    options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n                }\n            }\n            loginWithService(options, function(err) {\n                AccountsTemplates.setDisabled(false);\n                if (err && err instanceof Accounts.LoginCancelledError) {\n                    // do nothing\n                }\n                else if (err && err instanceof ServiceConfiguration.ConfigError) {\n                    if (Accounts._loginButtonsSession)\n                        return Accounts._loginButtonsSession.configureService(serviceName);\n                }\n                else\n                    AccountsTemplates.submitCallback(err, state);\n            });\n        }\n    },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_terms_link.js                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atTermsLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    text: function(){\n        return T9n.get(AccountsTemplates.texts.termsPreamble, markIfMissing=false);\n    },\n    privacyUrl: function(){\n        return AccountsTemplates.options.privacyUrl;\n    },\n    privacyLinkText: function(){\n        return T9n.get(AccountsTemplates.texts.termsPrivacy, markIfMissing=false);\n    },\n    showTermsAnd: function(){\n        return !!AccountsTemplates.options.privacyUrl && !!AccountsTemplates.options.termsUrl;\n    },\n    and: function(){\n        return T9n.get(AccountsTemplates.texts.termsAnd, markIfMissing=false);\n    },\n    termsUrl: function(){\n        return AccountsTemplates.options.termsUrl;\n    },\n    termsLinkText: function(){\n        return T9n.get(AccountsTemplates.texts.termsTerms, markIfMissing=false);\n    },\n};\n\nAT.prototype.atTermsLinkEvents = {\n    \"click a\": function(event) {\n        if (AccountsTemplates.disabled())\n            event.preventDefault();\n    },\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_title.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atTitleHelpers = {\n  title: function() {\n    var parentData = Template.currentData();\n    var state = (parentData && parentData.state) || AccountsTemplates.getState();\n    return T9n.get(AccountsTemplates.texts.title[state], markIfMissing = false);\n  },\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/at_message.js                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nAT.prototype.atMessageHelpers = {\n    message: function() {\n        var messageText = AccountsTemplates.state.form.get(\"message\");\n        if (messageText)\n            return T9n.get(messageText, markIfMissing=false);\n    },\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/template.ensure_signed_in.js                                    //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n\nTemplate.__checkName(\"ensureSignedIn\");\nTemplate[\"ensureSignedIn\"] = new Template(\"Template.ensureSignedIn\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"signedIn\"));\n  }, function() {\n    return [ \"\\n    \", Blaze._TemplateWith(function() {\n      return {\n        template: Spacebars.call(view.lookup(\"template\"))\n      };\n    }, function() {\n      return Spacebars.include(function() {\n        return Spacebars.call(Template.__dynamic);\n      });\n    }), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"auth\"));\n    }, function() {\n      return [ \"\\n      \", Blaze._TemplateWith(function() {\n        return {\n          template: Spacebars.call(view.lookup(\"auth\"))\n        };\n      }, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(Template.__dynamic);\n        });\n      }), \"\\n    \" ];\n    }, function() {\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"fullPageAtForm\")), \"\\n    \" ];\n    }), \"\\n  \" ];\n  });\n}));\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/templates_helpers/ensure_signed_in.js                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n\nTemplate.ensureSignedIn.helpers({\n  signedIn: function () {\n    if (!Meteor.user()) {\n      AccountsTemplates.setState(AccountsTemplates.options.defaultState, function(){\n        var err = AccountsTemplates.texts.errors.mustBeLoggedIn;\n        AccountsTemplates.state.form.set('error', [err]);\n      });\n      return false;\n    } else {\n      AccountsTemplates.clearError();\n      return true;\n    }\n  }\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/useraccounts_core/lib/methods.js                                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/* global\n  AccountsTemplates: false\n*/\n\"use strict\";\n\nMeteor.methods({\n  ATRemoveService: function(serviceName) {\n    check(serviceName, String);\n\n    var userId = this.userId;\n\n    if (userId) {\n      var user = Meteor.users.findOne(userId);\n      var numServices = _.keys(user.services).length; // including \"resume\"\n      var unset = {};\n\n      if (numServices === 2) {\n        throw new Meteor.Error(403, AccountsTemplates.texts.errors.cannotRemoveService, {});\n      }\n\n      unset[\"services.\" + serviceName] = \"\";\n      Meteor.users.update(userId, {$unset: unset});\n    }\n  },\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"useraccounts:core\", {\n  AccountsTemplates: AccountsTemplates\n});\n\n})();\n","servePath":"/packages/useraccounts_core.js"}]