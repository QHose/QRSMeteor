[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/localstorage/localstorage.js                                            //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n// Meteor._localStorage is not an ideal name, but we can change it later.\n\n// Let's test to make sure that localStorage actually works. For example, in\n// Safari with private browsing on, window.localStorage exists but actually\n// trying to use it throws.\n// Accessing window.localStorage can also immediately throw an error in IE (#1291).\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar key = '_localstorage_test_' + Random.id();\nvar retrieved;\nvar storage;\n\ntry {\n  storage = global.localStorage;\n\n  if (storage) {\n    storage.setItem(key, key);\n    retrieved = storage.getItem(key);\n    storage.removeItem(key);\n  }\n} catch (ignored) {}\n\nif (key === retrieved) {\n  if (Meteor.isServer) {\n    Meteor._localStorage = storage;\n  } else {\n    // Some browsers (e.g. IE11) don't properly handle attempts to change\n    // window.localStorage methods. By using proxy methods to expose\n    // window.localStorage functionality, developers can change the\n    // behavior of Meteor._localStorage methods without breaking\n    // window.localStorage.\n    [\"getItem\",\n     \"setItem\",\n     \"removeItem\",\n    ].forEach(function (name) {\n      this[name] = function () {\n        return storage[name].apply(storage, arguments);\n      };\n    }, Meteor._localStorage = {});\n  }\n}\n\nif (! Meteor._localStorage) {\n  if (Meteor.isClient) {\n    Meteor._debug(\n      \"You are running a browser with no localStorage or userData \"\n        + \"support. Logging in from one tab will not cause another \"\n        + \"tab to be logged in.\");\n  }\n\n  Meteor._localStorage = Object.create({\n    setItem: function (key, val) {\n      this[key] = val;\n    },\n\n    removeItem: function (key) {\n      delete this[key];\n    },\n\n    getItem: function (key) {\n      return hasOwn.call(this, key) ? this[key] : null;\n    }\n  });\n}\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"localstorage\");\n\n})();\n","servePath":"/packages/localstorage.js"}]